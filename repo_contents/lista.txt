// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  USER
  AGENT
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  sessions              Session[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at") // Last account update timestamp
  assignedComplaints    Complaint[]            @relation("AssignedComplaints")
  resolvedComplaints    Complaint[]            @relation("ResolvedComplaints")
  complaints            Complaint[]
  complaintHistory      ComplaintHistory[]
  complaintComments     ComplaintComment[]
  attachments           Attachment[]
  promene               IstorijaPromena[]
  
  // Dodajte vezu sa organizacijama koje je korisnik kreirao
  createdOrganizations  HumanitarnaOrganizacija[] @relation("CreatedOrganizations")

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enumeracije za status i prioritet reklamacije
enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ComplaintType {
  PRODUCT_DEFECT
  SERVICE_ISSUE
  DELIVERY_PROBLEM
  BILLING_ISSUE
  OTHER
}
// Enumeracija za status organizacije (prema datumu isteka)
enum OrganizationStatus {
  LOW     // > 90 dana do isteka
  MEDIUM  // 31-90 dana do isteka
  HIGH    // 8-30 dana do isteka
  URGENT  // < 7 dana do isteka ili istekao
}

// Model za reklamaciju
model Complaint {
  id          String          @id @default(cuid())
  title       String
  description String          @db.Text
  type        ComplaintType   @default(OTHER)
  status      ComplaintStatus @default(PENDING)
  priority    Priority        @default(MEDIUM)

  // Povezivanje sa korisnikom koji je napravio reklamaciju
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Povezivanje sa agentom koji obrađuje reklamaciju
  assignedToId String?
  assignedTo   User?   @relation("AssignedComplaints", fields: [assignedToId], references: [id], onDelete: SetNull)

  // Proizvod ili usluga na koji se odnosi reklamacija
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

    // Novi odnosi sa servisima:
  vasServiceId     String?
  vasService       VasService?     @relation(fields: [vasServiceId], references: [id])

  bulkServiceId    String?
  bulkService      BulkService?    @relation(fields: [bulkServiceId], references: [id])

  parkingServiceId String?
  parkingService   ParkingService? @relation(fields: [parkingServiceId], references: [id])

  humanServiceId   String?
  humanService     HumanService?   @relation(fields: [humanServiceId], references: [id])

  // Praćenje istorije
  history ComplaintHistory[]

  // Komentari i prilozi
  comments    ComplaintComment[]
  attachments Attachment[]

   // Dodati novo polje za vezu sa humanitarnom organizacijom (opciono)
  humanitarnaOrganizacijaId  String? @map("humanitarna_organizacija_id")
  humanitarnaOrganizacija    HumanitarnaOrganizacija? @relation(fields: [humanitarnaOrganizacijaId], references: [id])

  // Podaci o rešenju
  resolution   String?   @db.Text
  resolvedAt   DateTime?
  resolvedById String?
  resolvedBy   User?     @relation("ResolvedComplaints", fields: [resolvedById], references: [id], onDelete: SetNull)

  // Sistemski metapodaci
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([assignedToId])
  @@map("complaints")
}

// Model za proizvod ili uslugu
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  sku         String?  @unique
  price       Decimal? @db.Decimal(10, 2)
  category    String?

  // Povezivanje sa reklamacijama
  complaints Complaint[]

  // Sistemski metapodaci
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

// Model za istoriju reklamacija
model ComplaintHistory {
  id          String    @id @default(cuid())
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  oldStatus ComplaintStatus?
  newStatus ComplaintStatus

  description String? @db.Text

  // Ko je napravio promenu
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([complaintId])
  @@map("complaint_history")
}

// Model za komentare na reklamacijama
model ComplaintComment {
  id          String    @id @default(cuid())
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  content String @db.Text

  // Ko je ostavio komentar
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([complaintId])
  @@map("complaint_comments")
}

// Model za priloge (dokumenti, slike)
model Attachment {
  id          String    @id @default(cuid())
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  fileName String
  fileType String
  fileSize Int
  fileUrl  String

  // Ko je dodao prilog
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([complaintId])
  @@map("attachments")
}

// Model za praćenje istorije promena na humanitarnim organizacijama
model IstorijaPromena {
  id                          String   @id @default(cuid())
  createdAt                   DateTime @default(now()) @map("created_at")
  
  // Referenca na organizaciju
  humanitarnaOrganizacijaId   String   @map("humanitarna_organizacija_id")
  humanitarnaOrganizacija     HumanitarnaOrganizacija @relation(fields: [humanitarnaOrganizacijaId], references: [id], onDelete: Cascade)
  
  // Podaci o promeni
  polje                       String  // Naziv polja koje je promenjeno
  staraVrednost               String  @map("stara_vrednost") // Stara vrednost
  novaVrednost                String  @map("nova_vrednost") // Nova vrednost
  userId                      String  // ID korisnika koji je napravio promenu
  user                        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("istorija_promena")
}
// Glavni model za praćenje humanitarnih organizacija
model HumanitarnaOrganizacija {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  // Osnovni podaci
  naziv            String
  kratkiBroj       String   @unique // Jedinstveni kratki broj
  ugovor           String
  datumPocetka     DateTime @map("datum_pocetka")
  datumIsteka      DateTime @map("datum_isteka")
  racun            String
  banka            String
  pib              String
  mb               String
  namena           String
  
  // Dodajte vezu sa korisnikom koji je kreirao organizaciju
  createdById      String?  @map("created_by_id")
  createdBy        User?    @relation("CreatedOrganizations", fields: [createdById], references: [id], onDelete: SetNull)

  // Relacije
  istorija         IstorijaPromena[]
  complaints       Complaint[] // Koristimo već postojeći naziv umesto "reklamacije"

  @@map("humanitarne_organizacije")
}


// Provajder model - glavni model za provajdere
model Provajder {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  
  // Veze sa različitim tipovima servisa
  vasServices     VasService[]
  bulkServices    BulkService[]
  parkingServices ParkingService[]
  humanServices   HumanService[]
  
  @@map("providers")
}

// VAS (Value Added Service) servisi
model VasService {
  id                          String     @id @default(cuid())
  proizvod                    String     // Proizvod iz CSV
  mesec_pruzanja_usluge       DateTime   // Mesec_pruzanja_usluge iz CSV
  jedinicna_cena              Float      // Jedinicna_cena iz CSV
  broj_transakcija            Int        // Broj_transakcija iz CSV
  fakturisan_iznos            Float      // Fakturisan_iznos iz CSV
  fakturisan_korigovan_iznos  Float      // Fakturisan_korigovan_iznos iz CSV
  naplacen_iznos              Float      // Naplacen_iznos iz CSV
  kumulativ_naplacenih_iznosa Float      // Kumulativ_naplacenih_iznosa iz CSV
  nenaplacen_iznos            Float      // Nenaplacen_iznos iz CSV
  nenaplacen_korigovan_iznos  Float      // Nenaplacen_korigovan_iznos iz CSV
  storniran_iznos             Float      // Storniran_iznos_u_tekucem_mesecu_iz_perioda_pracenja iz CSV
  otkazan_iznos               Float      // Otkazan_iznos iz CSV
  kumulativ_otkazanih_iznosa  Float      // Kumulativ_otkazanih_iznosa iz CSV
  iznos_za_prenos_sredstava   Float      // Iznos_za_prenos_sredstava iz CSV
  kpi                         String?
  status                      String?
  remarks                     String?
  type                        VasType    // Enum za prepaid/postpaid
  provajder                   Provajder   @relation(fields: [provajderId], references: [id], onDelete: Cascade)
  provajderId                 String
  isActive                    Boolean    @default(true)
  createdAt                   DateTime   @default(now()) @map("created_at")
  updatedAt                   DateTime   @updatedAt @map("updated_at")
  complaints                  Complaint[] // One-to-many

  // Unique ograničenje za proizvod, mesec pružanja usluge i provajder
  @@unique([proizvod, mesec_pruzanja_usluge, provajderId])
  @@map("vas_services")
}

// Enum za tipove VAS servisa
enum VasType {
  prepaid
  postpaid
}

// Bulk servisi - ažurirano prema CSV-u
model BulkService {
  id              String    @id @default(cuid())
  provider_name   String    // Provider Name iz CSV
  agreement_name  String    // Agreement Name iz CSV
  service_name    String    // Service Name iz CSV
  step_name       String    // Step Name iz CSV
  sender_name     String    // Sender Name iz CSV
  requests        Int       // Requests iz CSV
  message_parts   Int       // Message parts iz CSV
  kpi             String?
  status          String?
  remarks         String?
  
  provajder       Provajder  @relation(fields: [provajderId], references: [id], onDelete: Cascade)
  provajderId     String
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  complaints      Complaint[] // One-to-many

  // Unique ograničenje za provider_name, agreement_name, service_name, sender_name, requests, message_parts
  @@unique([provider_name, agreement_name, service_name, sender_name, requests, message_parts])
  @@map("bulk_services")
}

// Parking servisi
model ParkingService {
  id          String    @id @default(cuid())
  name        String
  description String?
  provajder   Provajder  @relation(fields: [provajderId], references: [id], onDelete: Cascade)
  provajderId String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  kpi         String?
  status      String?
  remarks     String?
  complaints  Complaint[] // One-to-many
  // Ovde bi došla specifična polja za parking servise
  // koja možete dodati na osnovu CSV podataka za parking
  
  @@map("parking_services")
}

// HumanServi servisi
model HumanService {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        HumanType    // Enum za prepaid/postpaid
  provajder   Provajder     @relation(fields: [provajderId], references: [id], onDelete: Cascade)
  provajderId String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  kpi         String?
  status      String?
  remarks     String?
  
  complaints  Complaint[] // One-to-many
  // Ovde bi došla specifična polja za humanitarne servise
  // koja možete dodati na osnovu CSV podataka za humanitarne servise
  
  @@map("human_services")
}

// Enum za tipove Human servisa
enum HumanType {
  prepaid
  postpaid
}





# Database connection string
DATABASE_URL="postgresql://postgres:postgres@localhost/findatbas?"

# Auth.js secret
AUTH_SECRET="DFqGXRp39ZVqaCC3GMhmmlWEC1xsibNRQERaV1zI5QE="

# GitHub OAuth credentials
GITHUB_CLIENT_ID="your_github_client_id"
GITHUB_CLIENT_SECRET="your_github_client_secret"

# Google OAuth credentials
GOOGLE_CLIENT_ID="your_google_client_id"
GOOGLE_CLIENT_SECRET="your_google_client_secret"

# Resend API key (for email services)
RESEND_API_KEY="your_resend_api_key"

# Application URL
NEXT_PUBLIC_APP_URL="http://localhost:3000"
GROQ_API_KEY=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
EMAIL_STORAGE_PATH=./data/emails



.env.local
HTTPS=false
