// This is your Prisma schema file,
// learn more about the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Authentication Models (Provided Initially) ---
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  MANAGER
  AGENT
  USER
}
model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User model
model User {
  id                     String               @id @default(cuid())
  name                   String?
  email                  String               @unique
  emailVerified          DateTime?            @map("email_verified")
  password               String?
  role                   UserRole             @default(USER)
  isActive               Boolean              @default(true)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  
  // Authentication Relations
  accounts               Account[]            // Added relation to Account
  sessions               Session[]            // Added relation to Session
  twoFactorConfirmation  TwoFactorConfirmation? // Added relation to TwoFactorConfirmation
  // Relations
  createdContracts       Contract[]           @relation("ContractCreator")
  modifiedContracts      Contract[]           @relation("ContractModifier")
  uploadedAttachments    ContractAttachment[]
  acknowledgedReminders  ContractReminder[]
  submittedComplaints    Complaint[]          @relation("ComplaintSubmitter")
  assignedComplaints     Complaint[]          @relation("ComplaintAgent")
  comments               Comment[]
  activities             ActivityLog[]
  notifications          Notification[]
  notificationPreferences NotificationPreference?
  createdHumanitarianRenewals HumanitarianContractRenewal[] @relation("RenewalCreator")
  modifiedHumanitarianRenewals HumanitarianContractRenewal[] @relation("RenewalModifier")
}


// Provider model
model Provider {
  id          String        @id @default(cuid())
  name        String        @unique
  contactName String?
  email       String?
  phone       String?
  address     String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  contracts   Contract[]
  vasServices VasService[]
  bulkServices BulkService[]
  complaints  Complaint[]
  
  // @@index([name])
}

// Humanitarian Organization model
model HumanitarianOrg {
  id          String        @id @default(cuid())
  name        String        @unique
  contactName String?
  email       String?
  phone       String?
  address     String?
  website     String?
  mission     String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  contracts   Contract[]
  renewals    HumanitarianContractRenewal[]
  complaints  Complaint[]
  
  @@index([name])
}

// Parking Service model
model ParkingService {
  id          String        @id @default(cuid())
  name        String
  description String?
  contactName String?
  email       String?
  phone       String?
  address     String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  contracts   Contract[]
  
  @@index([name])
}

// Contract models
enum ContractStatus {
  ACTIVE
  EXPIRED
  PENDING
  RENEWAL_IN_PROGRESS // Used when a renewal process has been started
}

enum ContractType {
  PROVIDER
  HUMANITARIAN
  PARKING
}

model Contract {
  id                String              @id @default(cuid())
  name              String
  contractNumber    String              @unique
  type              ContractType
  status            ContractStatus      @default(ACTIVE)
  startDate         DateTime
  endDate           DateTime
  revenuePercentage Float               // Percentage of revenue for the platform
  description       String?             @db.Text
  
  // Relations
  providerId        String?
  provider          Provider?           @relation(fields: [providerId], references: [id])
  
  humanitarianOrgId String?
  humanitarianOrg   HumanitarianOrg?    @relation(fields: [humanitarianOrgId], references: [id])
  
  parkingServiceId  String?
  parkingService    ParkingService?     @relation(fields: [parkingServiceId], references: [id])
  
  // Services linked to this contract
  services          ServiceContract[]
  
  // Attachments and documents
  attachments       ContractAttachment[]
  
  // Renewals for humanitarian contracts
  humanitarianRenewals HumanitarianContractRenewal[]
  
  // Audit fields
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  createdById       String
  createdBy         User                @relation("ContractCreator", fields: [createdById], references: [id])
  lastModifiedById  String?
  lastModifiedBy    User?               @relation("ContractModifier", fields: [lastModifiedById], references: [id])
  
  // Reminders and notifications
  reminders         ContractReminder[]
  
  @@index([providerId])
  @@index([humanitarianOrgId])
  @@index([parkingServiceId])
  @@index([status])
  @@index([endDate]) // For efficient expiration checks
}

// Humanitarian Contract Renewal Sub-statuses
enum HumanitarianRenewalSubStatus {
  DOCUMENT_COLLECTION    // Collecting required documents
  LEGAL_REVIEW           // Legal department review
  FINANCIAL_APPROVAL     // Financial approval
  AWAITING_SIGNATURE     // Waiting for signatures
  FINAL_PROCESSING       // Final processing before activation
}

model HumanitarianContractRenewal {
  id                String                      @id @default(cuid())
  contractId        String
  contract          Contract                    @relation(fields: [contractId], references: [id])
  humanitarianOrgId String
  humanitarianOrg   HumanitarianOrg             @relation(fields: [humanitarianOrgId], references: [id])
  
  // Renewal specifics
  subStatus         HumanitarianRenewalSubStatus @default(DOCUMENT_COLLECTION)
  renewalStartDate  DateTime                    @default(now())
  proposedStartDate DateTime                    // New contract start date
  proposedEndDate   DateTime                    // New contract end date
  proposedRevenue   Float                       // New revenue percentage
  
  // Document tracking
  documentsReceived Boolean                     @default(false)
  legalApproved     Boolean                     @default(false)
  financialApproved Boolean                     @default(false)
  signatureReceived Boolean                     @default(false)
  
  // Notes
  notes             String?                     @db.Text
  
  // Audit fields
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  createdById       String
  createdBy         User                        @relation("RenewalCreator", fields: [createdById], references: [id])
  lastModifiedById  String?
  lastModifiedBy    User?                       @relation("RenewalModifier", fields: [lastModifiedById], references: [id])
  
  @@index([contractId])
  @@index([humanitarianOrgId])
  @@index([subStatus])
  @@index([proposedStartDate])
}

model ServiceContract {
  id            String    @id @default(cuid())
  contractId    String
  contract      Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)
  serviceId     String
  service       Service   @relation(fields: [serviceId], references: [id])
  
  // Service-specific terms
  specificTerms String?   @db.Text
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([contractId, serviceId])
  @@index([contractId])
  @@index([serviceId])
}

model ContractAttachment {
  id          String    @id @default(cuid())
  contractId  String
  contract    Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)
  name        String
  fileUrl     String
  fileType    String
  uploadedAt  DateTime  @default(now())
  uploadedById String
  uploadedBy  User      @relation(fields: [uploadedById], references: [id])
  
  @@index([contractId])
}

model ContractReminder {
  id          String    @id @default(cuid())
  contractId  String
  contract    Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)
  reminderDate DateTime
  reminderType String    // "expiration", "renewal", "review"
  isAcknowledged Boolean @default(false)
  acknowledgedById String?
  acknowledgedBy User?   @relation(fields: [acknowledgedById], references: [id])
  
  createdAt   DateTime  @default(now())
  
  @@index([contractId])
  @@index([reminderDate])
  @@index([isAcknowledged])
}

// Service models
enum ServiceType {
  VAS
  BULK
  HUMANITARIAN
  PARKING
}

model Service {
  id            String           @id @default(cuid())
  name          String
  type          ServiceType
  description   String?          @db.Text
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relations
  contracts     ServiceContract[]
  vasServices   VasService[]
  bulkServices  BulkService[]
  complaints    Complaint[]
  
  @@index([type])
  @@index([name])
}

// VAS Service model
model VasService {
  id                          String    @id @default(cuid())
  proizvod                    String    // Proizvod iz CSV
  mesec_pruzanja_usluge       DateTime  // Mesec_pruzanja_usluge iz CSV
  jedinicna_cena              Float     // Jedinicna_cena iz CSV
  broj_transakcija            Int       // Broj_transakcija iz CSV
  fakturisan_iznos            Float     // Fakturisan_iznos iz CSV
  fakturisan_korigovan_iznos  Float     // Fakturisan_korigovan_iznos iz CSV
  naplacen_iznos              Float     // Naplacen_iznos iz CSV
  kumulativ_naplacenih_iznosa Float     // Kumulativ_naplacenih_iznosa iz CSV
  nenaplacen_iznos            Float     // Nenaplacen_iznos iz CSV
  nenaplacen_korigovan_iznos  Float     // Nenaplacen_korigovan_iznos iz CSV
  storniran_iznos             Float     // Storniran_iznos_u_tekucem_mesecu_iz_perioda_pracenja iz CSV
  otkazan_iznos               Float     // Otkazan_iznos iz CSV
  kumulativ_otkazanih_iznosa  Float     // Kumulativ_otkazanih_iznosa iz CSV
  iznos_za_prenos_sredstava   Float     // Iznos_za_prenos_sredstava iz CSV
  
  // Relations
  serviceId                   String
  service                     Service   @relation(fields: [serviceId], references: [id])
  provajderId                 String
  provider                    Provider  @relation(fields: [provajderId], references: [id])
  
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  
  @@unique([proizvod, mesec_pruzanja_usluge, provajderId])
  @@index([serviceId])
  @@index([provajderId])
  @@index([mesec_pruzanja_usluge])
}

// Bulk Service model
model BulkService {
  id              String    @id @default(cuid())
  provider_name   String    // Provider Name iz CSV
  agreement_name  String    // Agreement Name iz CSV
  service_name    String    // Service Name iz CSV
  step_name       String    // Step Name iz CSV
  sender_name     String    // Sender Name iz CSV
  requests        Int       // Requests iz CSV
  message_parts   Int       // Message parts iz CSV
  
  // Relations
  serviceId       String
  service         Service   @relation(fields: [serviceId], references: [id])
  providerId      String
  provider        Provider  @relation(fields: [providerId], references: [id])
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([provider_name, agreement_name, service_name, sender_name, requests, message_parts])
  @@index([serviceId])
  @@index([providerId])
}

// Product model
model Product {
  id          String        @id @default(cuid())
  name        String
  code        String        @unique
  description String?       @db.Text
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  complaints  Complaint[]
  
  @@index([name])
  @@index([code])
}

// Complaint models
enum ComplaintStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
  REJECTED
}

model Complaint {
  id                String          @id @default(cuid())
  title             String
  description       String          @db.Text
  status            ComplaintStatus @default(NEW)
  priority          Int             @default(3) // 1 (highest) to 5 (lowest)
  financialImpact   Float?
  
  // Relations
  serviceId         String?
  service           Service?        @relation(fields: [serviceId], references: [id])
  productId         String?
  product           Product?        @relation(fields: [productId], references: [id])
  providerId        String?
  provider          Provider?       @relation(fields: [providerId], references: [id])
  
  // Submission info
  submittedById     String
  submittedBy       User            @relation("ComplaintSubmitter", fields: [submittedById], references: [id])
  
  // Assignment info
  assignedAgentId   String?
  assignedAgent     User?           @relation("ComplaintAgent", fields: [assignedAgentId], references: [id])
  assignedAt        DateTime?
  
  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  resolvedAt        DateTime?
  closedAt          DateTime?
  
  // Related data
  comments          Comment[]
  attachments       Attachment[]
  humanitarianOrgId String?
  humanitarianOrg   HumanitarianOrg? @relation(fields: [humanitarianOrgId], references: [id])
  
  // Activity tracking
  statusHistory     ComplaintStatusHistory[]
  
  @@index([status])
  @@index([serviceId])
  @@index([productId])
  @@index([providerId])
  @@index([submittedById])
  @@index([assignedAgentId])
  @@index([createdAt])
  @@index([priority])
  @@index([humanitarianOrgId])
}

model ComplaintStatusHistory {
  id            String          @id @default(cuid())
  complaintId   String
  complaint     Complaint       @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  previousStatus ComplaintStatus?
  newStatus     ComplaintStatus
  changedById   String
  changedAt     DateTime        @default(now())
  notes         String?         @db.Text
  
  @@index([complaintId])
  @@index([changedAt])
}

model Comment {
  id            String      @id @default(cuid())
  text          String      @db.Text
  complaintId   String
  complaint     Complaint   @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isInternal    Boolean     @default(false)  // True for agent/admin-only comments
  
  @@index([complaintId])
  @@index([userId])
  @@index([isInternal])
}

model Attachment {
  id            String      @id @default(cuid())
  fileName      String
  fileUrl       String
  fileType      String
  complaintId   String
  complaint     Complaint   @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  uploadedAt    DateTime    @default(now())
  
  @@index([complaintId])
}

// Analytics and Security models
enum LogSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

model ActivityLog {
  id          String      @id @default(cuid())
  action      String
  entityType  String      // "contract", "service", "complaint", etc.
  entityId    String?
  details     String?     @db.Text
  severity    LogSeverity @default(INFO)
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  
  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([userId])
  @@index([createdAt])
  @@index([severity])
}

// Notification models
enum NotificationType {
  CONTRACT_EXPIRING
  CONTRACT_RENEWAL_STATUS_CHANGE
  COMPLAINT_ASSIGNED
  COMPLAINT_UPDATED
  REMINDER
  SYSTEM
}

model Notification {
  id          String            @id @default(cuid())
  title       String
  message     String            @db.Text
  type        NotificationType
  isRead      Boolean           @default(false)
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  entityType  String?           // "contract", "complaint", "renewal", etc.
  entityId    String?
  createdAt   DateTime          @default(now())
  
  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
}

// Report models
enum ReportFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  ONCE
}

model ScheduledReport {
  id          String          @id @default(cuid())
  name        String
  description String?         @db.Text
  reportType  String          // "financial", "complaints", "contracts", etc.
  frequency   ReportFrequency
  lastRun     DateTime?
  nextRun     DateTime?
  parameters  Json?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  @@index([reportType])
  @@index([frequency])
  @@index([nextRun])
  @@index([isActive])
}

model GeneratedReport {
  id              String    @id @default(cuid())
  name            String
  reportType      String
  fileUrl         String
  generatedAt     DateTime  @default(now())
  scheduledReportId String?
  
  @@index([reportType])
  @@index([generatedAt])
  @@index([scheduledReportId])
}

model NotificationPreference {
  id          String    @id @default(cuid())
  userId      String    @unique // Svaki korisnik ima samo jedan set podešavanja
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Koristimo JSON polje za čuvanje ugnježdenih preferenci
  // Struktura unutar ovog JSON polja treba da odgovara NotificationPreferences interfejsu (bez userId)
  // npr. { contractExpiring: { inApp: true, email: false }, ... }
  preferences Json

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId]) // Indexiranje po userId za brže pretrage
}