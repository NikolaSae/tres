
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.TwoFactorTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.TwoFactorConfirmationScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  image: 'image'
};

exports.Prisma.ProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactName: 'contactName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  imageUrl: 'imageUrl'
};

exports.Prisma.HumanitarianOrgScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactName: 'contactName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  website: 'website',
  mission: 'mission',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  pib: 'pib',
  registrationNumber: 'registrationNumber',
  bank: 'bank',
  accountNumber: 'accountNumber',
  shortNumber: 'shortNumber'
};

exports.Prisma.VasTransactionScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  serviceId: 'serviceId',
  date: 'date',
  group: 'group',
  serviceName: 'serviceName',
  serviceCode: 'serviceCode',
  price: 'price',
  quantity: 'quantity',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParkingTransactionScalarFieldEnum = {
  id: 'id',
  parkingServiceId: 'parkingServiceId',
  date: 'date',
  group: 'group',
  serviceName: 'serviceName',
  price: 'price',
  quantity: 'quantity',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  serviceId: 'serviceId'
};

exports.Prisma.ParkingServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  contactName: 'contactName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  additionalEmails: 'additionalEmails',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  originalFileName: 'originalFileName',
  originalFilePath: 'originalFilePath',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  lastImportDate: 'lastImportDate',
  importedBy: 'importedBy',
  importStatus: 'importStatus',
  createdById: 'createdById'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contractNumber: 'contractNumber',
  type: 'type',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  revenuePercentage: 'revenuePercentage',
  description: 'description',
  operatorRevenue: 'operatorRevenue',
  isRevenueSharing: 'isRevenueSharing',
  operatorId: 'operatorId',
  providerId: 'providerId',
  humanitarianOrgId: 'humanitarianOrgId',
  parkingServiceId: 'parkingServiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  lastModifiedById: 'lastModifiedById'
};

exports.Prisma.ContractRenewalScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  subStatus: 'subStatus',
  renewalStartDate: 'renewalStartDate',
  proposedStartDate: 'proposedStartDate',
  proposedEndDate: 'proposedEndDate',
  proposedRevenue: 'proposedRevenue',
  documentsReceived: 'documentsReceived',
  legalApproved: 'legalApproved',
  financialApproved: 'financialApproved',
  technicalApproved: 'technicalApproved',
  managementApproved: 'managementApproved',
  signatureReceived: 'signatureReceived',
  comments: 'comments',
  internalNotes: 'internalNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  lastModifiedById: 'lastModifiedById'
};

exports.Prisma.ContractRenewalAttachmentScalarFieldEnum = {
  id: 'id',
  renewalId: 'renewalId',
  fileName: 'fileName',
  fileSize: 'fileSize',
  fileType: 'fileType',
  filePath: 'filePath',
  uploadedAt: 'uploadedAt',
  uploadedById: 'uploadedById',
  description: 'description'
};

exports.Prisma.HumanitarianContractRenewalScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  humanitarianOrgId: 'humanitarianOrgId',
  subStatus: 'subStatus',
  renewalStartDate: 'renewalStartDate',
  proposedStartDate: 'proposedStartDate',
  proposedEndDate: 'proposedEndDate',
  proposedRevenue: 'proposedRevenue',
  documentsReceived: 'documentsReceived',
  legalApproved: 'legalApproved',
  financialApproved: 'financialApproved',
  signatureReceived: 'signatureReceived',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  lastModifiedById: 'lastModifiedById'
};

exports.Prisma.SenderBlacklistScalarFieldEnum = {
  id: 'id',
  senderName: 'senderName',
  effectiveDate: 'effectiveDate',
  description: 'description',
  isActive: 'isActive',
  matchCount: 'matchCount',
  lastMatchDate: 'lastMatchDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  modifiedById: 'modifiedById'
};

exports.Prisma.BlacklistLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityId: 'entityId',
  entityType: 'entityType',
  oldData: 'oldData',
  newData: 'newData',
  userId: 'userId',
  timestamp: 'timestamp'
};

exports.Prisma.OperatorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  logoUrl: 'logoUrl',
  website: 'website',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceContractScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  serviceId: 'serviceId',
  specificTerms: 'specificTerms',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractAttachmentScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  name: 'name',
  fileUrl: 'fileUrl',
  fileType: 'fileType',
  uploadedAt: 'uploadedAt',
  uploadedById: 'uploadedById'
};

exports.Prisma.ContractReminderScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  reminderDate: 'reminderDate',
  reminderType: 'reminderType',
  isAcknowledged: 'isAcknowledged',
  acknowledgedById: 'acknowledgedById',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  billingType: 'billingType'
};

exports.Prisma.VasServiceScalarFieldEnum = {
  id: 'id',
  proizvod: 'proizvod',
  mesec_pruzanja_usluge: 'mesec_pruzanja_usluge',
  jedinicna_cena: 'jedinicna_cena',
  broj_transakcija: 'broj_transakcija',
  fakturisan_iznos: 'fakturisan_iznos',
  fakturisan_korigovan_iznos: 'fakturisan_korigovan_iznos',
  naplacen_iznos: 'naplacen_iznos',
  kumulativ_naplacenih_iznosa: 'kumulativ_naplacenih_iznosa',
  nenaplacen_iznos: 'nenaplacen_iznos',
  nenaplacen_korigovan_iznos: 'nenaplacen_korigovan_iznos',
  storniran_iznos: 'storniran_iznos',
  otkazan_iznos: 'otkazan_iznos',
  kumulativ_otkazanih_iznosa: 'kumulativ_otkazanih_iznosa',
  iznos_za_prenos_sredstava: 'iznos_za_prenos_sredstava',
  serviceId: 'serviceId',
  provajderId: 'provajderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BulkServiceScalarFieldEnum = {
  id: 'id',
  provider_name: 'provider_name',
  agreement_name: 'agreement_name',
  service_name: 'service_name',
  step_name: 'step_name',
  sender_name: 'sender_name',
  requests: 'requests',
  message_parts: 'message_parts',
  datumNaplate: 'datumNaplate',
  serviceId: 'serviceId',
  providerId: 'providerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComplaintScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  financialImpact: 'financialImpact',
  serviceId: 'serviceId',
  productId: 'productId',
  providerId: 'providerId',
  submittedById: 'submittedById',
  assignedAgentId: 'assignedAgentId',
  assignedAt: 'assignedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt',
  closedAt: 'closedAt',
  humanitarianOrgId: 'humanitarianOrgId',
  parkingServiceId: 'parkingServiceId'
};

exports.Prisma.ComplaintStatusHistoryScalarFieldEnum = {
  id: 'id',
  complaintId: 'complaintId',
  previousStatus: 'previousStatus',
  newStatus: 'newStatus',
  changedById: 'changedById',
  changedAt: 'changedAt',
  notes: 'notes'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  text: 'text',
  complaintId: 'complaintId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isInternal: 'isInternal'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileType: 'fileType',
  complaintId: 'complaintId',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.LogEntryScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  action: 'action',
  subject: 'subject',
  description: 'description',
  status: 'status',
  sendEmail: 'sendEmail',
  providerId: 'providerId',
  parkingServiceId: 'parkingServiceId',
  bulkServiceId: 'bulkServiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  details: 'details',
  severity: 'severity',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  userId: 'userId',
  entityType: 'entityType',
  entityId: 'entityId',
  createdAt: 'createdAt'
};

exports.Prisma.ScheduledReportScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  reportType: 'reportType',
  frequency: 'frequency',
  lastRun: 'lastRun',
  nextRun: 'nextRun',
  parameters: 'parameters',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GeneratedReportScalarFieldEnum = {
  id: 'id',
  name: 'name',
  reportType: 'reportType',
  fileUrl: 'fileUrl',
  generatedAt: 'generatedAt',
  scheduledReportId: 'scheduledReportId'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportFileScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  filePath: 'filePath',
  organizationId: 'organizationId',
  startDate: 'startDate',
  endDate: 'endDate',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  AGENT: 'AGENT',
  USER: 'USER'
};

exports.ContractType = exports.$Enums.ContractType = {
  PROVIDER: 'PROVIDER',
  HUMANITARIAN: 'HUMANITARIAN',
  PARKING: 'PARKING',
  BULK: 'BULK'
};

exports.ContractStatus = exports.$Enums.ContractStatus = {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  PENDING: 'PENDING',
  RENEWAL_IN_PROGRESS: 'RENEWAL_IN_PROGRESS',
  TERMINATED: 'TERMINATED'
};

exports.ContractRenewalSubStatus = exports.$Enums.ContractRenewalSubStatus = {
  DOCUMENT_COLLECTION: 'DOCUMENT_COLLECTION',
  LEGAL_REVIEW: 'LEGAL_REVIEW',
  FINANCIAL_APPROVAL: 'FINANCIAL_APPROVAL',
  AWAITING_SIGNATURE: 'AWAITING_SIGNATURE',
  FINAL_PROCESSING: 'FINAL_PROCESSING',
  TECHNICAL_REVIEW: 'TECHNICAL_REVIEW',
  MANAGEMENT_APPROVAL: 'MANAGEMENT_APPROVAL'
};

exports.HumanitarianRenewalSubStatus = exports.$Enums.HumanitarianRenewalSubStatus = {
  DOCUMENT_COLLECTION: 'DOCUMENT_COLLECTION',
  LEGAL_REVIEW: 'LEGAL_REVIEW',
  FINANCIAL_APPROVAL: 'FINANCIAL_APPROVAL',
  AWAITING_SIGNATURE: 'AWAITING_SIGNATURE',
  FINAL_PROCESSING: 'FINAL_PROCESSING'
};

exports.LogBlackType = exports.$Enums.LogBlackType = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  ACTIVATE: 'ACTIVATE',
  DEACTIVATE: 'DEACTIVATE'
};

exports.ServiceType = exports.$Enums.ServiceType = {
  VAS: 'VAS',
  BULK: 'BULK',
  HUMANITARIAN: 'HUMANITARIAN',
  PARKING: 'PARKING'
};

exports.BillingType = exports.$Enums.BillingType = {
  PREPAID: 'PREPAID',
  POSTPAID: 'POSTPAID'
};

exports.ComplaintStatus = exports.$Enums.ComplaintStatus = {
  NEW: 'NEW',
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  PENDING: 'PENDING',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED',
  REJECTED: 'REJECTED'
};

exports.LogEntityType = exports.$Enums.LogEntityType = {
  PROVIDER: 'PROVIDER',
  PARKING_SERVICE: 'PARKING_SERVICE',
  BULK_SERVICE: 'BULK_SERVICE'
};

exports.LogActionType = exports.$Enums.LogActionType = {
  ACTIVATION: 'ACTIVATION',
  DEACTIVATION: 'DEACTIVATION',
  STATUS_CHANGE: 'STATUS_CHANGE',
  NOTE: 'NOTE'
};

exports.LogStatus = exports.$Enums.LogStatus = {
  IN_PROGRESS: 'IN_PROGRESS',
  FINISHED: 'FINISHED'
};

exports.LogSeverity = exports.$Enums.LogSeverity = {
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  CRITICAL: 'CRITICAL'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  CONTRACT_EXPIRING: 'CONTRACT_EXPIRING',
  CONTRACT_RENEWAL_STATUS_CHANGE: 'CONTRACT_RENEWAL_STATUS_CHANGE',
  COMPLAINT_ASSIGNED: 'COMPLAINT_ASSIGNED',
  COMPLAINT_UPDATED: 'COMPLAINT_UPDATED',
  REMINDER: 'REMINDER',
  SYSTEM: 'SYSTEM'
};

exports.ReportFrequency = exports.$Enums.ReportFrequency = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  YEARLY: 'YEARLY',
  ONCE: 'ONCE'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  PasswordResetToken: 'PasswordResetToken',
  TwoFactorToken: 'TwoFactorToken',
  TwoFactorConfirmation: 'TwoFactorConfirmation',
  User: 'User',
  Provider: 'Provider',
  HumanitarianOrg: 'HumanitarianOrg',
  VasTransaction: 'VasTransaction',
  ParkingTransaction: 'ParkingTransaction',
  ParkingService: 'ParkingService',
  Contract: 'Contract',
  ContractRenewal: 'ContractRenewal',
  ContractRenewalAttachment: 'ContractRenewalAttachment',
  HumanitarianContractRenewal: 'HumanitarianContractRenewal',
  SenderBlacklist: 'SenderBlacklist',
  BlacklistLog: 'BlacklistLog',
  Operator: 'Operator',
  ServiceContract: 'ServiceContract',
  ContractAttachment: 'ContractAttachment',
  ContractReminder: 'ContractReminder',
  Service: 'Service',
  VasService: 'VasService',
  BulkService: 'BulkService',
  Product: 'Product',
  Complaint: 'Complaint',
  ComplaintStatusHistory: 'ComplaintStatusHistory',
  Comment: 'Comment',
  Attachment: 'Attachment',
  LogEntry: 'LogEntry',
  ActivityLog: 'ActivityLog',
  Notification: 'Notification',
  ScheduledReport: 'ScheduledReport',
  GeneratedReport: 'GeneratedReport',
  NotificationPreference: 'NotificationPreference',
  ReportFile: 'ReportFile'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
