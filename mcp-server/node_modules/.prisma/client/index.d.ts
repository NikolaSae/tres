
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model PasswordResetToken
 * 
 */
export type PasswordResetToken = $Result.DefaultSelection<Prisma.$PasswordResetTokenPayload>
/**
 * Model TwoFactorToken
 * 
 */
export type TwoFactorToken = $Result.DefaultSelection<Prisma.$TwoFactorTokenPayload>
/**
 * Model TwoFactorConfirmation
 * 
 */
export type TwoFactorConfirmation = $Result.DefaultSelection<Prisma.$TwoFactorConfirmationPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Provider
 * 
 */
export type Provider = $Result.DefaultSelection<Prisma.$ProviderPayload>
/**
 * Model HumanitarianOrg
 * 
 */
export type HumanitarianOrg = $Result.DefaultSelection<Prisma.$HumanitarianOrgPayload>
/**
 * Model VasTransaction
 * 
 */
export type VasTransaction = $Result.DefaultSelection<Prisma.$VasTransactionPayload>
/**
 * Model ParkingTransaction
 * 
 */
export type ParkingTransaction = $Result.DefaultSelection<Prisma.$ParkingTransactionPayload>
/**
 * Model ParkingService
 * 
 */
export type ParkingService = $Result.DefaultSelection<Prisma.$ParkingServicePayload>
/**
 * Model Contract
 * 
 */
export type Contract = $Result.DefaultSelection<Prisma.$ContractPayload>
/**
 * Model ContractRenewal
 * 
 */
export type ContractRenewal = $Result.DefaultSelection<Prisma.$ContractRenewalPayload>
/**
 * Model ContractRenewalAttachment
 * 
 */
export type ContractRenewalAttachment = $Result.DefaultSelection<Prisma.$ContractRenewalAttachmentPayload>
/**
 * Model HumanitarianContractRenewal
 * 
 */
export type HumanitarianContractRenewal = $Result.DefaultSelection<Prisma.$HumanitarianContractRenewalPayload>
/**
 * Model SenderBlacklist
 * 
 */
export type SenderBlacklist = $Result.DefaultSelection<Prisma.$SenderBlacklistPayload>
/**
 * Model BlacklistLog
 * 
 */
export type BlacklistLog = $Result.DefaultSelection<Prisma.$BlacklistLogPayload>
/**
 * Model Operator
 * 
 */
export type Operator = $Result.DefaultSelection<Prisma.$OperatorPayload>
/**
 * Model ServiceContract
 * 
 */
export type ServiceContract = $Result.DefaultSelection<Prisma.$ServiceContractPayload>
/**
 * Model ContractAttachment
 * 
 */
export type ContractAttachment = $Result.DefaultSelection<Prisma.$ContractAttachmentPayload>
/**
 * Model ContractReminder
 * 
 */
export type ContractReminder = $Result.DefaultSelection<Prisma.$ContractReminderPayload>
/**
 * Model Service
 * 
 */
export type Service = $Result.DefaultSelection<Prisma.$ServicePayload>
/**
 * Model VasService
 * 
 */
export type VasService = $Result.DefaultSelection<Prisma.$VasServicePayload>
/**
 * Model BulkService
 * 
 */
export type BulkService = $Result.DefaultSelection<Prisma.$BulkServicePayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Complaint
 * 
 */
export type Complaint = $Result.DefaultSelection<Prisma.$ComplaintPayload>
/**
 * Model ComplaintStatusHistory
 * 
 */
export type ComplaintStatusHistory = $Result.DefaultSelection<Prisma.$ComplaintStatusHistoryPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Attachment
 * 
 */
export type Attachment = $Result.DefaultSelection<Prisma.$AttachmentPayload>
/**
 * Model LogEntry
 * 
 */
export type LogEntry = $Result.DefaultSelection<Prisma.$LogEntryPayload>
/**
 * Model ActivityLog
 * 
 */
export type ActivityLog = $Result.DefaultSelection<Prisma.$ActivityLogPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model ScheduledReport
 * 
 */
export type ScheduledReport = $Result.DefaultSelection<Prisma.$ScheduledReportPayload>
/**
 * Model GeneratedReport
 * 
 */
export type GeneratedReport = $Result.DefaultSelection<Prisma.$GeneratedReportPayload>
/**
 * Model NotificationPreference
 * 
 */
export type NotificationPreference = $Result.DefaultSelection<Prisma.$NotificationPreferencePayload>
/**
 * Model ReportFile
 * 
 */
export type ReportFile = $Result.DefaultSelection<Prisma.$ReportFilePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  AGENT: 'AGENT',
  USER: 'USER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const ContractStatus: {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  PENDING: 'PENDING',
  RENEWAL_IN_PROGRESS: 'RENEWAL_IN_PROGRESS',
  TERMINATED: 'TERMINATED'
};

export type ContractStatus = (typeof ContractStatus)[keyof typeof ContractStatus]


export const ContractType: {
  PROVIDER: 'PROVIDER',
  HUMANITARIAN: 'HUMANITARIAN',
  PARKING: 'PARKING',
  BULK: 'BULK'
};

export type ContractType = (typeof ContractType)[keyof typeof ContractType]


export const ContractRenewalSubStatus: {
  DOCUMENT_COLLECTION: 'DOCUMENT_COLLECTION',
  LEGAL_REVIEW: 'LEGAL_REVIEW',
  FINANCIAL_APPROVAL: 'FINANCIAL_APPROVAL',
  AWAITING_SIGNATURE: 'AWAITING_SIGNATURE',
  FINAL_PROCESSING: 'FINAL_PROCESSING',
  TECHNICAL_REVIEW: 'TECHNICAL_REVIEW',
  MANAGEMENT_APPROVAL: 'MANAGEMENT_APPROVAL'
};

export type ContractRenewalSubStatus = (typeof ContractRenewalSubStatus)[keyof typeof ContractRenewalSubStatus]


export const HumanitarianRenewalSubStatus: {
  DOCUMENT_COLLECTION: 'DOCUMENT_COLLECTION',
  LEGAL_REVIEW: 'LEGAL_REVIEW',
  FINANCIAL_APPROVAL: 'FINANCIAL_APPROVAL',
  AWAITING_SIGNATURE: 'AWAITING_SIGNATURE',
  FINAL_PROCESSING: 'FINAL_PROCESSING'
};

export type HumanitarianRenewalSubStatus = (typeof HumanitarianRenewalSubStatus)[keyof typeof HumanitarianRenewalSubStatus]


export const LogBlackType: {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  ACTIVATE: 'ACTIVATE',
  DEACTIVATE: 'DEACTIVATE'
};

export type LogBlackType = (typeof LogBlackType)[keyof typeof LogBlackType]


export const ServiceType: {
  VAS: 'VAS',
  BULK: 'BULK',
  HUMANITARIAN: 'HUMANITARIAN',
  PARKING: 'PARKING'
};

export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType]


export const BillingType: {
  PREPAID: 'PREPAID',
  POSTPAID: 'POSTPAID'
};

export type BillingType = (typeof BillingType)[keyof typeof BillingType]


export const ComplaintStatus: {
  NEW: 'NEW',
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  PENDING: 'PENDING',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED',
  REJECTED: 'REJECTED'
};

export type ComplaintStatus = (typeof ComplaintStatus)[keyof typeof ComplaintStatus]


export const LogActionType: {
  ACTIVATION: 'ACTIVATION',
  DEACTIVATION: 'DEACTIVATION',
  STATUS_CHANGE: 'STATUS_CHANGE',
  NOTE: 'NOTE'
};

export type LogActionType = (typeof LogActionType)[keyof typeof LogActionType]


export const LogStatus: {
  IN_PROGRESS: 'IN_PROGRESS',
  FINISHED: 'FINISHED'
};

export type LogStatus = (typeof LogStatus)[keyof typeof LogStatus]


export const LogEntityType: {
  PROVIDER: 'PROVIDER',
  PARKING_SERVICE: 'PARKING_SERVICE',
  BULK_SERVICE: 'BULK_SERVICE'
};

export type LogEntityType = (typeof LogEntityType)[keyof typeof LogEntityType]


export const LogSeverity: {
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  CRITICAL: 'CRITICAL'
};

export type LogSeverity = (typeof LogSeverity)[keyof typeof LogSeverity]


export const NotificationType: {
  CONTRACT_EXPIRING: 'CONTRACT_EXPIRING',
  CONTRACT_RENEWAL_STATUS_CHANGE: 'CONTRACT_RENEWAL_STATUS_CHANGE',
  COMPLAINT_ASSIGNED: 'COMPLAINT_ASSIGNED',
  COMPLAINT_UPDATED: 'COMPLAINT_UPDATED',
  REMINDER: 'REMINDER',
  SYSTEM: 'SYSTEM'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const ReportFrequency: {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  YEARLY: 'YEARLY',
  ONCE: 'ONCE'
};

export type ReportFrequency = (typeof ReportFrequency)[keyof typeof ReportFrequency]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type ContractStatus = $Enums.ContractStatus

export const ContractStatus: typeof $Enums.ContractStatus

export type ContractType = $Enums.ContractType

export const ContractType: typeof $Enums.ContractType

export type ContractRenewalSubStatus = $Enums.ContractRenewalSubStatus

export const ContractRenewalSubStatus: typeof $Enums.ContractRenewalSubStatus

export type HumanitarianRenewalSubStatus = $Enums.HumanitarianRenewalSubStatus

export const HumanitarianRenewalSubStatus: typeof $Enums.HumanitarianRenewalSubStatus

export type LogBlackType = $Enums.LogBlackType

export const LogBlackType: typeof $Enums.LogBlackType

export type ServiceType = $Enums.ServiceType

export const ServiceType: typeof $Enums.ServiceType

export type BillingType = $Enums.BillingType

export const BillingType: typeof $Enums.BillingType

export type ComplaintStatus = $Enums.ComplaintStatus

export const ComplaintStatus: typeof $Enums.ComplaintStatus

export type LogActionType = $Enums.LogActionType

export const LogActionType: typeof $Enums.LogActionType

export type LogStatus = $Enums.LogStatus

export const LogStatus: typeof $Enums.LogStatus

export type LogEntityType = $Enums.LogEntityType

export const LogEntityType: typeof $Enums.LogEntityType

export type LogSeverity = $Enums.LogSeverity

export const LogSeverity: typeof $Enums.LogSeverity

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type ReportFrequency = $Enums.ReportFrequency

export const ReportFrequency: typeof $Enums.ReportFrequency

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordResetToken`: Exposes CRUD operations for the **PasswordResetToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResetTokens
    * const passwordResetTokens = await prisma.passwordResetToken.findMany()
    * ```
    */
  get passwordResetToken(): Prisma.PasswordResetTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.twoFactorToken`: Exposes CRUD operations for the **TwoFactorToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TwoFactorTokens
    * const twoFactorTokens = await prisma.twoFactorToken.findMany()
    * ```
    */
  get twoFactorToken(): Prisma.TwoFactorTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.twoFactorConfirmation`: Exposes CRUD operations for the **TwoFactorConfirmation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TwoFactorConfirmations
    * const twoFactorConfirmations = await prisma.twoFactorConfirmation.findMany()
    * ```
    */
  get twoFactorConfirmation(): Prisma.TwoFactorConfirmationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.provider`: Exposes CRUD operations for the **Provider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Providers
    * const providers = await prisma.provider.findMany()
    * ```
    */
  get provider(): Prisma.ProviderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.humanitarianOrg`: Exposes CRUD operations for the **HumanitarianOrg** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HumanitarianOrgs
    * const humanitarianOrgs = await prisma.humanitarianOrg.findMany()
    * ```
    */
  get humanitarianOrg(): Prisma.HumanitarianOrgDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vasTransaction`: Exposes CRUD operations for the **VasTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VasTransactions
    * const vasTransactions = await prisma.vasTransaction.findMany()
    * ```
    */
  get vasTransaction(): Prisma.VasTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.parkingTransaction`: Exposes CRUD operations for the **ParkingTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParkingTransactions
    * const parkingTransactions = await prisma.parkingTransaction.findMany()
    * ```
    */
  get parkingTransaction(): Prisma.ParkingTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.parkingService`: Exposes CRUD operations for the **ParkingService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParkingServices
    * const parkingServices = await prisma.parkingService.findMany()
    * ```
    */
  get parkingService(): Prisma.ParkingServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contract`: Exposes CRUD operations for the **Contract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contracts
    * const contracts = await prisma.contract.findMany()
    * ```
    */
  get contract(): Prisma.ContractDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contractRenewal`: Exposes CRUD operations for the **ContractRenewal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContractRenewals
    * const contractRenewals = await prisma.contractRenewal.findMany()
    * ```
    */
  get contractRenewal(): Prisma.ContractRenewalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contractRenewalAttachment`: Exposes CRUD operations for the **ContractRenewalAttachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContractRenewalAttachments
    * const contractRenewalAttachments = await prisma.contractRenewalAttachment.findMany()
    * ```
    */
  get contractRenewalAttachment(): Prisma.ContractRenewalAttachmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.humanitarianContractRenewal`: Exposes CRUD operations for the **HumanitarianContractRenewal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HumanitarianContractRenewals
    * const humanitarianContractRenewals = await prisma.humanitarianContractRenewal.findMany()
    * ```
    */
  get humanitarianContractRenewal(): Prisma.HumanitarianContractRenewalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.senderBlacklist`: Exposes CRUD operations for the **SenderBlacklist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SenderBlacklists
    * const senderBlacklists = await prisma.senderBlacklist.findMany()
    * ```
    */
  get senderBlacklist(): Prisma.SenderBlacklistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.blacklistLog`: Exposes CRUD operations for the **BlacklistLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BlacklistLogs
    * const blacklistLogs = await prisma.blacklistLog.findMany()
    * ```
    */
  get blacklistLog(): Prisma.BlacklistLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.operator`: Exposes CRUD operations for the **Operator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Operators
    * const operators = await prisma.operator.findMany()
    * ```
    */
  get operator(): Prisma.OperatorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceContract`: Exposes CRUD operations for the **ServiceContract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceContracts
    * const serviceContracts = await prisma.serviceContract.findMany()
    * ```
    */
  get serviceContract(): Prisma.ServiceContractDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contractAttachment`: Exposes CRUD operations for the **ContractAttachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContractAttachments
    * const contractAttachments = await prisma.contractAttachment.findMany()
    * ```
    */
  get contractAttachment(): Prisma.ContractAttachmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contractReminder`: Exposes CRUD operations for the **ContractReminder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContractReminders
    * const contractReminders = await prisma.contractReminder.findMany()
    * ```
    */
  get contractReminder(): Prisma.ContractReminderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vasService`: Exposes CRUD operations for the **VasService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VasServices
    * const vasServices = await prisma.vasService.findMany()
    * ```
    */
  get vasService(): Prisma.VasServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bulkService`: Exposes CRUD operations for the **BulkService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BulkServices
    * const bulkServices = await prisma.bulkService.findMany()
    * ```
    */
  get bulkService(): Prisma.BulkServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.complaint`: Exposes CRUD operations for the **Complaint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Complaints
    * const complaints = await prisma.complaint.findMany()
    * ```
    */
  get complaint(): Prisma.ComplaintDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.complaintStatusHistory`: Exposes CRUD operations for the **ComplaintStatusHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComplaintStatusHistories
    * const complaintStatusHistories = await prisma.complaintStatusHistory.findMany()
    * ```
    */
  get complaintStatusHistory(): Prisma.ComplaintStatusHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attachment`: Exposes CRUD operations for the **Attachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attachments
    * const attachments = await prisma.attachment.findMany()
    * ```
    */
  get attachment(): Prisma.AttachmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.logEntry`: Exposes CRUD operations for the **LogEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LogEntries
    * const logEntries = await prisma.logEntry.findMany()
    * ```
    */
  get logEntry(): Prisma.LogEntryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activityLog`: Exposes CRUD operations for the **ActivityLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityLogs
    * const activityLogs = await prisma.activityLog.findMany()
    * ```
    */
  get activityLog(): Prisma.ActivityLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scheduledReport`: Exposes CRUD operations for the **ScheduledReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduledReports
    * const scheduledReports = await prisma.scheduledReport.findMany()
    * ```
    */
  get scheduledReport(): Prisma.ScheduledReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.generatedReport`: Exposes CRUD operations for the **GeneratedReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneratedReports
    * const generatedReports = await prisma.generatedReport.findMany()
    * ```
    */
  get generatedReport(): Prisma.GeneratedReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationPreference`: Exposes CRUD operations for the **NotificationPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationPreferences
    * const notificationPreferences = await prisma.notificationPreference.findMany()
    * ```
    */
  get notificationPreference(): Prisma.NotificationPreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportFile`: Exposes CRUD operations for the **ReportFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportFiles
    * const reportFiles = await prisma.reportFile.findMany()
    * ```
    */
  get reportFile(): Prisma.ReportFileDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    PasswordResetToken: 'PasswordResetToken',
    TwoFactorToken: 'TwoFactorToken',
    TwoFactorConfirmation: 'TwoFactorConfirmation',
    User: 'User',
    Provider: 'Provider',
    HumanitarianOrg: 'HumanitarianOrg',
    VasTransaction: 'VasTransaction',
    ParkingTransaction: 'ParkingTransaction',
    ParkingService: 'ParkingService',
    Contract: 'Contract',
    ContractRenewal: 'ContractRenewal',
    ContractRenewalAttachment: 'ContractRenewalAttachment',
    HumanitarianContractRenewal: 'HumanitarianContractRenewal',
    SenderBlacklist: 'SenderBlacklist',
    BlacklistLog: 'BlacklistLog',
    Operator: 'Operator',
    ServiceContract: 'ServiceContract',
    ContractAttachment: 'ContractAttachment',
    ContractReminder: 'ContractReminder',
    Service: 'Service',
    VasService: 'VasService',
    BulkService: 'BulkService',
    Product: 'Product',
    Complaint: 'Complaint',
    ComplaintStatusHistory: 'ComplaintStatusHistory',
    Comment: 'Comment',
    Attachment: 'Attachment',
    LogEntry: 'LogEntry',
    ActivityLog: 'ActivityLog',
    Notification: 'Notification',
    ScheduledReport: 'ScheduledReport',
    GeneratedReport: 'GeneratedReport',
    NotificationPreference: 'NotificationPreference',
    ReportFile: 'ReportFile'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "account" | "session" | "verificationToken" | "passwordResetToken" | "twoFactorToken" | "twoFactorConfirmation" | "user" | "provider" | "humanitarianOrg" | "vasTransaction" | "parkingTransaction" | "parkingService" | "contract" | "contractRenewal" | "contractRenewalAttachment" | "humanitarianContractRenewal" | "senderBlacklist" | "blacklistLog" | "operator" | "serviceContract" | "contractAttachment" | "contractReminder" | "service" | "vasService" | "bulkService" | "product" | "complaint" | "complaintStatusHistory" | "comment" | "attachment" | "logEntry" | "activityLog" | "notification" | "scheduledReport" | "generatedReport" | "notificationPreference" | "reportFile"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      PasswordResetToken: {
        payload: Prisma.$PasswordResetTokenPayload<ExtArgs>
        fields: Prisma.PasswordResetTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findMany: {
            args: Prisma.PasswordResetTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          create: {
            args: Prisma.PasswordResetTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          createMany: {
            args: Prisma.PasswordResetTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          delete: {
            args: Prisma.PasswordResetTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          update: {
            args: Prisma.PasswordResetTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          upsert: {
            args: Prisma.PasswordResetTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordResetToken>
          }
          groupBy: {
            args: Prisma.PasswordResetTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetTokenCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenCountAggregateOutputType> | number
          }
        }
      }
      TwoFactorToken: {
        payload: Prisma.$TwoFactorTokenPayload<ExtArgs>
        fields: Prisma.TwoFactorTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TwoFactorTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TwoFactorTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorTokenPayload>
          }
          findFirst: {
            args: Prisma.TwoFactorTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TwoFactorTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorTokenPayload>
          }
          findMany: {
            args: Prisma.TwoFactorTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorTokenPayload>[]
          }
          create: {
            args: Prisma.TwoFactorTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorTokenPayload>
          }
          createMany: {
            args: Prisma.TwoFactorTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TwoFactorTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorTokenPayload>[]
          }
          delete: {
            args: Prisma.TwoFactorTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorTokenPayload>
          }
          update: {
            args: Prisma.TwoFactorTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorTokenPayload>
          }
          deleteMany: {
            args: Prisma.TwoFactorTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TwoFactorTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TwoFactorTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorTokenPayload>[]
          }
          upsert: {
            args: Prisma.TwoFactorTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorTokenPayload>
          }
          aggregate: {
            args: Prisma.TwoFactorTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTwoFactorToken>
          }
          groupBy: {
            args: Prisma.TwoFactorTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<TwoFactorTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.TwoFactorTokenCountArgs<ExtArgs>
            result: $Utils.Optional<TwoFactorTokenCountAggregateOutputType> | number
          }
        }
      }
      TwoFactorConfirmation: {
        payload: Prisma.$TwoFactorConfirmationPayload<ExtArgs>
        fields: Prisma.TwoFactorConfirmationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TwoFactorConfirmationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorConfirmationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TwoFactorConfirmationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorConfirmationPayload>
          }
          findFirst: {
            args: Prisma.TwoFactorConfirmationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorConfirmationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TwoFactorConfirmationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorConfirmationPayload>
          }
          findMany: {
            args: Prisma.TwoFactorConfirmationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorConfirmationPayload>[]
          }
          create: {
            args: Prisma.TwoFactorConfirmationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorConfirmationPayload>
          }
          createMany: {
            args: Prisma.TwoFactorConfirmationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TwoFactorConfirmationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorConfirmationPayload>[]
          }
          delete: {
            args: Prisma.TwoFactorConfirmationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorConfirmationPayload>
          }
          update: {
            args: Prisma.TwoFactorConfirmationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorConfirmationPayload>
          }
          deleteMany: {
            args: Prisma.TwoFactorConfirmationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TwoFactorConfirmationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TwoFactorConfirmationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorConfirmationPayload>[]
          }
          upsert: {
            args: Prisma.TwoFactorConfirmationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorConfirmationPayload>
          }
          aggregate: {
            args: Prisma.TwoFactorConfirmationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTwoFactorConfirmation>
          }
          groupBy: {
            args: Prisma.TwoFactorConfirmationGroupByArgs<ExtArgs>
            result: $Utils.Optional<TwoFactorConfirmationGroupByOutputType>[]
          }
          count: {
            args: Prisma.TwoFactorConfirmationCountArgs<ExtArgs>
            result: $Utils.Optional<TwoFactorConfirmationCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Provider: {
        payload: Prisma.$ProviderPayload<ExtArgs>
        fields: Prisma.ProviderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProviderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProviderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          findFirst: {
            args: Prisma.ProviderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProviderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          findMany: {
            args: Prisma.ProviderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>[]
          }
          create: {
            args: Prisma.ProviderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          createMany: {
            args: Prisma.ProviderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProviderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>[]
          }
          delete: {
            args: Prisma.ProviderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          update: {
            args: Prisma.ProviderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          deleteMany: {
            args: Prisma.ProviderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProviderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProviderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>[]
          }
          upsert: {
            args: Prisma.ProviderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          aggregate: {
            args: Prisma.ProviderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProvider>
          }
          groupBy: {
            args: Prisma.ProviderGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProviderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProviderCountArgs<ExtArgs>
            result: $Utils.Optional<ProviderCountAggregateOutputType> | number
          }
        }
      }
      HumanitarianOrg: {
        payload: Prisma.$HumanitarianOrgPayload<ExtArgs>
        fields: Prisma.HumanitarianOrgFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HumanitarianOrgFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianOrgPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HumanitarianOrgFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianOrgPayload>
          }
          findFirst: {
            args: Prisma.HumanitarianOrgFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianOrgPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HumanitarianOrgFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianOrgPayload>
          }
          findMany: {
            args: Prisma.HumanitarianOrgFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianOrgPayload>[]
          }
          create: {
            args: Prisma.HumanitarianOrgCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianOrgPayload>
          }
          createMany: {
            args: Prisma.HumanitarianOrgCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HumanitarianOrgCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianOrgPayload>[]
          }
          delete: {
            args: Prisma.HumanitarianOrgDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianOrgPayload>
          }
          update: {
            args: Prisma.HumanitarianOrgUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianOrgPayload>
          }
          deleteMany: {
            args: Prisma.HumanitarianOrgDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HumanitarianOrgUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HumanitarianOrgUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianOrgPayload>[]
          }
          upsert: {
            args: Prisma.HumanitarianOrgUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianOrgPayload>
          }
          aggregate: {
            args: Prisma.HumanitarianOrgAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHumanitarianOrg>
          }
          groupBy: {
            args: Prisma.HumanitarianOrgGroupByArgs<ExtArgs>
            result: $Utils.Optional<HumanitarianOrgGroupByOutputType>[]
          }
          count: {
            args: Prisma.HumanitarianOrgCountArgs<ExtArgs>
            result: $Utils.Optional<HumanitarianOrgCountAggregateOutputType> | number
          }
        }
      }
      VasTransaction: {
        payload: Prisma.$VasTransactionPayload<ExtArgs>
        fields: Prisma.VasTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VasTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VasTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasTransactionPayload>
          }
          findFirst: {
            args: Prisma.VasTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VasTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasTransactionPayload>
          }
          findMany: {
            args: Prisma.VasTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasTransactionPayload>[]
          }
          create: {
            args: Prisma.VasTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasTransactionPayload>
          }
          createMany: {
            args: Prisma.VasTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VasTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasTransactionPayload>[]
          }
          delete: {
            args: Prisma.VasTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasTransactionPayload>
          }
          update: {
            args: Prisma.VasTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasTransactionPayload>
          }
          deleteMany: {
            args: Prisma.VasTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VasTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VasTransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasTransactionPayload>[]
          }
          upsert: {
            args: Prisma.VasTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasTransactionPayload>
          }
          aggregate: {
            args: Prisma.VasTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVasTransaction>
          }
          groupBy: {
            args: Prisma.VasTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<VasTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.VasTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<VasTransactionCountAggregateOutputType> | number
          }
        }
      }
      ParkingTransaction: {
        payload: Prisma.$ParkingTransactionPayload<ExtArgs>
        fields: Prisma.ParkingTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParkingTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParkingTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingTransactionPayload>
          }
          findFirst: {
            args: Prisma.ParkingTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParkingTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingTransactionPayload>
          }
          findMany: {
            args: Prisma.ParkingTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingTransactionPayload>[]
          }
          create: {
            args: Prisma.ParkingTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingTransactionPayload>
          }
          createMany: {
            args: Prisma.ParkingTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParkingTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingTransactionPayload>[]
          }
          delete: {
            args: Prisma.ParkingTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingTransactionPayload>
          }
          update: {
            args: Prisma.ParkingTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingTransactionPayload>
          }
          deleteMany: {
            args: Prisma.ParkingTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParkingTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ParkingTransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingTransactionPayload>[]
          }
          upsert: {
            args: Prisma.ParkingTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingTransactionPayload>
          }
          aggregate: {
            args: Prisma.ParkingTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParkingTransaction>
          }
          groupBy: {
            args: Prisma.ParkingTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParkingTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParkingTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<ParkingTransactionCountAggregateOutputType> | number
          }
        }
      }
      ParkingService: {
        payload: Prisma.$ParkingServicePayload<ExtArgs>
        fields: Prisma.ParkingServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParkingServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParkingServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingServicePayload>
          }
          findFirst: {
            args: Prisma.ParkingServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParkingServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingServicePayload>
          }
          findMany: {
            args: Prisma.ParkingServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingServicePayload>[]
          }
          create: {
            args: Prisma.ParkingServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingServicePayload>
          }
          createMany: {
            args: Prisma.ParkingServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParkingServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingServicePayload>[]
          }
          delete: {
            args: Prisma.ParkingServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingServicePayload>
          }
          update: {
            args: Prisma.ParkingServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingServicePayload>
          }
          deleteMany: {
            args: Prisma.ParkingServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParkingServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ParkingServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingServicePayload>[]
          }
          upsert: {
            args: Prisma.ParkingServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParkingServicePayload>
          }
          aggregate: {
            args: Prisma.ParkingServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParkingService>
          }
          groupBy: {
            args: Prisma.ParkingServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParkingServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParkingServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ParkingServiceCountAggregateOutputType> | number
          }
        }
      }
      Contract: {
        payload: Prisma.$ContractPayload<ExtArgs>
        fields: Prisma.ContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findFirst: {
            args: Prisma.ContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findMany: {
            args: Prisma.ContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          create: {
            args: Prisma.ContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          createMany: {
            args: Prisma.ContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          delete: {
            args: Prisma.ContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          update: {
            args: Prisma.ContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          deleteMany: {
            args: Prisma.ContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContractUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          upsert: {
            args: Prisma.ContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          aggregate: {
            args: Prisma.ContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContract>
          }
          groupBy: {
            args: Prisma.ContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractCountArgs<ExtArgs>
            result: $Utils.Optional<ContractCountAggregateOutputType> | number
          }
        }
      }
      ContractRenewal: {
        payload: Prisma.$ContractRenewalPayload<ExtArgs>
        fields: Prisma.ContractRenewalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractRenewalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractRenewalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalPayload>
          }
          findFirst: {
            args: Prisma.ContractRenewalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractRenewalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalPayload>
          }
          findMany: {
            args: Prisma.ContractRenewalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalPayload>[]
          }
          create: {
            args: Prisma.ContractRenewalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalPayload>
          }
          createMany: {
            args: Prisma.ContractRenewalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractRenewalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalPayload>[]
          }
          delete: {
            args: Prisma.ContractRenewalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalPayload>
          }
          update: {
            args: Prisma.ContractRenewalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalPayload>
          }
          deleteMany: {
            args: Prisma.ContractRenewalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractRenewalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContractRenewalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalPayload>[]
          }
          upsert: {
            args: Prisma.ContractRenewalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalPayload>
          }
          aggregate: {
            args: Prisma.ContractRenewalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContractRenewal>
          }
          groupBy: {
            args: Prisma.ContractRenewalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractRenewalGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractRenewalCountArgs<ExtArgs>
            result: $Utils.Optional<ContractRenewalCountAggregateOutputType> | number
          }
        }
      }
      ContractRenewalAttachment: {
        payload: Prisma.$ContractRenewalAttachmentPayload<ExtArgs>
        fields: Prisma.ContractRenewalAttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractRenewalAttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalAttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractRenewalAttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalAttachmentPayload>
          }
          findFirst: {
            args: Prisma.ContractRenewalAttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalAttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractRenewalAttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalAttachmentPayload>
          }
          findMany: {
            args: Prisma.ContractRenewalAttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalAttachmentPayload>[]
          }
          create: {
            args: Prisma.ContractRenewalAttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalAttachmentPayload>
          }
          createMany: {
            args: Prisma.ContractRenewalAttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractRenewalAttachmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalAttachmentPayload>[]
          }
          delete: {
            args: Prisma.ContractRenewalAttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalAttachmentPayload>
          }
          update: {
            args: Prisma.ContractRenewalAttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalAttachmentPayload>
          }
          deleteMany: {
            args: Prisma.ContractRenewalAttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractRenewalAttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContractRenewalAttachmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalAttachmentPayload>[]
          }
          upsert: {
            args: Prisma.ContractRenewalAttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractRenewalAttachmentPayload>
          }
          aggregate: {
            args: Prisma.ContractRenewalAttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContractRenewalAttachment>
          }
          groupBy: {
            args: Prisma.ContractRenewalAttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractRenewalAttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractRenewalAttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<ContractRenewalAttachmentCountAggregateOutputType> | number
          }
        }
      }
      HumanitarianContractRenewal: {
        payload: Prisma.$HumanitarianContractRenewalPayload<ExtArgs>
        fields: Prisma.HumanitarianContractRenewalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HumanitarianContractRenewalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianContractRenewalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HumanitarianContractRenewalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianContractRenewalPayload>
          }
          findFirst: {
            args: Prisma.HumanitarianContractRenewalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianContractRenewalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HumanitarianContractRenewalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianContractRenewalPayload>
          }
          findMany: {
            args: Prisma.HumanitarianContractRenewalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianContractRenewalPayload>[]
          }
          create: {
            args: Prisma.HumanitarianContractRenewalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianContractRenewalPayload>
          }
          createMany: {
            args: Prisma.HumanitarianContractRenewalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HumanitarianContractRenewalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianContractRenewalPayload>[]
          }
          delete: {
            args: Prisma.HumanitarianContractRenewalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianContractRenewalPayload>
          }
          update: {
            args: Prisma.HumanitarianContractRenewalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianContractRenewalPayload>
          }
          deleteMany: {
            args: Prisma.HumanitarianContractRenewalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HumanitarianContractRenewalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HumanitarianContractRenewalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianContractRenewalPayload>[]
          }
          upsert: {
            args: Prisma.HumanitarianContractRenewalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HumanitarianContractRenewalPayload>
          }
          aggregate: {
            args: Prisma.HumanitarianContractRenewalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHumanitarianContractRenewal>
          }
          groupBy: {
            args: Prisma.HumanitarianContractRenewalGroupByArgs<ExtArgs>
            result: $Utils.Optional<HumanitarianContractRenewalGroupByOutputType>[]
          }
          count: {
            args: Prisma.HumanitarianContractRenewalCountArgs<ExtArgs>
            result: $Utils.Optional<HumanitarianContractRenewalCountAggregateOutputType> | number
          }
        }
      }
      SenderBlacklist: {
        payload: Prisma.$SenderBlacklistPayload<ExtArgs>
        fields: Prisma.SenderBlacklistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SenderBlacklistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SenderBlacklistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SenderBlacklistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SenderBlacklistPayload>
          }
          findFirst: {
            args: Prisma.SenderBlacklistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SenderBlacklistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SenderBlacklistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SenderBlacklistPayload>
          }
          findMany: {
            args: Prisma.SenderBlacklistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SenderBlacklistPayload>[]
          }
          create: {
            args: Prisma.SenderBlacklistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SenderBlacklistPayload>
          }
          createMany: {
            args: Prisma.SenderBlacklistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SenderBlacklistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SenderBlacklistPayload>[]
          }
          delete: {
            args: Prisma.SenderBlacklistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SenderBlacklistPayload>
          }
          update: {
            args: Prisma.SenderBlacklistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SenderBlacklistPayload>
          }
          deleteMany: {
            args: Prisma.SenderBlacklistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SenderBlacklistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SenderBlacklistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SenderBlacklistPayload>[]
          }
          upsert: {
            args: Prisma.SenderBlacklistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SenderBlacklistPayload>
          }
          aggregate: {
            args: Prisma.SenderBlacklistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSenderBlacklist>
          }
          groupBy: {
            args: Prisma.SenderBlacklistGroupByArgs<ExtArgs>
            result: $Utils.Optional<SenderBlacklistGroupByOutputType>[]
          }
          count: {
            args: Prisma.SenderBlacklistCountArgs<ExtArgs>
            result: $Utils.Optional<SenderBlacklistCountAggregateOutputType> | number
          }
        }
      }
      BlacklistLog: {
        payload: Prisma.$BlacklistLogPayload<ExtArgs>
        fields: Prisma.BlacklistLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlacklistLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlacklistLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistLogPayload>
          }
          findFirst: {
            args: Prisma.BlacklistLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlacklistLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistLogPayload>
          }
          findMany: {
            args: Prisma.BlacklistLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistLogPayload>[]
          }
          create: {
            args: Prisma.BlacklistLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistLogPayload>
          }
          createMany: {
            args: Prisma.BlacklistLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BlacklistLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistLogPayload>[]
          }
          delete: {
            args: Prisma.BlacklistLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistLogPayload>
          }
          update: {
            args: Prisma.BlacklistLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistLogPayload>
          }
          deleteMany: {
            args: Prisma.BlacklistLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BlacklistLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BlacklistLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistLogPayload>[]
          }
          upsert: {
            args: Prisma.BlacklistLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistLogPayload>
          }
          aggregate: {
            args: Prisma.BlacklistLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBlacklistLog>
          }
          groupBy: {
            args: Prisma.BlacklistLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<BlacklistLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlacklistLogCountArgs<ExtArgs>
            result: $Utils.Optional<BlacklistLogCountAggregateOutputType> | number
          }
        }
      }
      Operator: {
        payload: Prisma.$OperatorPayload<ExtArgs>
        fields: Prisma.OperatorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperatorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperatorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          findFirst: {
            args: Prisma.OperatorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperatorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          findMany: {
            args: Prisma.OperatorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>[]
          }
          create: {
            args: Prisma.OperatorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          createMany: {
            args: Prisma.OperatorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OperatorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>[]
          }
          delete: {
            args: Prisma.OperatorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          update: {
            args: Prisma.OperatorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          deleteMany: {
            args: Prisma.OperatorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperatorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OperatorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>[]
          }
          upsert: {
            args: Prisma.OperatorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          aggregate: {
            args: Prisma.OperatorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperator>
          }
          groupBy: {
            args: Prisma.OperatorGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperatorGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperatorCountArgs<ExtArgs>
            result: $Utils.Optional<OperatorCountAggregateOutputType> | number
          }
        }
      }
      ServiceContract: {
        payload: Prisma.$ServiceContractPayload<ExtArgs>
        fields: Prisma.ServiceContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceContractPayload>
          }
          findFirst: {
            args: Prisma.ServiceContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceContractPayload>
          }
          findMany: {
            args: Prisma.ServiceContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceContractPayload>[]
          }
          create: {
            args: Prisma.ServiceContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceContractPayload>
          }
          createMany: {
            args: Prisma.ServiceContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceContractCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceContractPayload>[]
          }
          delete: {
            args: Prisma.ServiceContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceContractPayload>
          }
          update: {
            args: Prisma.ServiceContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceContractPayload>
          }
          deleteMany: {
            args: Prisma.ServiceContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceContractUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceContractPayload>[]
          }
          upsert: {
            args: Prisma.ServiceContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceContractPayload>
          }
          aggregate: {
            args: Prisma.ServiceContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceContract>
          }
          groupBy: {
            args: Prisma.ServiceContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceContractCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceContractCountAggregateOutputType> | number
          }
        }
      }
      ContractAttachment: {
        payload: Prisma.$ContractAttachmentPayload<ExtArgs>
        fields: Prisma.ContractAttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractAttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractAttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractAttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractAttachmentPayload>
          }
          findFirst: {
            args: Prisma.ContractAttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractAttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractAttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractAttachmentPayload>
          }
          findMany: {
            args: Prisma.ContractAttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractAttachmentPayload>[]
          }
          create: {
            args: Prisma.ContractAttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractAttachmentPayload>
          }
          createMany: {
            args: Prisma.ContractAttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractAttachmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractAttachmentPayload>[]
          }
          delete: {
            args: Prisma.ContractAttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractAttachmentPayload>
          }
          update: {
            args: Prisma.ContractAttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractAttachmentPayload>
          }
          deleteMany: {
            args: Prisma.ContractAttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractAttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContractAttachmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractAttachmentPayload>[]
          }
          upsert: {
            args: Prisma.ContractAttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractAttachmentPayload>
          }
          aggregate: {
            args: Prisma.ContractAttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContractAttachment>
          }
          groupBy: {
            args: Prisma.ContractAttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractAttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractAttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<ContractAttachmentCountAggregateOutputType> | number
          }
        }
      }
      ContractReminder: {
        payload: Prisma.$ContractReminderPayload<ExtArgs>
        fields: Prisma.ContractReminderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractReminderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractReminderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractReminderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractReminderPayload>
          }
          findFirst: {
            args: Prisma.ContractReminderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractReminderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractReminderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractReminderPayload>
          }
          findMany: {
            args: Prisma.ContractReminderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractReminderPayload>[]
          }
          create: {
            args: Prisma.ContractReminderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractReminderPayload>
          }
          createMany: {
            args: Prisma.ContractReminderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractReminderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractReminderPayload>[]
          }
          delete: {
            args: Prisma.ContractReminderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractReminderPayload>
          }
          update: {
            args: Prisma.ContractReminderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractReminderPayload>
          }
          deleteMany: {
            args: Prisma.ContractReminderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractReminderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContractReminderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractReminderPayload>[]
          }
          upsert: {
            args: Prisma.ContractReminderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractReminderPayload>
          }
          aggregate: {
            args: Prisma.ContractReminderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContractReminder>
          }
          groupBy: {
            args: Prisma.ContractReminderGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractReminderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractReminderCountArgs<ExtArgs>
            result: $Utils.Optional<ContractReminderCountAggregateOutputType> | number
          }
        }
      }
      Service: {
        payload: Prisma.$ServicePayload<ExtArgs>
        fields: Prisma.ServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findFirst: {
            args: Prisma.ServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findMany: {
            args: Prisma.ServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          create: {
            args: Prisma.ServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          createMany: {
            args: Prisma.ServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          delete: {
            args: Prisma.ServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          update: {
            args: Prisma.ServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          deleteMany: {
            args: Prisma.ServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          upsert: {
            args: Prisma.ServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.ServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      VasService: {
        payload: Prisma.$VasServicePayload<ExtArgs>
        fields: Prisma.VasServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VasServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VasServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasServicePayload>
          }
          findFirst: {
            args: Prisma.VasServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VasServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasServicePayload>
          }
          findMany: {
            args: Prisma.VasServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasServicePayload>[]
          }
          create: {
            args: Prisma.VasServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasServicePayload>
          }
          createMany: {
            args: Prisma.VasServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VasServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasServicePayload>[]
          }
          delete: {
            args: Prisma.VasServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasServicePayload>
          }
          update: {
            args: Prisma.VasServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasServicePayload>
          }
          deleteMany: {
            args: Prisma.VasServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VasServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VasServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasServicePayload>[]
          }
          upsert: {
            args: Prisma.VasServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VasServicePayload>
          }
          aggregate: {
            args: Prisma.VasServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVasService>
          }
          groupBy: {
            args: Prisma.VasServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<VasServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.VasServiceCountArgs<ExtArgs>
            result: $Utils.Optional<VasServiceCountAggregateOutputType> | number
          }
        }
      }
      BulkService: {
        payload: Prisma.$BulkServicePayload<ExtArgs>
        fields: Prisma.BulkServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BulkServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BulkServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BulkServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BulkServicePayload>
          }
          findFirst: {
            args: Prisma.BulkServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BulkServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BulkServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BulkServicePayload>
          }
          findMany: {
            args: Prisma.BulkServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BulkServicePayload>[]
          }
          create: {
            args: Prisma.BulkServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BulkServicePayload>
          }
          createMany: {
            args: Prisma.BulkServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BulkServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BulkServicePayload>[]
          }
          delete: {
            args: Prisma.BulkServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BulkServicePayload>
          }
          update: {
            args: Prisma.BulkServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BulkServicePayload>
          }
          deleteMany: {
            args: Prisma.BulkServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BulkServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BulkServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BulkServicePayload>[]
          }
          upsert: {
            args: Prisma.BulkServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BulkServicePayload>
          }
          aggregate: {
            args: Prisma.BulkServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBulkService>
          }
          groupBy: {
            args: Prisma.BulkServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<BulkServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.BulkServiceCountArgs<ExtArgs>
            result: $Utils.Optional<BulkServiceCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Complaint: {
        payload: Prisma.$ComplaintPayload<ExtArgs>
        fields: Prisma.ComplaintFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComplaintFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComplaintFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          findFirst: {
            args: Prisma.ComplaintFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComplaintFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          findMany: {
            args: Prisma.ComplaintFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>[]
          }
          create: {
            args: Prisma.ComplaintCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          createMany: {
            args: Prisma.ComplaintCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComplaintCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>[]
          }
          delete: {
            args: Prisma.ComplaintDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          update: {
            args: Prisma.ComplaintUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          deleteMany: {
            args: Prisma.ComplaintDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComplaintUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ComplaintUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>[]
          }
          upsert: {
            args: Prisma.ComplaintUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          aggregate: {
            args: Prisma.ComplaintAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComplaint>
          }
          groupBy: {
            args: Prisma.ComplaintGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComplaintGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComplaintCountArgs<ExtArgs>
            result: $Utils.Optional<ComplaintCountAggregateOutputType> | number
          }
        }
      }
      ComplaintStatusHistory: {
        payload: Prisma.$ComplaintStatusHistoryPayload<ExtArgs>
        fields: Prisma.ComplaintStatusHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComplaintStatusHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintStatusHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComplaintStatusHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintStatusHistoryPayload>
          }
          findFirst: {
            args: Prisma.ComplaintStatusHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintStatusHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComplaintStatusHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintStatusHistoryPayload>
          }
          findMany: {
            args: Prisma.ComplaintStatusHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintStatusHistoryPayload>[]
          }
          create: {
            args: Prisma.ComplaintStatusHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintStatusHistoryPayload>
          }
          createMany: {
            args: Prisma.ComplaintStatusHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComplaintStatusHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintStatusHistoryPayload>[]
          }
          delete: {
            args: Prisma.ComplaintStatusHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintStatusHistoryPayload>
          }
          update: {
            args: Prisma.ComplaintStatusHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintStatusHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ComplaintStatusHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComplaintStatusHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ComplaintStatusHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintStatusHistoryPayload>[]
          }
          upsert: {
            args: Prisma.ComplaintStatusHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintStatusHistoryPayload>
          }
          aggregate: {
            args: Prisma.ComplaintStatusHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComplaintStatusHistory>
          }
          groupBy: {
            args: Prisma.ComplaintStatusHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComplaintStatusHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComplaintStatusHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ComplaintStatusHistoryCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Attachment: {
        payload: Prisma.$AttachmentPayload<ExtArgs>
        fields: Prisma.AttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findFirst: {
            args: Prisma.AttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findMany: {
            args: Prisma.AttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          create: {
            args: Prisma.AttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          createMany: {
            args: Prisma.AttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttachmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          delete: {
            args: Prisma.AttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          update: {
            args: Prisma.AttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          deleteMany: {
            args: Prisma.AttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttachmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          upsert: {
            args: Prisma.AttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          aggregate: {
            args: Prisma.AttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttachment>
          }
          groupBy: {
            args: Prisma.AttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<AttachmentCountAggregateOutputType> | number
          }
        }
      }
      LogEntry: {
        payload: Prisma.$LogEntryPayload<ExtArgs>
        fields: Prisma.LogEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogEntryPayload>
          }
          findFirst: {
            args: Prisma.LogEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogEntryPayload>
          }
          findMany: {
            args: Prisma.LogEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogEntryPayload>[]
          }
          create: {
            args: Prisma.LogEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogEntryPayload>
          }
          createMany: {
            args: Prisma.LogEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogEntryPayload>[]
          }
          delete: {
            args: Prisma.LogEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogEntryPayload>
          }
          update: {
            args: Prisma.LogEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogEntryPayload>
          }
          deleteMany: {
            args: Prisma.LogEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LogEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogEntryPayload>[]
          }
          upsert: {
            args: Prisma.LogEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogEntryPayload>
          }
          aggregate: {
            args: Prisma.LogEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLogEntry>
          }
          groupBy: {
            args: Prisma.LogEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogEntryCountArgs<ExtArgs>
            result: $Utils.Optional<LogEntryCountAggregateOutputType> | number
          }
        }
      }
      ActivityLog: {
        payload: Prisma.$ActivityLogPayload<ExtArgs>
        fields: Prisma.ActivityLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          findFirst: {
            args: Prisma.ActivityLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          findMany: {
            args: Prisma.ActivityLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          create: {
            args: Prisma.ActivityLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          createMany: {
            args: Prisma.ActivityLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          delete: {
            args: Prisma.ActivityLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          update: {
            args: Prisma.ActivityLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          deleteMany: {
            args: Prisma.ActivityLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          upsert: {
            args: Prisma.ActivityLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          aggregate: {
            args: Prisma.ActivityLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityLog>
          }
          groupBy: {
            args: Prisma.ActivityLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityLogCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityLogCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      ScheduledReport: {
        payload: Prisma.$ScheduledReportPayload<ExtArgs>
        fields: Prisma.ScheduledReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduledReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduledReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledReportPayload>
          }
          findFirst: {
            args: Prisma.ScheduledReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduledReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledReportPayload>
          }
          findMany: {
            args: Prisma.ScheduledReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledReportPayload>[]
          }
          create: {
            args: Prisma.ScheduledReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledReportPayload>
          }
          createMany: {
            args: Prisma.ScheduledReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduledReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledReportPayload>[]
          }
          delete: {
            args: Prisma.ScheduledReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledReportPayload>
          }
          update: {
            args: Prisma.ScheduledReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledReportPayload>
          }
          deleteMany: {
            args: Prisma.ScheduledReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduledReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScheduledReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledReportPayload>[]
          }
          upsert: {
            args: Prisma.ScheduledReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledReportPayload>
          }
          aggregate: {
            args: Prisma.ScheduledReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScheduledReport>
          }
          groupBy: {
            args: Prisma.ScheduledReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduledReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduledReportCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduledReportCountAggregateOutputType> | number
          }
        }
      }
      GeneratedReport: {
        payload: Prisma.$GeneratedReportPayload<ExtArgs>
        fields: Prisma.GeneratedReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneratedReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneratedReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedReportPayload>
          }
          findFirst: {
            args: Prisma.GeneratedReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneratedReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedReportPayload>
          }
          findMany: {
            args: Prisma.GeneratedReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedReportPayload>[]
          }
          create: {
            args: Prisma.GeneratedReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedReportPayload>
          }
          createMany: {
            args: Prisma.GeneratedReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GeneratedReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedReportPayload>[]
          }
          delete: {
            args: Prisma.GeneratedReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedReportPayload>
          }
          update: {
            args: Prisma.GeneratedReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedReportPayload>
          }
          deleteMany: {
            args: Prisma.GeneratedReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeneratedReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GeneratedReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedReportPayload>[]
          }
          upsert: {
            args: Prisma.GeneratedReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedReportPayload>
          }
          aggregate: {
            args: Prisma.GeneratedReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGeneratedReport>
          }
          groupBy: {
            args: Prisma.GeneratedReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeneratedReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneratedReportCountArgs<ExtArgs>
            result: $Utils.Optional<GeneratedReportCountAggregateOutputType> | number
          }
        }
      }
      NotificationPreference: {
        payload: Prisma.$NotificationPreferencePayload<ExtArgs>
        fields: Prisma.NotificationPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>
          }
          findFirst: {
            args: Prisma.NotificationPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>
          }
          findMany: {
            args: Prisma.NotificationPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>[]
          }
          create: {
            args: Prisma.NotificationPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>
          }
          createMany: {
            args: Prisma.NotificationPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationPreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>[]
          }
          delete: {
            args: Prisma.NotificationPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>
          }
          update: {
            args: Prisma.NotificationPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>
          }
          deleteMany: {
            args: Prisma.NotificationPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationPreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>[]
          }
          upsert: {
            args: Prisma.NotificationPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>
          }
          aggregate: {
            args: Prisma.NotificationPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationPreference>
          }
          groupBy: {
            args: Prisma.NotificationPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationPreferenceCountAggregateOutputType> | number
          }
        }
      }
      ReportFile: {
        payload: Prisma.$ReportFilePayload<ExtArgs>
        fields: Prisma.ReportFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>
          }
          findFirst: {
            args: Prisma.ReportFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>
          }
          findMany: {
            args: Prisma.ReportFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>[]
          }
          create: {
            args: Prisma.ReportFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>
          }
          createMany: {
            args: Prisma.ReportFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>[]
          }
          delete: {
            args: Prisma.ReportFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>
          }
          update: {
            args: Prisma.ReportFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>
          }
          deleteMany: {
            args: Prisma.ReportFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportFileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>[]
          }
          upsert: {
            args: Prisma.ReportFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportFilePayload>
          }
          aggregate: {
            args: Prisma.ReportFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportFile>
          }
          groupBy: {
            args: Prisma.ReportFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportFileCountArgs<ExtArgs>
            result: $Utils.Optional<ReportFileCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    account?: AccountOmit
    session?: SessionOmit
    verificationToken?: VerificationTokenOmit
    passwordResetToken?: PasswordResetTokenOmit
    twoFactorToken?: TwoFactorTokenOmit
    twoFactorConfirmation?: TwoFactorConfirmationOmit
    user?: UserOmit
    provider?: ProviderOmit
    humanitarianOrg?: HumanitarianOrgOmit
    vasTransaction?: VasTransactionOmit
    parkingTransaction?: ParkingTransactionOmit
    parkingService?: ParkingServiceOmit
    contract?: ContractOmit
    contractRenewal?: ContractRenewalOmit
    contractRenewalAttachment?: ContractRenewalAttachmentOmit
    humanitarianContractRenewal?: HumanitarianContractRenewalOmit
    senderBlacklist?: SenderBlacklistOmit
    blacklistLog?: BlacklistLogOmit
    operator?: OperatorOmit
    serviceContract?: ServiceContractOmit
    contractAttachment?: ContractAttachmentOmit
    contractReminder?: ContractReminderOmit
    service?: ServiceOmit
    vasService?: VasServiceOmit
    bulkService?: BulkServiceOmit
    product?: ProductOmit
    complaint?: ComplaintOmit
    complaintStatusHistory?: ComplaintStatusHistoryOmit
    comment?: CommentOmit
    attachment?: AttachmentOmit
    logEntry?: LogEntryOmit
    activityLog?: ActivityLogOmit
    notification?: NotificationOmit
    scheduledReport?: ScheduledReportOmit
    generatedReport?: GeneratedReportOmit
    notificationPreference?: NotificationPreferenceOmit
    reportFile?: ReportFileOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    createdContracts: number
    modifiedContracts: number
    uploadedAttachments: number
    acknowledgedReminders: number
    submittedComplaints: number
    assignedComplaints: number
    comments: number
    activities: number
    notifications: number
    createdHumanitarianRenewals: number
    modifiedHumanitarianRenewals: number
    senderBlacklists: number
    modifiedBlacklists: number
    auditLogs: number
    createdRenewals: number
    modifiedRenewals: number
    uploadedRenewalFiles: number
    createdParkingServices: number
    logEntries: number
    updatedLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    createdContracts?: boolean | UserCountOutputTypeCountCreatedContractsArgs
    modifiedContracts?: boolean | UserCountOutputTypeCountModifiedContractsArgs
    uploadedAttachments?: boolean | UserCountOutputTypeCountUploadedAttachmentsArgs
    acknowledgedReminders?: boolean | UserCountOutputTypeCountAcknowledgedRemindersArgs
    submittedComplaints?: boolean | UserCountOutputTypeCountSubmittedComplaintsArgs
    assignedComplaints?: boolean | UserCountOutputTypeCountAssignedComplaintsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    activities?: boolean | UserCountOutputTypeCountActivitiesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    createdHumanitarianRenewals?: boolean | UserCountOutputTypeCountCreatedHumanitarianRenewalsArgs
    modifiedHumanitarianRenewals?: boolean | UserCountOutputTypeCountModifiedHumanitarianRenewalsArgs
    senderBlacklists?: boolean | UserCountOutputTypeCountSenderBlacklistsArgs
    modifiedBlacklists?: boolean | UserCountOutputTypeCountModifiedBlacklistsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    createdRenewals?: boolean | UserCountOutputTypeCountCreatedRenewalsArgs
    modifiedRenewals?: boolean | UserCountOutputTypeCountModifiedRenewalsArgs
    uploadedRenewalFiles?: boolean | UserCountOutputTypeCountUploadedRenewalFilesArgs
    createdParkingServices?: boolean | UserCountOutputTypeCountCreatedParkingServicesArgs
    logEntries?: boolean | UserCountOutputTypeCountLogEntriesArgs
    updatedLogs?: boolean | UserCountOutputTypeCountUpdatedLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountModifiedContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadedAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractAttachmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAcknowledgedRemindersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractReminderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmittedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedHumanitarianRenewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HumanitarianContractRenewalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountModifiedHumanitarianRenewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HumanitarianContractRenewalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSenderBlacklistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SenderBlacklistWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountModifiedBlacklistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SenderBlacklistWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlacklistLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedRenewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractRenewalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountModifiedRenewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractRenewalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadedRenewalFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractRenewalAttachmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedParkingServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParkingServiceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLogEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogEntryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogEntryWhereInput
  }


  /**
   * Count Type ProviderCountOutputType
   */

  export type ProviderCountOutputType = {
    contracts: number
    vasServices: number
    bulkServices: number
    complaints: number
    vasTransactions: number
    logEntries: number
  }

  export type ProviderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | ProviderCountOutputTypeCountContractsArgs
    vasServices?: boolean | ProviderCountOutputTypeCountVasServicesArgs
    bulkServices?: boolean | ProviderCountOutputTypeCountBulkServicesArgs
    complaints?: boolean | ProviderCountOutputTypeCountComplaintsArgs
    vasTransactions?: boolean | ProviderCountOutputTypeCountVasTransactionsArgs
    logEntries?: boolean | ProviderCountOutputTypeCountLogEntriesArgs
  }

  // Custom InputTypes
  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderCountOutputType
     */
    select?: ProviderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountVasServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VasServiceWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountBulkServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BulkServiceWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountVasTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VasTransactionWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountLogEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogEntryWhereInput
  }


  /**
   * Count Type HumanitarianOrgCountOutputType
   */

  export type HumanitarianOrgCountOutputType = {
    contracts: number
    renewals: number
    complaints: number
    reportFiles: number
  }

  export type HumanitarianOrgCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | HumanitarianOrgCountOutputTypeCountContractsArgs
    renewals?: boolean | HumanitarianOrgCountOutputTypeCountRenewalsArgs
    complaints?: boolean | HumanitarianOrgCountOutputTypeCountComplaintsArgs
    reportFiles?: boolean | HumanitarianOrgCountOutputTypeCountReportFilesArgs
  }

  // Custom InputTypes
  /**
   * HumanitarianOrgCountOutputType without action
   */
  export type HumanitarianOrgCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrgCountOutputType
     */
    select?: HumanitarianOrgCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HumanitarianOrgCountOutputType without action
   */
  export type HumanitarianOrgCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * HumanitarianOrgCountOutputType without action
   */
  export type HumanitarianOrgCountOutputTypeCountRenewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HumanitarianContractRenewalWhereInput
  }

  /**
   * HumanitarianOrgCountOutputType without action
   */
  export type HumanitarianOrgCountOutputTypeCountComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }

  /**
   * HumanitarianOrgCountOutputType without action
   */
  export type HumanitarianOrgCountOutputTypeCountReportFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportFileWhereInput
  }


  /**
   * Count Type ParkingServiceCountOutputType
   */

  export type ParkingServiceCountOutputType = {
    transactions: number
    contracts: number
    logEntries: number
    complaints: number
  }

  export type ParkingServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | ParkingServiceCountOutputTypeCountTransactionsArgs
    contracts?: boolean | ParkingServiceCountOutputTypeCountContractsArgs
    logEntries?: boolean | ParkingServiceCountOutputTypeCountLogEntriesArgs
    complaints?: boolean | ParkingServiceCountOutputTypeCountComplaintsArgs
  }

  // Custom InputTypes
  /**
   * ParkingServiceCountOutputType without action
   */
  export type ParkingServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingServiceCountOutputType
     */
    select?: ParkingServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ParkingServiceCountOutputType without action
   */
  export type ParkingServiceCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParkingTransactionWhereInput
  }

  /**
   * ParkingServiceCountOutputType without action
   */
  export type ParkingServiceCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * ParkingServiceCountOutputType without action
   */
  export type ParkingServiceCountOutputTypeCountLogEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogEntryWhereInput
  }

  /**
   * ParkingServiceCountOutputType without action
   */
  export type ParkingServiceCountOutputTypeCountComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }


  /**
   * Count Type ContractCountOutputType
   */

  export type ContractCountOutputType = {
    services: number
    attachments: number
    humanitarianRenewals: number
    renewals: number
    reminders: number
  }

  export type ContractCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    services?: boolean | ContractCountOutputTypeCountServicesArgs
    attachments?: boolean | ContractCountOutputTypeCountAttachmentsArgs
    humanitarianRenewals?: boolean | ContractCountOutputTypeCountHumanitarianRenewalsArgs
    renewals?: boolean | ContractCountOutputTypeCountRenewalsArgs
    reminders?: boolean | ContractCountOutputTypeCountRemindersArgs
  }

  // Custom InputTypes
  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractCountOutputType
     */
    select?: ContractCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceContractWhereInput
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractAttachmentWhereInput
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountHumanitarianRenewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HumanitarianContractRenewalWhereInput
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountRenewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractRenewalWhereInput
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountRemindersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractReminderWhereInput
  }


  /**
   * Count Type ContractRenewalCountOutputType
   */

  export type ContractRenewalCountOutputType = {
    attachments: number
  }

  export type ContractRenewalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attachments?: boolean | ContractRenewalCountOutputTypeCountAttachmentsArgs
  }

  // Custom InputTypes
  /**
   * ContractRenewalCountOutputType without action
   */
  export type ContractRenewalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalCountOutputType
     */
    select?: ContractRenewalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContractRenewalCountOutputType without action
   */
  export type ContractRenewalCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractRenewalAttachmentWhereInput
  }


  /**
   * Count Type SenderBlacklistCountOutputType
   */

  export type SenderBlacklistCountOutputType = {
    logs: number
  }

  export type SenderBlacklistCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logs?: boolean | SenderBlacklistCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * SenderBlacklistCountOutputType without action
   */
  export type SenderBlacklistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklistCountOutputType
     */
    select?: SenderBlacklistCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SenderBlacklistCountOutputType without action
   */
  export type SenderBlacklistCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlacklistLogWhereInput
  }


  /**
   * Count Type OperatorCountOutputType
   */

  export type OperatorCountOutputType = {
    contracts: number
  }

  export type OperatorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | OperatorCountOutputTypeCountContractsArgs
  }

  // Custom InputTypes
  /**
   * OperatorCountOutputType without action
   */
  export type OperatorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorCountOutputType
     */
    select?: OperatorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OperatorCountOutputType without action
   */
  export type OperatorCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }


  /**
   * Count Type ServiceCountOutputType
   */

  export type ServiceCountOutputType = {
    contracts: number
    vasServices: number
    bulkServices: number
    complaints: number
    transactions: number
    vasTransactions: number
  }

  export type ServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | ServiceCountOutputTypeCountContractsArgs
    vasServices?: boolean | ServiceCountOutputTypeCountVasServicesArgs
    bulkServices?: boolean | ServiceCountOutputTypeCountBulkServicesArgs
    complaints?: boolean | ServiceCountOutputTypeCountComplaintsArgs
    transactions?: boolean | ServiceCountOutputTypeCountTransactionsArgs
    vasTransactions?: boolean | ServiceCountOutputTypeCountVasTransactionsArgs
  }

  // Custom InputTypes
  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCountOutputType
     */
    select?: ServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceContractWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountVasServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VasServiceWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountBulkServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BulkServiceWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParkingTransactionWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountVasTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VasTransactionWhereInput
  }


  /**
   * Count Type BulkServiceCountOutputType
   */

  export type BulkServiceCountOutputType = {
    logEntries: number
  }

  export type BulkServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logEntries?: boolean | BulkServiceCountOutputTypeCountLogEntriesArgs
  }

  // Custom InputTypes
  /**
   * BulkServiceCountOutputType without action
   */
  export type BulkServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkServiceCountOutputType
     */
    select?: BulkServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BulkServiceCountOutputType without action
   */
  export type BulkServiceCountOutputTypeCountLogEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogEntryWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    complaints: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaints?: boolean | ProductCountOutputTypeCountComplaintsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }


  /**
   * Count Type ComplaintCountOutputType
   */

  export type ComplaintCountOutputType = {
    comments: number
    attachments: number
    statusHistory: number
  }

  export type ComplaintCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | ComplaintCountOutputTypeCountCommentsArgs
    attachments?: boolean | ComplaintCountOutputTypeCountAttachmentsArgs
    statusHistory?: boolean | ComplaintCountOutputTypeCountStatusHistoryArgs
  }

  // Custom InputTypes
  /**
   * ComplaintCountOutputType without action
   */
  export type ComplaintCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintCountOutputType
     */
    select?: ComplaintCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ComplaintCountOutputType without action
   */
  export type ComplaintCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * ComplaintCountOutputType without action
   */
  export type ComplaintCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
  }

  /**
   * ComplaintCountOutputType without action
   */
  export type ComplaintCountOutputTypeCountStatusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintStatusHistoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    id: number
    email: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    id: string
    email: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly id: FieldRef<"VerificationToken", 'String'>
    readonly email: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model PasswordResetToken
   */

  export type AggregatePasswordResetToken = {
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  export type PasswordResetTokenMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
  }

  export type PasswordResetTokenMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
  }

  export type PasswordResetTokenCountAggregateOutputType = {
    id: number
    email: number
    token: number
    expires: number
    _all: number
  }


  export type PasswordResetTokenMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
  }

  export type PasswordResetTokenMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
  }

  export type PasswordResetTokenCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type PasswordResetTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetToken to aggregate.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResetTokens
    **/
    _count?: true | PasswordResetTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type GetPasswordResetTokenAggregateType<T extends PasswordResetTokenAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordResetToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordResetToken[P]>
      : GetScalarType<T[P], AggregatePasswordResetToken[P]>
  }




  export type PasswordResetTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithAggregationInput | PasswordResetTokenOrderByWithAggregationInput[]
    by: PasswordResetTokenScalarFieldEnum[] | PasswordResetTokenScalarFieldEnum
    having?: PasswordResetTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetTokenCountAggregateInputType | true
    _min?: PasswordResetTokenMinAggregateInputType
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type PasswordResetTokenGroupByOutputType = {
    id: string
    email: string
    token: string
    expires: Date
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  type GetPasswordResetTokenGroupByPayload<T extends PasswordResetTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }

  export type PasswordResetTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "token" | "expires", ExtArgs["result"]["passwordResetToken"]>

  export type $PasswordResetTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordResetToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      expires: Date
    }, ExtArgs["result"]["passwordResetToken"]>
    composites: {}
  }

  type PasswordResetTokenGetPayload<S extends boolean | null | undefined | PasswordResetTokenDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetTokenPayload, S>

  type PasswordResetTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetTokenCountAggregateInputType | true
    }

  export interface PasswordResetTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordResetToken'], meta: { name: 'PasswordResetToken' } }
    /**
     * Find zero or one PasswordResetToken that matches the filter.
     * @param {PasswordResetTokenFindUniqueArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetTokenFindUniqueArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordResetToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetTokenFindUniqueOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetTokenFindFirstArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany()
     * 
     * // Get first 10 PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetTokenFindManyArgs>(args?: SelectSubset<T, PasswordResetTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordResetToken.
     * @param {PasswordResetTokenCreateArgs} args - Arguments to create a PasswordResetToken.
     * @example
     * // Create one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.create({
     *   data: {
     *     // ... data to create a PasswordResetToken
     *   }
     * })
     * 
     */
    create<T extends PasswordResetTokenCreateArgs>(args: SelectSubset<T, PasswordResetTokenCreateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResetTokens.
     * @param {PasswordResetTokenCreateManyArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetTokenCreateManyArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResetTokens and returns the data saved in the database.
     * @param {PasswordResetTokenCreateManyAndReturnArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PasswordResetTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PasswordResetToken.
     * @param {PasswordResetTokenDeleteArgs} args - Arguments to delete one PasswordResetToken.
     * @example
     * // Delete one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.delete({
     *   where: {
     *     // ... filter to delete one PasswordResetToken
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetTokenDeleteArgs>(args: SelectSubset<T, PasswordResetTokenDeleteArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordResetToken.
     * @param {PasswordResetTokenUpdateArgs} args - Arguments to update one PasswordResetToken.
     * @example
     * // Update one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetTokenUpdateArgs>(args: SelectSubset<T, PasswordResetTokenUpdateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResetTokens.
     * @param {PasswordResetTokenDeleteManyArgs} args - Arguments to filter PasswordResetTokens to delete.
     * @example
     * // Delete a few PasswordResetTokens
     * const { count } = await prisma.passwordResetToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetTokenDeleteManyArgs>(args?: SelectSubset<T, PasswordResetTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetTokenUpdateManyArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens and returns the data updated in the database.
     * @param {PasswordResetTokenUpdateManyAndReturnArgs} args - Arguments to update many PasswordResetTokens.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PasswordResetTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PasswordResetToken.
     * @param {PasswordResetTokenUpsertArgs} args - Arguments to update or create a PasswordResetToken.
     * @example
     * // Update or create a PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.upsert({
     *   create: {
     *     // ... data to create a PasswordResetToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordResetToken we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetTokenUpsertArgs>(args: SelectSubset<T, PasswordResetTokenUpsertArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenCountArgs} args - Arguments to filter PasswordResetTokens to count.
     * @example
     * // Count the number of PasswordResetTokens
     * const count = await prisma.passwordResetToken.count({
     *   where: {
     *     // ... the filter for the PasswordResetTokens we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetTokenCountArgs>(
      args?: Subset<T, PasswordResetTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetTokenAggregateArgs>(args: Subset<T, PasswordResetTokenAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetTokenAggregateType<T>>

    /**
     * Group by PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetTokenGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordResetToken model
   */
  readonly fields: PasswordResetTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordResetToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordResetToken model
   */
  interface PasswordResetTokenFieldRefs {
    readonly id: FieldRef<"PasswordResetToken", 'String'>
    readonly email: FieldRef<"PasswordResetToken", 'String'>
    readonly token: FieldRef<"PasswordResetToken", 'String'>
    readonly expires: FieldRef<"PasswordResetToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordResetToken findUnique
   */
  export type PasswordResetTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findUniqueOrThrow
   */
  export type PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findFirst
   */
  export type PasswordResetTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findFirstOrThrow
   */
  export type PasswordResetTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findMany
   */
  export type PasswordResetTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetTokens to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken create
   */
  export type PasswordResetTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
  }

  /**
   * PasswordResetToken createMany
   */
  export type PasswordResetTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordResetToken createManyAndReturn
   */
  export type PasswordResetTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordResetToken update
   */
  export type PasswordResetTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
    /**
     * Choose, which PasswordResetToken to update.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken updateMany
   */
  export type PasswordResetTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
  }

  /**
   * PasswordResetToken updateManyAndReturn
   */
  export type PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
  }

  /**
   * PasswordResetToken upsert
   */
  export type PasswordResetTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the PasswordResetToken to update in case it exists.
     */
    where: PasswordResetTokenWhereUniqueInput
    /**
     * In case the PasswordResetToken found by the `where` argument doesn't exist, create a new PasswordResetToken with this data.
     */
    create: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
    /**
     * In case the PasswordResetToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
  }

  /**
   * PasswordResetToken delete
   */
  export type PasswordResetTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter which PasswordResetToken to delete.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken deleteMany
   */
  export type PasswordResetTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetTokens to delete
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to delete.
     */
    limit?: number
  }

  /**
   * PasswordResetToken without action
   */
  export type PasswordResetTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
  }


  /**
   * Model TwoFactorToken
   */

  export type AggregateTwoFactorToken = {
    _count: TwoFactorTokenCountAggregateOutputType | null
    _min: TwoFactorTokenMinAggregateOutputType | null
    _max: TwoFactorTokenMaxAggregateOutputType | null
  }

  export type TwoFactorTokenMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
  }

  export type TwoFactorTokenMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
  }

  export type TwoFactorTokenCountAggregateOutputType = {
    id: number
    email: number
    token: number
    expires: number
    _all: number
  }


  export type TwoFactorTokenMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
  }

  export type TwoFactorTokenMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
  }

  export type TwoFactorTokenCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type TwoFactorTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TwoFactorToken to aggregate.
     */
    where?: TwoFactorTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwoFactorTokens to fetch.
     */
    orderBy?: TwoFactorTokenOrderByWithRelationInput | TwoFactorTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TwoFactorTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwoFactorTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwoFactorTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TwoFactorTokens
    **/
    _count?: true | TwoFactorTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TwoFactorTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TwoFactorTokenMaxAggregateInputType
  }

  export type GetTwoFactorTokenAggregateType<T extends TwoFactorTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateTwoFactorToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTwoFactorToken[P]>
      : GetScalarType<T[P], AggregateTwoFactorToken[P]>
  }




  export type TwoFactorTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TwoFactorTokenWhereInput
    orderBy?: TwoFactorTokenOrderByWithAggregationInput | TwoFactorTokenOrderByWithAggregationInput[]
    by: TwoFactorTokenScalarFieldEnum[] | TwoFactorTokenScalarFieldEnum
    having?: TwoFactorTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TwoFactorTokenCountAggregateInputType | true
    _min?: TwoFactorTokenMinAggregateInputType
    _max?: TwoFactorTokenMaxAggregateInputType
  }

  export type TwoFactorTokenGroupByOutputType = {
    id: string
    email: string
    token: string
    expires: Date
    _count: TwoFactorTokenCountAggregateOutputType | null
    _min: TwoFactorTokenMinAggregateOutputType | null
    _max: TwoFactorTokenMaxAggregateOutputType | null
  }

  type GetTwoFactorTokenGroupByPayload<T extends TwoFactorTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TwoFactorTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TwoFactorTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TwoFactorTokenGroupByOutputType[P]>
            : GetScalarType<T[P], TwoFactorTokenGroupByOutputType[P]>
        }
      >
    >


  export type TwoFactorTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["twoFactorToken"]>

  export type TwoFactorTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["twoFactorToken"]>

  export type TwoFactorTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["twoFactorToken"]>

  export type TwoFactorTokenSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
  }

  export type TwoFactorTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "token" | "expires", ExtArgs["result"]["twoFactorToken"]>

  export type $TwoFactorTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TwoFactorToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      expires: Date
    }, ExtArgs["result"]["twoFactorToken"]>
    composites: {}
  }

  type TwoFactorTokenGetPayload<S extends boolean | null | undefined | TwoFactorTokenDefaultArgs> = $Result.GetResult<Prisma.$TwoFactorTokenPayload, S>

  type TwoFactorTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TwoFactorTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TwoFactorTokenCountAggregateInputType | true
    }

  export interface TwoFactorTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TwoFactorToken'], meta: { name: 'TwoFactorToken' } }
    /**
     * Find zero or one TwoFactorToken that matches the filter.
     * @param {TwoFactorTokenFindUniqueArgs} args - Arguments to find a TwoFactorToken
     * @example
     * // Get one TwoFactorToken
     * const twoFactorToken = await prisma.twoFactorToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TwoFactorTokenFindUniqueArgs>(args: SelectSubset<T, TwoFactorTokenFindUniqueArgs<ExtArgs>>): Prisma__TwoFactorTokenClient<$Result.GetResult<Prisma.$TwoFactorTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TwoFactorToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TwoFactorTokenFindUniqueOrThrowArgs} args - Arguments to find a TwoFactorToken
     * @example
     * // Get one TwoFactorToken
     * const twoFactorToken = await prisma.twoFactorToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TwoFactorTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, TwoFactorTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TwoFactorTokenClient<$Result.GetResult<Prisma.$TwoFactorTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TwoFactorToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorTokenFindFirstArgs} args - Arguments to find a TwoFactorToken
     * @example
     * // Get one TwoFactorToken
     * const twoFactorToken = await prisma.twoFactorToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TwoFactorTokenFindFirstArgs>(args?: SelectSubset<T, TwoFactorTokenFindFirstArgs<ExtArgs>>): Prisma__TwoFactorTokenClient<$Result.GetResult<Prisma.$TwoFactorTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TwoFactorToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorTokenFindFirstOrThrowArgs} args - Arguments to find a TwoFactorToken
     * @example
     * // Get one TwoFactorToken
     * const twoFactorToken = await prisma.twoFactorToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TwoFactorTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, TwoFactorTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__TwoFactorTokenClient<$Result.GetResult<Prisma.$TwoFactorTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TwoFactorTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TwoFactorTokens
     * const twoFactorTokens = await prisma.twoFactorToken.findMany()
     * 
     * // Get first 10 TwoFactorTokens
     * const twoFactorTokens = await prisma.twoFactorToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const twoFactorTokenWithIdOnly = await prisma.twoFactorToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TwoFactorTokenFindManyArgs>(args?: SelectSubset<T, TwoFactorTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TwoFactorTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TwoFactorToken.
     * @param {TwoFactorTokenCreateArgs} args - Arguments to create a TwoFactorToken.
     * @example
     * // Create one TwoFactorToken
     * const TwoFactorToken = await prisma.twoFactorToken.create({
     *   data: {
     *     // ... data to create a TwoFactorToken
     *   }
     * })
     * 
     */
    create<T extends TwoFactorTokenCreateArgs>(args: SelectSubset<T, TwoFactorTokenCreateArgs<ExtArgs>>): Prisma__TwoFactorTokenClient<$Result.GetResult<Prisma.$TwoFactorTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TwoFactorTokens.
     * @param {TwoFactorTokenCreateManyArgs} args - Arguments to create many TwoFactorTokens.
     * @example
     * // Create many TwoFactorTokens
     * const twoFactorToken = await prisma.twoFactorToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TwoFactorTokenCreateManyArgs>(args?: SelectSubset<T, TwoFactorTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TwoFactorTokens and returns the data saved in the database.
     * @param {TwoFactorTokenCreateManyAndReturnArgs} args - Arguments to create many TwoFactorTokens.
     * @example
     * // Create many TwoFactorTokens
     * const twoFactorToken = await prisma.twoFactorToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TwoFactorTokens and only return the `id`
     * const twoFactorTokenWithIdOnly = await prisma.twoFactorToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TwoFactorTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, TwoFactorTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TwoFactorTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TwoFactorToken.
     * @param {TwoFactorTokenDeleteArgs} args - Arguments to delete one TwoFactorToken.
     * @example
     * // Delete one TwoFactorToken
     * const TwoFactorToken = await prisma.twoFactorToken.delete({
     *   where: {
     *     // ... filter to delete one TwoFactorToken
     *   }
     * })
     * 
     */
    delete<T extends TwoFactorTokenDeleteArgs>(args: SelectSubset<T, TwoFactorTokenDeleteArgs<ExtArgs>>): Prisma__TwoFactorTokenClient<$Result.GetResult<Prisma.$TwoFactorTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TwoFactorToken.
     * @param {TwoFactorTokenUpdateArgs} args - Arguments to update one TwoFactorToken.
     * @example
     * // Update one TwoFactorToken
     * const twoFactorToken = await prisma.twoFactorToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TwoFactorTokenUpdateArgs>(args: SelectSubset<T, TwoFactorTokenUpdateArgs<ExtArgs>>): Prisma__TwoFactorTokenClient<$Result.GetResult<Prisma.$TwoFactorTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TwoFactorTokens.
     * @param {TwoFactorTokenDeleteManyArgs} args - Arguments to filter TwoFactorTokens to delete.
     * @example
     * // Delete a few TwoFactorTokens
     * const { count } = await prisma.twoFactorToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TwoFactorTokenDeleteManyArgs>(args?: SelectSubset<T, TwoFactorTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TwoFactorTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TwoFactorTokens
     * const twoFactorToken = await prisma.twoFactorToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TwoFactorTokenUpdateManyArgs>(args: SelectSubset<T, TwoFactorTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TwoFactorTokens and returns the data updated in the database.
     * @param {TwoFactorTokenUpdateManyAndReturnArgs} args - Arguments to update many TwoFactorTokens.
     * @example
     * // Update many TwoFactorTokens
     * const twoFactorToken = await prisma.twoFactorToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TwoFactorTokens and only return the `id`
     * const twoFactorTokenWithIdOnly = await prisma.twoFactorToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TwoFactorTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, TwoFactorTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TwoFactorTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TwoFactorToken.
     * @param {TwoFactorTokenUpsertArgs} args - Arguments to update or create a TwoFactorToken.
     * @example
     * // Update or create a TwoFactorToken
     * const twoFactorToken = await prisma.twoFactorToken.upsert({
     *   create: {
     *     // ... data to create a TwoFactorToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TwoFactorToken we want to update
     *   }
     * })
     */
    upsert<T extends TwoFactorTokenUpsertArgs>(args: SelectSubset<T, TwoFactorTokenUpsertArgs<ExtArgs>>): Prisma__TwoFactorTokenClient<$Result.GetResult<Prisma.$TwoFactorTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TwoFactorTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorTokenCountArgs} args - Arguments to filter TwoFactorTokens to count.
     * @example
     * // Count the number of TwoFactorTokens
     * const count = await prisma.twoFactorToken.count({
     *   where: {
     *     // ... the filter for the TwoFactorTokens we want to count
     *   }
     * })
    **/
    count<T extends TwoFactorTokenCountArgs>(
      args?: Subset<T, TwoFactorTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TwoFactorTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TwoFactorToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TwoFactorTokenAggregateArgs>(args: Subset<T, TwoFactorTokenAggregateArgs>): Prisma.PrismaPromise<GetTwoFactorTokenAggregateType<T>>

    /**
     * Group by TwoFactorToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TwoFactorTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TwoFactorTokenGroupByArgs['orderBy'] }
        : { orderBy?: TwoFactorTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TwoFactorTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTwoFactorTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TwoFactorToken model
   */
  readonly fields: TwoFactorTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TwoFactorToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TwoFactorTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TwoFactorToken model
   */
  interface TwoFactorTokenFieldRefs {
    readonly id: FieldRef<"TwoFactorToken", 'String'>
    readonly email: FieldRef<"TwoFactorToken", 'String'>
    readonly token: FieldRef<"TwoFactorToken", 'String'>
    readonly expires: FieldRef<"TwoFactorToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TwoFactorToken findUnique
   */
  export type TwoFactorTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorToken
     */
    select?: TwoFactorTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorToken
     */
    omit?: TwoFactorTokenOmit<ExtArgs> | null
    /**
     * Filter, which TwoFactorToken to fetch.
     */
    where: TwoFactorTokenWhereUniqueInput
  }

  /**
   * TwoFactorToken findUniqueOrThrow
   */
  export type TwoFactorTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorToken
     */
    select?: TwoFactorTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorToken
     */
    omit?: TwoFactorTokenOmit<ExtArgs> | null
    /**
     * Filter, which TwoFactorToken to fetch.
     */
    where: TwoFactorTokenWhereUniqueInput
  }

  /**
   * TwoFactorToken findFirst
   */
  export type TwoFactorTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorToken
     */
    select?: TwoFactorTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorToken
     */
    omit?: TwoFactorTokenOmit<ExtArgs> | null
    /**
     * Filter, which TwoFactorToken to fetch.
     */
    where?: TwoFactorTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwoFactorTokens to fetch.
     */
    orderBy?: TwoFactorTokenOrderByWithRelationInput | TwoFactorTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwoFactorTokens.
     */
    cursor?: TwoFactorTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwoFactorTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwoFactorTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwoFactorTokens.
     */
    distinct?: TwoFactorTokenScalarFieldEnum | TwoFactorTokenScalarFieldEnum[]
  }

  /**
   * TwoFactorToken findFirstOrThrow
   */
  export type TwoFactorTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorToken
     */
    select?: TwoFactorTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorToken
     */
    omit?: TwoFactorTokenOmit<ExtArgs> | null
    /**
     * Filter, which TwoFactorToken to fetch.
     */
    where?: TwoFactorTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwoFactorTokens to fetch.
     */
    orderBy?: TwoFactorTokenOrderByWithRelationInput | TwoFactorTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwoFactorTokens.
     */
    cursor?: TwoFactorTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwoFactorTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwoFactorTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwoFactorTokens.
     */
    distinct?: TwoFactorTokenScalarFieldEnum | TwoFactorTokenScalarFieldEnum[]
  }

  /**
   * TwoFactorToken findMany
   */
  export type TwoFactorTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorToken
     */
    select?: TwoFactorTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorToken
     */
    omit?: TwoFactorTokenOmit<ExtArgs> | null
    /**
     * Filter, which TwoFactorTokens to fetch.
     */
    where?: TwoFactorTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwoFactorTokens to fetch.
     */
    orderBy?: TwoFactorTokenOrderByWithRelationInput | TwoFactorTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TwoFactorTokens.
     */
    cursor?: TwoFactorTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwoFactorTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwoFactorTokens.
     */
    skip?: number
    distinct?: TwoFactorTokenScalarFieldEnum | TwoFactorTokenScalarFieldEnum[]
  }

  /**
   * TwoFactorToken create
   */
  export type TwoFactorTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorToken
     */
    select?: TwoFactorTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorToken
     */
    omit?: TwoFactorTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a TwoFactorToken.
     */
    data: XOR<TwoFactorTokenCreateInput, TwoFactorTokenUncheckedCreateInput>
  }

  /**
   * TwoFactorToken createMany
   */
  export type TwoFactorTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TwoFactorTokens.
     */
    data: TwoFactorTokenCreateManyInput | TwoFactorTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TwoFactorToken createManyAndReturn
   */
  export type TwoFactorTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorToken
     */
    select?: TwoFactorTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorToken
     */
    omit?: TwoFactorTokenOmit<ExtArgs> | null
    /**
     * The data used to create many TwoFactorTokens.
     */
    data: TwoFactorTokenCreateManyInput | TwoFactorTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TwoFactorToken update
   */
  export type TwoFactorTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorToken
     */
    select?: TwoFactorTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorToken
     */
    omit?: TwoFactorTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a TwoFactorToken.
     */
    data: XOR<TwoFactorTokenUpdateInput, TwoFactorTokenUncheckedUpdateInput>
    /**
     * Choose, which TwoFactorToken to update.
     */
    where: TwoFactorTokenWhereUniqueInput
  }

  /**
   * TwoFactorToken updateMany
   */
  export type TwoFactorTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TwoFactorTokens.
     */
    data: XOR<TwoFactorTokenUpdateManyMutationInput, TwoFactorTokenUncheckedUpdateManyInput>
    /**
     * Filter which TwoFactorTokens to update
     */
    where?: TwoFactorTokenWhereInput
    /**
     * Limit how many TwoFactorTokens to update.
     */
    limit?: number
  }

  /**
   * TwoFactorToken updateManyAndReturn
   */
  export type TwoFactorTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorToken
     */
    select?: TwoFactorTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorToken
     */
    omit?: TwoFactorTokenOmit<ExtArgs> | null
    /**
     * The data used to update TwoFactorTokens.
     */
    data: XOR<TwoFactorTokenUpdateManyMutationInput, TwoFactorTokenUncheckedUpdateManyInput>
    /**
     * Filter which TwoFactorTokens to update
     */
    where?: TwoFactorTokenWhereInput
    /**
     * Limit how many TwoFactorTokens to update.
     */
    limit?: number
  }

  /**
   * TwoFactorToken upsert
   */
  export type TwoFactorTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorToken
     */
    select?: TwoFactorTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorToken
     */
    omit?: TwoFactorTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the TwoFactorToken to update in case it exists.
     */
    where: TwoFactorTokenWhereUniqueInput
    /**
     * In case the TwoFactorToken found by the `where` argument doesn't exist, create a new TwoFactorToken with this data.
     */
    create: XOR<TwoFactorTokenCreateInput, TwoFactorTokenUncheckedCreateInput>
    /**
     * In case the TwoFactorToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TwoFactorTokenUpdateInput, TwoFactorTokenUncheckedUpdateInput>
  }

  /**
   * TwoFactorToken delete
   */
  export type TwoFactorTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorToken
     */
    select?: TwoFactorTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorToken
     */
    omit?: TwoFactorTokenOmit<ExtArgs> | null
    /**
     * Filter which TwoFactorToken to delete.
     */
    where: TwoFactorTokenWhereUniqueInput
  }

  /**
   * TwoFactorToken deleteMany
   */
  export type TwoFactorTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TwoFactorTokens to delete
     */
    where?: TwoFactorTokenWhereInput
    /**
     * Limit how many TwoFactorTokens to delete.
     */
    limit?: number
  }

  /**
   * TwoFactorToken without action
   */
  export type TwoFactorTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorToken
     */
    select?: TwoFactorTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorToken
     */
    omit?: TwoFactorTokenOmit<ExtArgs> | null
  }


  /**
   * Model TwoFactorConfirmation
   */

  export type AggregateTwoFactorConfirmation = {
    _count: TwoFactorConfirmationCountAggregateOutputType | null
    _min: TwoFactorConfirmationMinAggregateOutputType | null
    _max: TwoFactorConfirmationMaxAggregateOutputType | null
  }

  export type TwoFactorConfirmationMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type TwoFactorConfirmationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type TwoFactorConfirmationCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type TwoFactorConfirmationMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TwoFactorConfirmationMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TwoFactorConfirmationCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type TwoFactorConfirmationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TwoFactorConfirmation to aggregate.
     */
    where?: TwoFactorConfirmationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwoFactorConfirmations to fetch.
     */
    orderBy?: TwoFactorConfirmationOrderByWithRelationInput | TwoFactorConfirmationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TwoFactorConfirmationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwoFactorConfirmations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwoFactorConfirmations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TwoFactorConfirmations
    **/
    _count?: true | TwoFactorConfirmationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TwoFactorConfirmationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TwoFactorConfirmationMaxAggregateInputType
  }

  export type GetTwoFactorConfirmationAggregateType<T extends TwoFactorConfirmationAggregateArgs> = {
        [P in keyof T & keyof AggregateTwoFactorConfirmation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTwoFactorConfirmation[P]>
      : GetScalarType<T[P], AggregateTwoFactorConfirmation[P]>
  }




  export type TwoFactorConfirmationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TwoFactorConfirmationWhereInput
    orderBy?: TwoFactorConfirmationOrderByWithAggregationInput | TwoFactorConfirmationOrderByWithAggregationInput[]
    by: TwoFactorConfirmationScalarFieldEnum[] | TwoFactorConfirmationScalarFieldEnum
    having?: TwoFactorConfirmationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TwoFactorConfirmationCountAggregateInputType | true
    _min?: TwoFactorConfirmationMinAggregateInputType
    _max?: TwoFactorConfirmationMaxAggregateInputType
  }

  export type TwoFactorConfirmationGroupByOutputType = {
    id: string
    userId: string
    _count: TwoFactorConfirmationCountAggregateOutputType | null
    _min: TwoFactorConfirmationMinAggregateOutputType | null
    _max: TwoFactorConfirmationMaxAggregateOutputType | null
  }

  type GetTwoFactorConfirmationGroupByPayload<T extends TwoFactorConfirmationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TwoFactorConfirmationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TwoFactorConfirmationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TwoFactorConfirmationGroupByOutputType[P]>
            : GetScalarType<T[P], TwoFactorConfirmationGroupByOutputType[P]>
        }
      >
    >


  export type TwoFactorConfirmationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["twoFactorConfirmation"]>

  export type TwoFactorConfirmationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["twoFactorConfirmation"]>

  export type TwoFactorConfirmationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["twoFactorConfirmation"]>

  export type TwoFactorConfirmationSelectScalar = {
    id?: boolean
    userId?: boolean
  }

  export type TwoFactorConfirmationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId", ExtArgs["result"]["twoFactorConfirmation"]>
  export type TwoFactorConfirmationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TwoFactorConfirmationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TwoFactorConfirmationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TwoFactorConfirmationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TwoFactorConfirmation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
    }, ExtArgs["result"]["twoFactorConfirmation"]>
    composites: {}
  }

  type TwoFactorConfirmationGetPayload<S extends boolean | null | undefined | TwoFactorConfirmationDefaultArgs> = $Result.GetResult<Prisma.$TwoFactorConfirmationPayload, S>

  type TwoFactorConfirmationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TwoFactorConfirmationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TwoFactorConfirmationCountAggregateInputType | true
    }

  export interface TwoFactorConfirmationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TwoFactorConfirmation'], meta: { name: 'TwoFactorConfirmation' } }
    /**
     * Find zero or one TwoFactorConfirmation that matches the filter.
     * @param {TwoFactorConfirmationFindUniqueArgs} args - Arguments to find a TwoFactorConfirmation
     * @example
     * // Get one TwoFactorConfirmation
     * const twoFactorConfirmation = await prisma.twoFactorConfirmation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TwoFactorConfirmationFindUniqueArgs>(args: SelectSubset<T, TwoFactorConfirmationFindUniqueArgs<ExtArgs>>): Prisma__TwoFactorConfirmationClient<$Result.GetResult<Prisma.$TwoFactorConfirmationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TwoFactorConfirmation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TwoFactorConfirmationFindUniqueOrThrowArgs} args - Arguments to find a TwoFactorConfirmation
     * @example
     * // Get one TwoFactorConfirmation
     * const twoFactorConfirmation = await prisma.twoFactorConfirmation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TwoFactorConfirmationFindUniqueOrThrowArgs>(args: SelectSubset<T, TwoFactorConfirmationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TwoFactorConfirmationClient<$Result.GetResult<Prisma.$TwoFactorConfirmationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TwoFactorConfirmation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorConfirmationFindFirstArgs} args - Arguments to find a TwoFactorConfirmation
     * @example
     * // Get one TwoFactorConfirmation
     * const twoFactorConfirmation = await prisma.twoFactorConfirmation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TwoFactorConfirmationFindFirstArgs>(args?: SelectSubset<T, TwoFactorConfirmationFindFirstArgs<ExtArgs>>): Prisma__TwoFactorConfirmationClient<$Result.GetResult<Prisma.$TwoFactorConfirmationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TwoFactorConfirmation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorConfirmationFindFirstOrThrowArgs} args - Arguments to find a TwoFactorConfirmation
     * @example
     * // Get one TwoFactorConfirmation
     * const twoFactorConfirmation = await prisma.twoFactorConfirmation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TwoFactorConfirmationFindFirstOrThrowArgs>(args?: SelectSubset<T, TwoFactorConfirmationFindFirstOrThrowArgs<ExtArgs>>): Prisma__TwoFactorConfirmationClient<$Result.GetResult<Prisma.$TwoFactorConfirmationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TwoFactorConfirmations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorConfirmationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TwoFactorConfirmations
     * const twoFactorConfirmations = await prisma.twoFactorConfirmation.findMany()
     * 
     * // Get first 10 TwoFactorConfirmations
     * const twoFactorConfirmations = await prisma.twoFactorConfirmation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const twoFactorConfirmationWithIdOnly = await prisma.twoFactorConfirmation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TwoFactorConfirmationFindManyArgs>(args?: SelectSubset<T, TwoFactorConfirmationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TwoFactorConfirmationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TwoFactorConfirmation.
     * @param {TwoFactorConfirmationCreateArgs} args - Arguments to create a TwoFactorConfirmation.
     * @example
     * // Create one TwoFactorConfirmation
     * const TwoFactorConfirmation = await prisma.twoFactorConfirmation.create({
     *   data: {
     *     // ... data to create a TwoFactorConfirmation
     *   }
     * })
     * 
     */
    create<T extends TwoFactorConfirmationCreateArgs>(args: SelectSubset<T, TwoFactorConfirmationCreateArgs<ExtArgs>>): Prisma__TwoFactorConfirmationClient<$Result.GetResult<Prisma.$TwoFactorConfirmationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TwoFactorConfirmations.
     * @param {TwoFactorConfirmationCreateManyArgs} args - Arguments to create many TwoFactorConfirmations.
     * @example
     * // Create many TwoFactorConfirmations
     * const twoFactorConfirmation = await prisma.twoFactorConfirmation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TwoFactorConfirmationCreateManyArgs>(args?: SelectSubset<T, TwoFactorConfirmationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TwoFactorConfirmations and returns the data saved in the database.
     * @param {TwoFactorConfirmationCreateManyAndReturnArgs} args - Arguments to create many TwoFactorConfirmations.
     * @example
     * // Create many TwoFactorConfirmations
     * const twoFactorConfirmation = await prisma.twoFactorConfirmation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TwoFactorConfirmations and only return the `id`
     * const twoFactorConfirmationWithIdOnly = await prisma.twoFactorConfirmation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TwoFactorConfirmationCreateManyAndReturnArgs>(args?: SelectSubset<T, TwoFactorConfirmationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TwoFactorConfirmationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TwoFactorConfirmation.
     * @param {TwoFactorConfirmationDeleteArgs} args - Arguments to delete one TwoFactorConfirmation.
     * @example
     * // Delete one TwoFactorConfirmation
     * const TwoFactorConfirmation = await prisma.twoFactorConfirmation.delete({
     *   where: {
     *     // ... filter to delete one TwoFactorConfirmation
     *   }
     * })
     * 
     */
    delete<T extends TwoFactorConfirmationDeleteArgs>(args: SelectSubset<T, TwoFactorConfirmationDeleteArgs<ExtArgs>>): Prisma__TwoFactorConfirmationClient<$Result.GetResult<Prisma.$TwoFactorConfirmationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TwoFactorConfirmation.
     * @param {TwoFactorConfirmationUpdateArgs} args - Arguments to update one TwoFactorConfirmation.
     * @example
     * // Update one TwoFactorConfirmation
     * const twoFactorConfirmation = await prisma.twoFactorConfirmation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TwoFactorConfirmationUpdateArgs>(args: SelectSubset<T, TwoFactorConfirmationUpdateArgs<ExtArgs>>): Prisma__TwoFactorConfirmationClient<$Result.GetResult<Prisma.$TwoFactorConfirmationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TwoFactorConfirmations.
     * @param {TwoFactorConfirmationDeleteManyArgs} args - Arguments to filter TwoFactorConfirmations to delete.
     * @example
     * // Delete a few TwoFactorConfirmations
     * const { count } = await prisma.twoFactorConfirmation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TwoFactorConfirmationDeleteManyArgs>(args?: SelectSubset<T, TwoFactorConfirmationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TwoFactorConfirmations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorConfirmationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TwoFactorConfirmations
     * const twoFactorConfirmation = await prisma.twoFactorConfirmation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TwoFactorConfirmationUpdateManyArgs>(args: SelectSubset<T, TwoFactorConfirmationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TwoFactorConfirmations and returns the data updated in the database.
     * @param {TwoFactorConfirmationUpdateManyAndReturnArgs} args - Arguments to update many TwoFactorConfirmations.
     * @example
     * // Update many TwoFactorConfirmations
     * const twoFactorConfirmation = await prisma.twoFactorConfirmation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TwoFactorConfirmations and only return the `id`
     * const twoFactorConfirmationWithIdOnly = await prisma.twoFactorConfirmation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TwoFactorConfirmationUpdateManyAndReturnArgs>(args: SelectSubset<T, TwoFactorConfirmationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TwoFactorConfirmationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TwoFactorConfirmation.
     * @param {TwoFactorConfirmationUpsertArgs} args - Arguments to update or create a TwoFactorConfirmation.
     * @example
     * // Update or create a TwoFactorConfirmation
     * const twoFactorConfirmation = await prisma.twoFactorConfirmation.upsert({
     *   create: {
     *     // ... data to create a TwoFactorConfirmation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TwoFactorConfirmation we want to update
     *   }
     * })
     */
    upsert<T extends TwoFactorConfirmationUpsertArgs>(args: SelectSubset<T, TwoFactorConfirmationUpsertArgs<ExtArgs>>): Prisma__TwoFactorConfirmationClient<$Result.GetResult<Prisma.$TwoFactorConfirmationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TwoFactorConfirmations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorConfirmationCountArgs} args - Arguments to filter TwoFactorConfirmations to count.
     * @example
     * // Count the number of TwoFactorConfirmations
     * const count = await prisma.twoFactorConfirmation.count({
     *   where: {
     *     // ... the filter for the TwoFactorConfirmations we want to count
     *   }
     * })
    **/
    count<T extends TwoFactorConfirmationCountArgs>(
      args?: Subset<T, TwoFactorConfirmationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TwoFactorConfirmationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TwoFactorConfirmation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorConfirmationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TwoFactorConfirmationAggregateArgs>(args: Subset<T, TwoFactorConfirmationAggregateArgs>): Prisma.PrismaPromise<GetTwoFactorConfirmationAggregateType<T>>

    /**
     * Group by TwoFactorConfirmation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorConfirmationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TwoFactorConfirmationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TwoFactorConfirmationGroupByArgs['orderBy'] }
        : { orderBy?: TwoFactorConfirmationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TwoFactorConfirmationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTwoFactorConfirmationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TwoFactorConfirmation model
   */
  readonly fields: TwoFactorConfirmationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TwoFactorConfirmation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TwoFactorConfirmationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TwoFactorConfirmation model
   */
  interface TwoFactorConfirmationFieldRefs {
    readonly id: FieldRef<"TwoFactorConfirmation", 'String'>
    readonly userId: FieldRef<"TwoFactorConfirmation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TwoFactorConfirmation findUnique
   */
  export type TwoFactorConfirmationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationInclude<ExtArgs> | null
    /**
     * Filter, which TwoFactorConfirmation to fetch.
     */
    where: TwoFactorConfirmationWhereUniqueInput
  }

  /**
   * TwoFactorConfirmation findUniqueOrThrow
   */
  export type TwoFactorConfirmationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationInclude<ExtArgs> | null
    /**
     * Filter, which TwoFactorConfirmation to fetch.
     */
    where: TwoFactorConfirmationWhereUniqueInput
  }

  /**
   * TwoFactorConfirmation findFirst
   */
  export type TwoFactorConfirmationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationInclude<ExtArgs> | null
    /**
     * Filter, which TwoFactorConfirmation to fetch.
     */
    where?: TwoFactorConfirmationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwoFactorConfirmations to fetch.
     */
    orderBy?: TwoFactorConfirmationOrderByWithRelationInput | TwoFactorConfirmationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwoFactorConfirmations.
     */
    cursor?: TwoFactorConfirmationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwoFactorConfirmations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwoFactorConfirmations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwoFactorConfirmations.
     */
    distinct?: TwoFactorConfirmationScalarFieldEnum | TwoFactorConfirmationScalarFieldEnum[]
  }

  /**
   * TwoFactorConfirmation findFirstOrThrow
   */
  export type TwoFactorConfirmationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationInclude<ExtArgs> | null
    /**
     * Filter, which TwoFactorConfirmation to fetch.
     */
    where?: TwoFactorConfirmationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwoFactorConfirmations to fetch.
     */
    orderBy?: TwoFactorConfirmationOrderByWithRelationInput | TwoFactorConfirmationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwoFactorConfirmations.
     */
    cursor?: TwoFactorConfirmationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwoFactorConfirmations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwoFactorConfirmations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwoFactorConfirmations.
     */
    distinct?: TwoFactorConfirmationScalarFieldEnum | TwoFactorConfirmationScalarFieldEnum[]
  }

  /**
   * TwoFactorConfirmation findMany
   */
  export type TwoFactorConfirmationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationInclude<ExtArgs> | null
    /**
     * Filter, which TwoFactorConfirmations to fetch.
     */
    where?: TwoFactorConfirmationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwoFactorConfirmations to fetch.
     */
    orderBy?: TwoFactorConfirmationOrderByWithRelationInput | TwoFactorConfirmationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TwoFactorConfirmations.
     */
    cursor?: TwoFactorConfirmationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwoFactorConfirmations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwoFactorConfirmations.
     */
    skip?: number
    distinct?: TwoFactorConfirmationScalarFieldEnum | TwoFactorConfirmationScalarFieldEnum[]
  }

  /**
   * TwoFactorConfirmation create
   */
  export type TwoFactorConfirmationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationInclude<ExtArgs> | null
    /**
     * The data needed to create a TwoFactorConfirmation.
     */
    data: XOR<TwoFactorConfirmationCreateInput, TwoFactorConfirmationUncheckedCreateInput>
  }

  /**
   * TwoFactorConfirmation createMany
   */
  export type TwoFactorConfirmationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TwoFactorConfirmations.
     */
    data: TwoFactorConfirmationCreateManyInput | TwoFactorConfirmationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TwoFactorConfirmation createManyAndReturn
   */
  export type TwoFactorConfirmationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * The data used to create many TwoFactorConfirmations.
     */
    data: TwoFactorConfirmationCreateManyInput | TwoFactorConfirmationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TwoFactorConfirmation update
   */
  export type TwoFactorConfirmationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationInclude<ExtArgs> | null
    /**
     * The data needed to update a TwoFactorConfirmation.
     */
    data: XOR<TwoFactorConfirmationUpdateInput, TwoFactorConfirmationUncheckedUpdateInput>
    /**
     * Choose, which TwoFactorConfirmation to update.
     */
    where: TwoFactorConfirmationWhereUniqueInput
  }

  /**
   * TwoFactorConfirmation updateMany
   */
  export type TwoFactorConfirmationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TwoFactorConfirmations.
     */
    data: XOR<TwoFactorConfirmationUpdateManyMutationInput, TwoFactorConfirmationUncheckedUpdateManyInput>
    /**
     * Filter which TwoFactorConfirmations to update
     */
    where?: TwoFactorConfirmationWhereInput
    /**
     * Limit how many TwoFactorConfirmations to update.
     */
    limit?: number
  }

  /**
   * TwoFactorConfirmation updateManyAndReturn
   */
  export type TwoFactorConfirmationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * The data used to update TwoFactorConfirmations.
     */
    data: XOR<TwoFactorConfirmationUpdateManyMutationInput, TwoFactorConfirmationUncheckedUpdateManyInput>
    /**
     * Filter which TwoFactorConfirmations to update
     */
    where?: TwoFactorConfirmationWhereInput
    /**
     * Limit how many TwoFactorConfirmations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TwoFactorConfirmation upsert
   */
  export type TwoFactorConfirmationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationInclude<ExtArgs> | null
    /**
     * The filter to search for the TwoFactorConfirmation to update in case it exists.
     */
    where: TwoFactorConfirmationWhereUniqueInput
    /**
     * In case the TwoFactorConfirmation found by the `where` argument doesn't exist, create a new TwoFactorConfirmation with this data.
     */
    create: XOR<TwoFactorConfirmationCreateInput, TwoFactorConfirmationUncheckedCreateInput>
    /**
     * In case the TwoFactorConfirmation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TwoFactorConfirmationUpdateInput, TwoFactorConfirmationUncheckedUpdateInput>
  }

  /**
   * TwoFactorConfirmation delete
   */
  export type TwoFactorConfirmationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationInclude<ExtArgs> | null
    /**
     * Filter which TwoFactorConfirmation to delete.
     */
    where: TwoFactorConfirmationWhereUniqueInput
  }

  /**
   * TwoFactorConfirmation deleteMany
   */
  export type TwoFactorConfirmationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TwoFactorConfirmations to delete
     */
    where?: TwoFactorConfirmationWhereInput
    /**
     * Limit how many TwoFactorConfirmations to delete.
     */
    limit?: number
  }

  /**
   * TwoFactorConfirmation without action
   */
  export type TwoFactorConfirmationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    password: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    image: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string
    emailVerified: Date | null
    password: string | null
    role: $Enums.UserRole
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    image: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    twoFactorConfirmation?: boolean | User$twoFactorConfirmationArgs<ExtArgs>
    createdContracts?: boolean | User$createdContractsArgs<ExtArgs>
    modifiedContracts?: boolean | User$modifiedContractsArgs<ExtArgs>
    uploadedAttachments?: boolean | User$uploadedAttachmentsArgs<ExtArgs>
    acknowledgedReminders?: boolean | User$acknowledgedRemindersArgs<ExtArgs>
    submittedComplaints?: boolean | User$submittedComplaintsArgs<ExtArgs>
    assignedComplaints?: boolean | User$assignedComplaintsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    notificationPreferences?: boolean | User$notificationPreferencesArgs<ExtArgs>
    createdHumanitarianRenewals?: boolean | User$createdHumanitarianRenewalsArgs<ExtArgs>
    modifiedHumanitarianRenewals?: boolean | User$modifiedHumanitarianRenewalsArgs<ExtArgs>
    senderBlacklists?: boolean | User$senderBlacklistsArgs<ExtArgs>
    modifiedBlacklists?: boolean | User$modifiedBlacklistsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    createdRenewals?: boolean | User$createdRenewalsArgs<ExtArgs>
    modifiedRenewals?: boolean | User$modifiedRenewalsArgs<ExtArgs>
    uploadedRenewalFiles?: boolean | User$uploadedRenewalFilesArgs<ExtArgs>
    createdParkingServices?: boolean | User$createdParkingServicesArgs<ExtArgs>
    logEntries?: boolean | User$logEntriesArgs<ExtArgs>
    updatedLogs?: boolean | User$updatedLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "password" | "role" | "isActive" | "createdAt" | "updatedAt" | "image", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    twoFactorConfirmation?: boolean | User$twoFactorConfirmationArgs<ExtArgs>
    createdContracts?: boolean | User$createdContractsArgs<ExtArgs>
    modifiedContracts?: boolean | User$modifiedContractsArgs<ExtArgs>
    uploadedAttachments?: boolean | User$uploadedAttachmentsArgs<ExtArgs>
    acknowledgedReminders?: boolean | User$acknowledgedRemindersArgs<ExtArgs>
    submittedComplaints?: boolean | User$submittedComplaintsArgs<ExtArgs>
    assignedComplaints?: boolean | User$assignedComplaintsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    notificationPreferences?: boolean | User$notificationPreferencesArgs<ExtArgs>
    createdHumanitarianRenewals?: boolean | User$createdHumanitarianRenewalsArgs<ExtArgs>
    modifiedHumanitarianRenewals?: boolean | User$modifiedHumanitarianRenewalsArgs<ExtArgs>
    senderBlacklists?: boolean | User$senderBlacklistsArgs<ExtArgs>
    modifiedBlacklists?: boolean | User$modifiedBlacklistsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    createdRenewals?: boolean | User$createdRenewalsArgs<ExtArgs>
    modifiedRenewals?: boolean | User$modifiedRenewalsArgs<ExtArgs>
    uploadedRenewalFiles?: boolean | User$uploadedRenewalFilesArgs<ExtArgs>
    createdParkingServices?: boolean | User$createdParkingServicesArgs<ExtArgs>
    logEntries?: boolean | User$logEntriesArgs<ExtArgs>
    updatedLogs?: boolean | User$updatedLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      twoFactorConfirmation: Prisma.$TwoFactorConfirmationPayload<ExtArgs> | null
      createdContracts: Prisma.$ContractPayload<ExtArgs>[]
      modifiedContracts: Prisma.$ContractPayload<ExtArgs>[]
      uploadedAttachments: Prisma.$ContractAttachmentPayload<ExtArgs>[]
      acknowledgedReminders: Prisma.$ContractReminderPayload<ExtArgs>[]
      submittedComplaints: Prisma.$ComplaintPayload<ExtArgs>[]
      assignedComplaints: Prisma.$ComplaintPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      activities: Prisma.$ActivityLogPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      notificationPreferences: Prisma.$NotificationPreferencePayload<ExtArgs> | null
      createdHumanitarianRenewals: Prisma.$HumanitarianContractRenewalPayload<ExtArgs>[]
      modifiedHumanitarianRenewals: Prisma.$HumanitarianContractRenewalPayload<ExtArgs>[]
      senderBlacklists: Prisma.$SenderBlacklistPayload<ExtArgs>[]
      modifiedBlacklists: Prisma.$SenderBlacklistPayload<ExtArgs>[]
      auditLogs: Prisma.$BlacklistLogPayload<ExtArgs>[]
      createdRenewals: Prisma.$ContractRenewalPayload<ExtArgs>[]
      modifiedRenewals: Prisma.$ContractRenewalPayload<ExtArgs>[]
      uploadedRenewalFiles: Prisma.$ContractRenewalAttachmentPayload<ExtArgs>[]
      createdParkingServices: Prisma.$ParkingServicePayload<ExtArgs>[]
      logEntries: Prisma.$LogEntryPayload<ExtArgs>[]
      updatedLogs: Prisma.$LogEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string
      emailVerified: Date | null
      password: string | null
      role: $Enums.UserRole
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      image: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    twoFactorConfirmation<T extends User$twoFactorConfirmationArgs<ExtArgs> = {}>(args?: Subset<T, User$twoFactorConfirmationArgs<ExtArgs>>): Prisma__TwoFactorConfirmationClient<$Result.GetResult<Prisma.$TwoFactorConfirmationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdContracts<T extends User$createdContractsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdContractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    modifiedContracts<T extends User$modifiedContractsArgs<ExtArgs> = {}>(args?: Subset<T, User$modifiedContractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    uploadedAttachments<T extends User$uploadedAttachmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadedAttachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    acknowledgedReminders<T extends User$acknowledgedRemindersArgs<ExtArgs> = {}>(args?: Subset<T, User$acknowledgedRemindersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submittedComplaints<T extends User$submittedComplaintsArgs<ExtArgs> = {}>(args?: Subset<T, User$submittedComplaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedComplaints<T extends User$assignedComplaintsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedComplaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activities<T extends User$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationPreferences<T extends User$notificationPreferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationPreferencesArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdHumanitarianRenewals<T extends User$createdHumanitarianRenewalsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdHumanitarianRenewalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    modifiedHumanitarianRenewals<T extends User$modifiedHumanitarianRenewalsArgs<ExtArgs> = {}>(args?: Subset<T, User$modifiedHumanitarianRenewalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    senderBlacklists<T extends User$senderBlacklistsArgs<ExtArgs> = {}>(args?: Subset<T, User$senderBlacklistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    modifiedBlacklists<T extends User$modifiedBlacklistsArgs<ExtArgs> = {}>(args?: Subset<T, User$modifiedBlacklistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdRenewals<T extends User$createdRenewalsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdRenewalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    modifiedRenewals<T extends User$modifiedRenewalsArgs<ExtArgs> = {}>(args?: Subset<T, User$modifiedRenewalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    uploadedRenewalFiles<T extends User$uploadedRenewalFilesArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadedRenewalFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdParkingServices<T extends User$createdParkingServicesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdParkingServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logEntries<T extends User$logEntriesArgs<ExtArgs> = {}>(args?: Subset<T, User$logEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    updatedLogs<T extends User$updatedLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.twoFactorConfirmation
   */
  export type User$twoFactorConfirmationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactorConfirmation
     */
    select?: TwoFactorConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactorConfirmation
     */
    omit?: TwoFactorConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorConfirmationInclude<ExtArgs> | null
    where?: TwoFactorConfirmationWhereInput
  }

  /**
   * User.createdContracts
   */
  export type User$createdContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * User.modifiedContracts
   */
  export type User$modifiedContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * User.uploadedAttachments
   */
  export type User$uploadedAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentInclude<ExtArgs> | null
    where?: ContractAttachmentWhereInput
    orderBy?: ContractAttachmentOrderByWithRelationInput | ContractAttachmentOrderByWithRelationInput[]
    cursor?: ContractAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractAttachmentScalarFieldEnum | ContractAttachmentScalarFieldEnum[]
  }

  /**
   * User.acknowledgedReminders
   */
  export type User$acknowledgedRemindersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderInclude<ExtArgs> | null
    where?: ContractReminderWhereInput
    orderBy?: ContractReminderOrderByWithRelationInput | ContractReminderOrderByWithRelationInput[]
    cursor?: ContractReminderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractReminderScalarFieldEnum | ContractReminderScalarFieldEnum[]
  }

  /**
   * User.submittedComplaints
   */
  export type User$submittedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * User.assignedComplaints
   */
  export type User$assignedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.activities
   */
  export type User$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    cursor?: ActivityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.notificationPreferences
   */
  export type User$notificationPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    where?: NotificationPreferenceWhereInput
  }

  /**
   * User.createdHumanitarianRenewals
   */
  export type User$createdHumanitarianRenewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    where?: HumanitarianContractRenewalWhereInput
    orderBy?: HumanitarianContractRenewalOrderByWithRelationInput | HumanitarianContractRenewalOrderByWithRelationInput[]
    cursor?: HumanitarianContractRenewalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HumanitarianContractRenewalScalarFieldEnum | HumanitarianContractRenewalScalarFieldEnum[]
  }

  /**
   * User.modifiedHumanitarianRenewals
   */
  export type User$modifiedHumanitarianRenewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    where?: HumanitarianContractRenewalWhereInput
    orderBy?: HumanitarianContractRenewalOrderByWithRelationInput | HumanitarianContractRenewalOrderByWithRelationInput[]
    cursor?: HumanitarianContractRenewalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HumanitarianContractRenewalScalarFieldEnum | HumanitarianContractRenewalScalarFieldEnum[]
  }

  /**
   * User.senderBlacklists
   */
  export type User$senderBlacklistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
    where?: SenderBlacklistWhereInput
    orderBy?: SenderBlacklistOrderByWithRelationInput | SenderBlacklistOrderByWithRelationInput[]
    cursor?: SenderBlacklistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SenderBlacklistScalarFieldEnum | SenderBlacklistScalarFieldEnum[]
  }

  /**
   * User.modifiedBlacklists
   */
  export type User$modifiedBlacklistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
    where?: SenderBlacklistWhereInput
    orderBy?: SenderBlacklistOrderByWithRelationInput | SenderBlacklistOrderByWithRelationInput[]
    cursor?: SenderBlacklistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SenderBlacklistScalarFieldEnum | SenderBlacklistScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogInclude<ExtArgs> | null
    where?: BlacklistLogWhereInput
    orderBy?: BlacklistLogOrderByWithRelationInput | BlacklistLogOrderByWithRelationInput[]
    cursor?: BlacklistLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BlacklistLogScalarFieldEnum | BlacklistLogScalarFieldEnum[]
  }

  /**
   * User.createdRenewals
   */
  export type User$createdRenewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
    where?: ContractRenewalWhereInput
    orderBy?: ContractRenewalOrderByWithRelationInput | ContractRenewalOrderByWithRelationInput[]
    cursor?: ContractRenewalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractRenewalScalarFieldEnum | ContractRenewalScalarFieldEnum[]
  }

  /**
   * User.modifiedRenewals
   */
  export type User$modifiedRenewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
    where?: ContractRenewalWhereInput
    orderBy?: ContractRenewalOrderByWithRelationInput | ContractRenewalOrderByWithRelationInput[]
    cursor?: ContractRenewalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractRenewalScalarFieldEnum | ContractRenewalScalarFieldEnum[]
  }

  /**
   * User.uploadedRenewalFiles
   */
  export type User$uploadedRenewalFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentInclude<ExtArgs> | null
    where?: ContractRenewalAttachmentWhereInput
    orderBy?: ContractRenewalAttachmentOrderByWithRelationInput | ContractRenewalAttachmentOrderByWithRelationInput[]
    cursor?: ContractRenewalAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractRenewalAttachmentScalarFieldEnum | ContractRenewalAttachmentScalarFieldEnum[]
  }

  /**
   * User.createdParkingServices
   */
  export type User$createdParkingServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    where?: ParkingServiceWhereInput
    orderBy?: ParkingServiceOrderByWithRelationInput | ParkingServiceOrderByWithRelationInput[]
    cursor?: ParkingServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParkingServiceScalarFieldEnum | ParkingServiceScalarFieldEnum[]
  }

  /**
   * User.logEntries
   */
  export type User$logEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    where?: LogEntryWhereInput
    orderBy?: LogEntryOrderByWithRelationInput | LogEntryOrderByWithRelationInput[]
    cursor?: LogEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogEntryScalarFieldEnum | LogEntryScalarFieldEnum[]
  }

  /**
   * User.updatedLogs
   */
  export type User$updatedLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    where?: LogEntryWhereInput
    orderBy?: LogEntryOrderByWithRelationInput | LogEntryOrderByWithRelationInput[]
    cursor?: LogEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogEntryScalarFieldEnum | LogEntryScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Provider
   */

  export type AggregateProvider = {
    _count: ProviderCountAggregateOutputType | null
    _min: ProviderMinAggregateOutputType | null
    _max: ProviderMaxAggregateOutputType | null
  }

  export type ProviderMinAggregateOutputType = {
    id: string | null
    name: string | null
    contactName: string | null
    email: string | null
    phone: string | null
    address: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    imageUrl: string | null
  }

  export type ProviderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    contactName: string | null
    email: string | null
    phone: string | null
    address: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    imageUrl: string | null
  }

  export type ProviderCountAggregateOutputType = {
    id: number
    name: number
    contactName: number
    email: number
    phone: number
    address: number
    isActive: number
    createdAt: number
    updatedAt: number
    imageUrl: number
    _all: number
  }


  export type ProviderMinAggregateInputType = {
    id?: true
    name?: true
    contactName?: true
    email?: true
    phone?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    imageUrl?: true
  }

  export type ProviderMaxAggregateInputType = {
    id?: true
    name?: true
    contactName?: true
    email?: true
    phone?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    imageUrl?: true
  }

  export type ProviderCountAggregateInputType = {
    id?: true
    name?: true
    contactName?: true
    email?: true
    phone?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    imageUrl?: true
    _all?: true
  }

  export type ProviderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Provider to aggregate.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Providers
    **/
    _count?: true | ProviderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProviderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProviderMaxAggregateInputType
  }

  export type GetProviderAggregateType<T extends ProviderAggregateArgs> = {
        [P in keyof T & keyof AggregateProvider]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProvider[P]>
      : GetScalarType<T[P], AggregateProvider[P]>
  }




  export type ProviderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProviderWhereInput
    orderBy?: ProviderOrderByWithAggregationInput | ProviderOrderByWithAggregationInput[]
    by: ProviderScalarFieldEnum[] | ProviderScalarFieldEnum
    having?: ProviderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProviderCountAggregateInputType | true
    _min?: ProviderMinAggregateInputType
    _max?: ProviderMaxAggregateInputType
  }

  export type ProviderGroupByOutputType = {
    id: string
    name: string
    contactName: string | null
    email: string | null
    phone: string | null
    address: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    imageUrl: string | null
    _count: ProviderCountAggregateOutputType | null
    _min: ProviderMinAggregateOutputType | null
    _max: ProviderMaxAggregateOutputType | null
  }

  type GetProviderGroupByPayload<T extends ProviderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProviderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProviderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProviderGroupByOutputType[P]>
            : GetScalarType<T[P], ProviderGroupByOutputType[P]>
        }
      >
    >


  export type ProviderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    imageUrl?: boolean
    contracts?: boolean | Provider$contractsArgs<ExtArgs>
    vasServices?: boolean | Provider$vasServicesArgs<ExtArgs>
    bulkServices?: boolean | Provider$bulkServicesArgs<ExtArgs>
    complaints?: boolean | Provider$complaintsArgs<ExtArgs>
    vasTransactions?: boolean | Provider$vasTransactionsArgs<ExtArgs>
    logEntries?: boolean | Provider$logEntriesArgs<ExtArgs>
    _count?: boolean | ProviderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["provider"]>

  export type ProviderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    imageUrl?: boolean
  }, ExtArgs["result"]["provider"]>

  export type ProviderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    imageUrl?: boolean
  }, ExtArgs["result"]["provider"]>

  export type ProviderSelectScalar = {
    id?: boolean
    name?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    imageUrl?: boolean
  }

  export type ProviderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "contactName" | "email" | "phone" | "address" | "isActive" | "createdAt" | "updatedAt" | "imageUrl", ExtArgs["result"]["provider"]>
  export type ProviderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | Provider$contractsArgs<ExtArgs>
    vasServices?: boolean | Provider$vasServicesArgs<ExtArgs>
    bulkServices?: boolean | Provider$bulkServicesArgs<ExtArgs>
    complaints?: boolean | Provider$complaintsArgs<ExtArgs>
    vasTransactions?: boolean | Provider$vasTransactionsArgs<ExtArgs>
    logEntries?: boolean | Provider$logEntriesArgs<ExtArgs>
    _count?: boolean | ProviderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProviderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProviderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProviderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Provider"
    objects: {
      contracts: Prisma.$ContractPayload<ExtArgs>[]
      vasServices: Prisma.$VasServicePayload<ExtArgs>[]
      bulkServices: Prisma.$BulkServicePayload<ExtArgs>[]
      complaints: Prisma.$ComplaintPayload<ExtArgs>[]
      vasTransactions: Prisma.$VasTransactionPayload<ExtArgs>[]
      logEntries: Prisma.$LogEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      contactName: string | null
      email: string | null
      phone: string | null
      address: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      imageUrl: string | null
    }, ExtArgs["result"]["provider"]>
    composites: {}
  }

  type ProviderGetPayload<S extends boolean | null | undefined | ProviderDefaultArgs> = $Result.GetResult<Prisma.$ProviderPayload, S>

  type ProviderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProviderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProviderCountAggregateInputType | true
    }

  export interface ProviderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Provider'], meta: { name: 'Provider' } }
    /**
     * Find zero or one Provider that matches the filter.
     * @param {ProviderFindUniqueArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProviderFindUniqueArgs>(args: SelectSubset<T, ProviderFindUniqueArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Provider that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProviderFindUniqueOrThrowArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProviderFindUniqueOrThrowArgs>(args: SelectSubset<T, ProviderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Provider that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFindFirstArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProviderFindFirstArgs>(args?: SelectSubset<T, ProviderFindFirstArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Provider that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFindFirstOrThrowArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProviderFindFirstOrThrowArgs>(args?: SelectSubset<T, ProviderFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Providers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Providers
     * const providers = await prisma.provider.findMany()
     * 
     * // Get first 10 Providers
     * const providers = await prisma.provider.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const providerWithIdOnly = await prisma.provider.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProviderFindManyArgs>(args?: SelectSubset<T, ProviderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Provider.
     * @param {ProviderCreateArgs} args - Arguments to create a Provider.
     * @example
     * // Create one Provider
     * const Provider = await prisma.provider.create({
     *   data: {
     *     // ... data to create a Provider
     *   }
     * })
     * 
     */
    create<T extends ProviderCreateArgs>(args: SelectSubset<T, ProviderCreateArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Providers.
     * @param {ProviderCreateManyArgs} args - Arguments to create many Providers.
     * @example
     * // Create many Providers
     * const provider = await prisma.provider.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProviderCreateManyArgs>(args?: SelectSubset<T, ProviderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Providers and returns the data saved in the database.
     * @param {ProviderCreateManyAndReturnArgs} args - Arguments to create many Providers.
     * @example
     * // Create many Providers
     * const provider = await prisma.provider.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Providers and only return the `id`
     * const providerWithIdOnly = await prisma.provider.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProviderCreateManyAndReturnArgs>(args?: SelectSubset<T, ProviderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Provider.
     * @param {ProviderDeleteArgs} args - Arguments to delete one Provider.
     * @example
     * // Delete one Provider
     * const Provider = await prisma.provider.delete({
     *   where: {
     *     // ... filter to delete one Provider
     *   }
     * })
     * 
     */
    delete<T extends ProviderDeleteArgs>(args: SelectSubset<T, ProviderDeleteArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Provider.
     * @param {ProviderUpdateArgs} args - Arguments to update one Provider.
     * @example
     * // Update one Provider
     * const provider = await prisma.provider.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProviderUpdateArgs>(args: SelectSubset<T, ProviderUpdateArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Providers.
     * @param {ProviderDeleteManyArgs} args - Arguments to filter Providers to delete.
     * @example
     * // Delete a few Providers
     * const { count } = await prisma.provider.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProviderDeleteManyArgs>(args?: SelectSubset<T, ProviderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Providers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Providers
     * const provider = await prisma.provider.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProviderUpdateManyArgs>(args: SelectSubset<T, ProviderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Providers and returns the data updated in the database.
     * @param {ProviderUpdateManyAndReturnArgs} args - Arguments to update many Providers.
     * @example
     * // Update many Providers
     * const provider = await prisma.provider.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Providers and only return the `id`
     * const providerWithIdOnly = await prisma.provider.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProviderUpdateManyAndReturnArgs>(args: SelectSubset<T, ProviderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Provider.
     * @param {ProviderUpsertArgs} args - Arguments to update or create a Provider.
     * @example
     * // Update or create a Provider
     * const provider = await prisma.provider.upsert({
     *   create: {
     *     // ... data to create a Provider
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Provider we want to update
     *   }
     * })
     */
    upsert<T extends ProviderUpsertArgs>(args: SelectSubset<T, ProviderUpsertArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Providers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderCountArgs} args - Arguments to filter Providers to count.
     * @example
     * // Count the number of Providers
     * const count = await prisma.provider.count({
     *   where: {
     *     // ... the filter for the Providers we want to count
     *   }
     * })
    **/
    count<T extends ProviderCountArgs>(
      args?: Subset<T, ProviderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProviderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Provider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProviderAggregateArgs>(args: Subset<T, ProviderAggregateArgs>): Prisma.PrismaPromise<GetProviderAggregateType<T>>

    /**
     * Group by Provider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProviderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProviderGroupByArgs['orderBy'] }
        : { orderBy?: ProviderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Provider model
   */
  readonly fields: ProviderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Provider.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProviderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contracts<T extends Provider$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Provider$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vasServices<T extends Provider$vasServicesArgs<ExtArgs> = {}>(args?: Subset<T, Provider$vasServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bulkServices<T extends Provider$bulkServicesArgs<ExtArgs> = {}>(args?: Subset<T, Provider$bulkServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    complaints<T extends Provider$complaintsArgs<ExtArgs> = {}>(args?: Subset<T, Provider$complaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vasTransactions<T extends Provider$vasTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Provider$vasTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logEntries<T extends Provider$logEntriesArgs<ExtArgs> = {}>(args?: Subset<T, Provider$logEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Provider model
   */
  interface ProviderFieldRefs {
    readonly id: FieldRef<"Provider", 'String'>
    readonly name: FieldRef<"Provider", 'String'>
    readonly contactName: FieldRef<"Provider", 'String'>
    readonly email: FieldRef<"Provider", 'String'>
    readonly phone: FieldRef<"Provider", 'String'>
    readonly address: FieldRef<"Provider", 'String'>
    readonly isActive: FieldRef<"Provider", 'Boolean'>
    readonly createdAt: FieldRef<"Provider", 'DateTime'>
    readonly updatedAt: FieldRef<"Provider", 'DateTime'>
    readonly imageUrl: FieldRef<"Provider", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Provider findUnique
   */
  export type ProviderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where: ProviderWhereUniqueInput
  }

  /**
   * Provider findUniqueOrThrow
   */
  export type ProviderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where: ProviderWhereUniqueInput
  }

  /**
   * Provider findFirst
   */
  export type ProviderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Providers.
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Providers.
     */
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }

  /**
   * Provider findFirstOrThrow
   */
  export type ProviderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Providers.
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Providers.
     */
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }

  /**
   * Provider findMany
   */
  export type ProviderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Providers to fetch.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Providers.
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }

  /**
   * Provider create
   */
  export type ProviderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * The data needed to create a Provider.
     */
    data: XOR<ProviderCreateInput, ProviderUncheckedCreateInput>
  }

  /**
   * Provider createMany
   */
  export type ProviderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Providers.
     */
    data: ProviderCreateManyInput | ProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Provider createManyAndReturn
   */
  export type ProviderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * The data used to create many Providers.
     */
    data: ProviderCreateManyInput | ProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Provider update
   */
  export type ProviderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * The data needed to update a Provider.
     */
    data: XOR<ProviderUpdateInput, ProviderUncheckedUpdateInput>
    /**
     * Choose, which Provider to update.
     */
    where: ProviderWhereUniqueInput
  }

  /**
   * Provider updateMany
   */
  export type ProviderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Providers.
     */
    data: XOR<ProviderUpdateManyMutationInput, ProviderUncheckedUpdateManyInput>
    /**
     * Filter which Providers to update
     */
    where?: ProviderWhereInput
    /**
     * Limit how many Providers to update.
     */
    limit?: number
  }

  /**
   * Provider updateManyAndReturn
   */
  export type ProviderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * The data used to update Providers.
     */
    data: XOR<ProviderUpdateManyMutationInput, ProviderUncheckedUpdateManyInput>
    /**
     * Filter which Providers to update
     */
    where?: ProviderWhereInput
    /**
     * Limit how many Providers to update.
     */
    limit?: number
  }

  /**
   * Provider upsert
   */
  export type ProviderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * The filter to search for the Provider to update in case it exists.
     */
    where: ProviderWhereUniqueInput
    /**
     * In case the Provider found by the `where` argument doesn't exist, create a new Provider with this data.
     */
    create: XOR<ProviderCreateInput, ProviderUncheckedCreateInput>
    /**
     * In case the Provider was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProviderUpdateInput, ProviderUncheckedUpdateInput>
  }

  /**
   * Provider delete
   */
  export type ProviderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter which Provider to delete.
     */
    where: ProviderWhereUniqueInput
  }

  /**
   * Provider deleteMany
   */
  export type ProviderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Providers to delete
     */
    where?: ProviderWhereInput
    /**
     * Limit how many Providers to delete.
     */
    limit?: number
  }

  /**
   * Provider.contracts
   */
  export type Provider$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Provider.vasServices
   */
  export type Provider$vasServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceInclude<ExtArgs> | null
    where?: VasServiceWhereInput
    orderBy?: VasServiceOrderByWithRelationInput | VasServiceOrderByWithRelationInput[]
    cursor?: VasServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VasServiceScalarFieldEnum | VasServiceScalarFieldEnum[]
  }

  /**
   * Provider.bulkServices
   */
  export type Provider$bulkServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
    where?: BulkServiceWhereInput
    orderBy?: BulkServiceOrderByWithRelationInput | BulkServiceOrderByWithRelationInput[]
    cursor?: BulkServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BulkServiceScalarFieldEnum | BulkServiceScalarFieldEnum[]
  }

  /**
   * Provider.complaints
   */
  export type Provider$complaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Provider.vasTransactions
   */
  export type Provider$vasTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionInclude<ExtArgs> | null
    where?: VasTransactionWhereInput
    orderBy?: VasTransactionOrderByWithRelationInput | VasTransactionOrderByWithRelationInput[]
    cursor?: VasTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VasTransactionScalarFieldEnum | VasTransactionScalarFieldEnum[]
  }

  /**
   * Provider.logEntries
   */
  export type Provider$logEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    where?: LogEntryWhereInput
    orderBy?: LogEntryOrderByWithRelationInput | LogEntryOrderByWithRelationInput[]
    cursor?: LogEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogEntryScalarFieldEnum | LogEntryScalarFieldEnum[]
  }

  /**
   * Provider without action
   */
  export type ProviderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
  }


  /**
   * Model HumanitarianOrg
   */

  export type AggregateHumanitarianOrg = {
    _count: HumanitarianOrgCountAggregateOutputType | null
    _min: HumanitarianOrgMinAggregateOutputType | null
    _max: HumanitarianOrgMaxAggregateOutputType | null
  }

  export type HumanitarianOrgMinAggregateOutputType = {
    id: string | null
    name: string | null
    contactName: string | null
    email: string | null
    phone: string | null
    address: string | null
    website: string | null
    mission: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    pib: string | null
    registrationNumber: string | null
    bank: string | null
    accountNumber: string | null
    shortNumber: string | null
  }

  export type HumanitarianOrgMaxAggregateOutputType = {
    id: string | null
    name: string | null
    contactName: string | null
    email: string | null
    phone: string | null
    address: string | null
    website: string | null
    mission: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    pib: string | null
    registrationNumber: string | null
    bank: string | null
    accountNumber: string | null
    shortNumber: string | null
  }

  export type HumanitarianOrgCountAggregateOutputType = {
    id: number
    name: number
    contactName: number
    email: number
    phone: number
    address: number
    website: number
    mission: number
    isActive: number
    createdAt: number
    updatedAt: number
    pib: number
    registrationNumber: number
    bank: number
    accountNumber: number
    shortNumber: number
    _all: number
  }


  export type HumanitarianOrgMinAggregateInputType = {
    id?: true
    name?: true
    contactName?: true
    email?: true
    phone?: true
    address?: true
    website?: true
    mission?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    pib?: true
    registrationNumber?: true
    bank?: true
    accountNumber?: true
    shortNumber?: true
  }

  export type HumanitarianOrgMaxAggregateInputType = {
    id?: true
    name?: true
    contactName?: true
    email?: true
    phone?: true
    address?: true
    website?: true
    mission?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    pib?: true
    registrationNumber?: true
    bank?: true
    accountNumber?: true
    shortNumber?: true
  }

  export type HumanitarianOrgCountAggregateInputType = {
    id?: true
    name?: true
    contactName?: true
    email?: true
    phone?: true
    address?: true
    website?: true
    mission?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    pib?: true
    registrationNumber?: true
    bank?: true
    accountNumber?: true
    shortNumber?: true
    _all?: true
  }

  export type HumanitarianOrgAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HumanitarianOrg to aggregate.
     */
    where?: HumanitarianOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HumanitarianOrgs to fetch.
     */
    orderBy?: HumanitarianOrgOrderByWithRelationInput | HumanitarianOrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HumanitarianOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HumanitarianOrgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HumanitarianOrgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HumanitarianOrgs
    **/
    _count?: true | HumanitarianOrgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HumanitarianOrgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HumanitarianOrgMaxAggregateInputType
  }

  export type GetHumanitarianOrgAggregateType<T extends HumanitarianOrgAggregateArgs> = {
        [P in keyof T & keyof AggregateHumanitarianOrg]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHumanitarianOrg[P]>
      : GetScalarType<T[P], AggregateHumanitarianOrg[P]>
  }




  export type HumanitarianOrgGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HumanitarianOrgWhereInput
    orderBy?: HumanitarianOrgOrderByWithAggregationInput | HumanitarianOrgOrderByWithAggregationInput[]
    by: HumanitarianOrgScalarFieldEnum[] | HumanitarianOrgScalarFieldEnum
    having?: HumanitarianOrgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HumanitarianOrgCountAggregateInputType | true
    _min?: HumanitarianOrgMinAggregateInputType
    _max?: HumanitarianOrgMaxAggregateInputType
  }

  export type HumanitarianOrgGroupByOutputType = {
    id: string
    name: string
    contactName: string | null
    email: string | null
    phone: string | null
    address: string | null
    website: string | null
    mission: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    pib: string | null
    registrationNumber: string | null
    bank: string | null
    accountNumber: string | null
    shortNumber: string | null
    _count: HumanitarianOrgCountAggregateOutputType | null
    _min: HumanitarianOrgMinAggregateOutputType | null
    _max: HumanitarianOrgMaxAggregateOutputType | null
  }

  type GetHumanitarianOrgGroupByPayload<T extends HumanitarianOrgGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HumanitarianOrgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HumanitarianOrgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HumanitarianOrgGroupByOutputType[P]>
            : GetScalarType<T[P], HumanitarianOrgGroupByOutputType[P]>
        }
      >
    >


  export type HumanitarianOrgSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    website?: boolean
    mission?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pib?: boolean
    registrationNumber?: boolean
    bank?: boolean
    accountNumber?: boolean
    shortNumber?: boolean
    contracts?: boolean | HumanitarianOrg$contractsArgs<ExtArgs>
    renewals?: boolean | HumanitarianOrg$renewalsArgs<ExtArgs>
    complaints?: boolean | HumanitarianOrg$complaintsArgs<ExtArgs>
    reportFiles?: boolean | HumanitarianOrg$reportFilesArgs<ExtArgs>
    _count?: boolean | HumanitarianOrgCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["humanitarianOrg"]>

  export type HumanitarianOrgSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    website?: boolean
    mission?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pib?: boolean
    registrationNumber?: boolean
    bank?: boolean
    accountNumber?: boolean
    shortNumber?: boolean
  }, ExtArgs["result"]["humanitarianOrg"]>

  export type HumanitarianOrgSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    website?: boolean
    mission?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pib?: boolean
    registrationNumber?: boolean
    bank?: boolean
    accountNumber?: boolean
    shortNumber?: boolean
  }, ExtArgs["result"]["humanitarianOrg"]>

  export type HumanitarianOrgSelectScalar = {
    id?: boolean
    name?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    website?: boolean
    mission?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pib?: boolean
    registrationNumber?: boolean
    bank?: boolean
    accountNumber?: boolean
    shortNumber?: boolean
  }

  export type HumanitarianOrgOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "contactName" | "email" | "phone" | "address" | "website" | "mission" | "isActive" | "createdAt" | "updatedAt" | "pib" | "registrationNumber" | "bank" | "accountNumber" | "shortNumber", ExtArgs["result"]["humanitarianOrg"]>
  export type HumanitarianOrgInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | HumanitarianOrg$contractsArgs<ExtArgs>
    renewals?: boolean | HumanitarianOrg$renewalsArgs<ExtArgs>
    complaints?: boolean | HumanitarianOrg$complaintsArgs<ExtArgs>
    reportFiles?: boolean | HumanitarianOrg$reportFilesArgs<ExtArgs>
    _count?: boolean | HumanitarianOrgCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HumanitarianOrgIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type HumanitarianOrgIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $HumanitarianOrgPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HumanitarianOrg"
    objects: {
      contracts: Prisma.$ContractPayload<ExtArgs>[]
      renewals: Prisma.$HumanitarianContractRenewalPayload<ExtArgs>[]
      complaints: Prisma.$ComplaintPayload<ExtArgs>[]
      reportFiles: Prisma.$ReportFilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      contactName: string | null
      email: string | null
      phone: string | null
      address: string | null
      website: string | null
      mission: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      pib: string | null
      registrationNumber: string | null
      bank: string | null
      accountNumber: string | null
      shortNumber: string | null
    }, ExtArgs["result"]["humanitarianOrg"]>
    composites: {}
  }

  type HumanitarianOrgGetPayload<S extends boolean | null | undefined | HumanitarianOrgDefaultArgs> = $Result.GetResult<Prisma.$HumanitarianOrgPayload, S>

  type HumanitarianOrgCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HumanitarianOrgFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HumanitarianOrgCountAggregateInputType | true
    }

  export interface HumanitarianOrgDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HumanitarianOrg'], meta: { name: 'HumanitarianOrg' } }
    /**
     * Find zero or one HumanitarianOrg that matches the filter.
     * @param {HumanitarianOrgFindUniqueArgs} args - Arguments to find a HumanitarianOrg
     * @example
     * // Get one HumanitarianOrg
     * const humanitarianOrg = await prisma.humanitarianOrg.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HumanitarianOrgFindUniqueArgs>(args: SelectSubset<T, HumanitarianOrgFindUniqueArgs<ExtArgs>>): Prisma__HumanitarianOrgClient<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HumanitarianOrg that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HumanitarianOrgFindUniqueOrThrowArgs} args - Arguments to find a HumanitarianOrg
     * @example
     * // Get one HumanitarianOrg
     * const humanitarianOrg = await prisma.humanitarianOrg.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HumanitarianOrgFindUniqueOrThrowArgs>(args: SelectSubset<T, HumanitarianOrgFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HumanitarianOrgClient<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HumanitarianOrg that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianOrgFindFirstArgs} args - Arguments to find a HumanitarianOrg
     * @example
     * // Get one HumanitarianOrg
     * const humanitarianOrg = await prisma.humanitarianOrg.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HumanitarianOrgFindFirstArgs>(args?: SelectSubset<T, HumanitarianOrgFindFirstArgs<ExtArgs>>): Prisma__HumanitarianOrgClient<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HumanitarianOrg that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianOrgFindFirstOrThrowArgs} args - Arguments to find a HumanitarianOrg
     * @example
     * // Get one HumanitarianOrg
     * const humanitarianOrg = await prisma.humanitarianOrg.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HumanitarianOrgFindFirstOrThrowArgs>(args?: SelectSubset<T, HumanitarianOrgFindFirstOrThrowArgs<ExtArgs>>): Prisma__HumanitarianOrgClient<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HumanitarianOrgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianOrgFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HumanitarianOrgs
     * const humanitarianOrgs = await prisma.humanitarianOrg.findMany()
     * 
     * // Get first 10 HumanitarianOrgs
     * const humanitarianOrgs = await prisma.humanitarianOrg.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const humanitarianOrgWithIdOnly = await prisma.humanitarianOrg.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HumanitarianOrgFindManyArgs>(args?: SelectSubset<T, HumanitarianOrgFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HumanitarianOrg.
     * @param {HumanitarianOrgCreateArgs} args - Arguments to create a HumanitarianOrg.
     * @example
     * // Create one HumanitarianOrg
     * const HumanitarianOrg = await prisma.humanitarianOrg.create({
     *   data: {
     *     // ... data to create a HumanitarianOrg
     *   }
     * })
     * 
     */
    create<T extends HumanitarianOrgCreateArgs>(args: SelectSubset<T, HumanitarianOrgCreateArgs<ExtArgs>>): Prisma__HumanitarianOrgClient<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HumanitarianOrgs.
     * @param {HumanitarianOrgCreateManyArgs} args - Arguments to create many HumanitarianOrgs.
     * @example
     * // Create many HumanitarianOrgs
     * const humanitarianOrg = await prisma.humanitarianOrg.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HumanitarianOrgCreateManyArgs>(args?: SelectSubset<T, HumanitarianOrgCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HumanitarianOrgs and returns the data saved in the database.
     * @param {HumanitarianOrgCreateManyAndReturnArgs} args - Arguments to create many HumanitarianOrgs.
     * @example
     * // Create many HumanitarianOrgs
     * const humanitarianOrg = await prisma.humanitarianOrg.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HumanitarianOrgs and only return the `id`
     * const humanitarianOrgWithIdOnly = await prisma.humanitarianOrg.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HumanitarianOrgCreateManyAndReturnArgs>(args?: SelectSubset<T, HumanitarianOrgCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HumanitarianOrg.
     * @param {HumanitarianOrgDeleteArgs} args - Arguments to delete one HumanitarianOrg.
     * @example
     * // Delete one HumanitarianOrg
     * const HumanitarianOrg = await prisma.humanitarianOrg.delete({
     *   where: {
     *     // ... filter to delete one HumanitarianOrg
     *   }
     * })
     * 
     */
    delete<T extends HumanitarianOrgDeleteArgs>(args: SelectSubset<T, HumanitarianOrgDeleteArgs<ExtArgs>>): Prisma__HumanitarianOrgClient<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HumanitarianOrg.
     * @param {HumanitarianOrgUpdateArgs} args - Arguments to update one HumanitarianOrg.
     * @example
     * // Update one HumanitarianOrg
     * const humanitarianOrg = await prisma.humanitarianOrg.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HumanitarianOrgUpdateArgs>(args: SelectSubset<T, HumanitarianOrgUpdateArgs<ExtArgs>>): Prisma__HumanitarianOrgClient<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HumanitarianOrgs.
     * @param {HumanitarianOrgDeleteManyArgs} args - Arguments to filter HumanitarianOrgs to delete.
     * @example
     * // Delete a few HumanitarianOrgs
     * const { count } = await prisma.humanitarianOrg.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HumanitarianOrgDeleteManyArgs>(args?: SelectSubset<T, HumanitarianOrgDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HumanitarianOrgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianOrgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HumanitarianOrgs
     * const humanitarianOrg = await prisma.humanitarianOrg.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HumanitarianOrgUpdateManyArgs>(args: SelectSubset<T, HumanitarianOrgUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HumanitarianOrgs and returns the data updated in the database.
     * @param {HumanitarianOrgUpdateManyAndReturnArgs} args - Arguments to update many HumanitarianOrgs.
     * @example
     * // Update many HumanitarianOrgs
     * const humanitarianOrg = await prisma.humanitarianOrg.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HumanitarianOrgs and only return the `id`
     * const humanitarianOrgWithIdOnly = await prisma.humanitarianOrg.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HumanitarianOrgUpdateManyAndReturnArgs>(args: SelectSubset<T, HumanitarianOrgUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HumanitarianOrg.
     * @param {HumanitarianOrgUpsertArgs} args - Arguments to update or create a HumanitarianOrg.
     * @example
     * // Update or create a HumanitarianOrg
     * const humanitarianOrg = await prisma.humanitarianOrg.upsert({
     *   create: {
     *     // ... data to create a HumanitarianOrg
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HumanitarianOrg we want to update
     *   }
     * })
     */
    upsert<T extends HumanitarianOrgUpsertArgs>(args: SelectSubset<T, HumanitarianOrgUpsertArgs<ExtArgs>>): Prisma__HumanitarianOrgClient<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HumanitarianOrgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianOrgCountArgs} args - Arguments to filter HumanitarianOrgs to count.
     * @example
     * // Count the number of HumanitarianOrgs
     * const count = await prisma.humanitarianOrg.count({
     *   where: {
     *     // ... the filter for the HumanitarianOrgs we want to count
     *   }
     * })
    **/
    count<T extends HumanitarianOrgCountArgs>(
      args?: Subset<T, HumanitarianOrgCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HumanitarianOrgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HumanitarianOrg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianOrgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HumanitarianOrgAggregateArgs>(args: Subset<T, HumanitarianOrgAggregateArgs>): Prisma.PrismaPromise<GetHumanitarianOrgAggregateType<T>>

    /**
     * Group by HumanitarianOrg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianOrgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HumanitarianOrgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HumanitarianOrgGroupByArgs['orderBy'] }
        : { orderBy?: HumanitarianOrgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HumanitarianOrgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHumanitarianOrgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HumanitarianOrg model
   */
  readonly fields: HumanitarianOrgFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HumanitarianOrg.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HumanitarianOrgClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contracts<T extends HumanitarianOrg$contractsArgs<ExtArgs> = {}>(args?: Subset<T, HumanitarianOrg$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    renewals<T extends HumanitarianOrg$renewalsArgs<ExtArgs> = {}>(args?: Subset<T, HumanitarianOrg$renewalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    complaints<T extends HumanitarianOrg$complaintsArgs<ExtArgs> = {}>(args?: Subset<T, HumanitarianOrg$complaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reportFiles<T extends HumanitarianOrg$reportFilesArgs<ExtArgs> = {}>(args?: Subset<T, HumanitarianOrg$reportFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HumanitarianOrg model
   */
  interface HumanitarianOrgFieldRefs {
    readonly id: FieldRef<"HumanitarianOrg", 'String'>
    readonly name: FieldRef<"HumanitarianOrg", 'String'>
    readonly contactName: FieldRef<"HumanitarianOrg", 'String'>
    readonly email: FieldRef<"HumanitarianOrg", 'String'>
    readonly phone: FieldRef<"HumanitarianOrg", 'String'>
    readonly address: FieldRef<"HumanitarianOrg", 'String'>
    readonly website: FieldRef<"HumanitarianOrg", 'String'>
    readonly mission: FieldRef<"HumanitarianOrg", 'String'>
    readonly isActive: FieldRef<"HumanitarianOrg", 'Boolean'>
    readonly createdAt: FieldRef<"HumanitarianOrg", 'DateTime'>
    readonly updatedAt: FieldRef<"HumanitarianOrg", 'DateTime'>
    readonly pib: FieldRef<"HumanitarianOrg", 'String'>
    readonly registrationNumber: FieldRef<"HumanitarianOrg", 'String'>
    readonly bank: FieldRef<"HumanitarianOrg", 'String'>
    readonly accountNumber: FieldRef<"HumanitarianOrg", 'String'>
    readonly shortNumber: FieldRef<"HumanitarianOrg", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HumanitarianOrg findUnique
   */
  export type HumanitarianOrgFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianOrgInclude<ExtArgs> | null
    /**
     * Filter, which HumanitarianOrg to fetch.
     */
    where: HumanitarianOrgWhereUniqueInput
  }

  /**
   * HumanitarianOrg findUniqueOrThrow
   */
  export type HumanitarianOrgFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianOrgInclude<ExtArgs> | null
    /**
     * Filter, which HumanitarianOrg to fetch.
     */
    where: HumanitarianOrgWhereUniqueInput
  }

  /**
   * HumanitarianOrg findFirst
   */
  export type HumanitarianOrgFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianOrgInclude<ExtArgs> | null
    /**
     * Filter, which HumanitarianOrg to fetch.
     */
    where?: HumanitarianOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HumanitarianOrgs to fetch.
     */
    orderBy?: HumanitarianOrgOrderByWithRelationInput | HumanitarianOrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HumanitarianOrgs.
     */
    cursor?: HumanitarianOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HumanitarianOrgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HumanitarianOrgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HumanitarianOrgs.
     */
    distinct?: HumanitarianOrgScalarFieldEnum | HumanitarianOrgScalarFieldEnum[]
  }

  /**
   * HumanitarianOrg findFirstOrThrow
   */
  export type HumanitarianOrgFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianOrgInclude<ExtArgs> | null
    /**
     * Filter, which HumanitarianOrg to fetch.
     */
    where?: HumanitarianOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HumanitarianOrgs to fetch.
     */
    orderBy?: HumanitarianOrgOrderByWithRelationInput | HumanitarianOrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HumanitarianOrgs.
     */
    cursor?: HumanitarianOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HumanitarianOrgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HumanitarianOrgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HumanitarianOrgs.
     */
    distinct?: HumanitarianOrgScalarFieldEnum | HumanitarianOrgScalarFieldEnum[]
  }

  /**
   * HumanitarianOrg findMany
   */
  export type HumanitarianOrgFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianOrgInclude<ExtArgs> | null
    /**
     * Filter, which HumanitarianOrgs to fetch.
     */
    where?: HumanitarianOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HumanitarianOrgs to fetch.
     */
    orderBy?: HumanitarianOrgOrderByWithRelationInput | HumanitarianOrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HumanitarianOrgs.
     */
    cursor?: HumanitarianOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HumanitarianOrgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HumanitarianOrgs.
     */
    skip?: number
    distinct?: HumanitarianOrgScalarFieldEnum | HumanitarianOrgScalarFieldEnum[]
  }

  /**
   * HumanitarianOrg create
   */
  export type HumanitarianOrgCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianOrgInclude<ExtArgs> | null
    /**
     * The data needed to create a HumanitarianOrg.
     */
    data: XOR<HumanitarianOrgCreateInput, HumanitarianOrgUncheckedCreateInput>
  }

  /**
   * HumanitarianOrg createMany
   */
  export type HumanitarianOrgCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HumanitarianOrgs.
     */
    data: HumanitarianOrgCreateManyInput | HumanitarianOrgCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HumanitarianOrg createManyAndReturn
   */
  export type HumanitarianOrgCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * The data used to create many HumanitarianOrgs.
     */
    data: HumanitarianOrgCreateManyInput | HumanitarianOrgCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HumanitarianOrg update
   */
  export type HumanitarianOrgUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianOrgInclude<ExtArgs> | null
    /**
     * The data needed to update a HumanitarianOrg.
     */
    data: XOR<HumanitarianOrgUpdateInput, HumanitarianOrgUncheckedUpdateInput>
    /**
     * Choose, which HumanitarianOrg to update.
     */
    where: HumanitarianOrgWhereUniqueInput
  }

  /**
   * HumanitarianOrg updateMany
   */
  export type HumanitarianOrgUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HumanitarianOrgs.
     */
    data: XOR<HumanitarianOrgUpdateManyMutationInput, HumanitarianOrgUncheckedUpdateManyInput>
    /**
     * Filter which HumanitarianOrgs to update
     */
    where?: HumanitarianOrgWhereInput
    /**
     * Limit how many HumanitarianOrgs to update.
     */
    limit?: number
  }

  /**
   * HumanitarianOrg updateManyAndReturn
   */
  export type HumanitarianOrgUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * The data used to update HumanitarianOrgs.
     */
    data: XOR<HumanitarianOrgUpdateManyMutationInput, HumanitarianOrgUncheckedUpdateManyInput>
    /**
     * Filter which HumanitarianOrgs to update
     */
    where?: HumanitarianOrgWhereInput
    /**
     * Limit how many HumanitarianOrgs to update.
     */
    limit?: number
  }

  /**
   * HumanitarianOrg upsert
   */
  export type HumanitarianOrgUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianOrgInclude<ExtArgs> | null
    /**
     * The filter to search for the HumanitarianOrg to update in case it exists.
     */
    where: HumanitarianOrgWhereUniqueInput
    /**
     * In case the HumanitarianOrg found by the `where` argument doesn't exist, create a new HumanitarianOrg with this data.
     */
    create: XOR<HumanitarianOrgCreateInput, HumanitarianOrgUncheckedCreateInput>
    /**
     * In case the HumanitarianOrg was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HumanitarianOrgUpdateInput, HumanitarianOrgUncheckedUpdateInput>
  }

  /**
   * HumanitarianOrg delete
   */
  export type HumanitarianOrgDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianOrgInclude<ExtArgs> | null
    /**
     * Filter which HumanitarianOrg to delete.
     */
    where: HumanitarianOrgWhereUniqueInput
  }

  /**
   * HumanitarianOrg deleteMany
   */
  export type HumanitarianOrgDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HumanitarianOrgs to delete
     */
    where?: HumanitarianOrgWhereInput
    /**
     * Limit how many HumanitarianOrgs to delete.
     */
    limit?: number
  }

  /**
   * HumanitarianOrg.contracts
   */
  export type HumanitarianOrg$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * HumanitarianOrg.renewals
   */
  export type HumanitarianOrg$renewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    where?: HumanitarianContractRenewalWhereInput
    orderBy?: HumanitarianContractRenewalOrderByWithRelationInput | HumanitarianContractRenewalOrderByWithRelationInput[]
    cursor?: HumanitarianContractRenewalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HumanitarianContractRenewalScalarFieldEnum | HumanitarianContractRenewalScalarFieldEnum[]
  }

  /**
   * HumanitarianOrg.complaints
   */
  export type HumanitarianOrg$complaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * HumanitarianOrg.reportFiles
   */
  export type HumanitarianOrg$reportFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    where?: ReportFileWhereInput
    orderBy?: ReportFileOrderByWithRelationInput | ReportFileOrderByWithRelationInput[]
    cursor?: ReportFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportFileScalarFieldEnum | ReportFileScalarFieldEnum[]
  }

  /**
   * HumanitarianOrg without action
   */
  export type HumanitarianOrgDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianOrgInclude<ExtArgs> | null
  }


  /**
   * Model VasTransaction
   */

  export type AggregateVasTransaction = {
    _count: VasTransactionCountAggregateOutputType | null
    _avg: VasTransactionAvgAggregateOutputType | null
    _sum: VasTransactionSumAggregateOutputType | null
    _min: VasTransactionMinAggregateOutputType | null
    _max: VasTransactionMaxAggregateOutputType | null
  }

  export type VasTransactionAvgAggregateOutputType = {
    price: number | null
    quantity: number | null
    amount: number | null
  }

  export type VasTransactionSumAggregateOutputType = {
    price: number | null
    quantity: number | null
    amount: number | null
  }

  export type VasTransactionMinAggregateOutputType = {
    id: string | null
    providerId: string | null
    serviceId: string | null
    date: Date | null
    group: string | null
    serviceName: string | null
    serviceCode: string | null
    price: number | null
    quantity: number | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VasTransactionMaxAggregateOutputType = {
    id: string | null
    providerId: string | null
    serviceId: string | null
    date: Date | null
    group: string | null
    serviceName: string | null
    serviceCode: string | null
    price: number | null
    quantity: number | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VasTransactionCountAggregateOutputType = {
    id: number
    providerId: number
    serviceId: number
    date: number
    group: number
    serviceName: number
    serviceCode: number
    price: number
    quantity: number
    amount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VasTransactionAvgAggregateInputType = {
    price?: true
    quantity?: true
    amount?: true
  }

  export type VasTransactionSumAggregateInputType = {
    price?: true
    quantity?: true
    amount?: true
  }

  export type VasTransactionMinAggregateInputType = {
    id?: true
    providerId?: true
    serviceId?: true
    date?: true
    group?: true
    serviceName?: true
    serviceCode?: true
    price?: true
    quantity?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VasTransactionMaxAggregateInputType = {
    id?: true
    providerId?: true
    serviceId?: true
    date?: true
    group?: true
    serviceName?: true
    serviceCode?: true
    price?: true
    quantity?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VasTransactionCountAggregateInputType = {
    id?: true
    providerId?: true
    serviceId?: true
    date?: true
    group?: true
    serviceName?: true
    serviceCode?: true
    price?: true
    quantity?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VasTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VasTransaction to aggregate.
     */
    where?: VasTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VasTransactions to fetch.
     */
    orderBy?: VasTransactionOrderByWithRelationInput | VasTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VasTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VasTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VasTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VasTransactions
    **/
    _count?: true | VasTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VasTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VasTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VasTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VasTransactionMaxAggregateInputType
  }

  export type GetVasTransactionAggregateType<T extends VasTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateVasTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVasTransaction[P]>
      : GetScalarType<T[P], AggregateVasTransaction[P]>
  }




  export type VasTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VasTransactionWhereInput
    orderBy?: VasTransactionOrderByWithAggregationInput | VasTransactionOrderByWithAggregationInput[]
    by: VasTransactionScalarFieldEnum[] | VasTransactionScalarFieldEnum
    having?: VasTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VasTransactionCountAggregateInputType | true
    _avg?: VasTransactionAvgAggregateInputType
    _sum?: VasTransactionSumAggregateInputType
    _min?: VasTransactionMinAggregateInputType
    _max?: VasTransactionMaxAggregateInputType
  }

  export type VasTransactionGroupByOutputType = {
    id: string
    providerId: string
    serviceId: string
    date: Date
    group: string
    serviceName: string
    serviceCode: string
    price: number
    quantity: number
    amount: number
    createdAt: Date
    updatedAt: Date
    _count: VasTransactionCountAggregateOutputType | null
    _avg: VasTransactionAvgAggregateOutputType | null
    _sum: VasTransactionSumAggregateOutputType | null
    _min: VasTransactionMinAggregateOutputType | null
    _max: VasTransactionMaxAggregateOutputType | null
  }

  type GetVasTransactionGroupByPayload<T extends VasTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VasTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VasTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VasTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], VasTransactionGroupByOutputType[P]>
        }
      >
    >


  export type VasTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    serviceId?: boolean
    date?: boolean
    group?: boolean
    serviceName?: boolean
    serviceCode?: boolean
    price?: boolean
    quantity?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vasTransaction"]>

  export type VasTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    serviceId?: boolean
    date?: boolean
    group?: boolean
    serviceName?: boolean
    serviceCode?: boolean
    price?: boolean
    quantity?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vasTransaction"]>

  export type VasTransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    serviceId?: boolean
    date?: boolean
    group?: boolean
    serviceName?: boolean
    serviceCode?: boolean
    price?: boolean
    quantity?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vasTransaction"]>

  export type VasTransactionSelectScalar = {
    id?: boolean
    providerId?: boolean
    serviceId?: boolean
    date?: boolean
    group?: boolean
    serviceName?: boolean
    serviceCode?: boolean
    price?: boolean
    quantity?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VasTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "providerId" | "serviceId" | "date" | "group" | "serviceName" | "serviceCode" | "price" | "quantity" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["vasTransaction"]>
  export type VasTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }
  export type VasTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }
  export type VasTransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }

  export type $VasTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VasTransaction"
    objects: {
      provider: Prisma.$ProviderPayload<ExtArgs>
      service: Prisma.$ServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      providerId: string
      serviceId: string
      date: Date
      group: string
      serviceName: string
      serviceCode: string
      price: number
      quantity: number
      amount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vasTransaction"]>
    composites: {}
  }

  type VasTransactionGetPayload<S extends boolean | null | undefined | VasTransactionDefaultArgs> = $Result.GetResult<Prisma.$VasTransactionPayload, S>

  type VasTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VasTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VasTransactionCountAggregateInputType | true
    }

  export interface VasTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VasTransaction'], meta: { name: 'VasTransaction' } }
    /**
     * Find zero or one VasTransaction that matches the filter.
     * @param {VasTransactionFindUniqueArgs} args - Arguments to find a VasTransaction
     * @example
     * // Get one VasTransaction
     * const vasTransaction = await prisma.vasTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VasTransactionFindUniqueArgs>(args: SelectSubset<T, VasTransactionFindUniqueArgs<ExtArgs>>): Prisma__VasTransactionClient<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VasTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VasTransactionFindUniqueOrThrowArgs} args - Arguments to find a VasTransaction
     * @example
     * // Get one VasTransaction
     * const vasTransaction = await prisma.vasTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VasTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, VasTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VasTransactionClient<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VasTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasTransactionFindFirstArgs} args - Arguments to find a VasTransaction
     * @example
     * // Get one VasTransaction
     * const vasTransaction = await prisma.vasTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VasTransactionFindFirstArgs>(args?: SelectSubset<T, VasTransactionFindFirstArgs<ExtArgs>>): Prisma__VasTransactionClient<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VasTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasTransactionFindFirstOrThrowArgs} args - Arguments to find a VasTransaction
     * @example
     * // Get one VasTransaction
     * const vasTransaction = await prisma.vasTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VasTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, VasTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__VasTransactionClient<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VasTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VasTransactions
     * const vasTransactions = await prisma.vasTransaction.findMany()
     * 
     * // Get first 10 VasTransactions
     * const vasTransactions = await prisma.vasTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vasTransactionWithIdOnly = await prisma.vasTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VasTransactionFindManyArgs>(args?: SelectSubset<T, VasTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VasTransaction.
     * @param {VasTransactionCreateArgs} args - Arguments to create a VasTransaction.
     * @example
     * // Create one VasTransaction
     * const VasTransaction = await prisma.vasTransaction.create({
     *   data: {
     *     // ... data to create a VasTransaction
     *   }
     * })
     * 
     */
    create<T extends VasTransactionCreateArgs>(args: SelectSubset<T, VasTransactionCreateArgs<ExtArgs>>): Prisma__VasTransactionClient<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VasTransactions.
     * @param {VasTransactionCreateManyArgs} args - Arguments to create many VasTransactions.
     * @example
     * // Create many VasTransactions
     * const vasTransaction = await prisma.vasTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VasTransactionCreateManyArgs>(args?: SelectSubset<T, VasTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VasTransactions and returns the data saved in the database.
     * @param {VasTransactionCreateManyAndReturnArgs} args - Arguments to create many VasTransactions.
     * @example
     * // Create many VasTransactions
     * const vasTransaction = await prisma.vasTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VasTransactions and only return the `id`
     * const vasTransactionWithIdOnly = await prisma.vasTransaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VasTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, VasTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VasTransaction.
     * @param {VasTransactionDeleteArgs} args - Arguments to delete one VasTransaction.
     * @example
     * // Delete one VasTransaction
     * const VasTransaction = await prisma.vasTransaction.delete({
     *   where: {
     *     // ... filter to delete one VasTransaction
     *   }
     * })
     * 
     */
    delete<T extends VasTransactionDeleteArgs>(args: SelectSubset<T, VasTransactionDeleteArgs<ExtArgs>>): Prisma__VasTransactionClient<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VasTransaction.
     * @param {VasTransactionUpdateArgs} args - Arguments to update one VasTransaction.
     * @example
     * // Update one VasTransaction
     * const vasTransaction = await prisma.vasTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VasTransactionUpdateArgs>(args: SelectSubset<T, VasTransactionUpdateArgs<ExtArgs>>): Prisma__VasTransactionClient<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VasTransactions.
     * @param {VasTransactionDeleteManyArgs} args - Arguments to filter VasTransactions to delete.
     * @example
     * // Delete a few VasTransactions
     * const { count } = await prisma.vasTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VasTransactionDeleteManyArgs>(args?: SelectSubset<T, VasTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VasTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VasTransactions
     * const vasTransaction = await prisma.vasTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VasTransactionUpdateManyArgs>(args: SelectSubset<T, VasTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VasTransactions and returns the data updated in the database.
     * @param {VasTransactionUpdateManyAndReturnArgs} args - Arguments to update many VasTransactions.
     * @example
     * // Update many VasTransactions
     * const vasTransaction = await prisma.vasTransaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VasTransactions and only return the `id`
     * const vasTransactionWithIdOnly = await prisma.vasTransaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VasTransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, VasTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VasTransaction.
     * @param {VasTransactionUpsertArgs} args - Arguments to update or create a VasTransaction.
     * @example
     * // Update or create a VasTransaction
     * const vasTransaction = await prisma.vasTransaction.upsert({
     *   create: {
     *     // ... data to create a VasTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VasTransaction we want to update
     *   }
     * })
     */
    upsert<T extends VasTransactionUpsertArgs>(args: SelectSubset<T, VasTransactionUpsertArgs<ExtArgs>>): Prisma__VasTransactionClient<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VasTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasTransactionCountArgs} args - Arguments to filter VasTransactions to count.
     * @example
     * // Count the number of VasTransactions
     * const count = await prisma.vasTransaction.count({
     *   where: {
     *     // ... the filter for the VasTransactions we want to count
     *   }
     * })
    **/
    count<T extends VasTransactionCountArgs>(
      args?: Subset<T, VasTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VasTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VasTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VasTransactionAggregateArgs>(args: Subset<T, VasTransactionAggregateArgs>): Prisma.PrismaPromise<GetVasTransactionAggregateType<T>>

    /**
     * Group by VasTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VasTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VasTransactionGroupByArgs['orderBy'] }
        : { orderBy?: VasTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VasTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVasTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VasTransaction model
   */
  readonly fields: VasTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VasTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VasTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    provider<T extends ProviderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProviderDefaultArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VasTransaction model
   */
  interface VasTransactionFieldRefs {
    readonly id: FieldRef<"VasTransaction", 'String'>
    readonly providerId: FieldRef<"VasTransaction", 'String'>
    readonly serviceId: FieldRef<"VasTransaction", 'String'>
    readonly date: FieldRef<"VasTransaction", 'DateTime'>
    readonly group: FieldRef<"VasTransaction", 'String'>
    readonly serviceName: FieldRef<"VasTransaction", 'String'>
    readonly serviceCode: FieldRef<"VasTransaction", 'String'>
    readonly price: FieldRef<"VasTransaction", 'Float'>
    readonly quantity: FieldRef<"VasTransaction", 'Float'>
    readonly amount: FieldRef<"VasTransaction", 'Float'>
    readonly createdAt: FieldRef<"VasTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"VasTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VasTransaction findUnique
   */
  export type VasTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionInclude<ExtArgs> | null
    /**
     * Filter, which VasTransaction to fetch.
     */
    where: VasTransactionWhereUniqueInput
  }

  /**
   * VasTransaction findUniqueOrThrow
   */
  export type VasTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionInclude<ExtArgs> | null
    /**
     * Filter, which VasTransaction to fetch.
     */
    where: VasTransactionWhereUniqueInput
  }

  /**
   * VasTransaction findFirst
   */
  export type VasTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionInclude<ExtArgs> | null
    /**
     * Filter, which VasTransaction to fetch.
     */
    where?: VasTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VasTransactions to fetch.
     */
    orderBy?: VasTransactionOrderByWithRelationInput | VasTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VasTransactions.
     */
    cursor?: VasTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VasTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VasTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VasTransactions.
     */
    distinct?: VasTransactionScalarFieldEnum | VasTransactionScalarFieldEnum[]
  }

  /**
   * VasTransaction findFirstOrThrow
   */
  export type VasTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionInclude<ExtArgs> | null
    /**
     * Filter, which VasTransaction to fetch.
     */
    where?: VasTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VasTransactions to fetch.
     */
    orderBy?: VasTransactionOrderByWithRelationInput | VasTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VasTransactions.
     */
    cursor?: VasTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VasTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VasTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VasTransactions.
     */
    distinct?: VasTransactionScalarFieldEnum | VasTransactionScalarFieldEnum[]
  }

  /**
   * VasTransaction findMany
   */
  export type VasTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionInclude<ExtArgs> | null
    /**
     * Filter, which VasTransactions to fetch.
     */
    where?: VasTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VasTransactions to fetch.
     */
    orderBy?: VasTransactionOrderByWithRelationInput | VasTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VasTransactions.
     */
    cursor?: VasTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VasTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VasTransactions.
     */
    skip?: number
    distinct?: VasTransactionScalarFieldEnum | VasTransactionScalarFieldEnum[]
  }

  /**
   * VasTransaction create
   */
  export type VasTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a VasTransaction.
     */
    data: XOR<VasTransactionCreateInput, VasTransactionUncheckedCreateInput>
  }

  /**
   * VasTransaction createMany
   */
  export type VasTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VasTransactions.
     */
    data: VasTransactionCreateManyInput | VasTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VasTransaction createManyAndReturn
   */
  export type VasTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * The data used to create many VasTransactions.
     */
    data: VasTransactionCreateManyInput | VasTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VasTransaction update
   */
  export type VasTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a VasTransaction.
     */
    data: XOR<VasTransactionUpdateInput, VasTransactionUncheckedUpdateInput>
    /**
     * Choose, which VasTransaction to update.
     */
    where: VasTransactionWhereUniqueInput
  }

  /**
   * VasTransaction updateMany
   */
  export type VasTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VasTransactions.
     */
    data: XOR<VasTransactionUpdateManyMutationInput, VasTransactionUncheckedUpdateManyInput>
    /**
     * Filter which VasTransactions to update
     */
    where?: VasTransactionWhereInput
    /**
     * Limit how many VasTransactions to update.
     */
    limit?: number
  }

  /**
   * VasTransaction updateManyAndReturn
   */
  export type VasTransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * The data used to update VasTransactions.
     */
    data: XOR<VasTransactionUpdateManyMutationInput, VasTransactionUncheckedUpdateManyInput>
    /**
     * Filter which VasTransactions to update
     */
    where?: VasTransactionWhereInput
    /**
     * Limit how many VasTransactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VasTransaction upsert
   */
  export type VasTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the VasTransaction to update in case it exists.
     */
    where: VasTransactionWhereUniqueInput
    /**
     * In case the VasTransaction found by the `where` argument doesn't exist, create a new VasTransaction with this data.
     */
    create: XOR<VasTransactionCreateInput, VasTransactionUncheckedCreateInput>
    /**
     * In case the VasTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VasTransactionUpdateInput, VasTransactionUncheckedUpdateInput>
  }

  /**
   * VasTransaction delete
   */
  export type VasTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionInclude<ExtArgs> | null
    /**
     * Filter which VasTransaction to delete.
     */
    where: VasTransactionWhereUniqueInput
  }

  /**
   * VasTransaction deleteMany
   */
  export type VasTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VasTransactions to delete
     */
    where?: VasTransactionWhereInput
    /**
     * Limit how many VasTransactions to delete.
     */
    limit?: number
  }

  /**
   * VasTransaction without action
   */
  export type VasTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionInclude<ExtArgs> | null
  }


  /**
   * Model ParkingTransaction
   */

  export type AggregateParkingTransaction = {
    _count: ParkingTransactionCountAggregateOutputType | null
    _avg: ParkingTransactionAvgAggregateOutputType | null
    _sum: ParkingTransactionSumAggregateOutputType | null
    _min: ParkingTransactionMinAggregateOutputType | null
    _max: ParkingTransactionMaxAggregateOutputType | null
  }

  export type ParkingTransactionAvgAggregateOutputType = {
    price: number | null
    quantity: number | null
    amount: number | null
  }

  export type ParkingTransactionSumAggregateOutputType = {
    price: number | null
    quantity: number | null
    amount: number | null
  }

  export type ParkingTransactionMinAggregateOutputType = {
    id: string | null
    parkingServiceId: string | null
    date: Date | null
    group: string | null
    serviceName: string | null
    price: number | null
    quantity: number | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    serviceId: string | null
  }

  export type ParkingTransactionMaxAggregateOutputType = {
    id: string | null
    parkingServiceId: string | null
    date: Date | null
    group: string | null
    serviceName: string | null
    price: number | null
    quantity: number | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    serviceId: string | null
  }

  export type ParkingTransactionCountAggregateOutputType = {
    id: number
    parkingServiceId: number
    date: number
    group: number
    serviceName: number
    price: number
    quantity: number
    amount: number
    createdAt: number
    updatedAt: number
    serviceId: number
    _all: number
  }


  export type ParkingTransactionAvgAggregateInputType = {
    price?: true
    quantity?: true
    amount?: true
  }

  export type ParkingTransactionSumAggregateInputType = {
    price?: true
    quantity?: true
    amount?: true
  }

  export type ParkingTransactionMinAggregateInputType = {
    id?: true
    parkingServiceId?: true
    date?: true
    group?: true
    serviceName?: true
    price?: true
    quantity?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    serviceId?: true
  }

  export type ParkingTransactionMaxAggregateInputType = {
    id?: true
    parkingServiceId?: true
    date?: true
    group?: true
    serviceName?: true
    price?: true
    quantity?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    serviceId?: true
  }

  export type ParkingTransactionCountAggregateInputType = {
    id?: true
    parkingServiceId?: true
    date?: true
    group?: true
    serviceName?: true
    price?: true
    quantity?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    serviceId?: true
    _all?: true
  }

  export type ParkingTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParkingTransaction to aggregate.
     */
    where?: ParkingTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingTransactions to fetch.
     */
    orderBy?: ParkingTransactionOrderByWithRelationInput | ParkingTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParkingTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParkingTransactions
    **/
    _count?: true | ParkingTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParkingTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParkingTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParkingTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParkingTransactionMaxAggregateInputType
  }

  export type GetParkingTransactionAggregateType<T extends ParkingTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateParkingTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParkingTransaction[P]>
      : GetScalarType<T[P], AggregateParkingTransaction[P]>
  }




  export type ParkingTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParkingTransactionWhereInput
    orderBy?: ParkingTransactionOrderByWithAggregationInput | ParkingTransactionOrderByWithAggregationInput[]
    by: ParkingTransactionScalarFieldEnum[] | ParkingTransactionScalarFieldEnum
    having?: ParkingTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParkingTransactionCountAggregateInputType | true
    _avg?: ParkingTransactionAvgAggregateInputType
    _sum?: ParkingTransactionSumAggregateInputType
    _min?: ParkingTransactionMinAggregateInputType
    _max?: ParkingTransactionMaxAggregateInputType
  }

  export type ParkingTransactionGroupByOutputType = {
    id: string
    parkingServiceId: string
    date: Date
    group: string
    serviceName: string
    price: number
    quantity: number
    amount: number
    createdAt: Date
    updatedAt: Date
    serviceId: string
    _count: ParkingTransactionCountAggregateOutputType | null
    _avg: ParkingTransactionAvgAggregateOutputType | null
    _sum: ParkingTransactionSumAggregateOutputType | null
    _min: ParkingTransactionMinAggregateOutputType | null
    _max: ParkingTransactionMaxAggregateOutputType | null
  }

  type GetParkingTransactionGroupByPayload<T extends ParkingTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParkingTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParkingTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParkingTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], ParkingTransactionGroupByOutputType[P]>
        }
      >
    >


  export type ParkingTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parkingServiceId?: boolean
    date?: boolean
    group?: boolean
    serviceName?: boolean
    price?: boolean
    quantity?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceId?: boolean
    parkingService?: boolean | ParkingServiceDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parkingTransaction"]>

  export type ParkingTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parkingServiceId?: boolean
    date?: boolean
    group?: boolean
    serviceName?: boolean
    price?: boolean
    quantity?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceId?: boolean
    parkingService?: boolean | ParkingServiceDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parkingTransaction"]>

  export type ParkingTransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parkingServiceId?: boolean
    date?: boolean
    group?: boolean
    serviceName?: boolean
    price?: boolean
    quantity?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceId?: boolean
    parkingService?: boolean | ParkingServiceDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parkingTransaction"]>

  export type ParkingTransactionSelectScalar = {
    id?: boolean
    parkingServiceId?: boolean
    date?: boolean
    group?: boolean
    serviceName?: boolean
    price?: boolean
    quantity?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceId?: boolean
  }

  export type ParkingTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "parkingServiceId" | "date" | "group" | "serviceName" | "price" | "quantity" | "amount" | "createdAt" | "updatedAt" | "serviceId", ExtArgs["result"]["parkingTransaction"]>
  export type ParkingTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parkingService?: boolean | ParkingServiceDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }
  export type ParkingTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parkingService?: boolean | ParkingServiceDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }
  export type ParkingTransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parkingService?: boolean | ParkingServiceDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }

  export type $ParkingTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParkingTransaction"
    objects: {
      parkingService: Prisma.$ParkingServicePayload<ExtArgs>
      service: Prisma.$ServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      parkingServiceId: string
      date: Date
      group: string
      serviceName: string
      price: number
      quantity: number
      amount: number
      createdAt: Date
      updatedAt: Date
      serviceId: string
    }, ExtArgs["result"]["parkingTransaction"]>
    composites: {}
  }

  type ParkingTransactionGetPayload<S extends boolean | null | undefined | ParkingTransactionDefaultArgs> = $Result.GetResult<Prisma.$ParkingTransactionPayload, S>

  type ParkingTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ParkingTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParkingTransactionCountAggregateInputType | true
    }

  export interface ParkingTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParkingTransaction'], meta: { name: 'ParkingTransaction' } }
    /**
     * Find zero or one ParkingTransaction that matches the filter.
     * @param {ParkingTransactionFindUniqueArgs} args - Arguments to find a ParkingTransaction
     * @example
     * // Get one ParkingTransaction
     * const parkingTransaction = await prisma.parkingTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParkingTransactionFindUniqueArgs>(args: SelectSubset<T, ParkingTransactionFindUniqueArgs<ExtArgs>>): Prisma__ParkingTransactionClient<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ParkingTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ParkingTransactionFindUniqueOrThrowArgs} args - Arguments to find a ParkingTransaction
     * @example
     * // Get one ParkingTransaction
     * const parkingTransaction = await prisma.parkingTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParkingTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, ParkingTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParkingTransactionClient<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParkingTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingTransactionFindFirstArgs} args - Arguments to find a ParkingTransaction
     * @example
     * // Get one ParkingTransaction
     * const parkingTransaction = await prisma.parkingTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParkingTransactionFindFirstArgs>(args?: SelectSubset<T, ParkingTransactionFindFirstArgs<ExtArgs>>): Prisma__ParkingTransactionClient<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParkingTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingTransactionFindFirstOrThrowArgs} args - Arguments to find a ParkingTransaction
     * @example
     * // Get one ParkingTransaction
     * const parkingTransaction = await prisma.parkingTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParkingTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, ParkingTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParkingTransactionClient<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ParkingTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParkingTransactions
     * const parkingTransactions = await prisma.parkingTransaction.findMany()
     * 
     * // Get first 10 ParkingTransactions
     * const parkingTransactions = await prisma.parkingTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parkingTransactionWithIdOnly = await prisma.parkingTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParkingTransactionFindManyArgs>(args?: SelectSubset<T, ParkingTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ParkingTransaction.
     * @param {ParkingTransactionCreateArgs} args - Arguments to create a ParkingTransaction.
     * @example
     * // Create one ParkingTransaction
     * const ParkingTransaction = await prisma.parkingTransaction.create({
     *   data: {
     *     // ... data to create a ParkingTransaction
     *   }
     * })
     * 
     */
    create<T extends ParkingTransactionCreateArgs>(args: SelectSubset<T, ParkingTransactionCreateArgs<ExtArgs>>): Prisma__ParkingTransactionClient<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ParkingTransactions.
     * @param {ParkingTransactionCreateManyArgs} args - Arguments to create many ParkingTransactions.
     * @example
     * // Create many ParkingTransactions
     * const parkingTransaction = await prisma.parkingTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParkingTransactionCreateManyArgs>(args?: SelectSubset<T, ParkingTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ParkingTransactions and returns the data saved in the database.
     * @param {ParkingTransactionCreateManyAndReturnArgs} args - Arguments to create many ParkingTransactions.
     * @example
     * // Create many ParkingTransactions
     * const parkingTransaction = await prisma.parkingTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ParkingTransactions and only return the `id`
     * const parkingTransactionWithIdOnly = await prisma.parkingTransaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParkingTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, ParkingTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ParkingTransaction.
     * @param {ParkingTransactionDeleteArgs} args - Arguments to delete one ParkingTransaction.
     * @example
     * // Delete one ParkingTransaction
     * const ParkingTransaction = await prisma.parkingTransaction.delete({
     *   where: {
     *     // ... filter to delete one ParkingTransaction
     *   }
     * })
     * 
     */
    delete<T extends ParkingTransactionDeleteArgs>(args: SelectSubset<T, ParkingTransactionDeleteArgs<ExtArgs>>): Prisma__ParkingTransactionClient<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ParkingTransaction.
     * @param {ParkingTransactionUpdateArgs} args - Arguments to update one ParkingTransaction.
     * @example
     * // Update one ParkingTransaction
     * const parkingTransaction = await prisma.parkingTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParkingTransactionUpdateArgs>(args: SelectSubset<T, ParkingTransactionUpdateArgs<ExtArgs>>): Prisma__ParkingTransactionClient<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ParkingTransactions.
     * @param {ParkingTransactionDeleteManyArgs} args - Arguments to filter ParkingTransactions to delete.
     * @example
     * // Delete a few ParkingTransactions
     * const { count } = await prisma.parkingTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParkingTransactionDeleteManyArgs>(args?: SelectSubset<T, ParkingTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParkingTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParkingTransactions
     * const parkingTransaction = await prisma.parkingTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParkingTransactionUpdateManyArgs>(args: SelectSubset<T, ParkingTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParkingTransactions and returns the data updated in the database.
     * @param {ParkingTransactionUpdateManyAndReturnArgs} args - Arguments to update many ParkingTransactions.
     * @example
     * // Update many ParkingTransactions
     * const parkingTransaction = await prisma.parkingTransaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ParkingTransactions and only return the `id`
     * const parkingTransactionWithIdOnly = await prisma.parkingTransaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ParkingTransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, ParkingTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ParkingTransaction.
     * @param {ParkingTransactionUpsertArgs} args - Arguments to update or create a ParkingTransaction.
     * @example
     * // Update or create a ParkingTransaction
     * const parkingTransaction = await prisma.parkingTransaction.upsert({
     *   create: {
     *     // ... data to create a ParkingTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParkingTransaction we want to update
     *   }
     * })
     */
    upsert<T extends ParkingTransactionUpsertArgs>(args: SelectSubset<T, ParkingTransactionUpsertArgs<ExtArgs>>): Prisma__ParkingTransactionClient<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ParkingTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingTransactionCountArgs} args - Arguments to filter ParkingTransactions to count.
     * @example
     * // Count the number of ParkingTransactions
     * const count = await prisma.parkingTransaction.count({
     *   where: {
     *     // ... the filter for the ParkingTransactions we want to count
     *   }
     * })
    **/
    count<T extends ParkingTransactionCountArgs>(
      args?: Subset<T, ParkingTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParkingTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParkingTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParkingTransactionAggregateArgs>(args: Subset<T, ParkingTransactionAggregateArgs>): Prisma.PrismaPromise<GetParkingTransactionAggregateType<T>>

    /**
     * Group by ParkingTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParkingTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParkingTransactionGroupByArgs['orderBy'] }
        : { orderBy?: ParkingTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParkingTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParkingTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParkingTransaction model
   */
  readonly fields: ParkingTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParkingTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParkingTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parkingService<T extends ParkingServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParkingServiceDefaultArgs<ExtArgs>>): Prisma__ParkingServiceClient<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ParkingTransaction model
   */
  interface ParkingTransactionFieldRefs {
    readonly id: FieldRef<"ParkingTransaction", 'String'>
    readonly parkingServiceId: FieldRef<"ParkingTransaction", 'String'>
    readonly date: FieldRef<"ParkingTransaction", 'DateTime'>
    readonly group: FieldRef<"ParkingTransaction", 'String'>
    readonly serviceName: FieldRef<"ParkingTransaction", 'String'>
    readonly price: FieldRef<"ParkingTransaction", 'Float'>
    readonly quantity: FieldRef<"ParkingTransaction", 'Float'>
    readonly amount: FieldRef<"ParkingTransaction", 'Float'>
    readonly createdAt: FieldRef<"ParkingTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"ParkingTransaction", 'DateTime'>
    readonly serviceId: FieldRef<"ParkingTransaction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ParkingTransaction findUnique
   */
  export type ParkingTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ParkingTransaction to fetch.
     */
    where: ParkingTransactionWhereUniqueInput
  }

  /**
   * ParkingTransaction findUniqueOrThrow
   */
  export type ParkingTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ParkingTransaction to fetch.
     */
    where: ParkingTransactionWhereUniqueInput
  }

  /**
   * ParkingTransaction findFirst
   */
  export type ParkingTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ParkingTransaction to fetch.
     */
    where?: ParkingTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingTransactions to fetch.
     */
    orderBy?: ParkingTransactionOrderByWithRelationInput | ParkingTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParkingTransactions.
     */
    cursor?: ParkingTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParkingTransactions.
     */
    distinct?: ParkingTransactionScalarFieldEnum | ParkingTransactionScalarFieldEnum[]
  }

  /**
   * ParkingTransaction findFirstOrThrow
   */
  export type ParkingTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ParkingTransaction to fetch.
     */
    where?: ParkingTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingTransactions to fetch.
     */
    orderBy?: ParkingTransactionOrderByWithRelationInput | ParkingTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParkingTransactions.
     */
    cursor?: ParkingTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParkingTransactions.
     */
    distinct?: ParkingTransactionScalarFieldEnum | ParkingTransactionScalarFieldEnum[]
  }

  /**
   * ParkingTransaction findMany
   */
  export type ParkingTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ParkingTransactions to fetch.
     */
    where?: ParkingTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingTransactions to fetch.
     */
    orderBy?: ParkingTransactionOrderByWithRelationInput | ParkingTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParkingTransactions.
     */
    cursor?: ParkingTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingTransactions.
     */
    skip?: number
    distinct?: ParkingTransactionScalarFieldEnum | ParkingTransactionScalarFieldEnum[]
  }

  /**
   * ParkingTransaction create
   */
  export type ParkingTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a ParkingTransaction.
     */
    data: XOR<ParkingTransactionCreateInput, ParkingTransactionUncheckedCreateInput>
  }

  /**
   * ParkingTransaction createMany
   */
  export type ParkingTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParkingTransactions.
     */
    data: ParkingTransactionCreateManyInput | ParkingTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParkingTransaction createManyAndReturn
   */
  export type ParkingTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * The data used to create many ParkingTransactions.
     */
    data: ParkingTransactionCreateManyInput | ParkingTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ParkingTransaction update
   */
  export type ParkingTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a ParkingTransaction.
     */
    data: XOR<ParkingTransactionUpdateInput, ParkingTransactionUncheckedUpdateInput>
    /**
     * Choose, which ParkingTransaction to update.
     */
    where: ParkingTransactionWhereUniqueInput
  }

  /**
   * ParkingTransaction updateMany
   */
  export type ParkingTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParkingTransactions.
     */
    data: XOR<ParkingTransactionUpdateManyMutationInput, ParkingTransactionUncheckedUpdateManyInput>
    /**
     * Filter which ParkingTransactions to update
     */
    where?: ParkingTransactionWhereInput
    /**
     * Limit how many ParkingTransactions to update.
     */
    limit?: number
  }

  /**
   * ParkingTransaction updateManyAndReturn
   */
  export type ParkingTransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * The data used to update ParkingTransactions.
     */
    data: XOR<ParkingTransactionUpdateManyMutationInput, ParkingTransactionUncheckedUpdateManyInput>
    /**
     * Filter which ParkingTransactions to update
     */
    where?: ParkingTransactionWhereInput
    /**
     * Limit how many ParkingTransactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ParkingTransaction upsert
   */
  export type ParkingTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the ParkingTransaction to update in case it exists.
     */
    where: ParkingTransactionWhereUniqueInput
    /**
     * In case the ParkingTransaction found by the `where` argument doesn't exist, create a new ParkingTransaction with this data.
     */
    create: XOR<ParkingTransactionCreateInput, ParkingTransactionUncheckedCreateInput>
    /**
     * In case the ParkingTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParkingTransactionUpdateInput, ParkingTransactionUncheckedUpdateInput>
  }

  /**
   * ParkingTransaction delete
   */
  export type ParkingTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionInclude<ExtArgs> | null
    /**
     * Filter which ParkingTransaction to delete.
     */
    where: ParkingTransactionWhereUniqueInput
  }

  /**
   * ParkingTransaction deleteMany
   */
  export type ParkingTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParkingTransactions to delete
     */
    where?: ParkingTransactionWhereInput
    /**
     * Limit how many ParkingTransactions to delete.
     */
    limit?: number
  }

  /**
   * ParkingTransaction without action
   */
  export type ParkingTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionInclude<ExtArgs> | null
  }


  /**
   * Model ParkingService
   */

  export type AggregateParkingService = {
    _count: ParkingServiceCountAggregateOutputType | null
    _avg: ParkingServiceAvgAggregateOutputType | null
    _sum: ParkingServiceSumAggregateOutputType | null
    _min: ParkingServiceMinAggregateOutputType | null
    _max: ParkingServiceMaxAggregateOutputType | null
  }

  export type ParkingServiceAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type ParkingServiceSumAggregateOutputType = {
    fileSize: number | null
  }

  export type ParkingServiceMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    contactName: string | null
    email: string | null
    phone: string | null
    address: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    originalFileName: string | null
    originalFilePath: string | null
    fileSize: number | null
    mimeType: string | null
    lastImportDate: Date | null
    importedBy: string | null
    importStatus: string | null
    createdById: string | null
  }

  export type ParkingServiceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    contactName: string | null
    email: string | null
    phone: string | null
    address: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    originalFileName: string | null
    originalFilePath: string | null
    fileSize: number | null
    mimeType: string | null
    lastImportDate: Date | null
    importedBy: string | null
    importStatus: string | null
    createdById: string | null
  }

  export type ParkingServiceCountAggregateOutputType = {
    id: number
    name: number
    description: number
    contactName: number
    email: number
    phone: number
    address: number
    additionalEmails: number
    isActive: number
    createdAt: number
    updatedAt: number
    originalFileName: number
    originalFilePath: number
    fileSize: number
    mimeType: number
    lastImportDate: number
    importedBy: number
    importStatus: number
    createdById: number
    _all: number
  }


  export type ParkingServiceAvgAggregateInputType = {
    fileSize?: true
  }

  export type ParkingServiceSumAggregateInputType = {
    fileSize?: true
  }

  export type ParkingServiceMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    contactName?: true
    email?: true
    phone?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    originalFileName?: true
    originalFilePath?: true
    fileSize?: true
    mimeType?: true
    lastImportDate?: true
    importedBy?: true
    importStatus?: true
    createdById?: true
  }

  export type ParkingServiceMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    contactName?: true
    email?: true
    phone?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    originalFileName?: true
    originalFilePath?: true
    fileSize?: true
    mimeType?: true
    lastImportDate?: true
    importedBy?: true
    importStatus?: true
    createdById?: true
  }

  export type ParkingServiceCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    contactName?: true
    email?: true
    phone?: true
    address?: true
    additionalEmails?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    originalFileName?: true
    originalFilePath?: true
    fileSize?: true
    mimeType?: true
    lastImportDate?: true
    importedBy?: true
    importStatus?: true
    createdById?: true
    _all?: true
  }

  export type ParkingServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParkingService to aggregate.
     */
    where?: ParkingServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingServices to fetch.
     */
    orderBy?: ParkingServiceOrderByWithRelationInput | ParkingServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParkingServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParkingServices
    **/
    _count?: true | ParkingServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParkingServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParkingServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParkingServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParkingServiceMaxAggregateInputType
  }

  export type GetParkingServiceAggregateType<T extends ParkingServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateParkingService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParkingService[P]>
      : GetScalarType<T[P], AggregateParkingService[P]>
  }




  export type ParkingServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParkingServiceWhereInput
    orderBy?: ParkingServiceOrderByWithAggregationInput | ParkingServiceOrderByWithAggregationInput[]
    by: ParkingServiceScalarFieldEnum[] | ParkingServiceScalarFieldEnum
    having?: ParkingServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParkingServiceCountAggregateInputType | true
    _avg?: ParkingServiceAvgAggregateInputType
    _sum?: ParkingServiceSumAggregateInputType
    _min?: ParkingServiceMinAggregateInputType
    _max?: ParkingServiceMaxAggregateInputType
  }

  export type ParkingServiceGroupByOutputType = {
    id: string
    name: string
    description: string | null
    contactName: string | null
    email: string | null
    phone: string | null
    address: string | null
    additionalEmails: string[]
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    originalFileName: string | null
    originalFilePath: string | null
    fileSize: number | null
    mimeType: string | null
    lastImportDate: Date | null
    importedBy: string | null
    importStatus: string | null
    createdById: string | null
    _count: ParkingServiceCountAggregateOutputType | null
    _avg: ParkingServiceAvgAggregateOutputType | null
    _sum: ParkingServiceSumAggregateOutputType | null
    _min: ParkingServiceMinAggregateOutputType | null
    _max: ParkingServiceMaxAggregateOutputType | null
  }

  type GetParkingServiceGroupByPayload<T extends ParkingServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParkingServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParkingServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParkingServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ParkingServiceGroupByOutputType[P]>
        }
      >
    >


  export type ParkingServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    additionalEmails?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originalFileName?: boolean
    originalFilePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    lastImportDate?: boolean
    importedBy?: boolean
    importStatus?: boolean
    createdById?: boolean
    createdBy?: boolean | ParkingService$createdByArgs<ExtArgs>
    transactions?: boolean | ParkingService$transactionsArgs<ExtArgs>
    contracts?: boolean | ParkingService$contractsArgs<ExtArgs>
    logEntries?: boolean | ParkingService$logEntriesArgs<ExtArgs>
    complaints?: boolean | ParkingService$complaintsArgs<ExtArgs>
    _count?: boolean | ParkingServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parkingService"]>

  export type ParkingServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    additionalEmails?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originalFileName?: boolean
    originalFilePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    lastImportDate?: boolean
    importedBy?: boolean
    importStatus?: boolean
    createdById?: boolean
    createdBy?: boolean | ParkingService$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["parkingService"]>

  export type ParkingServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    additionalEmails?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originalFileName?: boolean
    originalFilePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    lastImportDate?: boolean
    importedBy?: boolean
    importStatus?: boolean
    createdById?: boolean
    createdBy?: boolean | ParkingService$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["parkingService"]>

  export type ParkingServiceSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    additionalEmails?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originalFileName?: boolean
    originalFilePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    lastImportDate?: boolean
    importedBy?: boolean
    importStatus?: boolean
    createdById?: boolean
  }

  export type ParkingServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "contactName" | "email" | "phone" | "address" | "additionalEmails" | "isActive" | "createdAt" | "updatedAt" | "originalFileName" | "originalFilePath" | "fileSize" | "mimeType" | "lastImportDate" | "importedBy" | "importStatus" | "createdById", ExtArgs["result"]["parkingService"]>
  export type ParkingServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | ParkingService$createdByArgs<ExtArgs>
    transactions?: boolean | ParkingService$transactionsArgs<ExtArgs>
    contracts?: boolean | ParkingService$contractsArgs<ExtArgs>
    logEntries?: boolean | ParkingService$logEntriesArgs<ExtArgs>
    complaints?: boolean | ParkingService$complaintsArgs<ExtArgs>
    _count?: boolean | ParkingServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ParkingServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | ParkingService$createdByArgs<ExtArgs>
  }
  export type ParkingServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | ParkingService$createdByArgs<ExtArgs>
  }

  export type $ParkingServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParkingService"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      transactions: Prisma.$ParkingTransactionPayload<ExtArgs>[]
      contracts: Prisma.$ContractPayload<ExtArgs>[]
      logEntries: Prisma.$LogEntryPayload<ExtArgs>[]
      complaints: Prisma.$ComplaintPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      contactName: string | null
      email: string | null
      phone: string | null
      address: string | null
      additionalEmails: string[]
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      originalFileName: string | null
      originalFilePath: string | null
      fileSize: number | null
      mimeType: string | null
      lastImportDate: Date | null
      importedBy: string | null
      importStatus: string | null
      createdById: string | null
    }, ExtArgs["result"]["parkingService"]>
    composites: {}
  }

  type ParkingServiceGetPayload<S extends boolean | null | undefined | ParkingServiceDefaultArgs> = $Result.GetResult<Prisma.$ParkingServicePayload, S>

  type ParkingServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ParkingServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParkingServiceCountAggregateInputType | true
    }

  export interface ParkingServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParkingService'], meta: { name: 'ParkingService' } }
    /**
     * Find zero or one ParkingService that matches the filter.
     * @param {ParkingServiceFindUniqueArgs} args - Arguments to find a ParkingService
     * @example
     * // Get one ParkingService
     * const parkingService = await prisma.parkingService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParkingServiceFindUniqueArgs>(args: SelectSubset<T, ParkingServiceFindUniqueArgs<ExtArgs>>): Prisma__ParkingServiceClient<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ParkingService that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ParkingServiceFindUniqueOrThrowArgs} args - Arguments to find a ParkingService
     * @example
     * // Get one ParkingService
     * const parkingService = await prisma.parkingService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParkingServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ParkingServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParkingServiceClient<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParkingService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingServiceFindFirstArgs} args - Arguments to find a ParkingService
     * @example
     * // Get one ParkingService
     * const parkingService = await prisma.parkingService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParkingServiceFindFirstArgs>(args?: SelectSubset<T, ParkingServiceFindFirstArgs<ExtArgs>>): Prisma__ParkingServiceClient<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParkingService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingServiceFindFirstOrThrowArgs} args - Arguments to find a ParkingService
     * @example
     * // Get one ParkingService
     * const parkingService = await prisma.parkingService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParkingServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ParkingServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParkingServiceClient<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ParkingServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParkingServices
     * const parkingServices = await prisma.parkingService.findMany()
     * 
     * // Get first 10 ParkingServices
     * const parkingServices = await prisma.parkingService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parkingServiceWithIdOnly = await prisma.parkingService.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParkingServiceFindManyArgs>(args?: SelectSubset<T, ParkingServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ParkingService.
     * @param {ParkingServiceCreateArgs} args - Arguments to create a ParkingService.
     * @example
     * // Create one ParkingService
     * const ParkingService = await prisma.parkingService.create({
     *   data: {
     *     // ... data to create a ParkingService
     *   }
     * })
     * 
     */
    create<T extends ParkingServiceCreateArgs>(args: SelectSubset<T, ParkingServiceCreateArgs<ExtArgs>>): Prisma__ParkingServiceClient<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ParkingServices.
     * @param {ParkingServiceCreateManyArgs} args - Arguments to create many ParkingServices.
     * @example
     * // Create many ParkingServices
     * const parkingService = await prisma.parkingService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParkingServiceCreateManyArgs>(args?: SelectSubset<T, ParkingServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ParkingServices and returns the data saved in the database.
     * @param {ParkingServiceCreateManyAndReturnArgs} args - Arguments to create many ParkingServices.
     * @example
     * // Create many ParkingServices
     * const parkingService = await prisma.parkingService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ParkingServices and only return the `id`
     * const parkingServiceWithIdOnly = await prisma.parkingService.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParkingServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, ParkingServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ParkingService.
     * @param {ParkingServiceDeleteArgs} args - Arguments to delete one ParkingService.
     * @example
     * // Delete one ParkingService
     * const ParkingService = await prisma.parkingService.delete({
     *   where: {
     *     // ... filter to delete one ParkingService
     *   }
     * })
     * 
     */
    delete<T extends ParkingServiceDeleteArgs>(args: SelectSubset<T, ParkingServiceDeleteArgs<ExtArgs>>): Prisma__ParkingServiceClient<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ParkingService.
     * @param {ParkingServiceUpdateArgs} args - Arguments to update one ParkingService.
     * @example
     * // Update one ParkingService
     * const parkingService = await prisma.parkingService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParkingServiceUpdateArgs>(args: SelectSubset<T, ParkingServiceUpdateArgs<ExtArgs>>): Prisma__ParkingServiceClient<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ParkingServices.
     * @param {ParkingServiceDeleteManyArgs} args - Arguments to filter ParkingServices to delete.
     * @example
     * // Delete a few ParkingServices
     * const { count } = await prisma.parkingService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParkingServiceDeleteManyArgs>(args?: SelectSubset<T, ParkingServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParkingServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParkingServices
     * const parkingService = await prisma.parkingService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParkingServiceUpdateManyArgs>(args: SelectSubset<T, ParkingServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParkingServices and returns the data updated in the database.
     * @param {ParkingServiceUpdateManyAndReturnArgs} args - Arguments to update many ParkingServices.
     * @example
     * // Update many ParkingServices
     * const parkingService = await prisma.parkingService.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ParkingServices and only return the `id`
     * const parkingServiceWithIdOnly = await prisma.parkingService.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ParkingServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, ParkingServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ParkingService.
     * @param {ParkingServiceUpsertArgs} args - Arguments to update or create a ParkingService.
     * @example
     * // Update or create a ParkingService
     * const parkingService = await prisma.parkingService.upsert({
     *   create: {
     *     // ... data to create a ParkingService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParkingService we want to update
     *   }
     * })
     */
    upsert<T extends ParkingServiceUpsertArgs>(args: SelectSubset<T, ParkingServiceUpsertArgs<ExtArgs>>): Prisma__ParkingServiceClient<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ParkingServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingServiceCountArgs} args - Arguments to filter ParkingServices to count.
     * @example
     * // Count the number of ParkingServices
     * const count = await prisma.parkingService.count({
     *   where: {
     *     // ... the filter for the ParkingServices we want to count
     *   }
     * })
    **/
    count<T extends ParkingServiceCountArgs>(
      args?: Subset<T, ParkingServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParkingServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParkingService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParkingServiceAggregateArgs>(args: Subset<T, ParkingServiceAggregateArgs>): Prisma.PrismaPromise<GetParkingServiceAggregateType<T>>

    /**
     * Group by ParkingService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParkingServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParkingServiceGroupByArgs['orderBy'] }
        : { orderBy?: ParkingServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParkingServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParkingServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParkingService model
   */
  readonly fields: ParkingServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParkingService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParkingServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends ParkingService$createdByArgs<ExtArgs> = {}>(args?: Subset<T, ParkingService$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    transactions<T extends ParkingService$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, ParkingService$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contracts<T extends ParkingService$contractsArgs<ExtArgs> = {}>(args?: Subset<T, ParkingService$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logEntries<T extends ParkingService$logEntriesArgs<ExtArgs> = {}>(args?: Subset<T, ParkingService$logEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    complaints<T extends ParkingService$complaintsArgs<ExtArgs> = {}>(args?: Subset<T, ParkingService$complaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ParkingService model
   */
  interface ParkingServiceFieldRefs {
    readonly id: FieldRef<"ParkingService", 'String'>
    readonly name: FieldRef<"ParkingService", 'String'>
    readonly description: FieldRef<"ParkingService", 'String'>
    readonly contactName: FieldRef<"ParkingService", 'String'>
    readonly email: FieldRef<"ParkingService", 'String'>
    readonly phone: FieldRef<"ParkingService", 'String'>
    readonly address: FieldRef<"ParkingService", 'String'>
    readonly additionalEmails: FieldRef<"ParkingService", 'String[]'>
    readonly isActive: FieldRef<"ParkingService", 'Boolean'>
    readonly createdAt: FieldRef<"ParkingService", 'DateTime'>
    readonly updatedAt: FieldRef<"ParkingService", 'DateTime'>
    readonly originalFileName: FieldRef<"ParkingService", 'String'>
    readonly originalFilePath: FieldRef<"ParkingService", 'String'>
    readonly fileSize: FieldRef<"ParkingService", 'Int'>
    readonly mimeType: FieldRef<"ParkingService", 'String'>
    readonly lastImportDate: FieldRef<"ParkingService", 'DateTime'>
    readonly importedBy: FieldRef<"ParkingService", 'String'>
    readonly importStatus: FieldRef<"ParkingService", 'String'>
    readonly createdById: FieldRef<"ParkingService", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ParkingService findUnique
   */
  export type ParkingServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    /**
     * Filter, which ParkingService to fetch.
     */
    where: ParkingServiceWhereUniqueInput
  }

  /**
   * ParkingService findUniqueOrThrow
   */
  export type ParkingServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    /**
     * Filter, which ParkingService to fetch.
     */
    where: ParkingServiceWhereUniqueInput
  }

  /**
   * ParkingService findFirst
   */
  export type ParkingServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    /**
     * Filter, which ParkingService to fetch.
     */
    where?: ParkingServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingServices to fetch.
     */
    orderBy?: ParkingServiceOrderByWithRelationInput | ParkingServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParkingServices.
     */
    cursor?: ParkingServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParkingServices.
     */
    distinct?: ParkingServiceScalarFieldEnum | ParkingServiceScalarFieldEnum[]
  }

  /**
   * ParkingService findFirstOrThrow
   */
  export type ParkingServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    /**
     * Filter, which ParkingService to fetch.
     */
    where?: ParkingServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingServices to fetch.
     */
    orderBy?: ParkingServiceOrderByWithRelationInput | ParkingServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParkingServices.
     */
    cursor?: ParkingServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParkingServices.
     */
    distinct?: ParkingServiceScalarFieldEnum | ParkingServiceScalarFieldEnum[]
  }

  /**
   * ParkingService findMany
   */
  export type ParkingServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    /**
     * Filter, which ParkingServices to fetch.
     */
    where?: ParkingServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingServices to fetch.
     */
    orderBy?: ParkingServiceOrderByWithRelationInput | ParkingServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParkingServices.
     */
    cursor?: ParkingServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingServices.
     */
    skip?: number
    distinct?: ParkingServiceScalarFieldEnum | ParkingServiceScalarFieldEnum[]
  }

  /**
   * ParkingService create
   */
  export type ParkingServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a ParkingService.
     */
    data: XOR<ParkingServiceCreateInput, ParkingServiceUncheckedCreateInput>
  }

  /**
   * ParkingService createMany
   */
  export type ParkingServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParkingServices.
     */
    data: ParkingServiceCreateManyInput | ParkingServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParkingService createManyAndReturn
   */
  export type ParkingServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * The data used to create many ParkingServices.
     */
    data: ParkingServiceCreateManyInput | ParkingServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ParkingService update
   */
  export type ParkingServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a ParkingService.
     */
    data: XOR<ParkingServiceUpdateInput, ParkingServiceUncheckedUpdateInput>
    /**
     * Choose, which ParkingService to update.
     */
    where: ParkingServiceWhereUniqueInput
  }

  /**
   * ParkingService updateMany
   */
  export type ParkingServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParkingServices.
     */
    data: XOR<ParkingServiceUpdateManyMutationInput, ParkingServiceUncheckedUpdateManyInput>
    /**
     * Filter which ParkingServices to update
     */
    where?: ParkingServiceWhereInput
    /**
     * Limit how many ParkingServices to update.
     */
    limit?: number
  }

  /**
   * ParkingService updateManyAndReturn
   */
  export type ParkingServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * The data used to update ParkingServices.
     */
    data: XOR<ParkingServiceUpdateManyMutationInput, ParkingServiceUncheckedUpdateManyInput>
    /**
     * Filter which ParkingServices to update
     */
    where?: ParkingServiceWhereInput
    /**
     * Limit how many ParkingServices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ParkingService upsert
   */
  export type ParkingServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the ParkingService to update in case it exists.
     */
    where: ParkingServiceWhereUniqueInput
    /**
     * In case the ParkingService found by the `where` argument doesn't exist, create a new ParkingService with this data.
     */
    create: XOR<ParkingServiceCreateInput, ParkingServiceUncheckedCreateInput>
    /**
     * In case the ParkingService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParkingServiceUpdateInput, ParkingServiceUncheckedUpdateInput>
  }

  /**
   * ParkingService delete
   */
  export type ParkingServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    /**
     * Filter which ParkingService to delete.
     */
    where: ParkingServiceWhereUniqueInput
  }

  /**
   * ParkingService deleteMany
   */
  export type ParkingServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParkingServices to delete
     */
    where?: ParkingServiceWhereInput
    /**
     * Limit how many ParkingServices to delete.
     */
    limit?: number
  }

  /**
   * ParkingService.createdBy
   */
  export type ParkingService$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ParkingService.transactions
   */
  export type ParkingService$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionInclude<ExtArgs> | null
    where?: ParkingTransactionWhereInput
    orderBy?: ParkingTransactionOrderByWithRelationInput | ParkingTransactionOrderByWithRelationInput[]
    cursor?: ParkingTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParkingTransactionScalarFieldEnum | ParkingTransactionScalarFieldEnum[]
  }

  /**
   * ParkingService.contracts
   */
  export type ParkingService$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * ParkingService.logEntries
   */
  export type ParkingService$logEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    where?: LogEntryWhereInput
    orderBy?: LogEntryOrderByWithRelationInput | LogEntryOrderByWithRelationInput[]
    cursor?: LogEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogEntryScalarFieldEnum | LogEntryScalarFieldEnum[]
  }

  /**
   * ParkingService.complaints
   */
  export type ParkingService$complaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * ParkingService without action
   */
  export type ParkingServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
  }


  /**
   * Model Contract
   */

  export type AggregateContract = {
    _count: ContractCountAggregateOutputType | null
    _avg: ContractAvgAggregateOutputType | null
    _sum: ContractSumAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  export type ContractAvgAggregateOutputType = {
    revenuePercentage: number | null
    operatorRevenue: number | null
  }

  export type ContractSumAggregateOutputType = {
    revenuePercentage: number | null
    operatorRevenue: number | null
  }

  export type ContractMinAggregateOutputType = {
    id: string | null
    name: string | null
    contractNumber: string | null
    type: $Enums.ContractType | null
    status: $Enums.ContractStatus | null
    startDate: Date | null
    endDate: Date | null
    revenuePercentage: number | null
    description: string | null
    operatorRevenue: number | null
    isRevenueSharing: boolean | null
    operatorId: string | null
    providerId: string | null
    humanitarianOrgId: string | null
    parkingServiceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    lastModifiedById: string | null
  }

  export type ContractMaxAggregateOutputType = {
    id: string | null
    name: string | null
    contractNumber: string | null
    type: $Enums.ContractType | null
    status: $Enums.ContractStatus | null
    startDate: Date | null
    endDate: Date | null
    revenuePercentage: number | null
    description: string | null
    operatorRevenue: number | null
    isRevenueSharing: boolean | null
    operatorId: string | null
    providerId: string | null
    humanitarianOrgId: string | null
    parkingServiceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    lastModifiedById: string | null
  }

  export type ContractCountAggregateOutputType = {
    id: number
    name: number
    contractNumber: number
    type: number
    status: number
    startDate: number
    endDate: number
    revenuePercentage: number
    description: number
    operatorRevenue: number
    isRevenueSharing: number
    operatorId: number
    providerId: number
    humanitarianOrgId: number
    parkingServiceId: number
    createdAt: number
    updatedAt: number
    createdById: number
    lastModifiedById: number
    _all: number
  }


  export type ContractAvgAggregateInputType = {
    revenuePercentage?: true
    operatorRevenue?: true
  }

  export type ContractSumAggregateInputType = {
    revenuePercentage?: true
    operatorRevenue?: true
  }

  export type ContractMinAggregateInputType = {
    id?: true
    name?: true
    contractNumber?: true
    type?: true
    status?: true
    startDate?: true
    endDate?: true
    revenuePercentage?: true
    description?: true
    operatorRevenue?: true
    isRevenueSharing?: true
    operatorId?: true
    providerId?: true
    humanitarianOrgId?: true
    parkingServiceId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    lastModifiedById?: true
  }

  export type ContractMaxAggregateInputType = {
    id?: true
    name?: true
    contractNumber?: true
    type?: true
    status?: true
    startDate?: true
    endDate?: true
    revenuePercentage?: true
    description?: true
    operatorRevenue?: true
    isRevenueSharing?: true
    operatorId?: true
    providerId?: true
    humanitarianOrgId?: true
    parkingServiceId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    lastModifiedById?: true
  }

  export type ContractCountAggregateInputType = {
    id?: true
    name?: true
    contractNumber?: true
    type?: true
    status?: true
    startDate?: true
    endDate?: true
    revenuePercentage?: true
    description?: true
    operatorRevenue?: true
    isRevenueSharing?: true
    operatorId?: true
    providerId?: true
    humanitarianOrgId?: true
    parkingServiceId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    lastModifiedById?: true
    _all?: true
  }

  export type ContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contract to aggregate.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contracts
    **/
    _count?: true | ContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContractAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContractSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractMaxAggregateInputType
  }

  export type GetContractAggregateType<T extends ContractAggregateArgs> = {
        [P in keyof T & keyof AggregateContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContract[P]>
      : GetScalarType<T[P], AggregateContract[P]>
  }




  export type ContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithAggregationInput | ContractOrderByWithAggregationInput[]
    by: ContractScalarFieldEnum[] | ContractScalarFieldEnum
    having?: ContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractCountAggregateInputType | true
    _avg?: ContractAvgAggregateInputType
    _sum?: ContractSumAggregateInputType
    _min?: ContractMinAggregateInputType
    _max?: ContractMaxAggregateInputType
  }

  export type ContractGroupByOutputType = {
    id: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status: $Enums.ContractStatus
    startDate: Date
    endDate: Date
    revenuePercentage: number
    description: string | null
    operatorRevenue: number | null
    isRevenueSharing: boolean
    operatorId: string | null
    providerId: string | null
    humanitarianOrgId: string | null
    parkingServiceId: string | null
    createdAt: Date
    updatedAt: Date
    createdById: string
    lastModifiedById: string | null
    _count: ContractCountAggregateOutputType | null
    _avg: ContractAvgAggregateOutputType | null
    _sum: ContractSumAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  type GetContractGroupByPayload<T extends ContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractGroupByOutputType[P]>
            : GetScalarType<T[P], ContractGroupByOutputType[P]>
        }
      >
    >


  export type ContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contractNumber?: boolean
    type?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    revenuePercentage?: boolean
    description?: boolean
    operatorRevenue?: boolean
    isRevenueSharing?: boolean
    operatorId?: boolean
    providerId?: boolean
    humanitarianOrgId?: boolean
    parkingServiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    lastModifiedById?: boolean
    provider?: boolean | Contract$providerArgs<ExtArgs>
    operator?: boolean | Contract$operatorArgs<ExtArgs>
    humanitarianOrg?: boolean | Contract$humanitarianOrgArgs<ExtArgs>
    parkingService?: boolean | Contract$parkingServiceArgs<ExtArgs>
    services?: boolean | Contract$servicesArgs<ExtArgs>
    attachments?: boolean | Contract$attachmentsArgs<ExtArgs>
    humanitarianRenewals?: boolean | Contract$humanitarianRenewalsArgs<ExtArgs>
    renewals?: boolean | Contract$renewalsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | Contract$lastModifiedByArgs<ExtArgs>
    reminders?: boolean | Contract$remindersArgs<ExtArgs>
    _count?: boolean | ContractCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contractNumber?: boolean
    type?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    revenuePercentage?: boolean
    description?: boolean
    operatorRevenue?: boolean
    isRevenueSharing?: boolean
    operatorId?: boolean
    providerId?: boolean
    humanitarianOrgId?: boolean
    parkingServiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    lastModifiedById?: boolean
    provider?: boolean | Contract$providerArgs<ExtArgs>
    operator?: boolean | Contract$operatorArgs<ExtArgs>
    humanitarianOrg?: boolean | Contract$humanitarianOrgArgs<ExtArgs>
    parkingService?: boolean | Contract$parkingServiceArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | Contract$lastModifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contractNumber?: boolean
    type?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    revenuePercentage?: boolean
    description?: boolean
    operatorRevenue?: boolean
    isRevenueSharing?: boolean
    operatorId?: boolean
    providerId?: boolean
    humanitarianOrgId?: boolean
    parkingServiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    lastModifiedById?: boolean
    provider?: boolean | Contract$providerArgs<ExtArgs>
    operator?: boolean | Contract$operatorArgs<ExtArgs>
    humanitarianOrg?: boolean | Contract$humanitarianOrgArgs<ExtArgs>
    parkingService?: boolean | Contract$parkingServiceArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | Contract$lastModifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectScalar = {
    id?: boolean
    name?: boolean
    contractNumber?: boolean
    type?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    revenuePercentage?: boolean
    description?: boolean
    operatorRevenue?: boolean
    isRevenueSharing?: boolean
    operatorId?: boolean
    providerId?: boolean
    humanitarianOrgId?: boolean
    parkingServiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    lastModifiedById?: boolean
  }

  export type ContractOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "contractNumber" | "type" | "status" | "startDate" | "endDate" | "revenuePercentage" | "description" | "operatorRevenue" | "isRevenueSharing" | "operatorId" | "providerId" | "humanitarianOrgId" | "parkingServiceId" | "createdAt" | "updatedAt" | "createdById" | "lastModifiedById", ExtArgs["result"]["contract"]>
  export type ContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | Contract$providerArgs<ExtArgs>
    operator?: boolean | Contract$operatorArgs<ExtArgs>
    humanitarianOrg?: boolean | Contract$humanitarianOrgArgs<ExtArgs>
    parkingService?: boolean | Contract$parkingServiceArgs<ExtArgs>
    services?: boolean | Contract$servicesArgs<ExtArgs>
    attachments?: boolean | Contract$attachmentsArgs<ExtArgs>
    humanitarianRenewals?: boolean | Contract$humanitarianRenewalsArgs<ExtArgs>
    renewals?: boolean | Contract$renewalsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | Contract$lastModifiedByArgs<ExtArgs>
    reminders?: boolean | Contract$remindersArgs<ExtArgs>
    _count?: boolean | ContractCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContractIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | Contract$providerArgs<ExtArgs>
    operator?: boolean | Contract$operatorArgs<ExtArgs>
    humanitarianOrg?: boolean | Contract$humanitarianOrgArgs<ExtArgs>
    parkingService?: boolean | Contract$parkingServiceArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | Contract$lastModifiedByArgs<ExtArgs>
  }
  export type ContractIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | Contract$providerArgs<ExtArgs>
    operator?: boolean | Contract$operatorArgs<ExtArgs>
    humanitarianOrg?: boolean | Contract$humanitarianOrgArgs<ExtArgs>
    parkingService?: boolean | Contract$parkingServiceArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | Contract$lastModifiedByArgs<ExtArgs>
  }

  export type $ContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contract"
    objects: {
      provider: Prisma.$ProviderPayload<ExtArgs> | null
      operator: Prisma.$OperatorPayload<ExtArgs> | null
      humanitarianOrg: Prisma.$HumanitarianOrgPayload<ExtArgs> | null
      parkingService: Prisma.$ParkingServicePayload<ExtArgs> | null
      services: Prisma.$ServiceContractPayload<ExtArgs>[]
      attachments: Prisma.$ContractAttachmentPayload<ExtArgs>[]
      humanitarianRenewals: Prisma.$HumanitarianContractRenewalPayload<ExtArgs>[]
      renewals: Prisma.$ContractRenewalPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs>
      lastModifiedBy: Prisma.$UserPayload<ExtArgs> | null
      reminders: Prisma.$ContractReminderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      contractNumber: string
      type: $Enums.ContractType
      status: $Enums.ContractStatus
      startDate: Date
      endDate: Date
      revenuePercentage: number
      description: string | null
      operatorRevenue: number | null
      isRevenueSharing: boolean
      operatorId: string | null
      providerId: string | null
      humanitarianOrgId: string | null
      parkingServiceId: string | null
      createdAt: Date
      updatedAt: Date
      createdById: string
      lastModifiedById: string | null
    }, ExtArgs["result"]["contract"]>
    composites: {}
  }

  type ContractGetPayload<S extends boolean | null | undefined | ContractDefaultArgs> = $Result.GetResult<Prisma.$ContractPayload, S>

  type ContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContractFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractCountAggregateInputType | true
    }

  export interface ContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contract'], meta: { name: 'Contract' } }
    /**
     * Find zero or one Contract that matches the filter.
     * @param {ContractFindUniqueArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractFindUniqueArgs>(args: SelectSubset<T, ContractFindUniqueArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contract that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContractFindUniqueOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractFindFirstArgs>(args?: SelectSubset<T, ContractFindFirstArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contracts
     * const contracts = await prisma.contract.findMany()
     * 
     * // Get first 10 Contracts
     * const contracts = await prisma.contract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractWithIdOnly = await prisma.contract.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractFindManyArgs>(args?: SelectSubset<T, ContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contract.
     * @param {ContractCreateArgs} args - Arguments to create a Contract.
     * @example
     * // Create one Contract
     * const Contract = await prisma.contract.create({
     *   data: {
     *     // ... data to create a Contract
     *   }
     * })
     * 
     */
    create<T extends ContractCreateArgs>(args: SelectSubset<T, ContractCreateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contracts.
     * @param {ContractCreateManyArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractCreateManyArgs>(args?: SelectSubset<T, ContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contracts and returns the data saved in the database.
     * @param {ContractCreateManyAndReturnArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contracts and only return the `id`
     * const contractWithIdOnly = await prisma.contract.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contract.
     * @param {ContractDeleteArgs} args - Arguments to delete one Contract.
     * @example
     * // Delete one Contract
     * const Contract = await prisma.contract.delete({
     *   where: {
     *     // ... filter to delete one Contract
     *   }
     * })
     * 
     */
    delete<T extends ContractDeleteArgs>(args: SelectSubset<T, ContractDeleteArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contract.
     * @param {ContractUpdateArgs} args - Arguments to update one Contract.
     * @example
     * // Update one Contract
     * const contract = await prisma.contract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractUpdateArgs>(args: SelectSubset<T, ContractUpdateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contracts.
     * @param {ContractDeleteManyArgs} args - Arguments to filter Contracts to delete.
     * @example
     * // Delete a few Contracts
     * const { count } = await prisma.contract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractDeleteManyArgs>(args?: SelectSubset<T, ContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contracts
     * const contract = await prisma.contract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractUpdateManyArgs>(args: SelectSubset<T, ContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts and returns the data updated in the database.
     * @param {ContractUpdateManyAndReturnArgs} args - Arguments to update many Contracts.
     * @example
     * // Update many Contracts
     * const contract = await prisma.contract.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contracts and only return the `id`
     * const contractWithIdOnly = await prisma.contract.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContractUpdateManyAndReturnArgs>(args: SelectSubset<T, ContractUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contract.
     * @param {ContractUpsertArgs} args - Arguments to update or create a Contract.
     * @example
     * // Update or create a Contract
     * const contract = await prisma.contract.upsert({
     *   create: {
     *     // ... data to create a Contract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contract we want to update
     *   }
     * })
     */
    upsert<T extends ContractUpsertArgs>(args: SelectSubset<T, ContractUpsertArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractCountArgs} args - Arguments to filter Contracts to count.
     * @example
     * // Count the number of Contracts
     * const count = await prisma.contract.count({
     *   where: {
     *     // ... the filter for the Contracts we want to count
     *   }
     * })
    **/
    count<T extends ContractCountArgs>(
      args?: Subset<T, ContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractAggregateArgs>(args: Subset<T, ContractAggregateArgs>): Prisma.PrismaPromise<GetContractAggregateType<T>>

    /**
     * Group by Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractGroupByArgs['orderBy'] }
        : { orderBy?: ContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contract model
   */
  readonly fields: ContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    provider<T extends Contract$providerArgs<ExtArgs> = {}>(args?: Subset<T, Contract$providerArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    operator<T extends Contract$operatorArgs<ExtArgs> = {}>(args?: Subset<T, Contract$operatorArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    humanitarianOrg<T extends Contract$humanitarianOrgArgs<ExtArgs> = {}>(args?: Subset<T, Contract$humanitarianOrgArgs<ExtArgs>>): Prisma__HumanitarianOrgClient<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    parkingService<T extends Contract$parkingServiceArgs<ExtArgs> = {}>(args?: Subset<T, Contract$parkingServiceArgs<ExtArgs>>): Prisma__ParkingServiceClient<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    services<T extends Contract$servicesArgs<ExtArgs> = {}>(args?: Subset<T, Contract$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attachments<T extends Contract$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Contract$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    humanitarianRenewals<T extends Contract$humanitarianRenewalsArgs<ExtArgs> = {}>(args?: Subset<T, Contract$humanitarianRenewalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    renewals<T extends Contract$renewalsArgs<ExtArgs> = {}>(args?: Subset<T, Contract$renewalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lastModifiedBy<T extends Contract$lastModifiedByArgs<ExtArgs> = {}>(args?: Subset<T, Contract$lastModifiedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reminders<T extends Contract$remindersArgs<ExtArgs> = {}>(args?: Subset<T, Contract$remindersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contract model
   */
  interface ContractFieldRefs {
    readonly id: FieldRef<"Contract", 'String'>
    readonly name: FieldRef<"Contract", 'String'>
    readonly contractNumber: FieldRef<"Contract", 'String'>
    readonly type: FieldRef<"Contract", 'ContractType'>
    readonly status: FieldRef<"Contract", 'ContractStatus'>
    readonly startDate: FieldRef<"Contract", 'DateTime'>
    readonly endDate: FieldRef<"Contract", 'DateTime'>
    readonly revenuePercentage: FieldRef<"Contract", 'Float'>
    readonly description: FieldRef<"Contract", 'String'>
    readonly operatorRevenue: FieldRef<"Contract", 'Float'>
    readonly isRevenueSharing: FieldRef<"Contract", 'Boolean'>
    readonly operatorId: FieldRef<"Contract", 'String'>
    readonly providerId: FieldRef<"Contract", 'String'>
    readonly humanitarianOrgId: FieldRef<"Contract", 'String'>
    readonly parkingServiceId: FieldRef<"Contract", 'String'>
    readonly createdAt: FieldRef<"Contract", 'DateTime'>
    readonly updatedAt: FieldRef<"Contract", 'DateTime'>
    readonly createdById: FieldRef<"Contract", 'String'>
    readonly lastModifiedById: FieldRef<"Contract", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Contract findUnique
   */
  export type ContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findUniqueOrThrow
   */
  export type ContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findFirst
   */
  export type ContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findFirstOrThrow
   */
  export type ContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findMany
   */
  export type ContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contracts to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract create
   */
  export type ContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to create a Contract.
     */
    data: XOR<ContractCreateInput, ContractUncheckedCreateInput>
  }

  /**
   * Contract createMany
   */
  export type ContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contract createManyAndReturn
   */
  export type ContractCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contract update
   */
  export type ContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to update a Contract.
     */
    data: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
    /**
     * Choose, which Contract to update.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract updateMany
   */
  export type ContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to update.
     */
    limit?: number
  }

  /**
   * Contract updateManyAndReturn
   */
  export type ContractUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contract upsert
   */
  export type ContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The filter to search for the Contract to update in case it exists.
     */
    where: ContractWhereUniqueInput
    /**
     * In case the Contract found by the `where` argument doesn't exist, create a new Contract with this data.
     */
    create: XOR<ContractCreateInput, ContractUncheckedCreateInput>
    /**
     * In case the Contract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
  }

  /**
   * Contract delete
   */
  export type ContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter which Contract to delete.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract deleteMany
   */
  export type ContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contracts to delete
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to delete.
     */
    limit?: number
  }

  /**
   * Contract.provider
   */
  export type Contract$providerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    where?: ProviderWhereInput
  }

  /**
   * Contract.operator
   */
  export type Contract$operatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    where?: OperatorWhereInput
  }

  /**
   * Contract.humanitarianOrg
   */
  export type Contract$humanitarianOrgArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianOrgInclude<ExtArgs> | null
    where?: HumanitarianOrgWhereInput
  }

  /**
   * Contract.parkingService
   */
  export type Contract$parkingServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    where?: ParkingServiceWhereInput
  }

  /**
   * Contract.services
   */
  export type Contract$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractInclude<ExtArgs> | null
    where?: ServiceContractWhereInput
    orderBy?: ServiceContractOrderByWithRelationInput | ServiceContractOrderByWithRelationInput[]
    cursor?: ServiceContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceContractScalarFieldEnum | ServiceContractScalarFieldEnum[]
  }

  /**
   * Contract.attachments
   */
  export type Contract$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentInclude<ExtArgs> | null
    where?: ContractAttachmentWhereInput
    orderBy?: ContractAttachmentOrderByWithRelationInput | ContractAttachmentOrderByWithRelationInput[]
    cursor?: ContractAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractAttachmentScalarFieldEnum | ContractAttachmentScalarFieldEnum[]
  }

  /**
   * Contract.humanitarianRenewals
   */
  export type Contract$humanitarianRenewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    where?: HumanitarianContractRenewalWhereInput
    orderBy?: HumanitarianContractRenewalOrderByWithRelationInput | HumanitarianContractRenewalOrderByWithRelationInput[]
    cursor?: HumanitarianContractRenewalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HumanitarianContractRenewalScalarFieldEnum | HumanitarianContractRenewalScalarFieldEnum[]
  }

  /**
   * Contract.renewals
   */
  export type Contract$renewalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
    where?: ContractRenewalWhereInput
    orderBy?: ContractRenewalOrderByWithRelationInput | ContractRenewalOrderByWithRelationInput[]
    cursor?: ContractRenewalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractRenewalScalarFieldEnum | ContractRenewalScalarFieldEnum[]
  }

  /**
   * Contract.lastModifiedBy
   */
  export type Contract$lastModifiedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Contract.reminders
   */
  export type Contract$remindersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderInclude<ExtArgs> | null
    where?: ContractReminderWhereInput
    orderBy?: ContractReminderOrderByWithRelationInput | ContractReminderOrderByWithRelationInput[]
    cursor?: ContractReminderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractReminderScalarFieldEnum | ContractReminderScalarFieldEnum[]
  }

  /**
   * Contract without action
   */
  export type ContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
  }


  /**
   * Model ContractRenewal
   */

  export type AggregateContractRenewal = {
    _count: ContractRenewalCountAggregateOutputType | null
    _avg: ContractRenewalAvgAggregateOutputType | null
    _sum: ContractRenewalSumAggregateOutputType | null
    _min: ContractRenewalMinAggregateOutputType | null
    _max: ContractRenewalMaxAggregateOutputType | null
  }

  export type ContractRenewalAvgAggregateOutputType = {
    proposedRevenue: number | null
  }

  export type ContractRenewalSumAggregateOutputType = {
    proposedRevenue: number | null
  }

  export type ContractRenewalMinAggregateOutputType = {
    id: string | null
    contractId: string | null
    subStatus: $Enums.ContractRenewalSubStatus | null
    renewalStartDate: Date | null
    proposedStartDate: Date | null
    proposedEndDate: Date | null
    proposedRevenue: number | null
    documentsReceived: boolean | null
    legalApproved: boolean | null
    financialApproved: boolean | null
    technicalApproved: boolean | null
    managementApproved: boolean | null
    signatureReceived: boolean | null
    comments: string | null
    internalNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    lastModifiedById: string | null
  }

  export type ContractRenewalMaxAggregateOutputType = {
    id: string | null
    contractId: string | null
    subStatus: $Enums.ContractRenewalSubStatus | null
    renewalStartDate: Date | null
    proposedStartDate: Date | null
    proposedEndDate: Date | null
    proposedRevenue: number | null
    documentsReceived: boolean | null
    legalApproved: boolean | null
    financialApproved: boolean | null
    technicalApproved: boolean | null
    managementApproved: boolean | null
    signatureReceived: boolean | null
    comments: string | null
    internalNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    lastModifiedById: string | null
  }

  export type ContractRenewalCountAggregateOutputType = {
    id: number
    contractId: number
    subStatus: number
    renewalStartDate: number
    proposedStartDate: number
    proposedEndDate: number
    proposedRevenue: number
    documentsReceived: number
    legalApproved: number
    financialApproved: number
    technicalApproved: number
    managementApproved: number
    signatureReceived: number
    comments: number
    internalNotes: number
    createdAt: number
    updatedAt: number
    createdById: number
    lastModifiedById: number
    _all: number
  }


  export type ContractRenewalAvgAggregateInputType = {
    proposedRevenue?: true
  }

  export type ContractRenewalSumAggregateInputType = {
    proposedRevenue?: true
  }

  export type ContractRenewalMinAggregateInputType = {
    id?: true
    contractId?: true
    subStatus?: true
    renewalStartDate?: true
    proposedStartDate?: true
    proposedEndDate?: true
    proposedRevenue?: true
    documentsReceived?: true
    legalApproved?: true
    financialApproved?: true
    technicalApproved?: true
    managementApproved?: true
    signatureReceived?: true
    comments?: true
    internalNotes?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    lastModifiedById?: true
  }

  export type ContractRenewalMaxAggregateInputType = {
    id?: true
    contractId?: true
    subStatus?: true
    renewalStartDate?: true
    proposedStartDate?: true
    proposedEndDate?: true
    proposedRevenue?: true
    documentsReceived?: true
    legalApproved?: true
    financialApproved?: true
    technicalApproved?: true
    managementApproved?: true
    signatureReceived?: true
    comments?: true
    internalNotes?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    lastModifiedById?: true
  }

  export type ContractRenewalCountAggregateInputType = {
    id?: true
    contractId?: true
    subStatus?: true
    renewalStartDate?: true
    proposedStartDate?: true
    proposedEndDate?: true
    proposedRevenue?: true
    documentsReceived?: true
    legalApproved?: true
    financialApproved?: true
    technicalApproved?: true
    managementApproved?: true
    signatureReceived?: true
    comments?: true
    internalNotes?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    lastModifiedById?: true
    _all?: true
  }

  export type ContractRenewalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractRenewal to aggregate.
     */
    where?: ContractRenewalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractRenewals to fetch.
     */
    orderBy?: ContractRenewalOrderByWithRelationInput | ContractRenewalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractRenewalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractRenewals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractRenewals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContractRenewals
    **/
    _count?: true | ContractRenewalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContractRenewalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContractRenewalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractRenewalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractRenewalMaxAggregateInputType
  }

  export type GetContractRenewalAggregateType<T extends ContractRenewalAggregateArgs> = {
        [P in keyof T & keyof AggregateContractRenewal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContractRenewal[P]>
      : GetScalarType<T[P], AggregateContractRenewal[P]>
  }




  export type ContractRenewalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractRenewalWhereInput
    orderBy?: ContractRenewalOrderByWithAggregationInput | ContractRenewalOrderByWithAggregationInput[]
    by: ContractRenewalScalarFieldEnum[] | ContractRenewalScalarFieldEnum
    having?: ContractRenewalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractRenewalCountAggregateInputType | true
    _avg?: ContractRenewalAvgAggregateInputType
    _sum?: ContractRenewalSumAggregateInputType
    _min?: ContractRenewalMinAggregateInputType
    _max?: ContractRenewalMaxAggregateInputType
  }

  export type ContractRenewalGroupByOutputType = {
    id: string
    contractId: string
    subStatus: $Enums.ContractRenewalSubStatus
    renewalStartDate: Date
    proposedStartDate: Date
    proposedEndDate: Date
    proposedRevenue: number | null
    documentsReceived: boolean
    legalApproved: boolean
    financialApproved: boolean
    technicalApproved: boolean
    managementApproved: boolean
    signatureReceived: boolean
    comments: string | null
    internalNotes: string | null
    createdAt: Date
    updatedAt: Date
    createdById: string
    lastModifiedById: string | null
    _count: ContractRenewalCountAggregateOutputType | null
    _avg: ContractRenewalAvgAggregateOutputType | null
    _sum: ContractRenewalSumAggregateOutputType | null
    _min: ContractRenewalMinAggregateOutputType | null
    _max: ContractRenewalMaxAggregateOutputType | null
  }

  type GetContractRenewalGroupByPayload<T extends ContractRenewalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractRenewalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractRenewalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractRenewalGroupByOutputType[P]>
            : GetScalarType<T[P], ContractRenewalGroupByOutputType[P]>
        }
      >
    >


  export type ContractRenewalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    subStatus?: boolean
    renewalStartDate?: boolean
    proposedStartDate?: boolean
    proposedEndDate?: boolean
    proposedRevenue?: boolean
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: boolean
    internalNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    lastModifiedById?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    attachments?: boolean | ContractRenewal$attachmentsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | ContractRenewal$lastModifiedByArgs<ExtArgs>
    _count?: boolean | ContractRenewalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractRenewal"]>

  export type ContractRenewalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    subStatus?: boolean
    renewalStartDate?: boolean
    proposedStartDate?: boolean
    proposedEndDate?: boolean
    proposedRevenue?: boolean
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: boolean
    internalNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    lastModifiedById?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | ContractRenewal$lastModifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["contractRenewal"]>

  export type ContractRenewalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    subStatus?: boolean
    renewalStartDate?: boolean
    proposedStartDate?: boolean
    proposedEndDate?: boolean
    proposedRevenue?: boolean
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: boolean
    internalNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    lastModifiedById?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | ContractRenewal$lastModifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["contractRenewal"]>

  export type ContractRenewalSelectScalar = {
    id?: boolean
    contractId?: boolean
    subStatus?: boolean
    renewalStartDate?: boolean
    proposedStartDate?: boolean
    proposedEndDate?: boolean
    proposedRevenue?: boolean
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: boolean
    internalNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    lastModifiedById?: boolean
  }

  export type ContractRenewalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contractId" | "subStatus" | "renewalStartDate" | "proposedStartDate" | "proposedEndDate" | "proposedRevenue" | "documentsReceived" | "legalApproved" | "financialApproved" | "technicalApproved" | "managementApproved" | "signatureReceived" | "comments" | "internalNotes" | "createdAt" | "updatedAt" | "createdById" | "lastModifiedById", ExtArgs["result"]["contractRenewal"]>
  export type ContractRenewalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    attachments?: boolean | ContractRenewal$attachmentsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | ContractRenewal$lastModifiedByArgs<ExtArgs>
    _count?: boolean | ContractRenewalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContractRenewalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | ContractRenewal$lastModifiedByArgs<ExtArgs>
  }
  export type ContractRenewalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | ContractRenewal$lastModifiedByArgs<ExtArgs>
  }

  export type $ContractRenewalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContractRenewal"
    objects: {
      contract: Prisma.$ContractPayload<ExtArgs>
      attachments: Prisma.$ContractRenewalAttachmentPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs>
      lastModifiedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      contractId: string
      subStatus: $Enums.ContractRenewalSubStatus
      renewalStartDate: Date
      proposedStartDate: Date
      proposedEndDate: Date
      proposedRevenue: number | null
      documentsReceived: boolean
      legalApproved: boolean
      financialApproved: boolean
      technicalApproved: boolean
      managementApproved: boolean
      signatureReceived: boolean
      comments: string | null
      internalNotes: string | null
      createdAt: Date
      updatedAt: Date
      createdById: string
      lastModifiedById: string | null
    }, ExtArgs["result"]["contractRenewal"]>
    composites: {}
  }

  type ContractRenewalGetPayload<S extends boolean | null | undefined | ContractRenewalDefaultArgs> = $Result.GetResult<Prisma.$ContractRenewalPayload, S>

  type ContractRenewalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContractRenewalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractRenewalCountAggregateInputType | true
    }

  export interface ContractRenewalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContractRenewal'], meta: { name: 'ContractRenewal' } }
    /**
     * Find zero or one ContractRenewal that matches the filter.
     * @param {ContractRenewalFindUniqueArgs} args - Arguments to find a ContractRenewal
     * @example
     * // Get one ContractRenewal
     * const contractRenewal = await prisma.contractRenewal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractRenewalFindUniqueArgs>(args: SelectSubset<T, ContractRenewalFindUniqueArgs<ExtArgs>>): Prisma__ContractRenewalClient<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContractRenewal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContractRenewalFindUniqueOrThrowArgs} args - Arguments to find a ContractRenewal
     * @example
     * // Get one ContractRenewal
     * const contractRenewal = await prisma.contractRenewal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractRenewalFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractRenewalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractRenewalClient<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContractRenewal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalFindFirstArgs} args - Arguments to find a ContractRenewal
     * @example
     * // Get one ContractRenewal
     * const contractRenewal = await prisma.contractRenewal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractRenewalFindFirstArgs>(args?: SelectSubset<T, ContractRenewalFindFirstArgs<ExtArgs>>): Prisma__ContractRenewalClient<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContractRenewal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalFindFirstOrThrowArgs} args - Arguments to find a ContractRenewal
     * @example
     * // Get one ContractRenewal
     * const contractRenewal = await prisma.contractRenewal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractRenewalFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractRenewalFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractRenewalClient<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContractRenewals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContractRenewals
     * const contractRenewals = await prisma.contractRenewal.findMany()
     * 
     * // Get first 10 ContractRenewals
     * const contractRenewals = await prisma.contractRenewal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractRenewalWithIdOnly = await prisma.contractRenewal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractRenewalFindManyArgs>(args?: SelectSubset<T, ContractRenewalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContractRenewal.
     * @param {ContractRenewalCreateArgs} args - Arguments to create a ContractRenewal.
     * @example
     * // Create one ContractRenewal
     * const ContractRenewal = await prisma.contractRenewal.create({
     *   data: {
     *     // ... data to create a ContractRenewal
     *   }
     * })
     * 
     */
    create<T extends ContractRenewalCreateArgs>(args: SelectSubset<T, ContractRenewalCreateArgs<ExtArgs>>): Prisma__ContractRenewalClient<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContractRenewals.
     * @param {ContractRenewalCreateManyArgs} args - Arguments to create many ContractRenewals.
     * @example
     * // Create many ContractRenewals
     * const contractRenewal = await prisma.contractRenewal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractRenewalCreateManyArgs>(args?: SelectSubset<T, ContractRenewalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContractRenewals and returns the data saved in the database.
     * @param {ContractRenewalCreateManyAndReturnArgs} args - Arguments to create many ContractRenewals.
     * @example
     * // Create many ContractRenewals
     * const contractRenewal = await prisma.contractRenewal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContractRenewals and only return the `id`
     * const contractRenewalWithIdOnly = await prisma.contractRenewal.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractRenewalCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractRenewalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContractRenewal.
     * @param {ContractRenewalDeleteArgs} args - Arguments to delete one ContractRenewal.
     * @example
     * // Delete one ContractRenewal
     * const ContractRenewal = await prisma.contractRenewal.delete({
     *   where: {
     *     // ... filter to delete one ContractRenewal
     *   }
     * })
     * 
     */
    delete<T extends ContractRenewalDeleteArgs>(args: SelectSubset<T, ContractRenewalDeleteArgs<ExtArgs>>): Prisma__ContractRenewalClient<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContractRenewal.
     * @param {ContractRenewalUpdateArgs} args - Arguments to update one ContractRenewal.
     * @example
     * // Update one ContractRenewal
     * const contractRenewal = await prisma.contractRenewal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractRenewalUpdateArgs>(args: SelectSubset<T, ContractRenewalUpdateArgs<ExtArgs>>): Prisma__ContractRenewalClient<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContractRenewals.
     * @param {ContractRenewalDeleteManyArgs} args - Arguments to filter ContractRenewals to delete.
     * @example
     * // Delete a few ContractRenewals
     * const { count } = await prisma.contractRenewal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractRenewalDeleteManyArgs>(args?: SelectSubset<T, ContractRenewalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContractRenewals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContractRenewals
     * const contractRenewal = await prisma.contractRenewal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractRenewalUpdateManyArgs>(args: SelectSubset<T, ContractRenewalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContractRenewals and returns the data updated in the database.
     * @param {ContractRenewalUpdateManyAndReturnArgs} args - Arguments to update many ContractRenewals.
     * @example
     * // Update many ContractRenewals
     * const contractRenewal = await prisma.contractRenewal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContractRenewals and only return the `id`
     * const contractRenewalWithIdOnly = await prisma.contractRenewal.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContractRenewalUpdateManyAndReturnArgs>(args: SelectSubset<T, ContractRenewalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContractRenewal.
     * @param {ContractRenewalUpsertArgs} args - Arguments to update or create a ContractRenewal.
     * @example
     * // Update or create a ContractRenewal
     * const contractRenewal = await prisma.contractRenewal.upsert({
     *   create: {
     *     // ... data to create a ContractRenewal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContractRenewal we want to update
     *   }
     * })
     */
    upsert<T extends ContractRenewalUpsertArgs>(args: SelectSubset<T, ContractRenewalUpsertArgs<ExtArgs>>): Prisma__ContractRenewalClient<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContractRenewals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalCountArgs} args - Arguments to filter ContractRenewals to count.
     * @example
     * // Count the number of ContractRenewals
     * const count = await prisma.contractRenewal.count({
     *   where: {
     *     // ... the filter for the ContractRenewals we want to count
     *   }
     * })
    **/
    count<T extends ContractRenewalCountArgs>(
      args?: Subset<T, ContractRenewalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractRenewalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContractRenewal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractRenewalAggregateArgs>(args: Subset<T, ContractRenewalAggregateArgs>): Prisma.PrismaPromise<GetContractRenewalAggregateType<T>>

    /**
     * Group by ContractRenewal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractRenewalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractRenewalGroupByArgs['orderBy'] }
        : { orderBy?: ContractRenewalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractRenewalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractRenewalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContractRenewal model
   */
  readonly fields: ContractRenewalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContractRenewal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractRenewalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contract<T extends ContractDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractDefaultArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attachments<T extends ContractRenewal$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, ContractRenewal$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lastModifiedBy<T extends ContractRenewal$lastModifiedByArgs<ExtArgs> = {}>(args?: Subset<T, ContractRenewal$lastModifiedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContractRenewal model
   */
  interface ContractRenewalFieldRefs {
    readonly id: FieldRef<"ContractRenewal", 'String'>
    readonly contractId: FieldRef<"ContractRenewal", 'String'>
    readonly subStatus: FieldRef<"ContractRenewal", 'ContractRenewalSubStatus'>
    readonly renewalStartDate: FieldRef<"ContractRenewal", 'DateTime'>
    readonly proposedStartDate: FieldRef<"ContractRenewal", 'DateTime'>
    readonly proposedEndDate: FieldRef<"ContractRenewal", 'DateTime'>
    readonly proposedRevenue: FieldRef<"ContractRenewal", 'Float'>
    readonly documentsReceived: FieldRef<"ContractRenewal", 'Boolean'>
    readonly legalApproved: FieldRef<"ContractRenewal", 'Boolean'>
    readonly financialApproved: FieldRef<"ContractRenewal", 'Boolean'>
    readonly technicalApproved: FieldRef<"ContractRenewal", 'Boolean'>
    readonly managementApproved: FieldRef<"ContractRenewal", 'Boolean'>
    readonly signatureReceived: FieldRef<"ContractRenewal", 'Boolean'>
    readonly comments: FieldRef<"ContractRenewal", 'String'>
    readonly internalNotes: FieldRef<"ContractRenewal", 'String'>
    readonly createdAt: FieldRef<"ContractRenewal", 'DateTime'>
    readonly updatedAt: FieldRef<"ContractRenewal", 'DateTime'>
    readonly createdById: FieldRef<"ContractRenewal", 'String'>
    readonly lastModifiedById: FieldRef<"ContractRenewal", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ContractRenewal findUnique
   */
  export type ContractRenewalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
    /**
     * Filter, which ContractRenewal to fetch.
     */
    where: ContractRenewalWhereUniqueInput
  }

  /**
   * ContractRenewal findUniqueOrThrow
   */
  export type ContractRenewalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
    /**
     * Filter, which ContractRenewal to fetch.
     */
    where: ContractRenewalWhereUniqueInput
  }

  /**
   * ContractRenewal findFirst
   */
  export type ContractRenewalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
    /**
     * Filter, which ContractRenewal to fetch.
     */
    where?: ContractRenewalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractRenewals to fetch.
     */
    orderBy?: ContractRenewalOrderByWithRelationInput | ContractRenewalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractRenewals.
     */
    cursor?: ContractRenewalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractRenewals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractRenewals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractRenewals.
     */
    distinct?: ContractRenewalScalarFieldEnum | ContractRenewalScalarFieldEnum[]
  }

  /**
   * ContractRenewal findFirstOrThrow
   */
  export type ContractRenewalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
    /**
     * Filter, which ContractRenewal to fetch.
     */
    where?: ContractRenewalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractRenewals to fetch.
     */
    orderBy?: ContractRenewalOrderByWithRelationInput | ContractRenewalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractRenewals.
     */
    cursor?: ContractRenewalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractRenewals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractRenewals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractRenewals.
     */
    distinct?: ContractRenewalScalarFieldEnum | ContractRenewalScalarFieldEnum[]
  }

  /**
   * ContractRenewal findMany
   */
  export type ContractRenewalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
    /**
     * Filter, which ContractRenewals to fetch.
     */
    where?: ContractRenewalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractRenewals to fetch.
     */
    orderBy?: ContractRenewalOrderByWithRelationInput | ContractRenewalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContractRenewals.
     */
    cursor?: ContractRenewalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractRenewals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractRenewals.
     */
    skip?: number
    distinct?: ContractRenewalScalarFieldEnum | ContractRenewalScalarFieldEnum[]
  }

  /**
   * ContractRenewal create
   */
  export type ContractRenewalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
    /**
     * The data needed to create a ContractRenewal.
     */
    data: XOR<ContractRenewalCreateInput, ContractRenewalUncheckedCreateInput>
  }

  /**
   * ContractRenewal createMany
   */
  export type ContractRenewalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContractRenewals.
     */
    data: ContractRenewalCreateManyInput | ContractRenewalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContractRenewal createManyAndReturn
   */
  export type ContractRenewalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * The data used to create many ContractRenewals.
     */
    data: ContractRenewalCreateManyInput | ContractRenewalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContractRenewal update
   */
  export type ContractRenewalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
    /**
     * The data needed to update a ContractRenewal.
     */
    data: XOR<ContractRenewalUpdateInput, ContractRenewalUncheckedUpdateInput>
    /**
     * Choose, which ContractRenewal to update.
     */
    where: ContractRenewalWhereUniqueInput
  }

  /**
   * ContractRenewal updateMany
   */
  export type ContractRenewalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContractRenewals.
     */
    data: XOR<ContractRenewalUpdateManyMutationInput, ContractRenewalUncheckedUpdateManyInput>
    /**
     * Filter which ContractRenewals to update
     */
    where?: ContractRenewalWhereInput
    /**
     * Limit how many ContractRenewals to update.
     */
    limit?: number
  }

  /**
   * ContractRenewal updateManyAndReturn
   */
  export type ContractRenewalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * The data used to update ContractRenewals.
     */
    data: XOR<ContractRenewalUpdateManyMutationInput, ContractRenewalUncheckedUpdateManyInput>
    /**
     * Filter which ContractRenewals to update
     */
    where?: ContractRenewalWhereInput
    /**
     * Limit how many ContractRenewals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContractRenewal upsert
   */
  export type ContractRenewalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
    /**
     * The filter to search for the ContractRenewal to update in case it exists.
     */
    where: ContractRenewalWhereUniqueInput
    /**
     * In case the ContractRenewal found by the `where` argument doesn't exist, create a new ContractRenewal with this data.
     */
    create: XOR<ContractRenewalCreateInput, ContractRenewalUncheckedCreateInput>
    /**
     * In case the ContractRenewal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractRenewalUpdateInput, ContractRenewalUncheckedUpdateInput>
  }

  /**
   * ContractRenewal delete
   */
  export type ContractRenewalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
    /**
     * Filter which ContractRenewal to delete.
     */
    where: ContractRenewalWhereUniqueInput
  }

  /**
   * ContractRenewal deleteMany
   */
  export type ContractRenewalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractRenewals to delete
     */
    where?: ContractRenewalWhereInput
    /**
     * Limit how many ContractRenewals to delete.
     */
    limit?: number
  }

  /**
   * ContractRenewal.attachments
   */
  export type ContractRenewal$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentInclude<ExtArgs> | null
    where?: ContractRenewalAttachmentWhereInput
    orderBy?: ContractRenewalAttachmentOrderByWithRelationInput | ContractRenewalAttachmentOrderByWithRelationInput[]
    cursor?: ContractRenewalAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractRenewalAttachmentScalarFieldEnum | ContractRenewalAttachmentScalarFieldEnum[]
  }

  /**
   * ContractRenewal.lastModifiedBy
   */
  export type ContractRenewal$lastModifiedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ContractRenewal without action
   */
  export type ContractRenewalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewal
     */
    select?: ContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewal
     */
    omit?: ContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalInclude<ExtArgs> | null
  }


  /**
   * Model ContractRenewalAttachment
   */

  export type AggregateContractRenewalAttachment = {
    _count: ContractRenewalAttachmentCountAggregateOutputType | null
    _avg: ContractRenewalAttachmentAvgAggregateOutputType | null
    _sum: ContractRenewalAttachmentSumAggregateOutputType | null
    _min: ContractRenewalAttachmentMinAggregateOutputType | null
    _max: ContractRenewalAttachmentMaxAggregateOutputType | null
  }

  export type ContractRenewalAttachmentAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type ContractRenewalAttachmentSumAggregateOutputType = {
    fileSize: number | null
  }

  export type ContractRenewalAttachmentMinAggregateOutputType = {
    id: string | null
    renewalId: string | null
    fileName: string | null
    fileSize: number | null
    fileType: string | null
    filePath: string | null
    uploadedAt: Date | null
    uploadedById: string | null
    description: string | null
  }

  export type ContractRenewalAttachmentMaxAggregateOutputType = {
    id: string | null
    renewalId: string | null
    fileName: string | null
    fileSize: number | null
    fileType: string | null
    filePath: string | null
    uploadedAt: Date | null
    uploadedById: string | null
    description: string | null
  }

  export type ContractRenewalAttachmentCountAggregateOutputType = {
    id: number
    renewalId: number
    fileName: number
    fileSize: number
    fileType: number
    filePath: number
    uploadedAt: number
    uploadedById: number
    description: number
    _all: number
  }


  export type ContractRenewalAttachmentAvgAggregateInputType = {
    fileSize?: true
  }

  export type ContractRenewalAttachmentSumAggregateInputType = {
    fileSize?: true
  }

  export type ContractRenewalAttachmentMinAggregateInputType = {
    id?: true
    renewalId?: true
    fileName?: true
    fileSize?: true
    fileType?: true
    filePath?: true
    uploadedAt?: true
    uploadedById?: true
    description?: true
  }

  export type ContractRenewalAttachmentMaxAggregateInputType = {
    id?: true
    renewalId?: true
    fileName?: true
    fileSize?: true
    fileType?: true
    filePath?: true
    uploadedAt?: true
    uploadedById?: true
    description?: true
  }

  export type ContractRenewalAttachmentCountAggregateInputType = {
    id?: true
    renewalId?: true
    fileName?: true
    fileSize?: true
    fileType?: true
    filePath?: true
    uploadedAt?: true
    uploadedById?: true
    description?: true
    _all?: true
  }

  export type ContractRenewalAttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractRenewalAttachment to aggregate.
     */
    where?: ContractRenewalAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractRenewalAttachments to fetch.
     */
    orderBy?: ContractRenewalAttachmentOrderByWithRelationInput | ContractRenewalAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractRenewalAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractRenewalAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractRenewalAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContractRenewalAttachments
    **/
    _count?: true | ContractRenewalAttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContractRenewalAttachmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContractRenewalAttachmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractRenewalAttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractRenewalAttachmentMaxAggregateInputType
  }

  export type GetContractRenewalAttachmentAggregateType<T extends ContractRenewalAttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateContractRenewalAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContractRenewalAttachment[P]>
      : GetScalarType<T[P], AggregateContractRenewalAttachment[P]>
  }




  export type ContractRenewalAttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractRenewalAttachmentWhereInput
    orderBy?: ContractRenewalAttachmentOrderByWithAggregationInput | ContractRenewalAttachmentOrderByWithAggregationInput[]
    by: ContractRenewalAttachmentScalarFieldEnum[] | ContractRenewalAttachmentScalarFieldEnum
    having?: ContractRenewalAttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractRenewalAttachmentCountAggregateInputType | true
    _avg?: ContractRenewalAttachmentAvgAggregateInputType
    _sum?: ContractRenewalAttachmentSumAggregateInputType
    _min?: ContractRenewalAttachmentMinAggregateInputType
    _max?: ContractRenewalAttachmentMaxAggregateInputType
  }

  export type ContractRenewalAttachmentGroupByOutputType = {
    id: string
    renewalId: string
    fileName: string
    fileSize: number
    fileType: string
    filePath: string
    uploadedAt: Date
    uploadedById: string
    description: string | null
    _count: ContractRenewalAttachmentCountAggregateOutputType | null
    _avg: ContractRenewalAttachmentAvgAggregateOutputType | null
    _sum: ContractRenewalAttachmentSumAggregateOutputType | null
    _min: ContractRenewalAttachmentMinAggregateOutputType | null
    _max: ContractRenewalAttachmentMaxAggregateOutputType | null
  }

  type GetContractRenewalAttachmentGroupByPayload<T extends ContractRenewalAttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractRenewalAttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractRenewalAttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractRenewalAttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], ContractRenewalAttachmentGroupByOutputType[P]>
        }
      >
    >


  export type ContractRenewalAttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    renewalId?: boolean
    fileName?: boolean
    fileSize?: boolean
    fileType?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    uploadedById?: boolean
    description?: boolean
    renewal?: boolean | ContractRenewalDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractRenewalAttachment"]>

  export type ContractRenewalAttachmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    renewalId?: boolean
    fileName?: boolean
    fileSize?: boolean
    fileType?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    uploadedById?: boolean
    description?: boolean
    renewal?: boolean | ContractRenewalDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractRenewalAttachment"]>

  export type ContractRenewalAttachmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    renewalId?: boolean
    fileName?: boolean
    fileSize?: boolean
    fileType?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    uploadedById?: boolean
    description?: boolean
    renewal?: boolean | ContractRenewalDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractRenewalAttachment"]>

  export type ContractRenewalAttachmentSelectScalar = {
    id?: boolean
    renewalId?: boolean
    fileName?: boolean
    fileSize?: boolean
    fileType?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    uploadedById?: boolean
    description?: boolean
  }

  export type ContractRenewalAttachmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "renewalId" | "fileName" | "fileSize" | "fileType" | "filePath" | "uploadedAt" | "uploadedById" | "description", ExtArgs["result"]["contractRenewalAttachment"]>
  export type ContractRenewalAttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    renewal?: boolean | ContractRenewalDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ContractRenewalAttachmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    renewal?: boolean | ContractRenewalDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ContractRenewalAttachmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    renewal?: boolean | ContractRenewalDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ContractRenewalAttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContractRenewalAttachment"
    objects: {
      renewal: Prisma.$ContractRenewalPayload<ExtArgs>
      uploadedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      renewalId: string
      fileName: string
      fileSize: number
      fileType: string
      filePath: string
      uploadedAt: Date
      uploadedById: string
      description: string | null
    }, ExtArgs["result"]["contractRenewalAttachment"]>
    composites: {}
  }

  type ContractRenewalAttachmentGetPayload<S extends boolean | null | undefined | ContractRenewalAttachmentDefaultArgs> = $Result.GetResult<Prisma.$ContractRenewalAttachmentPayload, S>

  type ContractRenewalAttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContractRenewalAttachmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractRenewalAttachmentCountAggregateInputType | true
    }

  export interface ContractRenewalAttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContractRenewalAttachment'], meta: { name: 'ContractRenewalAttachment' } }
    /**
     * Find zero or one ContractRenewalAttachment that matches the filter.
     * @param {ContractRenewalAttachmentFindUniqueArgs} args - Arguments to find a ContractRenewalAttachment
     * @example
     * // Get one ContractRenewalAttachment
     * const contractRenewalAttachment = await prisma.contractRenewalAttachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractRenewalAttachmentFindUniqueArgs>(args: SelectSubset<T, ContractRenewalAttachmentFindUniqueArgs<ExtArgs>>): Prisma__ContractRenewalAttachmentClient<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContractRenewalAttachment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContractRenewalAttachmentFindUniqueOrThrowArgs} args - Arguments to find a ContractRenewalAttachment
     * @example
     * // Get one ContractRenewalAttachment
     * const contractRenewalAttachment = await prisma.contractRenewalAttachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractRenewalAttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractRenewalAttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractRenewalAttachmentClient<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContractRenewalAttachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalAttachmentFindFirstArgs} args - Arguments to find a ContractRenewalAttachment
     * @example
     * // Get one ContractRenewalAttachment
     * const contractRenewalAttachment = await prisma.contractRenewalAttachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractRenewalAttachmentFindFirstArgs>(args?: SelectSubset<T, ContractRenewalAttachmentFindFirstArgs<ExtArgs>>): Prisma__ContractRenewalAttachmentClient<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContractRenewalAttachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalAttachmentFindFirstOrThrowArgs} args - Arguments to find a ContractRenewalAttachment
     * @example
     * // Get one ContractRenewalAttachment
     * const contractRenewalAttachment = await prisma.contractRenewalAttachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractRenewalAttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractRenewalAttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractRenewalAttachmentClient<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContractRenewalAttachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalAttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContractRenewalAttachments
     * const contractRenewalAttachments = await prisma.contractRenewalAttachment.findMany()
     * 
     * // Get first 10 ContractRenewalAttachments
     * const contractRenewalAttachments = await prisma.contractRenewalAttachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractRenewalAttachmentWithIdOnly = await prisma.contractRenewalAttachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractRenewalAttachmentFindManyArgs>(args?: SelectSubset<T, ContractRenewalAttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContractRenewalAttachment.
     * @param {ContractRenewalAttachmentCreateArgs} args - Arguments to create a ContractRenewalAttachment.
     * @example
     * // Create one ContractRenewalAttachment
     * const ContractRenewalAttachment = await prisma.contractRenewalAttachment.create({
     *   data: {
     *     // ... data to create a ContractRenewalAttachment
     *   }
     * })
     * 
     */
    create<T extends ContractRenewalAttachmentCreateArgs>(args: SelectSubset<T, ContractRenewalAttachmentCreateArgs<ExtArgs>>): Prisma__ContractRenewalAttachmentClient<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContractRenewalAttachments.
     * @param {ContractRenewalAttachmentCreateManyArgs} args - Arguments to create many ContractRenewalAttachments.
     * @example
     * // Create many ContractRenewalAttachments
     * const contractRenewalAttachment = await prisma.contractRenewalAttachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractRenewalAttachmentCreateManyArgs>(args?: SelectSubset<T, ContractRenewalAttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContractRenewalAttachments and returns the data saved in the database.
     * @param {ContractRenewalAttachmentCreateManyAndReturnArgs} args - Arguments to create many ContractRenewalAttachments.
     * @example
     * // Create many ContractRenewalAttachments
     * const contractRenewalAttachment = await prisma.contractRenewalAttachment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContractRenewalAttachments and only return the `id`
     * const contractRenewalAttachmentWithIdOnly = await prisma.contractRenewalAttachment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractRenewalAttachmentCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractRenewalAttachmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContractRenewalAttachment.
     * @param {ContractRenewalAttachmentDeleteArgs} args - Arguments to delete one ContractRenewalAttachment.
     * @example
     * // Delete one ContractRenewalAttachment
     * const ContractRenewalAttachment = await prisma.contractRenewalAttachment.delete({
     *   where: {
     *     // ... filter to delete one ContractRenewalAttachment
     *   }
     * })
     * 
     */
    delete<T extends ContractRenewalAttachmentDeleteArgs>(args: SelectSubset<T, ContractRenewalAttachmentDeleteArgs<ExtArgs>>): Prisma__ContractRenewalAttachmentClient<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContractRenewalAttachment.
     * @param {ContractRenewalAttachmentUpdateArgs} args - Arguments to update one ContractRenewalAttachment.
     * @example
     * // Update one ContractRenewalAttachment
     * const contractRenewalAttachment = await prisma.contractRenewalAttachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractRenewalAttachmentUpdateArgs>(args: SelectSubset<T, ContractRenewalAttachmentUpdateArgs<ExtArgs>>): Prisma__ContractRenewalAttachmentClient<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContractRenewalAttachments.
     * @param {ContractRenewalAttachmentDeleteManyArgs} args - Arguments to filter ContractRenewalAttachments to delete.
     * @example
     * // Delete a few ContractRenewalAttachments
     * const { count } = await prisma.contractRenewalAttachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractRenewalAttachmentDeleteManyArgs>(args?: SelectSubset<T, ContractRenewalAttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContractRenewalAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalAttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContractRenewalAttachments
     * const contractRenewalAttachment = await prisma.contractRenewalAttachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractRenewalAttachmentUpdateManyArgs>(args: SelectSubset<T, ContractRenewalAttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContractRenewalAttachments and returns the data updated in the database.
     * @param {ContractRenewalAttachmentUpdateManyAndReturnArgs} args - Arguments to update many ContractRenewalAttachments.
     * @example
     * // Update many ContractRenewalAttachments
     * const contractRenewalAttachment = await prisma.contractRenewalAttachment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContractRenewalAttachments and only return the `id`
     * const contractRenewalAttachmentWithIdOnly = await prisma.contractRenewalAttachment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContractRenewalAttachmentUpdateManyAndReturnArgs>(args: SelectSubset<T, ContractRenewalAttachmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContractRenewalAttachment.
     * @param {ContractRenewalAttachmentUpsertArgs} args - Arguments to update or create a ContractRenewalAttachment.
     * @example
     * // Update or create a ContractRenewalAttachment
     * const contractRenewalAttachment = await prisma.contractRenewalAttachment.upsert({
     *   create: {
     *     // ... data to create a ContractRenewalAttachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContractRenewalAttachment we want to update
     *   }
     * })
     */
    upsert<T extends ContractRenewalAttachmentUpsertArgs>(args: SelectSubset<T, ContractRenewalAttachmentUpsertArgs<ExtArgs>>): Prisma__ContractRenewalAttachmentClient<$Result.GetResult<Prisma.$ContractRenewalAttachmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContractRenewalAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalAttachmentCountArgs} args - Arguments to filter ContractRenewalAttachments to count.
     * @example
     * // Count the number of ContractRenewalAttachments
     * const count = await prisma.contractRenewalAttachment.count({
     *   where: {
     *     // ... the filter for the ContractRenewalAttachments we want to count
     *   }
     * })
    **/
    count<T extends ContractRenewalAttachmentCountArgs>(
      args?: Subset<T, ContractRenewalAttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractRenewalAttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContractRenewalAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalAttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractRenewalAttachmentAggregateArgs>(args: Subset<T, ContractRenewalAttachmentAggregateArgs>): Prisma.PrismaPromise<GetContractRenewalAttachmentAggregateType<T>>

    /**
     * Group by ContractRenewalAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractRenewalAttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractRenewalAttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractRenewalAttachmentGroupByArgs['orderBy'] }
        : { orderBy?: ContractRenewalAttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractRenewalAttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractRenewalAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContractRenewalAttachment model
   */
  readonly fields: ContractRenewalAttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContractRenewalAttachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractRenewalAttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    renewal<T extends ContractRenewalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractRenewalDefaultArgs<ExtArgs>>): Prisma__ContractRenewalClient<$Result.GetResult<Prisma.$ContractRenewalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContractRenewalAttachment model
   */
  interface ContractRenewalAttachmentFieldRefs {
    readonly id: FieldRef<"ContractRenewalAttachment", 'String'>
    readonly renewalId: FieldRef<"ContractRenewalAttachment", 'String'>
    readonly fileName: FieldRef<"ContractRenewalAttachment", 'String'>
    readonly fileSize: FieldRef<"ContractRenewalAttachment", 'Int'>
    readonly fileType: FieldRef<"ContractRenewalAttachment", 'String'>
    readonly filePath: FieldRef<"ContractRenewalAttachment", 'String'>
    readonly uploadedAt: FieldRef<"ContractRenewalAttachment", 'DateTime'>
    readonly uploadedById: FieldRef<"ContractRenewalAttachment", 'String'>
    readonly description: FieldRef<"ContractRenewalAttachment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ContractRenewalAttachment findUnique
   */
  export type ContractRenewalAttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which ContractRenewalAttachment to fetch.
     */
    where: ContractRenewalAttachmentWhereUniqueInput
  }

  /**
   * ContractRenewalAttachment findUniqueOrThrow
   */
  export type ContractRenewalAttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which ContractRenewalAttachment to fetch.
     */
    where: ContractRenewalAttachmentWhereUniqueInput
  }

  /**
   * ContractRenewalAttachment findFirst
   */
  export type ContractRenewalAttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which ContractRenewalAttachment to fetch.
     */
    where?: ContractRenewalAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractRenewalAttachments to fetch.
     */
    orderBy?: ContractRenewalAttachmentOrderByWithRelationInput | ContractRenewalAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractRenewalAttachments.
     */
    cursor?: ContractRenewalAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractRenewalAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractRenewalAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractRenewalAttachments.
     */
    distinct?: ContractRenewalAttachmentScalarFieldEnum | ContractRenewalAttachmentScalarFieldEnum[]
  }

  /**
   * ContractRenewalAttachment findFirstOrThrow
   */
  export type ContractRenewalAttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which ContractRenewalAttachment to fetch.
     */
    where?: ContractRenewalAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractRenewalAttachments to fetch.
     */
    orderBy?: ContractRenewalAttachmentOrderByWithRelationInput | ContractRenewalAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractRenewalAttachments.
     */
    cursor?: ContractRenewalAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractRenewalAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractRenewalAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractRenewalAttachments.
     */
    distinct?: ContractRenewalAttachmentScalarFieldEnum | ContractRenewalAttachmentScalarFieldEnum[]
  }

  /**
   * ContractRenewalAttachment findMany
   */
  export type ContractRenewalAttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which ContractRenewalAttachments to fetch.
     */
    where?: ContractRenewalAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractRenewalAttachments to fetch.
     */
    orderBy?: ContractRenewalAttachmentOrderByWithRelationInput | ContractRenewalAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContractRenewalAttachments.
     */
    cursor?: ContractRenewalAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractRenewalAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractRenewalAttachments.
     */
    skip?: number
    distinct?: ContractRenewalAttachmentScalarFieldEnum | ContractRenewalAttachmentScalarFieldEnum[]
  }

  /**
   * ContractRenewalAttachment create
   */
  export type ContractRenewalAttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a ContractRenewalAttachment.
     */
    data: XOR<ContractRenewalAttachmentCreateInput, ContractRenewalAttachmentUncheckedCreateInput>
  }

  /**
   * ContractRenewalAttachment createMany
   */
  export type ContractRenewalAttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContractRenewalAttachments.
     */
    data: ContractRenewalAttachmentCreateManyInput | ContractRenewalAttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContractRenewalAttachment createManyAndReturn
   */
  export type ContractRenewalAttachmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * The data used to create many ContractRenewalAttachments.
     */
    data: ContractRenewalAttachmentCreateManyInput | ContractRenewalAttachmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContractRenewalAttachment update
   */
  export type ContractRenewalAttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a ContractRenewalAttachment.
     */
    data: XOR<ContractRenewalAttachmentUpdateInput, ContractRenewalAttachmentUncheckedUpdateInput>
    /**
     * Choose, which ContractRenewalAttachment to update.
     */
    where: ContractRenewalAttachmentWhereUniqueInput
  }

  /**
   * ContractRenewalAttachment updateMany
   */
  export type ContractRenewalAttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContractRenewalAttachments.
     */
    data: XOR<ContractRenewalAttachmentUpdateManyMutationInput, ContractRenewalAttachmentUncheckedUpdateManyInput>
    /**
     * Filter which ContractRenewalAttachments to update
     */
    where?: ContractRenewalAttachmentWhereInput
    /**
     * Limit how many ContractRenewalAttachments to update.
     */
    limit?: number
  }

  /**
   * ContractRenewalAttachment updateManyAndReturn
   */
  export type ContractRenewalAttachmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * The data used to update ContractRenewalAttachments.
     */
    data: XOR<ContractRenewalAttachmentUpdateManyMutationInput, ContractRenewalAttachmentUncheckedUpdateManyInput>
    /**
     * Filter which ContractRenewalAttachments to update
     */
    where?: ContractRenewalAttachmentWhereInput
    /**
     * Limit how many ContractRenewalAttachments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContractRenewalAttachment upsert
   */
  export type ContractRenewalAttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the ContractRenewalAttachment to update in case it exists.
     */
    where: ContractRenewalAttachmentWhereUniqueInput
    /**
     * In case the ContractRenewalAttachment found by the `where` argument doesn't exist, create a new ContractRenewalAttachment with this data.
     */
    create: XOR<ContractRenewalAttachmentCreateInput, ContractRenewalAttachmentUncheckedCreateInput>
    /**
     * In case the ContractRenewalAttachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractRenewalAttachmentUpdateInput, ContractRenewalAttachmentUncheckedUpdateInput>
  }

  /**
   * ContractRenewalAttachment delete
   */
  export type ContractRenewalAttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentInclude<ExtArgs> | null
    /**
     * Filter which ContractRenewalAttachment to delete.
     */
    where: ContractRenewalAttachmentWhereUniqueInput
  }

  /**
   * ContractRenewalAttachment deleteMany
   */
  export type ContractRenewalAttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractRenewalAttachments to delete
     */
    where?: ContractRenewalAttachmentWhereInput
    /**
     * Limit how many ContractRenewalAttachments to delete.
     */
    limit?: number
  }

  /**
   * ContractRenewalAttachment without action
   */
  export type ContractRenewalAttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractRenewalAttachment
     */
    select?: ContractRenewalAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractRenewalAttachment
     */
    omit?: ContractRenewalAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractRenewalAttachmentInclude<ExtArgs> | null
  }


  /**
   * Model HumanitarianContractRenewal
   */

  export type AggregateHumanitarianContractRenewal = {
    _count: HumanitarianContractRenewalCountAggregateOutputType | null
    _avg: HumanitarianContractRenewalAvgAggregateOutputType | null
    _sum: HumanitarianContractRenewalSumAggregateOutputType | null
    _min: HumanitarianContractRenewalMinAggregateOutputType | null
    _max: HumanitarianContractRenewalMaxAggregateOutputType | null
  }

  export type HumanitarianContractRenewalAvgAggregateOutputType = {
    proposedRevenue: number | null
  }

  export type HumanitarianContractRenewalSumAggregateOutputType = {
    proposedRevenue: number | null
  }

  export type HumanitarianContractRenewalMinAggregateOutputType = {
    id: string | null
    contractId: string | null
    humanitarianOrgId: string | null
    subStatus: $Enums.HumanitarianRenewalSubStatus | null
    renewalStartDate: Date | null
    proposedStartDate: Date | null
    proposedEndDate: Date | null
    proposedRevenue: number | null
    documentsReceived: boolean | null
    legalApproved: boolean | null
    financialApproved: boolean | null
    signatureReceived: boolean | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    lastModifiedById: string | null
  }

  export type HumanitarianContractRenewalMaxAggregateOutputType = {
    id: string | null
    contractId: string | null
    humanitarianOrgId: string | null
    subStatus: $Enums.HumanitarianRenewalSubStatus | null
    renewalStartDate: Date | null
    proposedStartDate: Date | null
    proposedEndDate: Date | null
    proposedRevenue: number | null
    documentsReceived: boolean | null
    legalApproved: boolean | null
    financialApproved: boolean | null
    signatureReceived: boolean | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    lastModifiedById: string | null
  }

  export type HumanitarianContractRenewalCountAggregateOutputType = {
    id: number
    contractId: number
    humanitarianOrgId: number
    subStatus: number
    renewalStartDate: number
    proposedStartDate: number
    proposedEndDate: number
    proposedRevenue: number
    documentsReceived: number
    legalApproved: number
    financialApproved: number
    signatureReceived: number
    notes: number
    createdAt: number
    updatedAt: number
    createdById: number
    lastModifiedById: number
    _all: number
  }


  export type HumanitarianContractRenewalAvgAggregateInputType = {
    proposedRevenue?: true
  }

  export type HumanitarianContractRenewalSumAggregateInputType = {
    proposedRevenue?: true
  }

  export type HumanitarianContractRenewalMinAggregateInputType = {
    id?: true
    contractId?: true
    humanitarianOrgId?: true
    subStatus?: true
    renewalStartDate?: true
    proposedStartDate?: true
    proposedEndDate?: true
    proposedRevenue?: true
    documentsReceived?: true
    legalApproved?: true
    financialApproved?: true
    signatureReceived?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    lastModifiedById?: true
  }

  export type HumanitarianContractRenewalMaxAggregateInputType = {
    id?: true
    contractId?: true
    humanitarianOrgId?: true
    subStatus?: true
    renewalStartDate?: true
    proposedStartDate?: true
    proposedEndDate?: true
    proposedRevenue?: true
    documentsReceived?: true
    legalApproved?: true
    financialApproved?: true
    signatureReceived?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    lastModifiedById?: true
  }

  export type HumanitarianContractRenewalCountAggregateInputType = {
    id?: true
    contractId?: true
    humanitarianOrgId?: true
    subStatus?: true
    renewalStartDate?: true
    proposedStartDate?: true
    proposedEndDate?: true
    proposedRevenue?: true
    documentsReceived?: true
    legalApproved?: true
    financialApproved?: true
    signatureReceived?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    lastModifiedById?: true
    _all?: true
  }

  export type HumanitarianContractRenewalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HumanitarianContractRenewal to aggregate.
     */
    where?: HumanitarianContractRenewalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HumanitarianContractRenewals to fetch.
     */
    orderBy?: HumanitarianContractRenewalOrderByWithRelationInput | HumanitarianContractRenewalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HumanitarianContractRenewalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HumanitarianContractRenewals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HumanitarianContractRenewals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HumanitarianContractRenewals
    **/
    _count?: true | HumanitarianContractRenewalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HumanitarianContractRenewalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HumanitarianContractRenewalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HumanitarianContractRenewalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HumanitarianContractRenewalMaxAggregateInputType
  }

  export type GetHumanitarianContractRenewalAggregateType<T extends HumanitarianContractRenewalAggregateArgs> = {
        [P in keyof T & keyof AggregateHumanitarianContractRenewal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHumanitarianContractRenewal[P]>
      : GetScalarType<T[P], AggregateHumanitarianContractRenewal[P]>
  }




  export type HumanitarianContractRenewalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HumanitarianContractRenewalWhereInput
    orderBy?: HumanitarianContractRenewalOrderByWithAggregationInput | HumanitarianContractRenewalOrderByWithAggregationInput[]
    by: HumanitarianContractRenewalScalarFieldEnum[] | HumanitarianContractRenewalScalarFieldEnum
    having?: HumanitarianContractRenewalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HumanitarianContractRenewalCountAggregateInputType | true
    _avg?: HumanitarianContractRenewalAvgAggregateInputType
    _sum?: HumanitarianContractRenewalSumAggregateInputType
    _min?: HumanitarianContractRenewalMinAggregateInputType
    _max?: HumanitarianContractRenewalMaxAggregateInputType
  }

  export type HumanitarianContractRenewalGroupByOutputType = {
    id: string
    contractId: string
    humanitarianOrgId: string
    subStatus: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate: Date
    proposedStartDate: Date
    proposedEndDate: Date
    proposedRevenue: number
    documentsReceived: boolean
    legalApproved: boolean
    financialApproved: boolean
    signatureReceived: boolean
    notes: string | null
    createdAt: Date
    updatedAt: Date
    createdById: string
    lastModifiedById: string | null
    _count: HumanitarianContractRenewalCountAggregateOutputType | null
    _avg: HumanitarianContractRenewalAvgAggregateOutputType | null
    _sum: HumanitarianContractRenewalSumAggregateOutputType | null
    _min: HumanitarianContractRenewalMinAggregateOutputType | null
    _max: HumanitarianContractRenewalMaxAggregateOutputType | null
  }

  type GetHumanitarianContractRenewalGroupByPayload<T extends HumanitarianContractRenewalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HumanitarianContractRenewalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HumanitarianContractRenewalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HumanitarianContractRenewalGroupByOutputType[P]>
            : GetScalarType<T[P], HumanitarianContractRenewalGroupByOutputType[P]>
        }
      >
    >


  export type HumanitarianContractRenewalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    humanitarianOrgId?: boolean
    subStatus?: boolean
    renewalStartDate?: boolean
    proposedStartDate?: boolean
    proposedEndDate?: boolean
    proposedRevenue?: boolean
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    lastModifiedById?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    humanitarianOrg?: boolean | HumanitarianOrgDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | HumanitarianContractRenewal$lastModifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["humanitarianContractRenewal"]>

  export type HumanitarianContractRenewalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    humanitarianOrgId?: boolean
    subStatus?: boolean
    renewalStartDate?: boolean
    proposedStartDate?: boolean
    proposedEndDate?: boolean
    proposedRevenue?: boolean
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    lastModifiedById?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    humanitarianOrg?: boolean | HumanitarianOrgDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | HumanitarianContractRenewal$lastModifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["humanitarianContractRenewal"]>

  export type HumanitarianContractRenewalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    humanitarianOrgId?: boolean
    subStatus?: boolean
    renewalStartDate?: boolean
    proposedStartDate?: boolean
    proposedEndDate?: boolean
    proposedRevenue?: boolean
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    lastModifiedById?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    humanitarianOrg?: boolean | HumanitarianOrgDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | HumanitarianContractRenewal$lastModifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["humanitarianContractRenewal"]>

  export type HumanitarianContractRenewalSelectScalar = {
    id?: boolean
    contractId?: boolean
    humanitarianOrgId?: boolean
    subStatus?: boolean
    renewalStartDate?: boolean
    proposedStartDate?: boolean
    proposedEndDate?: boolean
    proposedRevenue?: boolean
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    lastModifiedById?: boolean
  }

  export type HumanitarianContractRenewalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contractId" | "humanitarianOrgId" | "subStatus" | "renewalStartDate" | "proposedStartDate" | "proposedEndDate" | "proposedRevenue" | "documentsReceived" | "legalApproved" | "financialApproved" | "signatureReceived" | "notes" | "createdAt" | "updatedAt" | "createdById" | "lastModifiedById", ExtArgs["result"]["humanitarianContractRenewal"]>
  export type HumanitarianContractRenewalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    humanitarianOrg?: boolean | HumanitarianOrgDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | HumanitarianContractRenewal$lastModifiedByArgs<ExtArgs>
  }
  export type HumanitarianContractRenewalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    humanitarianOrg?: boolean | HumanitarianOrgDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | HumanitarianContractRenewal$lastModifiedByArgs<ExtArgs>
  }
  export type HumanitarianContractRenewalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    humanitarianOrg?: boolean | HumanitarianOrgDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lastModifiedBy?: boolean | HumanitarianContractRenewal$lastModifiedByArgs<ExtArgs>
  }

  export type $HumanitarianContractRenewalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HumanitarianContractRenewal"
    objects: {
      contract: Prisma.$ContractPayload<ExtArgs>
      humanitarianOrg: Prisma.$HumanitarianOrgPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      lastModifiedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      contractId: string
      humanitarianOrgId: string
      subStatus: $Enums.HumanitarianRenewalSubStatus
      renewalStartDate: Date
      proposedStartDate: Date
      proposedEndDate: Date
      proposedRevenue: number
      documentsReceived: boolean
      legalApproved: boolean
      financialApproved: boolean
      signatureReceived: boolean
      notes: string | null
      createdAt: Date
      updatedAt: Date
      createdById: string
      lastModifiedById: string | null
    }, ExtArgs["result"]["humanitarianContractRenewal"]>
    composites: {}
  }

  type HumanitarianContractRenewalGetPayload<S extends boolean | null | undefined | HumanitarianContractRenewalDefaultArgs> = $Result.GetResult<Prisma.$HumanitarianContractRenewalPayload, S>

  type HumanitarianContractRenewalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HumanitarianContractRenewalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HumanitarianContractRenewalCountAggregateInputType | true
    }

  export interface HumanitarianContractRenewalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HumanitarianContractRenewal'], meta: { name: 'HumanitarianContractRenewal' } }
    /**
     * Find zero or one HumanitarianContractRenewal that matches the filter.
     * @param {HumanitarianContractRenewalFindUniqueArgs} args - Arguments to find a HumanitarianContractRenewal
     * @example
     * // Get one HumanitarianContractRenewal
     * const humanitarianContractRenewal = await prisma.humanitarianContractRenewal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HumanitarianContractRenewalFindUniqueArgs>(args: SelectSubset<T, HumanitarianContractRenewalFindUniqueArgs<ExtArgs>>): Prisma__HumanitarianContractRenewalClient<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HumanitarianContractRenewal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HumanitarianContractRenewalFindUniqueOrThrowArgs} args - Arguments to find a HumanitarianContractRenewal
     * @example
     * // Get one HumanitarianContractRenewal
     * const humanitarianContractRenewal = await prisma.humanitarianContractRenewal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HumanitarianContractRenewalFindUniqueOrThrowArgs>(args: SelectSubset<T, HumanitarianContractRenewalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HumanitarianContractRenewalClient<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HumanitarianContractRenewal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianContractRenewalFindFirstArgs} args - Arguments to find a HumanitarianContractRenewal
     * @example
     * // Get one HumanitarianContractRenewal
     * const humanitarianContractRenewal = await prisma.humanitarianContractRenewal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HumanitarianContractRenewalFindFirstArgs>(args?: SelectSubset<T, HumanitarianContractRenewalFindFirstArgs<ExtArgs>>): Prisma__HumanitarianContractRenewalClient<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HumanitarianContractRenewal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianContractRenewalFindFirstOrThrowArgs} args - Arguments to find a HumanitarianContractRenewal
     * @example
     * // Get one HumanitarianContractRenewal
     * const humanitarianContractRenewal = await prisma.humanitarianContractRenewal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HumanitarianContractRenewalFindFirstOrThrowArgs>(args?: SelectSubset<T, HumanitarianContractRenewalFindFirstOrThrowArgs<ExtArgs>>): Prisma__HumanitarianContractRenewalClient<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HumanitarianContractRenewals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianContractRenewalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HumanitarianContractRenewals
     * const humanitarianContractRenewals = await prisma.humanitarianContractRenewal.findMany()
     * 
     * // Get first 10 HumanitarianContractRenewals
     * const humanitarianContractRenewals = await prisma.humanitarianContractRenewal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const humanitarianContractRenewalWithIdOnly = await prisma.humanitarianContractRenewal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HumanitarianContractRenewalFindManyArgs>(args?: SelectSubset<T, HumanitarianContractRenewalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HumanitarianContractRenewal.
     * @param {HumanitarianContractRenewalCreateArgs} args - Arguments to create a HumanitarianContractRenewal.
     * @example
     * // Create one HumanitarianContractRenewal
     * const HumanitarianContractRenewal = await prisma.humanitarianContractRenewal.create({
     *   data: {
     *     // ... data to create a HumanitarianContractRenewal
     *   }
     * })
     * 
     */
    create<T extends HumanitarianContractRenewalCreateArgs>(args: SelectSubset<T, HumanitarianContractRenewalCreateArgs<ExtArgs>>): Prisma__HumanitarianContractRenewalClient<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HumanitarianContractRenewals.
     * @param {HumanitarianContractRenewalCreateManyArgs} args - Arguments to create many HumanitarianContractRenewals.
     * @example
     * // Create many HumanitarianContractRenewals
     * const humanitarianContractRenewal = await prisma.humanitarianContractRenewal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HumanitarianContractRenewalCreateManyArgs>(args?: SelectSubset<T, HumanitarianContractRenewalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HumanitarianContractRenewals and returns the data saved in the database.
     * @param {HumanitarianContractRenewalCreateManyAndReturnArgs} args - Arguments to create many HumanitarianContractRenewals.
     * @example
     * // Create many HumanitarianContractRenewals
     * const humanitarianContractRenewal = await prisma.humanitarianContractRenewal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HumanitarianContractRenewals and only return the `id`
     * const humanitarianContractRenewalWithIdOnly = await prisma.humanitarianContractRenewal.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HumanitarianContractRenewalCreateManyAndReturnArgs>(args?: SelectSubset<T, HumanitarianContractRenewalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HumanitarianContractRenewal.
     * @param {HumanitarianContractRenewalDeleteArgs} args - Arguments to delete one HumanitarianContractRenewal.
     * @example
     * // Delete one HumanitarianContractRenewal
     * const HumanitarianContractRenewal = await prisma.humanitarianContractRenewal.delete({
     *   where: {
     *     // ... filter to delete one HumanitarianContractRenewal
     *   }
     * })
     * 
     */
    delete<T extends HumanitarianContractRenewalDeleteArgs>(args: SelectSubset<T, HumanitarianContractRenewalDeleteArgs<ExtArgs>>): Prisma__HumanitarianContractRenewalClient<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HumanitarianContractRenewal.
     * @param {HumanitarianContractRenewalUpdateArgs} args - Arguments to update one HumanitarianContractRenewal.
     * @example
     * // Update one HumanitarianContractRenewal
     * const humanitarianContractRenewal = await prisma.humanitarianContractRenewal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HumanitarianContractRenewalUpdateArgs>(args: SelectSubset<T, HumanitarianContractRenewalUpdateArgs<ExtArgs>>): Prisma__HumanitarianContractRenewalClient<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HumanitarianContractRenewals.
     * @param {HumanitarianContractRenewalDeleteManyArgs} args - Arguments to filter HumanitarianContractRenewals to delete.
     * @example
     * // Delete a few HumanitarianContractRenewals
     * const { count } = await prisma.humanitarianContractRenewal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HumanitarianContractRenewalDeleteManyArgs>(args?: SelectSubset<T, HumanitarianContractRenewalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HumanitarianContractRenewals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianContractRenewalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HumanitarianContractRenewals
     * const humanitarianContractRenewal = await prisma.humanitarianContractRenewal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HumanitarianContractRenewalUpdateManyArgs>(args: SelectSubset<T, HumanitarianContractRenewalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HumanitarianContractRenewals and returns the data updated in the database.
     * @param {HumanitarianContractRenewalUpdateManyAndReturnArgs} args - Arguments to update many HumanitarianContractRenewals.
     * @example
     * // Update many HumanitarianContractRenewals
     * const humanitarianContractRenewal = await prisma.humanitarianContractRenewal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HumanitarianContractRenewals and only return the `id`
     * const humanitarianContractRenewalWithIdOnly = await prisma.humanitarianContractRenewal.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HumanitarianContractRenewalUpdateManyAndReturnArgs>(args: SelectSubset<T, HumanitarianContractRenewalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HumanitarianContractRenewal.
     * @param {HumanitarianContractRenewalUpsertArgs} args - Arguments to update or create a HumanitarianContractRenewal.
     * @example
     * // Update or create a HumanitarianContractRenewal
     * const humanitarianContractRenewal = await prisma.humanitarianContractRenewal.upsert({
     *   create: {
     *     // ... data to create a HumanitarianContractRenewal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HumanitarianContractRenewal we want to update
     *   }
     * })
     */
    upsert<T extends HumanitarianContractRenewalUpsertArgs>(args: SelectSubset<T, HumanitarianContractRenewalUpsertArgs<ExtArgs>>): Prisma__HumanitarianContractRenewalClient<$Result.GetResult<Prisma.$HumanitarianContractRenewalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HumanitarianContractRenewals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianContractRenewalCountArgs} args - Arguments to filter HumanitarianContractRenewals to count.
     * @example
     * // Count the number of HumanitarianContractRenewals
     * const count = await prisma.humanitarianContractRenewal.count({
     *   where: {
     *     // ... the filter for the HumanitarianContractRenewals we want to count
     *   }
     * })
    **/
    count<T extends HumanitarianContractRenewalCountArgs>(
      args?: Subset<T, HumanitarianContractRenewalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HumanitarianContractRenewalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HumanitarianContractRenewal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianContractRenewalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HumanitarianContractRenewalAggregateArgs>(args: Subset<T, HumanitarianContractRenewalAggregateArgs>): Prisma.PrismaPromise<GetHumanitarianContractRenewalAggregateType<T>>

    /**
     * Group by HumanitarianContractRenewal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HumanitarianContractRenewalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HumanitarianContractRenewalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HumanitarianContractRenewalGroupByArgs['orderBy'] }
        : { orderBy?: HumanitarianContractRenewalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HumanitarianContractRenewalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHumanitarianContractRenewalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HumanitarianContractRenewal model
   */
  readonly fields: HumanitarianContractRenewalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HumanitarianContractRenewal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HumanitarianContractRenewalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contract<T extends ContractDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractDefaultArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    humanitarianOrg<T extends HumanitarianOrgDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HumanitarianOrgDefaultArgs<ExtArgs>>): Prisma__HumanitarianOrgClient<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lastModifiedBy<T extends HumanitarianContractRenewal$lastModifiedByArgs<ExtArgs> = {}>(args?: Subset<T, HumanitarianContractRenewal$lastModifiedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HumanitarianContractRenewal model
   */
  interface HumanitarianContractRenewalFieldRefs {
    readonly id: FieldRef<"HumanitarianContractRenewal", 'String'>
    readonly contractId: FieldRef<"HumanitarianContractRenewal", 'String'>
    readonly humanitarianOrgId: FieldRef<"HumanitarianContractRenewal", 'String'>
    readonly subStatus: FieldRef<"HumanitarianContractRenewal", 'HumanitarianRenewalSubStatus'>
    readonly renewalStartDate: FieldRef<"HumanitarianContractRenewal", 'DateTime'>
    readonly proposedStartDate: FieldRef<"HumanitarianContractRenewal", 'DateTime'>
    readonly proposedEndDate: FieldRef<"HumanitarianContractRenewal", 'DateTime'>
    readonly proposedRevenue: FieldRef<"HumanitarianContractRenewal", 'Float'>
    readonly documentsReceived: FieldRef<"HumanitarianContractRenewal", 'Boolean'>
    readonly legalApproved: FieldRef<"HumanitarianContractRenewal", 'Boolean'>
    readonly financialApproved: FieldRef<"HumanitarianContractRenewal", 'Boolean'>
    readonly signatureReceived: FieldRef<"HumanitarianContractRenewal", 'Boolean'>
    readonly notes: FieldRef<"HumanitarianContractRenewal", 'String'>
    readonly createdAt: FieldRef<"HumanitarianContractRenewal", 'DateTime'>
    readonly updatedAt: FieldRef<"HumanitarianContractRenewal", 'DateTime'>
    readonly createdById: FieldRef<"HumanitarianContractRenewal", 'String'>
    readonly lastModifiedById: FieldRef<"HumanitarianContractRenewal", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HumanitarianContractRenewal findUnique
   */
  export type HumanitarianContractRenewalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    /**
     * Filter, which HumanitarianContractRenewal to fetch.
     */
    where: HumanitarianContractRenewalWhereUniqueInput
  }

  /**
   * HumanitarianContractRenewal findUniqueOrThrow
   */
  export type HumanitarianContractRenewalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    /**
     * Filter, which HumanitarianContractRenewal to fetch.
     */
    where: HumanitarianContractRenewalWhereUniqueInput
  }

  /**
   * HumanitarianContractRenewal findFirst
   */
  export type HumanitarianContractRenewalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    /**
     * Filter, which HumanitarianContractRenewal to fetch.
     */
    where?: HumanitarianContractRenewalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HumanitarianContractRenewals to fetch.
     */
    orderBy?: HumanitarianContractRenewalOrderByWithRelationInput | HumanitarianContractRenewalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HumanitarianContractRenewals.
     */
    cursor?: HumanitarianContractRenewalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HumanitarianContractRenewals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HumanitarianContractRenewals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HumanitarianContractRenewals.
     */
    distinct?: HumanitarianContractRenewalScalarFieldEnum | HumanitarianContractRenewalScalarFieldEnum[]
  }

  /**
   * HumanitarianContractRenewal findFirstOrThrow
   */
  export type HumanitarianContractRenewalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    /**
     * Filter, which HumanitarianContractRenewal to fetch.
     */
    where?: HumanitarianContractRenewalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HumanitarianContractRenewals to fetch.
     */
    orderBy?: HumanitarianContractRenewalOrderByWithRelationInput | HumanitarianContractRenewalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HumanitarianContractRenewals.
     */
    cursor?: HumanitarianContractRenewalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HumanitarianContractRenewals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HumanitarianContractRenewals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HumanitarianContractRenewals.
     */
    distinct?: HumanitarianContractRenewalScalarFieldEnum | HumanitarianContractRenewalScalarFieldEnum[]
  }

  /**
   * HumanitarianContractRenewal findMany
   */
  export type HumanitarianContractRenewalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    /**
     * Filter, which HumanitarianContractRenewals to fetch.
     */
    where?: HumanitarianContractRenewalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HumanitarianContractRenewals to fetch.
     */
    orderBy?: HumanitarianContractRenewalOrderByWithRelationInput | HumanitarianContractRenewalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HumanitarianContractRenewals.
     */
    cursor?: HumanitarianContractRenewalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HumanitarianContractRenewals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HumanitarianContractRenewals.
     */
    skip?: number
    distinct?: HumanitarianContractRenewalScalarFieldEnum | HumanitarianContractRenewalScalarFieldEnum[]
  }

  /**
   * HumanitarianContractRenewal create
   */
  export type HumanitarianContractRenewalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    /**
     * The data needed to create a HumanitarianContractRenewal.
     */
    data: XOR<HumanitarianContractRenewalCreateInput, HumanitarianContractRenewalUncheckedCreateInput>
  }

  /**
   * HumanitarianContractRenewal createMany
   */
  export type HumanitarianContractRenewalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HumanitarianContractRenewals.
     */
    data: HumanitarianContractRenewalCreateManyInput | HumanitarianContractRenewalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HumanitarianContractRenewal createManyAndReturn
   */
  export type HumanitarianContractRenewalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * The data used to create many HumanitarianContractRenewals.
     */
    data: HumanitarianContractRenewalCreateManyInput | HumanitarianContractRenewalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HumanitarianContractRenewal update
   */
  export type HumanitarianContractRenewalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    /**
     * The data needed to update a HumanitarianContractRenewal.
     */
    data: XOR<HumanitarianContractRenewalUpdateInput, HumanitarianContractRenewalUncheckedUpdateInput>
    /**
     * Choose, which HumanitarianContractRenewal to update.
     */
    where: HumanitarianContractRenewalWhereUniqueInput
  }

  /**
   * HumanitarianContractRenewal updateMany
   */
  export type HumanitarianContractRenewalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HumanitarianContractRenewals.
     */
    data: XOR<HumanitarianContractRenewalUpdateManyMutationInput, HumanitarianContractRenewalUncheckedUpdateManyInput>
    /**
     * Filter which HumanitarianContractRenewals to update
     */
    where?: HumanitarianContractRenewalWhereInput
    /**
     * Limit how many HumanitarianContractRenewals to update.
     */
    limit?: number
  }

  /**
   * HumanitarianContractRenewal updateManyAndReturn
   */
  export type HumanitarianContractRenewalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * The data used to update HumanitarianContractRenewals.
     */
    data: XOR<HumanitarianContractRenewalUpdateManyMutationInput, HumanitarianContractRenewalUncheckedUpdateManyInput>
    /**
     * Filter which HumanitarianContractRenewals to update
     */
    where?: HumanitarianContractRenewalWhereInput
    /**
     * Limit how many HumanitarianContractRenewals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * HumanitarianContractRenewal upsert
   */
  export type HumanitarianContractRenewalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    /**
     * The filter to search for the HumanitarianContractRenewal to update in case it exists.
     */
    where: HumanitarianContractRenewalWhereUniqueInput
    /**
     * In case the HumanitarianContractRenewal found by the `where` argument doesn't exist, create a new HumanitarianContractRenewal with this data.
     */
    create: XOR<HumanitarianContractRenewalCreateInput, HumanitarianContractRenewalUncheckedCreateInput>
    /**
     * In case the HumanitarianContractRenewal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HumanitarianContractRenewalUpdateInput, HumanitarianContractRenewalUncheckedUpdateInput>
  }

  /**
   * HumanitarianContractRenewal delete
   */
  export type HumanitarianContractRenewalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
    /**
     * Filter which HumanitarianContractRenewal to delete.
     */
    where: HumanitarianContractRenewalWhereUniqueInput
  }

  /**
   * HumanitarianContractRenewal deleteMany
   */
  export type HumanitarianContractRenewalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HumanitarianContractRenewals to delete
     */
    where?: HumanitarianContractRenewalWhereInput
    /**
     * Limit how many HumanitarianContractRenewals to delete.
     */
    limit?: number
  }

  /**
   * HumanitarianContractRenewal.lastModifiedBy
   */
  export type HumanitarianContractRenewal$lastModifiedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * HumanitarianContractRenewal without action
   */
  export type HumanitarianContractRenewalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianContractRenewal
     */
    select?: HumanitarianContractRenewalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianContractRenewal
     */
    omit?: HumanitarianContractRenewalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianContractRenewalInclude<ExtArgs> | null
  }


  /**
   * Model SenderBlacklist
   */

  export type AggregateSenderBlacklist = {
    _count: SenderBlacklistCountAggregateOutputType | null
    _avg: SenderBlacklistAvgAggregateOutputType | null
    _sum: SenderBlacklistSumAggregateOutputType | null
    _min: SenderBlacklistMinAggregateOutputType | null
    _max: SenderBlacklistMaxAggregateOutputType | null
  }

  export type SenderBlacklistAvgAggregateOutputType = {
    matchCount: number | null
  }

  export type SenderBlacklistSumAggregateOutputType = {
    matchCount: number | null
  }

  export type SenderBlacklistMinAggregateOutputType = {
    id: string | null
    senderName: string | null
    effectiveDate: Date | null
    description: string | null
    isActive: boolean | null
    matchCount: number | null
    lastMatchDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    modifiedById: string | null
  }

  export type SenderBlacklistMaxAggregateOutputType = {
    id: string | null
    senderName: string | null
    effectiveDate: Date | null
    description: string | null
    isActive: boolean | null
    matchCount: number | null
    lastMatchDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    modifiedById: string | null
  }

  export type SenderBlacklistCountAggregateOutputType = {
    id: number
    senderName: number
    effectiveDate: number
    description: number
    isActive: number
    matchCount: number
    lastMatchDate: number
    createdAt: number
    updatedAt: number
    createdById: number
    modifiedById: number
    _all: number
  }


  export type SenderBlacklistAvgAggregateInputType = {
    matchCount?: true
  }

  export type SenderBlacklistSumAggregateInputType = {
    matchCount?: true
  }

  export type SenderBlacklistMinAggregateInputType = {
    id?: true
    senderName?: true
    effectiveDate?: true
    description?: true
    isActive?: true
    matchCount?: true
    lastMatchDate?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    modifiedById?: true
  }

  export type SenderBlacklistMaxAggregateInputType = {
    id?: true
    senderName?: true
    effectiveDate?: true
    description?: true
    isActive?: true
    matchCount?: true
    lastMatchDate?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    modifiedById?: true
  }

  export type SenderBlacklistCountAggregateInputType = {
    id?: true
    senderName?: true
    effectiveDate?: true
    description?: true
    isActive?: true
    matchCount?: true
    lastMatchDate?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    modifiedById?: true
    _all?: true
  }

  export type SenderBlacklistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SenderBlacklist to aggregate.
     */
    where?: SenderBlacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SenderBlacklists to fetch.
     */
    orderBy?: SenderBlacklistOrderByWithRelationInput | SenderBlacklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SenderBlacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SenderBlacklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SenderBlacklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SenderBlacklists
    **/
    _count?: true | SenderBlacklistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SenderBlacklistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SenderBlacklistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SenderBlacklistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SenderBlacklistMaxAggregateInputType
  }

  export type GetSenderBlacklistAggregateType<T extends SenderBlacklistAggregateArgs> = {
        [P in keyof T & keyof AggregateSenderBlacklist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSenderBlacklist[P]>
      : GetScalarType<T[P], AggregateSenderBlacklist[P]>
  }




  export type SenderBlacklistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SenderBlacklistWhereInput
    orderBy?: SenderBlacklistOrderByWithAggregationInput | SenderBlacklistOrderByWithAggregationInput[]
    by: SenderBlacklistScalarFieldEnum[] | SenderBlacklistScalarFieldEnum
    having?: SenderBlacklistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SenderBlacklistCountAggregateInputType | true
    _avg?: SenderBlacklistAvgAggregateInputType
    _sum?: SenderBlacklistSumAggregateInputType
    _min?: SenderBlacklistMinAggregateInputType
    _max?: SenderBlacklistMaxAggregateInputType
  }

  export type SenderBlacklistGroupByOutputType = {
    id: string
    senderName: string
    effectiveDate: Date
    description: string | null
    isActive: boolean
    matchCount: number
    lastMatchDate: Date | null
    createdAt: Date
    updatedAt: Date
    createdById: string
    modifiedById: string | null
    _count: SenderBlacklistCountAggregateOutputType | null
    _avg: SenderBlacklistAvgAggregateOutputType | null
    _sum: SenderBlacklistSumAggregateOutputType | null
    _min: SenderBlacklistMinAggregateOutputType | null
    _max: SenderBlacklistMaxAggregateOutputType | null
  }

  type GetSenderBlacklistGroupByPayload<T extends SenderBlacklistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SenderBlacklistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SenderBlacklistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SenderBlacklistGroupByOutputType[P]>
            : GetScalarType<T[P], SenderBlacklistGroupByOutputType[P]>
        }
      >
    >


  export type SenderBlacklistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderName?: boolean
    effectiveDate?: boolean
    description?: boolean
    isActive?: boolean
    matchCount?: boolean
    lastMatchDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    modifiedById?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    logs?: boolean | SenderBlacklist$logsArgs<ExtArgs>
    modifiedBy?: boolean | SenderBlacklist$modifiedByArgs<ExtArgs>
    _count?: boolean | SenderBlacklistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["senderBlacklist"]>

  export type SenderBlacklistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderName?: boolean
    effectiveDate?: boolean
    description?: boolean
    isActive?: boolean
    matchCount?: boolean
    lastMatchDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    modifiedById?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | SenderBlacklist$modifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["senderBlacklist"]>

  export type SenderBlacklistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderName?: boolean
    effectiveDate?: boolean
    description?: boolean
    isActive?: boolean
    matchCount?: boolean
    lastMatchDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    modifiedById?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | SenderBlacklist$modifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["senderBlacklist"]>

  export type SenderBlacklistSelectScalar = {
    id?: boolean
    senderName?: boolean
    effectiveDate?: boolean
    description?: boolean
    isActive?: boolean
    matchCount?: boolean
    lastMatchDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    modifiedById?: boolean
  }

  export type SenderBlacklistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "senderName" | "effectiveDate" | "description" | "isActive" | "matchCount" | "lastMatchDate" | "createdAt" | "updatedAt" | "createdById" | "modifiedById", ExtArgs["result"]["senderBlacklist"]>
  export type SenderBlacklistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    logs?: boolean | SenderBlacklist$logsArgs<ExtArgs>
    modifiedBy?: boolean | SenderBlacklist$modifiedByArgs<ExtArgs>
    _count?: boolean | SenderBlacklistCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SenderBlacklistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | SenderBlacklist$modifiedByArgs<ExtArgs>
  }
  export type SenderBlacklistIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | SenderBlacklist$modifiedByArgs<ExtArgs>
  }

  export type $SenderBlacklistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SenderBlacklist"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      logs: Prisma.$BlacklistLogPayload<ExtArgs>[]
      modifiedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      senderName: string
      effectiveDate: Date
      description: string | null
      isActive: boolean
      matchCount: number
      lastMatchDate: Date | null
      createdAt: Date
      updatedAt: Date
      createdById: string
      modifiedById: string | null
    }, ExtArgs["result"]["senderBlacklist"]>
    composites: {}
  }

  type SenderBlacklistGetPayload<S extends boolean | null | undefined | SenderBlacklistDefaultArgs> = $Result.GetResult<Prisma.$SenderBlacklistPayload, S>

  type SenderBlacklistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SenderBlacklistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SenderBlacklistCountAggregateInputType | true
    }

  export interface SenderBlacklistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SenderBlacklist'], meta: { name: 'SenderBlacklist' } }
    /**
     * Find zero or one SenderBlacklist that matches the filter.
     * @param {SenderBlacklistFindUniqueArgs} args - Arguments to find a SenderBlacklist
     * @example
     * // Get one SenderBlacklist
     * const senderBlacklist = await prisma.senderBlacklist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SenderBlacklistFindUniqueArgs>(args: SelectSubset<T, SenderBlacklistFindUniqueArgs<ExtArgs>>): Prisma__SenderBlacklistClient<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SenderBlacklist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SenderBlacklistFindUniqueOrThrowArgs} args - Arguments to find a SenderBlacklist
     * @example
     * // Get one SenderBlacklist
     * const senderBlacklist = await prisma.senderBlacklist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SenderBlacklistFindUniqueOrThrowArgs>(args: SelectSubset<T, SenderBlacklistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SenderBlacklistClient<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SenderBlacklist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SenderBlacklistFindFirstArgs} args - Arguments to find a SenderBlacklist
     * @example
     * // Get one SenderBlacklist
     * const senderBlacklist = await prisma.senderBlacklist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SenderBlacklistFindFirstArgs>(args?: SelectSubset<T, SenderBlacklistFindFirstArgs<ExtArgs>>): Prisma__SenderBlacklistClient<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SenderBlacklist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SenderBlacklistFindFirstOrThrowArgs} args - Arguments to find a SenderBlacklist
     * @example
     * // Get one SenderBlacklist
     * const senderBlacklist = await prisma.senderBlacklist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SenderBlacklistFindFirstOrThrowArgs>(args?: SelectSubset<T, SenderBlacklistFindFirstOrThrowArgs<ExtArgs>>): Prisma__SenderBlacklistClient<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SenderBlacklists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SenderBlacklistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SenderBlacklists
     * const senderBlacklists = await prisma.senderBlacklist.findMany()
     * 
     * // Get first 10 SenderBlacklists
     * const senderBlacklists = await prisma.senderBlacklist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const senderBlacklistWithIdOnly = await prisma.senderBlacklist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SenderBlacklistFindManyArgs>(args?: SelectSubset<T, SenderBlacklistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SenderBlacklist.
     * @param {SenderBlacklistCreateArgs} args - Arguments to create a SenderBlacklist.
     * @example
     * // Create one SenderBlacklist
     * const SenderBlacklist = await prisma.senderBlacklist.create({
     *   data: {
     *     // ... data to create a SenderBlacklist
     *   }
     * })
     * 
     */
    create<T extends SenderBlacklistCreateArgs>(args: SelectSubset<T, SenderBlacklistCreateArgs<ExtArgs>>): Prisma__SenderBlacklistClient<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SenderBlacklists.
     * @param {SenderBlacklistCreateManyArgs} args - Arguments to create many SenderBlacklists.
     * @example
     * // Create many SenderBlacklists
     * const senderBlacklist = await prisma.senderBlacklist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SenderBlacklistCreateManyArgs>(args?: SelectSubset<T, SenderBlacklistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SenderBlacklists and returns the data saved in the database.
     * @param {SenderBlacklistCreateManyAndReturnArgs} args - Arguments to create many SenderBlacklists.
     * @example
     * // Create many SenderBlacklists
     * const senderBlacklist = await prisma.senderBlacklist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SenderBlacklists and only return the `id`
     * const senderBlacklistWithIdOnly = await prisma.senderBlacklist.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SenderBlacklistCreateManyAndReturnArgs>(args?: SelectSubset<T, SenderBlacklistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SenderBlacklist.
     * @param {SenderBlacklistDeleteArgs} args - Arguments to delete one SenderBlacklist.
     * @example
     * // Delete one SenderBlacklist
     * const SenderBlacklist = await prisma.senderBlacklist.delete({
     *   where: {
     *     // ... filter to delete one SenderBlacklist
     *   }
     * })
     * 
     */
    delete<T extends SenderBlacklistDeleteArgs>(args: SelectSubset<T, SenderBlacklistDeleteArgs<ExtArgs>>): Prisma__SenderBlacklistClient<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SenderBlacklist.
     * @param {SenderBlacklistUpdateArgs} args - Arguments to update one SenderBlacklist.
     * @example
     * // Update one SenderBlacklist
     * const senderBlacklist = await prisma.senderBlacklist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SenderBlacklistUpdateArgs>(args: SelectSubset<T, SenderBlacklistUpdateArgs<ExtArgs>>): Prisma__SenderBlacklistClient<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SenderBlacklists.
     * @param {SenderBlacklistDeleteManyArgs} args - Arguments to filter SenderBlacklists to delete.
     * @example
     * // Delete a few SenderBlacklists
     * const { count } = await prisma.senderBlacklist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SenderBlacklistDeleteManyArgs>(args?: SelectSubset<T, SenderBlacklistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SenderBlacklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SenderBlacklistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SenderBlacklists
     * const senderBlacklist = await prisma.senderBlacklist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SenderBlacklistUpdateManyArgs>(args: SelectSubset<T, SenderBlacklistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SenderBlacklists and returns the data updated in the database.
     * @param {SenderBlacklistUpdateManyAndReturnArgs} args - Arguments to update many SenderBlacklists.
     * @example
     * // Update many SenderBlacklists
     * const senderBlacklist = await prisma.senderBlacklist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SenderBlacklists and only return the `id`
     * const senderBlacklistWithIdOnly = await prisma.senderBlacklist.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SenderBlacklistUpdateManyAndReturnArgs>(args: SelectSubset<T, SenderBlacklistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SenderBlacklist.
     * @param {SenderBlacklistUpsertArgs} args - Arguments to update or create a SenderBlacklist.
     * @example
     * // Update or create a SenderBlacklist
     * const senderBlacklist = await prisma.senderBlacklist.upsert({
     *   create: {
     *     // ... data to create a SenderBlacklist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SenderBlacklist we want to update
     *   }
     * })
     */
    upsert<T extends SenderBlacklistUpsertArgs>(args: SelectSubset<T, SenderBlacklistUpsertArgs<ExtArgs>>): Prisma__SenderBlacklistClient<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SenderBlacklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SenderBlacklistCountArgs} args - Arguments to filter SenderBlacklists to count.
     * @example
     * // Count the number of SenderBlacklists
     * const count = await prisma.senderBlacklist.count({
     *   where: {
     *     // ... the filter for the SenderBlacklists we want to count
     *   }
     * })
    **/
    count<T extends SenderBlacklistCountArgs>(
      args?: Subset<T, SenderBlacklistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SenderBlacklistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SenderBlacklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SenderBlacklistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SenderBlacklistAggregateArgs>(args: Subset<T, SenderBlacklistAggregateArgs>): Prisma.PrismaPromise<GetSenderBlacklistAggregateType<T>>

    /**
     * Group by SenderBlacklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SenderBlacklistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SenderBlacklistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SenderBlacklistGroupByArgs['orderBy'] }
        : { orderBy?: SenderBlacklistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SenderBlacklistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSenderBlacklistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SenderBlacklist model
   */
  readonly fields: SenderBlacklistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SenderBlacklist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SenderBlacklistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    logs<T extends SenderBlacklist$logsArgs<ExtArgs> = {}>(args?: Subset<T, SenderBlacklist$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    modifiedBy<T extends SenderBlacklist$modifiedByArgs<ExtArgs> = {}>(args?: Subset<T, SenderBlacklist$modifiedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SenderBlacklist model
   */
  interface SenderBlacklistFieldRefs {
    readonly id: FieldRef<"SenderBlacklist", 'String'>
    readonly senderName: FieldRef<"SenderBlacklist", 'String'>
    readonly effectiveDate: FieldRef<"SenderBlacklist", 'DateTime'>
    readonly description: FieldRef<"SenderBlacklist", 'String'>
    readonly isActive: FieldRef<"SenderBlacklist", 'Boolean'>
    readonly matchCount: FieldRef<"SenderBlacklist", 'Int'>
    readonly lastMatchDate: FieldRef<"SenderBlacklist", 'DateTime'>
    readonly createdAt: FieldRef<"SenderBlacklist", 'DateTime'>
    readonly updatedAt: FieldRef<"SenderBlacklist", 'DateTime'>
    readonly createdById: FieldRef<"SenderBlacklist", 'String'>
    readonly modifiedById: FieldRef<"SenderBlacklist", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SenderBlacklist findUnique
   */
  export type SenderBlacklistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
    /**
     * Filter, which SenderBlacklist to fetch.
     */
    where: SenderBlacklistWhereUniqueInput
  }

  /**
   * SenderBlacklist findUniqueOrThrow
   */
  export type SenderBlacklistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
    /**
     * Filter, which SenderBlacklist to fetch.
     */
    where: SenderBlacklistWhereUniqueInput
  }

  /**
   * SenderBlacklist findFirst
   */
  export type SenderBlacklistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
    /**
     * Filter, which SenderBlacklist to fetch.
     */
    where?: SenderBlacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SenderBlacklists to fetch.
     */
    orderBy?: SenderBlacklistOrderByWithRelationInput | SenderBlacklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SenderBlacklists.
     */
    cursor?: SenderBlacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SenderBlacklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SenderBlacklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SenderBlacklists.
     */
    distinct?: SenderBlacklistScalarFieldEnum | SenderBlacklistScalarFieldEnum[]
  }

  /**
   * SenderBlacklist findFirstOrThrow
   */
  export type SenderBlacklistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
    /**
     * Filter, which SenderBlacklist to fetch.
     */
    where?: SenderBlacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SenderBlacklists to fetch.
     */
    orderBy?: SenderBlacklistOrderByWithRelationInput | SenderBlacklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SenderBlacklists.
     */
    cursor?: SenderBlacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SenderBlacklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SenderBlacklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SenderBlacklists.
     */
    distinct?: SenderBlacklistScalarFieldEnum | SenderBlacklistScalarFieldEnum[]
  }

  /**
   * SenderBlacklist findMany
   */
  export type SenderBlacklistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
    /**
     * Filter, which SenderBlacklists to fetch.
     */
    where?: SenderBlacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SenderBlacklists to fetch.
     */
    orderBy?: SenderBlacklistOrderByWithRelationInput | SenderBlacklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SenderBlacklists.
     */
    cursor?: SenderBlacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SenderBlacklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SenderBlacklists.
     */
    skip?: number
    distinct?: SenderBlacklistScalarFieldEnum | SenderBlacklistScalarFieldEnum[]
  }

  /**
   * SenderBlacklist create
   */
  export type SenderBlacklistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
    /**
     * The data needed to create a SenderBlacklist.
     */
    data: XOR<SenderBlacklistCreateInput, SenderBlacklistUncheckedCreateInput>
  }

  /**
   * SenderBlacklist createMany
   */
  export type SenderBlacklistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SenderBlacklists.
     */
    data: SenderBlacklistCreateManyInput | SenderBlacklistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SenderBlacklist createManyAndReturn
   */
  export type SenderBlacklistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * The data used to create many SenderBlacklists.
     */
    data: SenderBlacklistCreateManyInput | SenderBlacklistCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SenderBlacklist update
   */
  export type SenderBlacklistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
    /**
     * The data needed to update a SenderBlacklist.
     */
    data: XOR<SenderBlacklistUpdateInput, SenderBlacklistUncheckedUpdateInput>
    /**
     * Choose, which SenderBlacklist to update.
     */
    where: SenderBlacklistWhereUniqueInput
  }

  /**
   * SenderBlacklist updateMany
   */
  export type SenderBlacklistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SenderBlacklists.
     */
    data: XOR<SenderBlacklistUpdateManyMutationInput, SenderBlacklistUncheckedUpdateManyInput>
    /**
     * Filter which SenderBlacklists to update
     */
    where?: SenderBlacklistWhereInput
    /**
     * Limit how many SenderBlacklists to update.
     */
    limit?: number
  }

  /**
   * SenderBlacklist updateManyAndReturn
   */
  export type SenderBlacklistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * The data used to update SenderBlacklists.
     */
    data: XOR<SenderBlacklistUpdateManyMutationInput, SenderBlacklistUncheckedUpdateManyInput>
    /**
     * Filter which SenderBlacklists to update
     */
    where?: SenderBlacklistWhereInput
    /**
     * Limit how many SenderBlacklists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SenderBlacklist upsert
   */
  export type SenderBlacklistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
    /**
     * The filter to search for the SenderBlacklist to update in case it exists.
     */
    where: SenderBlacklistWhereUniqueInput
    /**
     * In case the SenderBlacklist found by the `where` argument doesn't exist, create a new SenderBlacklist with this data.
     */
    create: XOR<SenderBlacklistCreateInput, SenderBlacklistUncheckedCreateInput>
    /**
     * In case the SenderBlacklist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SenderBlacklistUpdateInput, SenderBlacklistUncheckedUpdateInput>
  }

  /**
   * SenderBlacklist delete
   */
  export type SenderBlacklistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
    /**
     * Filter which SenderBlacklist to delete.
     */
    where: SenderBlacklistWhereUniqueInput
  }

  /**
   * SenderBlacklist deleteMany
   */
  export type SenderBlacklistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SenderBlacklists to delete
     */
    where?: SenderBlacklistWhereInput
    /**
     * Limit how many SenderBlacklists to delete.
     */
    limit?: number
  }

  /**
   * SenderBlacklist.logs
   */
  export type SenderBlacklist$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogInclude<ExtArgs> | null
    where?: BlacklistLogWhereInput
    orderBy?: BlacklistLogOrderByWithRelationInput | BlacklistLogOrderByWithRelationInput[]
    cursor?: BlacklistLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BlacklistLogScalarFieldEnum | BlacklistLogScalarFieldEnum[]
  }

  /**
   * SenderBlacklist.modifiedBy
   */
  export type SenderBlacklist$modifiedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SenderBlacklist without action
   */
  export type SenderBlacklistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
  }


  /**
   * Model BlacklistLog
   */

  export type AggregateBlacklistLog = {
    _count: BlacklistLogCountAggregateOutputType | null
    _min: BlacklistLogMinAggregateOutputType | null
    _max: BlacklistLogMaxAggregateOutputType | null
  }

  export type BlacklistLogMinAggregateOutputType = {
    id: string | null
    action: $Enums.LogBlackType | null
    entityId: string | null
    entityType: string | null
    userId: string | null
    timestamp: Date | null
  }

  export type BlacklistLogMaxAggregateOutputType = {
    id: string | null
    action: $Enums.LogBlackType | null
    entityId: string | null
    entityType: string | null
    userId: string | null
    timestamp: Date | null
  }

  export type BlacklistLogCountAggregateOutputType = {
    id: number
    action: number
    entityId: number
    entityType: number
    oldData: number
    newData: number
    userId: number
    timestamp: number
    _all: number
  }


  export type BlacklistLogMinAggregateInputType = {
    id?: true
    action?: true
    entityId?: true
    entityType?: true
    userId?: true
    timestamp?: true
  }

  export type BlacklistLogMaxAggregateInputType = {
    id?: true
    action?: true
    entityId?: true
    entityType?: true
    userId?: true
    timestamp?: true
  }

  export type BlacklistLogCountAggregateInputType = {
    id?: true
    action?: true
    entityId?: true
    entityType?: true
    oldData?: true
    newData?: true
    userId?: true
    timestamp?: true
    _all?: true
  }

  export type BlacklistLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlacklistLog to aggregate.
     */
    where?: BlacklistLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlacklistLogs to fetch.
     */
    orderBy?: BlacklistLogOrderByWithRelationInput | BlacklistLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlacklistLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlacklistLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlacklistLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BlacklistLogs
    **/
    _count?: true | BlacklistLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlacklistLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlacklistLogMaxAggregateInputType
  }

  export type GetBlacklistLogAggregateType<T extends BlacklistLogAggregateArgs> = {
        [P in keyof T & keyof AggregateBlacklistLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlacklistLog[P]>
      : GetScalarType<T[P], AggregateBlacklistLog[P]>
  }




  export type BlacklistLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlacklistLogWhereInput
    orderBy?: BlacklistLogOrderByWithAggregationInput | BlacklistLogOrderByWithAggregationInput[]
    by: BlacklistLogScalarFieldEnum[] | BlacklistLogScalarFieldEnum
    having?: BlacklistLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlacklistLogCountAggregateInputType | true
    _min?: BlacklistLogMinAggregateInputType
    _max?: BlacklistLogMaxAggregateInputType
  }

  export type BlacklistLogGroupByOutputType = {
    id: string
    action: $Enums.LogBlackType
    entityId: string | null
    entityType: string
    oldData: JsonValue | null
    newData: JsonValue | null
    userId: string
    timestamp: Date
    _count: BlacklistLogCountAggregateOutputType | null
    _min: BlacklistLogMinAggregateOutputType | null
    _max: BlacklistLogMaxAggregateOutputType | null
  }

  type GetBlacklistLogGroupByPayload<T extends BlacklistLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlacklistLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlacklistLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlacklistLogGroupByOutputType[P]>
            : GetScalarType<T[P], BlacklistLogGroupByOutputType[P]>
        }
      >
    >


  export type BlacklistLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityId?: boolean
    entityType?: boolean
    oldData?: boolean
    newData?: boolean
    userId?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    blacklistEntry?: boolean | BlacklistLog$blacklistEntryArgs<ExtArgs>
  }, ExtArgs["result"]["blacklistLog"]>

  export type BlacklistLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityId?: boolean
    entityType?: boolean
    oldData?: boolean
    newData?: boolean
    userId?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    blacklistEntry?: boolean | BlacklistLog$blacklistEntryArgs<ExtArgs>
  }, ExtArgs["result"]["blacklistLog"]>

  export type BlacklistLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityId?: boolean
    entityType?: boolean
    oldData?: boolean
    newData?: boolean
    userId?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    blacklistEntry?: boolean | BlacklistLog$blacklistEntryArgs<ExtArgs>
  }, ExtArgs["result"]["blacklistLog"]>

  export type BlacklistLogSelectScalar = {
    id?: boolean
    action?: boolean
    entityId?: boolean
    entityType?: boolean
    oldData?: boolean
    newData?: boolean
    userId?: boolean
    timestamp?: boolean
  }

  export type BlacklistLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "entityId" | "entityType" | "oldData" | "newData" | "userId" | "timestamp", ExtArgs["result"]["blacklistLog"]>
  export type BlacklistLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    blacklistEntry?: boolean | BlacklistLog$blacklistEntryArgs<ExtArgs>
  }
  export type BlacklistLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    blacklistEntry?: boolean | BlacklistLog$blacklistEntryArgs<ExtArgs>
  }
  export type BlacklistLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    blacklistEntry?: boolean | BlacklistLog$blacklistEntryArgs<ExtArgs>
  }

  export type $BlacklistLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BlacklistLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      blacklistEntry: Prisma.$SenderBlacklistPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: $Enums.LogBlackType
      entityId: string | null
      entityType: string
      oldData: Prisma.JsonValue | null
      newData: Prisma.JsonValue | null
      userId: string
      timestamp: Date
    }, ExtArgs["result"]["blacklistLog"]>
    composites: {}
  }

  type BlacklistLogGetPayload<S extends boolean | null | undefined | BlacklistLogDefaultArgs> = $Result.GetResult<Prisma.$BlacklistLogPayload, S>

  type BlacklistLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BlacklistLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BlacklistLogCountAggregateInputType | true
    }

  export interface BlacklistLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BlacklistLog'], meta: { name: 'BlacklistLog' } }
    /**
     * Find zero or one BlacklistLog that matches the filter.
     * @param {BlacklistLogFindUniqueArgs} args - Arguments to find a BlacklistLog
     * @example
     * // Get one BlacklistLog
     * const blacklistLog = await prisma.blacklistLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BlacklistLogFindUniqueArgs>(args: SelectSubset<T, BlacklistLogFindUniqueArgs<ExtArgs>>): Prisma__BlacklistLogClient<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BlacklistLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BlacklistLogFindUniqueOrThrowArgs} args - Arguments to find a BlacklistLog
     * @example
     * // Get one BlacklistLog
     * const blacklistLog = await prisma.blacklistLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BlacklistLogFindUniqueOrThrowArgs>(args: SelectSubset<T, BlacklistLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BlacklistLogClient<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BlacklistLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistLogFindFirstArgs} args - Arguments to find a BlacklistLog
     * @example
     * // Get one BlacklistLog
     * const blacklistLog = await prisma.blacklistLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BlacklistLogFindFirstArgs>(args?: SelectSubset<T, BlacklistLogFindFirstArgs<ExtArgs>>): Prisma__BlacklistLogClient<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BlacklistLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistLogFindFirstOrThrowArgs} args - Arguments to find a BlacklistLog
     * @example
     * // Get one BlacklistLog
     * const blacklistLog = await prisma.blacklistLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BlacklistLogFindFirstOrThrowArgs>(args?: SelectSubset<T, BlacklistLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__BlacklistLogClient<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BlacklistLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BlacklistLogs
     * const blacklistLogs = await prisma.blacklistLog.findMany()
     * 
     * // Get first 10 BlacklistLogs
     * const blacklistLogs = await prisma.blacklistLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blacklistLogWithIdOnly = await prisma.blacklistLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BlacklistLogFindManyArgs>(args?: SelectSubset<T, BlacklistLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BlacklistLog.
     * @param {BlacklistLogCreateArgs} args - Arguments to create a BlacklistLog.
     * @example
     * // Create one BlacklistLog
     * const BlacklistLog = await prisma.blacklistLog.create({
     *   data: {
     *     // ... data to create a BlacklistLog
     *   }
     * })
     * 
     */
    create<T extends BlacklistLogCreateArgs>(args: SelectSubset<T, BlacklistLogCreateArgs<ExtArgs>>): Prisma__BlacklistLogClient<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BlacklistLogs.
     * @param {BlacklistLogCreateManyArgs} args - Arguments to create many BlacklistLogs.
     * @example
     * // Create many BlacklistLogs
     * const blacklistLog = await prisma.blacklistLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BlacklistLogCreateManyArgs>(args?: SelectSubset<T, BlacklistLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BlacklistLogs and returns the data saved in the database.
     * @param {BlacklistLogCreateManyAndReturnArgs} args - Arguments to create many BlacklistLogs.
     * @example
     * // Create many BlacklistLogs
     * const blacklistLog = await prisma.blacklistLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BlacklistLogs and only return the `id`
     * const blacklistLogWithIdOnly = await prisma.blacklistLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BlacklistLogCreateManyAndReturnArgs>(args?: SelectSubset<T, BlacklistLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BlacklistLog.
     * @param {BlacklistLogDeleteArgs} args - Arguments to delete one BlacklistLog.
     * @example
     * // Delete one BlacklistLog
     * const BlacklistLog = await prisma.blacklistLog.delete({
     *   where: {
     *     // ... filter to delete one BlacklistLog
     *   }
     * })
     * 
     */
    delete<T extends BlacklistLogDeleteArgs>(args: SelectSubset<T, BlacklistLogDeleteArgs<ExtArgs>>): Prisma__BlacklistLogClient<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BlacklistLog.
     * @param {BlacklistLogUpdateArgs} args - Arguments to update one BlacklistLog.
     * @example
     * // Update one BlacklistLog
     * const blacklistLog = await prisma.blacklistLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BlacklistLogUpdateArgs>(args: SelectSubset<T, BlacklistLogUpdateArgs<ExtArgs>>): Prisma__BlacklistLogClient<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BlacklistLogs.
     * @param {BlacklistLogDeleteManyArgs} args - Arguments to filter BlacklistLogs to delete.
     * @example
     * // Delete a few BlacklistLogs
     * const { count } = await prisma.blacklistLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BlacklistLogDeleteManyArgs>(args?: SelectSubset<T, BlacklistLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlacklistLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BlacklistLogs
     * const blacklistLog = await prisma.blacklistLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BlacklistLogUpdateManyArgs>(args: SelectSubset<T, BlacklistLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlacklistLogs and returns the data updated in the database.
     * @param {BlacklistLogUpdateManyAndReturnArgs} args - Arguments to update many BlacklistLogs.
     * @example
     * // Update many BlacklistLogs
     * const blacklistLog = await prisma.blacklistLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BlacklistLogs and only return the `id`
     * const blacklistLogWithIdOnly = await prisma.blacklistLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BlacklistLogUpdateManyAndReturnArgs>(args: SelectSubset<T, BlacklistLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BlacklistLog.
     * @param {BlacklistLogUpsertArgs} args - Arguments to update or create a BlacklistLog.
     * @example
     * // Update or create a BlacklistLog
     * const blacklistLog = await prisma.blacklistLog.upsert({
     *   create: {
     *     // ... data to create a BlacklistLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BlacklistLog we want to update
     *   }
     * })
     */
    upsert<T extends BlacklistLogUpsertArgs>(args: SelectSubset<T, BlacklistLogUpsertArgs<ExtArgs>>): Prisma__BlacklistLogClient<$Result.GetResult<Prisma.$BlacklistLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BlacklistLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistLogCountArgs} args - Arguments to filter BlacklistLogs to count.
     * @example
     * // Count the number of BlacklistLogs
     * const count = await prisma.blacklistLog.count({
     *   where: {
     *     // ... the filter for the BlacklistLogs we want to count
     *   }
     * })
    **/
    count<T extends BlacklistLogCountArgs>(
      args?: Subset<T, BlacklistLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlacklistLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BlacklistLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlacklistLogAggregateArgs>(args: Subset<T, BlacklistLogAggregateArgs>): Prisma.PrismaPromise<GetBlacklistLogAggregateType<T>>

    /**
     * Group by BlacklistLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlacklistLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlacklistLogGroupByArgs['orderBy'] }
        : { orderBy?: BlacklistLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlacklistLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlacklistLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BlacklistLog model
   */
  readonly fields: BlacklistLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BlacklistLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlacklistLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    blacklistEntry<T extends BlacklistLog$blacklistEntryArgs<ExtArgs> = {}>(args?: Subset<T, BlacklistLog$blacklistEntryArgs<ExtArgs>>): Prisma__SenderBlacklistClient<$Result.GetResult<Prisma.$SenderBlacklistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BlacklistLog model
   */
  interface BlacklistLogFieldRefs {
    readonly id: FieldRef<"BlacklistLog", 'String'>
    readonly action: FieldRef<"BlacklistLog", 'LogBlackType'>
    readonly entityId: FieldRef<"BlacklistLog", 'String'>
    readonly entityType: FieldRef<"BlacklistLog", 'String'>
    readonly oldData: FieldRef<"BlacklistLog", 'Json'>
    readonly newData: FieldRef<"BlacklistLog", 'Json'>
    readonly userId: FieldRef<"BlacklistLog", 'String'>
    readonly timestamp: FieldRef<"BlacklistLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BlacklistLog findUnique
   */
  export type BlacklistLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogInclude<ExtArgs> | null
    /**
     * Filter, which BlacklistLog to fetch.
     */
    where: BlacklistLogWhereUniqueInput
  }

  /**
   * BlacklistLog findUniqueOrThrow
   */
  export type BlacklistLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogInclude<ExtArgs> | null
    /**
     * Filter, which BlacklistLog to fetch.
     */
    where: BlacklistLogWhereUniqueInput
  }

  /**
   * BlacklistLog findFirst
   */
  export type BlacklistLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogInclude<ExtArgs> | null
    /**
     * Filter, which BlacklistLog to fetch.
     */
    where?: BlacklistLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlacklistLogs to fetch.
     */
    orderBy?: BlacklistLogOrderByWithRelationInput | BlacklistLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlacklistLogs.
     */
    cursor?: BlacklistLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlacklistLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlacklistLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlacklistLogs.
     */
    distinct?: BlacklistLogScalarFieldEnum | BlacklistLogScalarFieldEnum[]
  }

  /**
   * BlacklistLog findFirstOrThrow
   */
  export type BlacklistLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogInclude<ExtArgs> | null
    /**
     * Filter, which BlacklistLog to fetch.
     */
    where?: BlacklistLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlacklistLogs to fetch.
     */
    orderBy?: BlacklistLogOrderByWithRelationInput | BlacklistLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlacklistLogs.
     */
    cursor?: BlacklistLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlacklistLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlacklistLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlacklistLogs.
     */
    distinct?: BlacklistLogScalarFieldEnum | BlacklistLogScalarFieldEnum[]
  }

  /**
   * BlacklistLog findMany
   */
  export type BlacklistLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogInclude<ExtArgs> | null
    /**
     * Filter, which BlacklistLogs to fetch.
     */
    where?: BlacklistLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlacklistLogs to fetch.
     */
    orderBy?: BlacklistLogOrderByWithRelationInput | BlacklistLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BlacklistLogs.
     */
    cursor?: BlacklistLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlacklistLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlacklistLogs.
     */
    skip?: number
    distinct?: BlacklistLogScalarFieldEnum | BlacklistLogScalarFieldEnum[]
  }

  /**
   * BlacklistLog create
   */
  export type BlacklistLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogInclude<ExtArgs> | null
    /**
     * The data needed to create a BlacklistLog.
     */
    data: XOR<BlacklistLogCreateInput, BlacklistLogUncheckedCreateInput>
  }

  /**
   * BlacklistLog createMany
   */
  export type BlacklistLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BlacklistLogs.
     */
    data: BlacklistLogCreateManyInput | BlacklistLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BlacklistLog createManyAndReturn
   */
  export type BlacklistLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * The data used to create many BlacklistLogs.
     */
    data: BlacklistLogCreateManyInput | BlacklistLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BlacklistLog update
   */
  export type BlacklistLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogInclude<ExtArgs> | null
    /**
     * The data needed to update a BlacklistLog.
     */
    data: XOR<BlacklistLogUpdateInput, BlacklistLogUncheckedUpdateInput>
    /**
     * Choose, which BlacklistLog to update.
     */
    where: BlacklistLogWhereUniqueInput
  }

  /**
   * BlacklistLog updateMany
   */
  export type BlacklistLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BlacklistLogs.
     */
    data: XOR<BlacklistLogUpdateManyMutationInput, BlacklistLogUncheckedUpdateManyInput>
    /**
     * Filter which BlacklistLogs to update
     */
    where?: BlacklistLogWhereInput
    /**
     * Limit how many BlacklistLogs to update.
     */
    limit?: number
  }

  /**
   * BlacklistLog updateManyAndReturn
   */
  export type BlacklistLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * The data used to update BlacklistLogs.
     */
    data: XOR<BlacklistLogUpdateManyMutationInput, BlacklistLogUncheckedUpdateManyInput>
    /**
     * Filter which BlacklistLogs to update
     */
    where?: BlacklistLogWhereInput
    /**
     * Limit how many BlacklistLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BlacklistLog upsert
   */
  export type BlacklistLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogInclude<ExtArgs> | null
    /**
     * The filter to search for the BlacklistLog to update in case it exists.
     */
    where: BlacklistLogWhereUniqueInput
    /**
     * In case the BlacklistLog found by the `where` argument doesn't exist, create a new BlacklistLog with this data.
     */
    create: XOR<BlacklistLogCreateInput, BlacklistLogUncheckedCreateInput>
    /**
     * In case the BlacklistLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlacklistLogUpdateInput, BlacklistLogUncheckedUpdateInput>
  }

  /**
   * BlacklistLog delete
   */
  export type BlacklistLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogInclude<ExtArgs> | null
    /**
     * Filter which BlacklistLog to delete.
     */
    where: BlacklistLogWhereUniqueInput
  }

  /**
   * BlacklistLog deleteMany
   */
  export type BlacklistLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlacklistLogs to delete
     */
    where?: BlacklistLogWhereInput
    /**
     * Limit how many BlacklistLogs to delete.
     */
    limit?: number
  }

  /**
   * BlacklistLog.blacklistEntry
   */
  export type BlacklistLog$blacklistEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SenderBlacklist
     */
    select?: SenderBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SenderBlacklist
     */
    omit?: SenderBlacklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SenderBlacklistInclude<ExtArgs> | null
    where?: SenderBlacklistWhereInput
  }

  /**
   * BlacklistLog without action
   */
  export type BlacklistLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistLog
     */
    select?: BlacklistLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistLog
     */
    omit?: BlacklistLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlacklistLogInclude<ExtArgs> | null
  }


  /**
   * Model Operator
   */

  export type AggregateOperator = {
    _count: OperatorCountAggregateOutputType | null
    _min: OperatorMinAggregateOutputType | null
    _max: OperatorMaxAggregateOutputType | null
  }

  export type OperatorMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    logoUrl: string | null
    website: string | null
    contactEmail: string | null
    contactPhone: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OperatorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    logoUrl: string | null
    website: string | null
    contactEmail: string | null
    contactPhone: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OperatorCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    logoUrl: number
    website: number
    contactEmail: number
    contactPhone: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OperatorMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    logoUrl?: true
    website?: true
    contactEmail?: true
    contactPhone?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OperatorMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    logoUrl?: true
    website?: true
    contactEmail?: true
    contactPhone?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OperatorCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    logoUrl?: true
    website?: true
    contactEmail?: true
    contactPhone?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OperatorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operator to aggregate.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Operators
    **/
    _count?: true | OperatorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperatorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperatorMaxAggregateInputType
  }

  export type GetOperatorAggregateType<T extends OperatorAggregateArgs> = {
        [P in keyof T & keyof AggregateOperator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperator[P]>
      : GetScalarType<T[P], AggregateOperator[P]>
  }




  export type OperatorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatorWhereInput
    orderBy?: OperatorOrderByWithAggregationInput | OperatorOrderByWithAggregationInput[]
    by: OperatorScalarFieldEnum[] | OperatorScalarFieldEnum
    having?: OperatorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperatorCountAggregateInputType | true
    _min?: OperatorMinAggregateInputType
    _max?: OperatorMaxAggregateInputType
  }

  export type OperatorGroupByOutputType = {
    id: string
    name: string
    code: string
    description: string | null
    logoUrl: string | null
    website: string | null
    contactEmail: string | null
    contactPhone: string | null
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: OperatorCountAggregateOutputType | null
    _min: OperatorMinAggregateOutputType | null
    _max: OperatorMaxAggregateOutputType | null
  }

  type GetOperatorGroupByPayload<T extends OperatorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperatorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperatorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperatorGroupByOutputType[P]>
            : GetScalarType<T[P], OperatorGroupByOutputType[P]>
        }
      >
    >


  export type OperatorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    logoUrl?: boolean
    website?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contracts?: boolean | Operator$contractsArgs<ExtArgs>
    _count?: boolean | OperatorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operator"]>

  export type OperatorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    logoUrl?: boolean
    website?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["operator"]>

  export type OperatorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    logoUrl?: boolean
    website?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["operator"]>

  export type OperatorSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    logoUrl?: boolean
    website?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OperatorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "description" | "logoUrl" | "website" | "contactEmail" | "contactPhone" | "active" | "createdAt" | "updatedAt", ExtArgs["result"]["operator"]>
  export type OperatorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | Operator$contractsArgs<ExtArgs>
    _count?: boolean | OperatorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OperatorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OperatorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OperatorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Operator"
    objects: {
      contracts: Prisma.$ContractPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      description: string | null
      logoUrl: string | null
      website: string | null
      contactEmail: string | null
      contactPhone: string | null
      active: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["operator"]>
    composites: {}
  }

  type OperatorGetPayload<S extends boolean | null | undefined | OperatorDefaultArgs> = $Result.GetResult<Prisma.$OperatorPayload, S>

  type OperatorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OperatorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OperatorCountAggregateInputType | true
    }

  export interface OperatorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Operator'], meta: { name: 'Operator' } }
    /**
     * Find zero or one Operator that matches the filter.
     * @param {OperatorFindUniqueArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperatorFindUniqueArgs>(args: SelectSubset<T, OperatorFindUniqueArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Operator that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OperatorFindUniqueOrThrowArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperatorFindUniqueOrThrowArgs>(args: SelectSubset<T, OperatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Operator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorFindFirstArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperatorFindFirstArgs>(args?: SelectSubset<T, OperatorFindFirstArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Operator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorFindFirstOrThrowArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperatorFindFirstOrThrowArgs>(args?: SelectSubset<T, OperatorFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Operators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Operators
     * const operators = await prisma.operator.findMany()
     * 
     * // Get first 10 Operators
     * const operators = await prisma.operator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const operatorWithIdOnly = await prisma.operator.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OperatorFindManyArgs>(args?: SelectSubset<T, OperatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Operator.
     * @param {OperatorCreateArgs} args - Arguments to create a Operator.
     * @example
     * // Create one Operator
     * const Operator = await prisma.operator.create({
     *   data: {
     *     // ... data to create a Operator
     *   }
     * })
     * 
     */
    create<T extends OperatorCreateArgs>(args: SelectSubset<T, OperatorCreateArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Operators.
     * @param {OperatorCreateManyArgs} args - Arguments to create many Operators.
     * @example
     * // Create many Operators
     * const operator = await prisma.operator.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperatorCreateManyArgs>(args?: SelectSubset<T, OperatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Operators and returns the data saved in the database.
     * @param {OperatorCreateManyAndReturnArgs} args - Arguments to create many Operators.
     * @example
     * // Create many Operators
     * const operator = await prisma.operator.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Operators and only return the `id`
     * const operatorWithIdOnly = await prisma.operator.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OperatorCreateManyAndReturnArgs>(args?: SelectSubset<T, OperatorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Operator.
     * @param {OperatorDeleteArgs} args - Arguments to delete one Operator.
     * @example
     * // Delete one Operator
     * const Operator = await prisma.operator.delete({
     *   where: {
     *     // ... filter to delete one Operator
     *   }
     * })
     * 
     */
    delete<T extends OperatorDeleteArgs>(args: SelectSubset<T, OperatorDeleteArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Operator.
     * @param {OperatorUpdateArgs} args - Arguments to update one Operator.
     * @example
     * // Update one Operator
     * const operator = await prisma.operator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperatorUpdateArgs>(args: SelectSubset<T, OperatorUpdateArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Operators.
     * @param {OperatorDeleteManyArgs} args - Arguments to filter Operators to delete.
     * @example
     * // Delete a few Operators
     * const { count } = await prisma.operator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperatorDeleteManyArgs>(args?: SelectSubset<T, OperatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Operators
     * const operator = await prisma.operator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperatorUpdateManyArgs>(args: SelectSubset<T, OperatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operators and returns the data updated in the database.
     * @param {OperatorUpdateManyAndReturnArgs} args - Arguments to update many Operators.
     * @example
     * // Update many Operators
     * const operator = await prisma.operator.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Operators and only return the `id`
     * const operatorWithIdOnly = await prisma.operator.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OperatorUpdateManyAndReturnArgs>(args: SelectSubset<T, OperatorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Operator.
     * @param {OperatorUpsertArgs} args - Arguments to update or create a Operator.
     * @example
     * // Update or create a Operator
     * const operator = await prisma.operator.upsert({
     *   create: {
     *     // ... data to create a Operator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Operator we want to update
     *   }
     * })
     */
    upsert<T extends OperatorUpsertArgs>(args: SelectSubset<T, OperatorUpsertArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Operators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorCountArgs} args - Arguments to filter Operators to count.
     * @example
     * // Count the number of Operators
     * const count = await prisma.operator.count({
     *   where: {
     *     // ... the filter for the Operators we want to count
     *   }
     * })
    **/
    count<T extends OperatorCountArgs>(
      args?: Subset<T, OperatorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperatorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Operator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperatorAggregateArgs>(args: Subset<T, OperatorAggregateArgs>): Prisma.PrismaPromise<GetOperatorAggregateType<T>>

    /**
     * Group by Operator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperatorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperatorGroupByArgs['orderBy'] }
        : { orderBy?: OperatorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Operator model
   */
  readonly fields: OperatorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Operator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperatorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contracts<T extends Operator$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Operator$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Operator model
   */
  interface OperatorFieldRefs {
    readonly id: FieldRef<"Operator", 'String'>
    readonly name: FieldRef<"Operator", 'String'>
    readonly code: FieldRef<"Operator", 'String'>
    readonly description: FieldRef<"Operator", 'String'>
    readonly logoUrl: FieldRef<"Operator", 'String'>
    readonly website: FieldRef<"Operator", 'String'>
    readonly contactEmail: FieldRef<"Operator", 'String'>
    readonly contactPhone: FieldRef<"Operator", 'String'>
    readonly active: FieldRef<"Operator", 'Boolean'>
    readonly createdAt: FieldRef<"Operator", 'DateTime'>
    readonly updatedAt: FieldRef<"Operator", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Operator findUnique
   */
  export type OperatorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator findUniqueOrThrow
   */
  export type OperatorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator findFirst
   */
  export type OperatorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operators.
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operators.
     */
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Operator findFirstOrThrow
   */
  export type OperatorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operators.
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operators.
     */
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Operator findMany
   */
  export type OperatorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operators to fetch.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Operators.
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Operator create
   */
  export type OperatorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * The data needed to create a Operator.
     */
    data: XOR<OperatorCreateInput, OperatorUncheckedCreateInput>
  }

  /**
   * Operator createMany
   */
  export type OperatorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Operators.
     */
    data: OperatorCreateManyInput | OperatorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Operator createManyAndReturn
   */
  export type OperatorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * The data used to create many Operators.
     */
    data: OperatorCreateManyInput | OperatorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Operator update
   */
  export type OperatorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * The data needed to update a Operator.
     */
    data: XOR<OperatorUpdateInput, OperatorUncheckedUpdateInput>
    /**
     * Choose, which Operator to update.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator updateMany
   */
  export type OperatorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Operators.
     */
    data: XOR<OperatorUpdateManyMutationInput, OperatorUncheckedUpdateManyInput>
    /**
     * Filter which Operators to update
     */
    where?: OperatorWhereInput
    /**
     * Limit how many Operators to update.
     */
    limit?: number
  }

  /**
   * Operator updateManyAndReturn
   */
  export type OperatorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * The data used to update Operators.
     */
    data: XOR<OperatorUpdateManyMutationInput, OperatorUncheckedUpdateManyInput>
    /**
     * Filter which Operators to update
     */
    where?: OperatorWhereInput
    /**
     * Limit how many Operators to update.
     */
    limit?: number
  }

  /**
   * Operator upsert
   */
  export type OperatorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * The filter to search for the Operator to update in case it exists.
     */
    where: OperatorWhereUniqueInput
    /**
     * In case the Operator found by the `where` argument doesn't exist, create a new Operator with this data.
     */
    create: XOR<OperatorCreateInput, OperatorUncheckedCreateInput>
    /**
     * In case the Operator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperatorUpdateInput, OperatorUncheckedUpdateInput>
  }

  /**
   * Operator delete
   */
  export type OperatorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter which Operator to delete.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator deleteMany
   */
  export type OperatorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operators to delete
     */
    where?: OperatorWhereInput
    /**
     * Limit how many Operators to delete.
     */
    limit?: number
  }

  /**
   * Operator.contracts
   */
  export type Operator$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Operator without action
   */
  export type OperatorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
  }


  /**
   * Model ServiceContract
   */

  export type AggregateServiceContract = {
    _count: ServiceContractCountAggregateOutputType | null
    _min: ServiceContractMinAggregateOutputType | null
    _max: ServiceContractMaxAggregateOutputType | null
  }

  export type ServiceContractMinAggregateOutputType = {
    id: string | null
    contractId: string | null
    serviceId: string | null
    specificTerms: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceContractMaxAggregateOutputType = {
    id: string | null
    contractId: string | null
    serviceId: string | null
    specificTerms: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceContractCountAggregateOutputType = {
    id: number
    contractId: number
    serviceId: number
    specificTerms: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceContractMinAggregateInputType = {
    id?: true
    contractId?: true
    serviceId?: true
    specificTerms?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceContractMaxAggregateInputType = {
    id?: true
    contractId?: true
    serviceId?: true
    specificTerms?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceContractCountAggregateInputType = {
    id?: true
    contractId?: true
    serviceId?: true
    specificTerms?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceContract to aggregate.
     */
    where?: ServiceContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceContracts to fetch.
     */
    orderBy?: ServiceContractOrderByWithRelationInput | ServiceContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceContracts
    **/
    _count?: true | ServiceContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceContractMaxAggregateInputType
  }

  export type GetServiceContractAggregateType<T extends ServiceContractAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceContract[P]>
      : GetScalarType<T[P], AggregateServiceContract[P]>
  }




  export type ServiceContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceContractWhereInput
    orderBy?: ServiceContractOrderByWithAggregationInput | ServiceContractOrderByWithAggregationInput[]
    by: ServiceContractScalarFieldEnum[] | ServiceContractScalarFieldEnum
    having?: ServiceContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceContractCountAggregateInputType | true
    _min?: ServiceContractMinAggregateInputType
    _max?: ServiceContractMaxAggregateInputType
  }

  export type ServiceContractGroupByOutputType = {
    id: string
    contractId: string
    serviceId: string
    specificTerms: string | null
    createdAt: Date
    updatedAt: Date
    _count: ServiceContractCountAggregateOutputType | null
    _min: ServiceContractMinAggregateOutputType | null
    _max: ServiceContractMaxAggregateOutputType | null
  }

  type GetServiceContractGroupByPayload<T extends ServiceContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceContractGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceContractGroupByOutputType[P]>
        }
      >
    >


  export type ServiceContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    serviceId?: boolean
    specificTerms?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceContract"]>

  export type ServiceContractSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    serviceId?: boolean
    specificTerms?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceContract"]>

  export type ServiceContractSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    serviceId?: boolean
    specificTerms?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceContract"]>

  export type ServiceContractSelectScalar = {
    id?: boolean
    contractId?: boolean
    serviceId?: boolean
    specificTerms?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceContractOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contractId" | "serviceId" | "specificTerms" | "createdAt" | "updatedAt", ExtArgs["result"]["serviceContract"]>
  export type ServiceContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }
  export type ServiceContractIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }
  export type ServiceContractIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }

  export type $ServiceContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceContract"
    objects: {
      contract: Prisma.$ContractPayload<ExtArgs>
      service: Prisma.$ServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      contractId: string
      serviceId: string
      specificTerms: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["serviceContract"]>
    composites: {}
  }

  type ServiceContractGetPayload<S extends boolean | null | undefined | ServiceContractDefaultArgs> = $Result.GetResult<Prisma.$ServiceContractPayload, S>

  type ServiceContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceContractFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceContractCountAggregateInputType | true
    }

  export interface ServiceContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceContract'], meta: { name: 'ServiceContract' } }
    /**
     * Find zero or one ServiceContract that matches the filter.
     * @param {ServiceContractFindUniqueArgs} args - Arguments to find a ServiceContract
     * @example
     * // Get one ServiceContract
     * const serviceContract = await prisma.serviceContract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceContractFindUniqueArgs>(args: SelectSubset<T, ServiceContractFindUniqueArgs<ExtArgs>>): Prisma__ServiceContractClient<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceContract that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceContractFindUniqueOrThrowArgs} args - Arguments to find a ServiceContract
     * @example
     * // Get one ServiceContract
     * const serviceContract = await prisma.serviceContract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceContractFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceContractClient<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceContract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceContractFindFirstArgs} args - Arguments to find a ServiceContract
     * @example
     * // Get one ServiceContract
     * const serviceContract = await prisma.serviceContract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceContractFindFirstArgs>(args?: SelectSubset<T, ServiceContractFindFirstArgs<ExtArgs>>): Prisma__ServiceContractClient<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceContract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceContractFindFirstOrThrowArgs} args - Arguments to find a ServiceContract
     * @example
     * // Get one ServiceContract
     * const serviceContract = await prisma.serviceContract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceContractFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceContractClient<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceContracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceContracts
     * const serviceContracts = await prisma.serviceContract.findMany()
     * 
     * // Get first 10 ServiceContracts
     * const serviceContracts = await prisma.serviceContract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceContractWithIdOnly = await prisma.serviceContract.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceContractFindManyArgs>(args?: SelectSubset<T, ServiceContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceContract.
     * @param {ServiceContractCreateArgs} args - Arguments to create a ServiceContract.
     * @example
     * // Create one ServiceContract
     * const ServiceContract = await prisma.serviceContract.create({
     *   data: {
     *     // ... data to create a ServiceContract
     *   }
     * })
     * 
     */
    create<T extends ServiceContractCreateArgs>(args: SelectSubset<T, ServiceContractCreateArgs<ExtArgs>>): Prisma__ServiceContractClient<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceContracts.
     * @param {ServiceContractCreateManyArgs} args - Arguments to create many ServiceContracts.
     * @example
     * // Create many ServiceContracts
     * const serviceContract = await prisma.serviceContract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceContractCreateManyArgs>(args?: SelectSubset<T, ServiceContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceContracts and returns the data saved in the database.
     * @param {ServiceContractCreateManyAndReturnArgs} args - Arguments to create many ServiceContracts.
     * @example
     * // Create many ServiceContracts
     * const serviceContract = await prisma.serviceContract.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceContracts and only return the `id`
     * const serviceContractWithIdOnly = await prisma.serviceContract.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceContractCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceContractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceContract.
     * @param {ServiceContractDeleteArgs} args - Arguments to delete one ServiceContract.
     * @example
     * // Delete one ServiceContract
     * const ServiceContract = await prisma.serviceContract.delete({
     *   where: {
     *     // ... filter to delete one ServiceContract
     *   }
     * })
     * 
     */
    delete<T extends ServiceContractDeleteArgs>(args: SelectSubset<T, ServiceContractDeleteArgs<ExtArgs>>): Prisma__ServiceContractClient<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceContract.
     * @param {ServiceContractUpdateArgs} args - Arguments to update one ServiceContract.
     * @example
     * // Update one ServiceContract
     * const serviceContract = await prisma.serviceContract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceContractUpdateArgs>(args: SelectSubset<T, ServiceContractUpdateArgs<ExtArgs>>): Prisma__ServiceContractClient<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceContracts.
     * @param {ServiceContractDeleteManyArgs} args - Arguments to filter ServiceContracts to delete.
     * @example
     * // Delete a few ServiceContracts
     * const { count } = await prisma.serviceContract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceContractDeleteManyArgs>(args?: SelectSubset<T, ServiceContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceContracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceContracts
     * const serviceContract = await prisma.serviceContract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceContractUpdateManyArgs>(args: SelectSubset<T, ServiceContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceContracts and returns the data updated in the database.
     * @param {ServiceContractUpdateManyAndReturnArgs} args - Arguments to update many ServiceContracts.
     * @example
     * // Update many ServiceContracts
     * const serviceContract = await prisma.serviceContract.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceContracts and only return the `id`
     * const serviceContractWithIdOnly = await prisma.serviceContract.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceContractUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceContractUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceContract.
     * @param {ServiceContractUpsertArgs} args - Arguments to update or create a ServiceContract.
     * @example
     * // Update or create a ServiceContract
     * const serviceContract = await prisma.serviceContract.upsert({
     *   create: {
     *     // ... data to create a ServiceContract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceContract we want to update
     *   }
     * })
     */
    upsert<T extends ServiceContractUpsertArgs>(args: SelectSubset<T, ServiceContractUpsertArgs<ExtArgs>>): Prisma__ServiceContractClient<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceContracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceContractCountArgs} args - Arguments to filter ServiceContracts to count.
     * @example
     * // Count the number of ServiceContracts
     * const count = await prisma.serviceContract.count({
     *   where: {
     *     // ... the filter for the ServiceContracts we want to count
     *   }
     * })
    **/
    count<T extends ServiceContractCountArgs>(
      args?: Subset<T, ServiceContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceContract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceContractAggregateArgs>(args: Subset<T, ServiceContractAggregateArgs>): Prisma.PrismaPromise<GetServiceContractAggregateType<T>>

    /**
     * Group by ServiceContract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceContractGroupByArgs['orderBy'] }
        : { orderBy?: ServiceContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceContract model
   */
  readonly fields: ServiceContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceContract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contract<T extends ContractDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractDefaultArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceContract model
   */
  interface ServiceContractFieldRefs {
    readonly id: FieldRef<"ServiceContract", 'String'>
    readonly contractId: FieldRef<"ServiceContract", 'String'>
    readonly serviceId: FieldRef<"ServiceContract", 'String'>
    readonly specificTerms: FieldRef<"ServiceContract", 'String'>
    readonly createdAt: FieldRef<"ServiceContract", 'DateTime'>
    readonly updatedAt: FieldRef<"ServiceContract", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServiceContract findUnique
   */
  export type ServiceContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractInclude<ExtArgs> | null
    /**
     * Filter, which ServiceContract to fetch.
     */
    where: ServiceContractWhereUniqueInput
  }

  /**
   * ServiceContract findUniqueOrThrow
   */
  export type ServiceContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractInclude<ExtArgs> | null
    /**
     * Filter, which ServiceContract to fetch.
     */
    where: ServiceContractWhereUniqueInput
  }

  /**
   * ServiceContract findFirst
   */
  export type ServiceContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractInclude<ExtArgs> | null
    /**
     * Filter, which ServiceContract to fetch.
     */
    where?: ServiceContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceContracts to fetch.
     */
    orderBy?: ServiceContractOrderByWithRelationInput | ServiceContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceContracts.
     */
    cursor?: ServiceContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceContracts.
     */
    distinct?: ServiceContractScalarFieldEnum | ServiceContractScalarFieldEnum[]
  }

  /**
   * ServiceContract findFirstOrThrow
   */
  export type ServiceContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractInclude<ExtArgs> | null
    /**
     * Filter, which ServiceContract to fetch.
     */
    where?: ServiceContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceContracts to fetch.
     */
    orderBy?: ServiceContractOrderByWithRelationInput | ServiceContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceContracts.
     */
    cursor?: ServiceContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceContracts.
     */
    distinct?: ServiceContractScalarFieldEnum | ServiceContractScalarFieldEnum[]
  }

  /**
   * ServiceContract findMany
   */
  export type ServiceContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractInclude<ExtArgs> | null
    /**
     * Filter, which ServiceContracts to fetch.
     */
    where?: ServiceContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceContracts to fetch.
     */
    orderBy?: ServiceContractOrderByWithRelationInput | ServiceContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceContracts.
     */
    cursor?: ServiceContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceContracts.
     */
    skip?: number
    distinct?: ServiceContractScalarFieldEnum | ServiceContractScalarFieldEnum[]
  }

  /**
   * ServiceContract create
   */
  export type ServiceContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceContract.
     */
    data: XOR<ServiceContractCreateInput, ServiceContractUncheckedCreateInput>
  }

  /**
   * ServiceContract createMany
   */
  export type ServiceContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceContracts.
     */
    data: ServiceContractCreateManyInput | ServiceContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceContract createManyAndReturn
   */
  export type ServiceContractCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceContracts.
     */
    data: ServiceContractCreateManyInput | ServiceContractCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceContract update
   */
  export type ServiceContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceContract.
     */
    data: XOR<ServiceContractUpdateInput, ServiceContractUncheckedUpdateInput>
    /**
     * Choose, which ServiceContract to update.
     */
    where: ServiceContractWhereUniqueInput
  }

  /**
   * ServiceContract updateMany
   */
  export type ServiceContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceContracts.
     */
    data: XOR<ServiceContractUpdateManyMutationInput, ServiceContractUncheckedUpdateManyInput>
    /**
     * Filter which ServiceContracts to update
     */
    where?: ServiceContractWhereInput
    /**
     * Limit how many ServiceContracts to update.
     */
    limit?: number
  }

  /**
   * ServiceContract updateManyAndReturn
   */
  export type ServiceContractUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * The data used to update ServiceContracts.
     */
    data: XOR<ServiceContractUpdateManyMutationInput, ServiceContractUncheckedUpdateManyInput>
    /**
     * Filter which ServiceContracts to update
     */
    where?: ServiceContractWhereInput
    /**
     * Limit how many ServiceContracts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceContract upsert
   */
  export type ServiceContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceContract to update in case it exists.
     */
    where: ServiceContractWhereUniqueInput
    /**
     * In case the ServiceContract found by the `where` argument doesn't exist, create a new ServiceContract with this data.
     */
    create: XOR<ServiceContractCreateInput, ServiceContractUncheckedCreateInput>
    /**
     * In case the ServiceContract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceContractUpdateInput, ServiceContractUncheckedUpdateInput>
  }

  /**
   * ServiceContract delete
   */
  export type ServiceContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractInclude<ExtArgs> | null
    /**
     * Filter which ServiceContract to delete.
     */
    where: ServiceContractWhereUniqueInput
  }

  /**
   * ServiceContract deleteMany
   */
  export type ServiceContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceContracts to delete
     */
    where?: ServiceContractWhereInput
    /**
     * Limit how many ServiceContracts to delete.
     */
    limit?: number
  }

  /**
   * ServiceContract without action
   */
  export type ServiceContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractInclude<ExtArgs> | null
  }


  /**
   * Model ContractAttachment
   */

  export type AggregateContractAttachment = {
    _count: ContractAttachmentCountAggregateOutputType | null
    _min: ContractAttachmentMinAggregateOutputType | null
    _max: ContractAttachmentMaxAggregateOutputType | null
  }

  export type ContractAttachmentMinAggregateOutputType = {
    id: string | null
    contractId: string | null
    name: string | null
    fileUrl: string | null
    fileType: string | null
    uploadedAt: Date | null
    uploadedById: string | null
  }

  export type ContractAttachmentMaxAggregateOutputType = {
    id: string | null
    contractId: string | null
    name: string | null
    fileUrl: string | null
    fileType: string | null
    uploadedAt: Date | null
    uploadedById: string | null
  }

  export type ContractAttachmentCountAggregateOutputType = {
    id: number
    contractId: number
    name: number
    fileUrl: number
    fileType: number
    uploadedAt: number
    uploadedById: number
    _all: number
  }


  export type ContractAttachmentMinAggregateInputType = {
    id?: true
    contractId?: true
    name?: true
    fileUrl?: true
    fileType?: true
    uploadedAt?: true
    uploadedById?: true
  }

  export type ContractAttachmentMaxAggregateInputType = {
    id?: true
    contractId?: true
    name?: true
    fileUrl?: true
    fileType?: true
    uploadedAt?: true
    uploadedById?: true
  }

  export type ContractAttachmentCountAggregateInputType = {
    id?: true
    contractId?: true
    name?: true
    fileUrl?: true
    fileType?: true
    uploadedAt?: true
    uploadedById?: true
    _all?: true
  }

  export type ContractAttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractAttachment to aggregate.
     */
    where?: ContractAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractAttachments to fetch.
     */
    orderBy?: ContractAttachmentOrderByWithRelationInput | ContractAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContractAttachments
    **/
    _count?: true | ContractAttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractAttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractAttachmentMaxAggregateInputType
  }

  export type GetContractAttachmentAggregateType<T extends ContractAttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateContractAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContractAttachment[P]>
      : GetScalarType<T[P], AggregateContractAttachment[P]>
  }




  export type ContractAttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractAttachmentWhereInput
    orderBy?: ContractAttachmentOrderByWithAggregationInput | ContractAttachmentOrderByWithAggregationInput[]
    by: ContractAttachmentScalarFieldEnum[] | ContractAttachmentScalarFieldEnum
    having?: ContractAttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractAttachmentCountAggregateInputType | true
    _min?: ContractAttachmentMinAggregateInputType
    _max?: ContractAttachmentMaxAggregateInputType
  }

  export type ContractAttachmentGroupByOutputType = {
    id: string
    contractId: string
    name: string
    fileUrl: string
    fileType: string
    uploadedAt: Date
    uploadedById: string
    _count: ContractAttachmentCountAggregateOutputType | null
    _min: ContractAttachmentMinAggregateOutputType | null
    _max: ContractAttachmentMaxAggregateOutputType | null
  }

  type GetContractAttachmentGroupByPayload<T extends ContractAttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractAttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractAttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractAttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], ContractAttachmentGroupByOutputType[P]>
        }
      >
    >


  export type ContractAttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    name?: boolean
    fileUrl?: boolean
    fileType?: boolean
    uploadedAt?: boolean
    uploadedById?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractAttachment"]>

  export type ContractAttachmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    name?: boolean
    fileUrl?: boolean
    fileType?: boolean
    uploadedAt?: boolean
    uploadedById?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractAttachment"]>

  export type ContractAttachmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    name?: boolean
    fileUrl?: boolean
    fileType?: boolean
    uploadedAt?: boolean
    uploadedById?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractAttachment"]>

  export type ContractAttachmentSelectScalar = {
    id?: boolean
    contractId?: boolean
    name?: boolean
    fileUrl?: boolean
    fileType?: boolean
    uploadedAt?: boolean
    uploadedById?: boolean
  }

  export type ContractAttachmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contractId" | "name" | "fileUrl" | "fileType" | "uploadedAt" | "uploadedById", ExtArgs["result"]["contractAttachment"]>
  export type ContractAttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ContractAttachmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ContractAttachmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ContractAttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContractAttachment"
    objects: {
      contract: Prisma.$ContractPayload<ExtArgs>
      uploadedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      contractId: string
      name: string
      fileUrl: string
      fileType: string
      uploadedAt: Date
      uploadedById: string
    }, ExtArgs["result"]["contractAttachment"]>
    composites: {}
  }

  type ContractAttachmentGetPayload<S extends boolean | null | undefined | ContractAttachmentDefaultArgs> = $Result.GetResult<Prisma.$ContractAttachmentPayload, S>

  type ContractAttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContractAttachmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractAttachmentCountAggregateInputType | true
    }

  export interface ContractAttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContractAttachment'], meta: { name: 'ContractAttachment' } }
    /**
     * Find zero or one ContractAttachment that matches the filter.
     * @param {ContractAttachmentFindUniqueArgs} args - Arguments to find a ContractAttachment
     * @example
     * // Get one ContractAttachment
     * const contractAttachment = await prisma.contractAttachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractAttachmentFindUniqueArgs>(args: SelectSubset<T, ContractAttachmentFindUniqueArgs<ExtArgs>>): Prisma__ContractAttachmentClient<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContractAttachment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContractAttachmentFindUniqueOrThrowArgs} args - Arguments to find a ContractAttachment
     * @example
     * // Get one ContractAttachment
     * const contractAttachment = await prisma.contractAttachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractAttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractAttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractAttachmentClient<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContractAttachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAttachmentFindFirstArgs} args - Arguments to find a ContractAttachment
     * @example
     * // Get one ContractAttachment
     * const contractAttachment = await prisma.contractAttachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractAttachmentFindFirstArgs>(args?: SelectSubset<T, ContractAttachmentFindFirstArgs<ExtArgs>>): Prisma__ContractAttachmentClient<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContractAttachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAttachmentFindFirstOrThrowArgs} args - Arguments to find a ContractAttachment
     * @example
     * // Get one ContractAttachment
     * const contractAttachment = await prisma.contractAttachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractAttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractAttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractAttachmentClient<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContractAttachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContractAttachments
     * const contractAttachments = await prisma.contractAttachment.findMany()
     * 
     * // Get first 10 ContractAttachments
     * const contractAttachments = await prisma.contractAttachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractAttachmentWithIdOnly = await prisma.contractAttachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractAttachmentFindManyArgs>(args?: SelectSubset<T, ContractAttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContractAttachment.
     * @param {ContractAttachmentCreateArgs} args - Arguments to create a ContractAttachment.
     * @example
     * // Create one ContractAttachment
     * const ContractAttachment = await prisma.contractAttachment.create({
     *   data: {
     *     // ... data to create a ContractAttachment
     *   }
     * })
     * 
     */
    create<T extends ContractAttachmentCreateArgs>(args: SelectSubset<T, ContractAttachmentCreateArgs<ExtArgs>>): Prisma__ContractAttachmentClient<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContractAttachments.
     * @param {ContractAttachmentCreateManyArgs} args - Arguments to create many ContractAttachments.
     * @example
     * // Create many ContractAttachments
     * const contractAttachment = await prisma.contractAttachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractAttachmentCreateManyArgs>(args?: SelectSubset<T, ContractAttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContractAttachments and returns the data saved in the database.
     * @param {ContractAttachmentCreateManyAndReturnArgs} args - Arguments to create many ContractAttachments.
     * @example
     * // Create many ContractAttachments
     * const contractAttachment = await prisma.contractAttachment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContractAttachments and only return the `id`
     * const contractAttachmentWithIdOnly = await prisma.contractAttachment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractAttachmentCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractAttachmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContractAttachment.
     * @param {ContractAttachmentDeleteArgs} args - Arguments to delete one ContractAttachment.
     * @example
     * // Delete one ContractAttachment
     * const ContractAttachment = await prisma.contractAttachment.delete({
     *   where: {
     *     // ... filter to delete one ContractAttachment
     *   }
     * })
     * 
     */
    delete<T extends ContractAttachmentDeleteArgs>(args: SelectSubset<T, ContractAttachmentDeleteArgs<ExtArgs>>): Prisma__ContractAttachmentClient<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContractAttachment.
     * @param {ContractAttachmentUpdateArgs} args - Arguments to update one ContractAttachment.
     * @example
     * // Update one ContractAttachment
     * const contractAttachment = await prisma.contractAttachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractAttachmentUpdateArgs>(args: SelectSubset<T, ContractAttachmentUpdateArgs<ExtArgs>>): Prisma__ContractAttachmentClient<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContractAttachments.
     * @param {ContractAttachmentDeleteManyArgs} args - Arguments to filter ContractAttachments to delete.
     * @example
     * // Delete a few ContractAttachments
     * const { count } = await prisma.contractAttachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractAttachmentDeleteManyArgs>(args?: SelectSubset<T, ContractAttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContractAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContractAttachments
     * const contractAttachment = await prisma.contractAttachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractAttachmentUpdateManyArgs>(args: SelectSubset<T, ContractAttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContractAttachments and returns the data updated in the database.
     * @param {ContractAttachmentUpdateManyAndReturnArgs} args - Arguments to update many ContractAttachments.
     * @example
     * // Update many ContractAttachments
     * const contractAttachment = await prisma.contractAttachment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContractAttachments and only return the `id`
     * const contractAttachmentWithIdOnly = await prisma.contractAttachment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContractAttachmentUpdateManyAndReturnArgs>(args: SelectSubset<T, ContractAttachmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContractAttachment.
     * @param {ContractAttachmentUpsertArgs} args - Arguments to update or create a ContractAttachment.
     * @example
     * // Update or create a ContractAttachment
     * const contractAttachment = await prisma.contractAttachment.upsert({
     *   create: {
     *     // ... data to create a ContractAttachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContractAttachment we want to update
     *   }
     * })
     */
    upsert<T extends ContractAttachmentUpsertArgs>(args: SelectSubset<T, ContractAttachmentUpsertArgs<ExtArgs>>): Prisma__ContractAttachmentClient<$Result.GetResult<Prisma.$ContractAttachmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContractAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAttachmentCountArgs} args - Arguments to filter ContractAttachments to count.
     * @example
     * // Count the number of ContractAttachments
     * const count = await prisma.contractAttachment.count({
     *   where: {
     *     // ... the filter for the ContractAttachments we want to count
     *   }
     * })
    **/
    count<T extends ContractAttachmentCountArgs>(
      args?: Subset<T, ContractAttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractAttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContractAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractAttachmentAggregateArgs>(args: Subset<T, ContractAttachmentAggregateArgs>): Prisma.PrismaPromise<GetContractAttachmentAggregateType<T>>

    /**
     * Group by ContractAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractAttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractAttachmentGroupByArgs['orderBy'] }
        : { orderBy?: ContractAttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractAttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContractAttachment model
   */
  readonly fields: ContractAttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContractAttachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractAttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contract<T extends ContractDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractDefaultArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContractAttachment model
   */
  interface ContractAttachmentFieldRefs {
    readonly id: FieldRef<"ContractAttachment", 'String'>
    readonly contractId: FieldRef<"ContractAttachment", 'String'>
    readonly name: FieldRef<"ContractAttachment", 'String'>
    readonly fileUrl: FieldRef<"ContractAttachment", 'String'>
    readonly fileType: FieldRef<"ContractAttachment", 'String'>
    readonly uploadedAt: FieldRef<"ContractAttachment", 'DateTime'>
    readonly uploadedById: FieldRef<"ContractAttachment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ContractAttachment findUnique
   */
  export type ContractAttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which ContractAttachment to fetch.
     */
    where: ContractAttachmentWhereUniqueInput
  }

  /**
   * ContractAttachment findUniqueOrThrow
   */
  export type ContractAttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which ContractAttachment to fetch.
     */
    where: ContractAttachmentWhereUniqueInput
  }

  /**
   * ContractAttachment findFirst
   */
  export type ContractAttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which ContractAttachment to fetch.
     */
    where?: ContractAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractAttachments to fetch.
     */
    orderBy?: ContractAttachmentOrderByWithRelationInput | ContractAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractAttachments.
     */
    cursor?: ContractAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractAttachments.
     */
    distinct?: ContractAttachmentScalarFieldEnum | ContractAttachmentScalarFieldEnum[]
  }

  /**
   * ContractAttachment findFirstOrThrow
   */
  export type ContractAttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which ContractAttachment to fetch.
     */
    where?: ContractAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractAttachments to fetch.
     */
    orderBy?: ContractAttachmentOrderByWithRelationInput | ContractAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractAttachments.
     */
    cursor?: ContractAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractAttachments.
     */
    distinct?: ContractAttachmentScalarFieldEnum | ContractAttachmentScalarFieldEnum[]
  }

  /**
   * ContractAttachment findMany
   */
  export type ContractAttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which ContractAttachments to fetch.
     */
    where?: ContractAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractAttachments to fetch.
     */
    orderBy?: ContractAttachmentOrderByWithRelationInput | ContractAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContractAttachments.
     */
    cursor?: ContractAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractAttachments.
     */
    skip?: number
    distinct?: ContractAttachmentScalarFieldEnum | ContractAttachmentScalarFieldEnum[]
  }

  /**
   * ContractAttachment create
   */
  export type ContractAttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a ContractAttachment.
     */
    data: XOR<ContractAttachmentCreateInput, ContractAttachmentUncheckedCreateInput>
  }

  /**
   * ContractAttachment createMany
   */
  export type ContractAttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContractAttachments.
     */
    data: ContractAttachmentCreateManyInput | ContractAttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContractAttachment createManyAndReturn
   */
  export type ContractAttachmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * The data used to create many ContractAttachments.
     */
    data: ContractAttachmentCreateManyInput | ContractAttachmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContractAttachment update
   */
  export type ContractAttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a ContractAttachment.
     */
    data: XOR<ContractAttachmentUpdateInput, ContractAttachmentUncheckedUpdateInput>
    /**
     * Choose, which ContractAttachment to update.
     */
    where: ContractAttachmentWhereUniqueInput
  }

  /**
   * ContractAttachment updateMany
   */
  export type ContractAttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContractAttachments.
     */
    data: XOR<ContractAttachmentUpdateManyMutationInput, ContractAttachmentUncheckedUpdateManyInput>
    /**
     * Filter which ContractAttachments to update
     */
    where?: ContractAttachmentWhereInput
    /**
     * Limit how many ContractAttachments to update.
     */
    limit?: number
  }

  /**
   * ContractAttachment updateManyAndReturn
   */
  export type ContractAttachmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * The data used to update ContractAttachments.
     */
    data: XOR<ContractAttachmentUpdateManyMutationInput, ContractAttachmentUncheckedUpdateManyInput>
    /**
     * Filter which ContractAttachments to update
     */
    where?: ContractAttachmentWhereInput
    /**
     * Limit how many ContractAttachments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContractAttachment upsert
   */
  export type ContractAttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the ContractAttachment to update in case it exists.
     */
    where: ContractAttachmentWhereUniqueInput
    /**
     * In case the ContractAttachment found by the `where` argument doesn't exist, create a new ContractAttachment with this data.
     */
    create: XOR<ContractAttachmentCreateInput, ContractAttachmentUncheckedCreateInput>
    /**
     * In case the ContractAttachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractAttachmentUpdateInput, ContractAttachmentUncheckedUpdateInput>
  }

  /**
   * ContractAttachment delete
   */
  export type ContractAttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentInclude<ExtArgs> | null
    /**
     * Filter which ContractAttachment to delete.
     */
    where: ContractAttachmentWhereUniqueInput
  }

  /**
   * ContractAttachment deleteMany
   */
  export type ContractAttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractAttachments to delete
     */
    where?: ContractAttachmentWhereInput
    /**
     * Limit how many ContractAttachments to delete.
     */
    limit?: number
  }

  /**
   * ContractAttachment without action
   */
  export type ContractAttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractAttachment
     */
    select?: ContractAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractAttachment
     */
    omit?: ContractAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractAttachmentInclude<ExtArgs> | null
  }


  /**
   * Model ContractReminder
   */

  export type AggregateContractReminder = {
    _count: ContractReminderCountAggregateOutputType | null
    _min: ContractReminderMinAggregateOutputType | null
    _max: ContractReminderMaxAggregateOutputType | null
  }

  export type ContractReminderMinAggregateOutputType = {
    id: string | null
    contractId: string | null
    reminderDate: Date | null
    reminderType: string | null
    isAcknowledged: boolean | null
    acknowledgedById: string | null
    createdAt: Date | null
  }

  export type ContractReminderMaxAggregateOutputType = {
    id: string | null
    contractId: string | null
    reminderDate: Date | null
    reminderType: string | null
    isAcknowledged: boolean | null
    acknowledgedById: string | null
    createdAt: Date | null
  }

  export type ContractReminderCountAggregateOutputType = {
    id: number
    contractId: number
    reminderDate: number
    reminderType: number
    isAcknowledged: number
    acknowledgedById: number
    createdAt: number
    _all: number
  }


  export type ContractReminderMinAggregateInputType = {
    id?: true
    contractId?: true
    reminderDate?: true
    reminderType?: true
    isAcknowledged?: true
    acknowledgedById?: true
    createdAt?: true
  }

  export type ContractReminderMaxAggregateInputType = {
    id?: true
    contractId?: true
    reminderDate?: true
    reminderType?: true
    isAcknowledged?: true
    acknowledgedById?: true
    createdAt?: true
  }

  export type ContractReminderCountAggregateInputType = {
    id?: true
    contractId?: true
    reminderDate?: true
    reminderType?: true
    isAcknowledged?: true
    acknowledgedById?: true
    createdAt?: true
    _all?: true
  }

  export type ContractReminderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractReminder to aggregate.
     */
    where?: ContractReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractReminders to fetch.
     */
    orderBy?: ContractReminderOrderByWithRelationInput | ContractReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractReminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractReminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContractReminders
    **/
    _count?: true | ContractReminderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractReminderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractReminderMaxAggregateInputType
  }

  export type GetContractReminderAggregateType<T extends ContractReminderAggregateArgs> = {
        [P in keyof T & keyof AggregateContractReminder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContractReminder[P]>
      : GetScalarType<T[P], AggregateContractReminder[P]>
  }




  export type ContractReminderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractReminderWhereInput
    orderBy?: ContractReminderOrderByWithAggregationInput | ContractReminderOrderByWithAggregationInput[]
    by: ContractReminderScalarFieldEnum[] | ContractReminderScalarFieldEnum
    having?: ContractReminderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractReminderCountAggregateInputType | true
    _min?: ContractReminderMinAggregateInputType
    _max?: ContractReminderMaxAggregateInputType
  }

  export type ContractReminderGroupByOutputType = {
    id: string
    contractId: string
    reminderDate: Date
    reminderType: string
    isAcknowledged: boolean
    acknowledgedById: string | null
    createdAt: Date
    _count: ContractReminderCountAggregateOutputType | null
    _min: ContractReminderMinAggregateOutputType | null
    _max: ContractReminderMaxAggregateOutputType | null
  }

  type GetContractReminderGroupByPayload<T extends ContractReminderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractReminderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractReminderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractReminderGroupByOutputType[P]>
            : GetScalarType<T[P], ContractReminderGroupByOutputType[P]>
        }
      >
    >


  export type ContractReminderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    reminderDate?: boolean
    reminderType?: boolean
    isAcknowledged?: boolean
    acknowledgedById?: boolean
    createdAt?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    acknowledgedBy?: boolean | ContractReminder$acknowledgedByArgs<ExtArgs>
  }, ExtArgs["result"]["contractReminder"]>

  export type ContractReminderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    reminderDate?: boolean
    reminderType?: boolean
    isAcknowledged?: boolean
    acknowledgedById?: boolean
    createdAt?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    acknowledgedBy?: boolean | ContractReminder$acknowledgedByArgs<ExtArgs>
  }, ExtArgs["result"]["contractReminder"]>

  export type ContractReminderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    reminderDate?: boolean
    reminderType?: boolean
    isAcknowledged?: boolean
    acknowledgedById?: boolean
    createdAt?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    acknowledgedBy?: boolean | ContractReminder$acknowledgedByArgs<ExtArgs>
  }, ExtArgs["result"]["contractReminder"]>

  export type ContractReminderSelectScalar = {
    id?: boolean
    contractId?: boolean
    reminderDate?: boolean
    reminderType?: boolean
    isAcknowledged?: boolean
    acknowledgedById?: boolean
    createdAt?: boolean
  }

  export type ContractReminderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contractId" | "reminderDate" | "reminderType" | "isAcknowledged" | "acknowledgedById" | "createdAt", ExtArgs["result"]["contractReminder"]>
  export type ContractReminderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    acknowledgedBy?: boolean | ContractReminder$acknowledgedByArgs<ExtArgs>
  }
  export type ContractReminderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    acknowledgedBy?: boolean | ContractReminder$acknowledgedByArgs<ExtArgs>
  }
  export type ContractReminderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    acknowledgedBy?: boolean | ContractReminder$acknowledgedByArgs<ExtArgs>
  }

  export type $ContractReminderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContractReminder"
    objects: {
      contract: Prisma.$ContractPayload<ExtArgs>
      acknowledgedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      contractId: string
      reminderDate: Date
      reminderType: string
      isAcknowledged: boolean
      acknowledgedById: string | null
      createdAt: Date
    }, ExtArgs["result"]["contractReminder"]>
    composites: {}
  }

  type ContractReminderGetPayload<S extends boolean | null | undefined | ContractReminderDefaultArgs> = $Result.GetResult<Prisma.$ContractReminderPayload, S>

  type ContractReminderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContractReminderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractReminderCountAggregateInputType | true
    }

  export interface ContractReminderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContractReminder'], meta: { name: 'ContractReminder' } }
    /**
     * Find zero or one ContractReminder that matches the filter.
     * @param {ContractReminderFindUniqueArgs} args - Arguments to find a ContractReminder
     * @example
     * // Get one ContractReminder
     * const contractReminder = await prisma.contractReminder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractReminderFindUniqueArgs>(args: SelectSubset<T, ContractReminderFindUniqueArgs<ExtArgs>>): Prisma__ContractReminderClient<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContractReminder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContractReminderFindUniqueOrThrowArgs} args - Arguments to find a ContractReminder
     * @example
     * // Get one ContractReminder
     * const contractReminder = await prisma.contractReminder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractReminderFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractReminderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractReminderClient<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContractReminder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractReminderFindFirstArgs} args - Arguments to find a ContractReminder
     * @example
     * // Get one ContractReminder
     * const contractReminder = await prisma.contractReminder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractReminderFindFirstArgs>(args?: SelectSubset<T, ContractReminderFindFirstArgs<ExtArgs>>): Prisma__ContractReminderClient<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContractReminder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractReminderFindFirstOrThrowArgs} args - Arguments to find a ContractReminder
     * @example
     * // Get one ContractReminder
     * const contractReminder = await prisma.contractReminder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractReminderFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractReminderFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractReminderClient<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContractReminders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractReminderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContractReminders
     * const contractReminders = await prisma.contractReminder.findMany()
     * 
     * // Get first 10 ContractReminders
     * const contractReminders = await prisma.contractReminder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractReminderWithIdOnly = await prisma.contractReminder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractReminderFindManyArgs>(args?: SelectSubset<T, ContractReminderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContractReminder.
     * @param {ContractReminderCreateArgs} args - Arguments to create a ContractReminder.
     * @example
     * // Create one ContractReminder
     * const ContractReminder = await prisma.contractReminder.create({
     *   data: {
     *     // ... data to create a ContractReminder
     *   }
     * })
     * 
     */
    create<T extends ContractReminderCreateArgs>(args: SelectSubset<T, ContractReminderCreateArgs<ExtArgs>>): Prisma__ContractReminderClient<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContractReminders.
     * @param {ContractReminderCreateManyArgs} args - Arguments to create many ContractReminders.
     * @example
     * // Create many ContractReminders
     * const contractReminder = await prisma.contractReminder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractReminderCreateManyArgs>(args?: SelectSubset<T, ContractReminderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContractReminders and returns the data saved in the database.
     * @param {ContractReminderCreateManyAndReturnArgs} args - Arguments to create many ContractReminders.
     * @example
     * // Create many ContractReminders
     * const contractReminder = await prisma.contractReminder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContractReminders and only return the `id`
     * const contractReminderWithIdOnly = await prisma.contractReminder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractReminderCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractReminderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContractReminder.
     * @param {ContractReminderDeleteArgs} args - Arguments to delete one ContractReminder.
     * @example
     * // Delete one ContractReminder
     * const ContractReminder = await prisma.contractReminder.delete({
     *   where: {
     *     // ... filter to delete one ContractReminder
     *   }
     * })
     * 
     */
    delete<T extends ContractReminderDeleteArgs>(args: SelectSubset<T, ContractReminderDeleteArgs<ExtArgs>>): Prisma__ContractReminderClient<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContractReminder.
     * @param {ContractReminderUpdateArgs} args - Arguments to update one ContractReminder.
     * @example
     * // Update one ContractReminder
     * const contractReminder = await prisma.contractReminder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractReminderUpdateArgs>(args: SelectSubset<T, ContractReminderUpdateArgs<ExtArgs>>): Prisma__ContractReminderClient<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContractReminders.
     * @param {ContractReminderDeleteManyArgs} args - Arguments to filter ContractReminders to delete.
     * @example
     * // Delete a few ContractReminders
     * const { count } = await prisma.contractReminder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractReminderDeleteManyArgs>(args?: SelectSubset<T, ContractReminderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContractReminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractReminderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContractReminders
     * const contractReminder = await prisma.contractReminder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractReminderUpdateManyArgs>(args: SelectSubset<T, ContractReminderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContractReminders and returns the data updated in the database.
     * @param {ContractReminderUpdateManyAndReturnArgs} args - Arguments to update many ContractReminders.
     * @example
     * // Update many ContractReminders
     * const contractReminder = await prisma.contractReminder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContractReminders and only return the `id`
     * const contractReminderWithIdOnly = await prisma.contractReminder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContractReminderUpdateManyAndReturnArgs>(args: SelectSubset<T, ContractReminderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContractReminder.
     * @param {ContractReminderUpsertArgs} args - Arguments to update or create a ContractReminder.
     * @example
     * // Update or create a ContractReminder
     * const contractReminder = await prisma.contractReminder.upsert({
     *   create: {
     *     // ... data to create a ContractReminder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContractReminder we want to update
     *   }
     * })
     */
    upsert<T extends ContractReminderUpsertArgs>(args: SelectSubset<T, ContractReminderUpsertArgs<ExtArgs>>): Prisma__ContractReminderClient<$Result.GetResult<Prisma.$ContractReminderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContractReminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractReminderCountArgs} args - Arguments to filter ContractReminders to count.
     * @example
     * // Count the number of ContractReminders
     * const count = await prisma.contractReminder.count({
     *   where: {
     *     // ... the filter for the ContractReminders we want to count
     *   }
     * })
    **/
    count<T extends ContractReminderCountArgs>(
      args?: Subset<T, ContractReminderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractReminderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContractReminder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractReminderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractReminderAggregateArgs>(args: Subset<T, ContractReminderAggregateArgs>): Prisma.PrismaPromise<GetContractReminderAggregateType<T>>

    /**
     * Group by ContractReminder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractReminderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractReminderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractReminderGroupByArgs['orderBy'] }
        : { orderBy?: ContractReminderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractReminderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractReminderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContractReminder model
   */
  readonly fields: ContractReminderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContractReminder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractReminderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contract<T extends ContractDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractDefaultArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    acknowledgedBy<T extends ContractReminder$acknowledgedByArgs<ExtArgs> = {}>(args?: Subset<T, ContractReminder$acknowledgedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContractReminder model
   */
  interface ContractReminderFieldRefs {
    readonly id: FieldRef<"ContractReminder", 'String'>
    readonly contractId: FieldRef<"ContractReminder", 'String'>
    readonly reminderDate: FieldRef<"ContractReminder", 'DateTime'>
    readonly reminderType: FieldRef<"ContractReminder", 'String'>
    readonly isAcknowledged: FieldRef<"ContractReminder", 'Boolean'>
    readonly acknowledgedById: FieldRef<"ContractReminder", 'String'>
    readonly createdAt: FieldRef<"ContractReminder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContractReminder findUnique
   */
  export type ContractReminderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderInclude<ExtArgs> | null
    /**
     * Filter, which ContractReminder to fetch.
     */
    where: ContractReminderWhereUniqueInput
  }

  /**
   * ContractReminder findUniqueOrThrow
   */
  export type ContractReminderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderInclude<ExtArgs> | null
    /**
     * Filter, which ContractReminder to fetch.
     */
    where: ContractReminderWhereUniqueInput
  }

  /**
   * ContractReminder findFirst
   */
  export type ContractReminderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderInclude<ExtArgs> | null
    /**
     * Filter, which ContractReminder to fetch.
     */
    where?: ContractReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractReminders to fetch.
     */
    orderBy?: ContractReminderOrderByWithRelationInput | ContractReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractReminders.
     */
    cursor?: ContractReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractReminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractReminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractReminders.
     */
    distinct?: ContractReminderScalarFieldEnum | ContractReminderScalarFieldEnum[]
  }

  /**
   * ContractReminder findFirstOrThrow
   */
  export type ContractReminderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderInclude<ExtArgs> | null
    /**
     * Filter, which ContractReminder to fetch.
     */
    where?: ContractReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractReminders to fetch.
     */
    orderBy?: ContractReminderOrderByWithRelationInput | ContractReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractReminders.
     */
    cursor?: ContractReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractReminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractReminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractReminders.
     */
    distinct?: ContractReminderScalarFieldEnum | ContractReminderScalarFieldEnum[]
  }

  /**
   * ContractReminder findMany
   */
  export type ContractReminderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderInclude<ExtArgs> | null
    /**
     * Filter, which ContractReminders to fetch.
     */
    where?: ContractReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractReminders to fetch.
     */
    orderBy?: ContractReminderOrderByWithRelationInput | ContractReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContractReminders.
     */
    cursor?: ContractReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractReminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractReminders.
     */
    skip?: number
    distinct?: ContractReminderScalarFieldEnum | ContractReminderScalarFieldEnum[]
  }

  /**
   * ContractReminder create
   */
  export type ContractReminderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderInclude<ExtArgs> | null
    /**
     * The data needed to create a ContractReminder.
     */
    data: XOR<ContractReminderCreateInput, ContractReminderUncheckedCreateInput>
  }

  /**
   * ContractReminder createMany
   */
  export type ContractReminderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContractReminders.
     */
    data: ContractReminderCreateManyInput | ContractReminderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContractReminder createManyAndReturn
   */
  export type ContractReminderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * The data used to create many ContractReminders.
     */
    data: ContractReminderCreateManyInput | ContractReminderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContractReminder update
   */
  export type ContractReminderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderInclude<ExtArgs> | null
    /**
     * The data needed to update a ContractReminder.
     */
    data: XOR<ContractReminderUpdateInput, ContractReminderUncheckedUpdateInput>
    /**
     * Choose, which ContractReminder to update.
     */
    where: ContractReminderWhereUniqueInput
  }

  /**
   * ContractReminder updateMany
   */
  export type ContractReminderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContractReminders.
     */
    data: XOR<ContractReminderUpdateManyMutationInput, ContractReminderUncheckedUpdateManyInput>
    /**
     * Filter which ContractReminders to update
     */
    where?: ContractReminderWhereInput
    /**
     * Limit how many ContractReminders to update.
     */
    limit?: number
  }

  /**
   * ContractReminder updateManyAndReturn
   */
  export type ContractReminderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * The data used to update ContractReminders.
     */
    data: XOR<ContractReminderUpdateManyMutationInput, ContractReminderUncheckedUpdateManyInput>
    /**
     * Filter which ContractReminders to update
     */
    where?: ContractReminderWhereInput
    /**
     * Limit how many ContractReminders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContractReminder upsert
   */
  export type ContractReminderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderInclude<ExtArgs> | null
    /**
     * The filter to search for the ContractReminder to update in case it exists.
     */
    where: ContractReminderWhereUniqueInput
    /**
     * In case the ContractReminder found by the `where` argument doesn't exist, create a new ContractReminder with this data.
     */
    create: XOR<ContractReminderCreateInput, ContractReminderUncheckedCreateInput>
    /**
     * In case the ContractReminder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractReminderUpdateInput, ContractReminderUncheckedUpdateInput>
  }

  /**
   * ContractReminder delete
   */
  export type ContractReminderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderInclude<ExtArgs> | null
    /**
     * Filter which ContractReminder to delete.
     */
    where: ContractReminderWhereUniqueInput
  }

  /**
   * ContractReminder deleteMany
   */
  export type ContractReminderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractReminders to delete
     */
    where?: ContractReminderWhereInput
    /**
     * Limit how many ContractReminders to delete.
     */
    limit?: number
  }

  /**
   * ContractReminder.acknowledgedBy
   */
  export type ContractReminder$acknowledgedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ContractReminder without action
   */
  export type ContractReminderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractReminder
     */
    select?: ContractReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractReminder
     */
    omit?: ContractReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractReminderInclude<ExtArgs> | null
  }


  /**
   * Model Service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.ServiceType | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    billingType: $Enums.BillingType | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.ServiceType | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    billingType: $Enums.BillingType | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    name: number
    type: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    billingType: number
    _all: number
  }


  export type ServiceMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    billingType?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    billingType?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    billingType?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Service to aggregate.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithAggregationInput | ServiceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    id: string
    name: string
    type: $Enums.ServiceType
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    billingType: $Enums.BillingType | null
    _count: ServiceCountAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    billingType?: boolean
    contracts?: boolean | Service$contractsArgs<ExtArgs>
    vasServices?: boolean | Service$vasServicesArgs<ExtArgs>
    bulkServices?: boolean | Service$bulkServicesArgs<ExtArgs>
    complaints?: boolean | Service$complaintsArgs<ExtArgs>
    transactions?: boolean | Service$transactionsArgs<ExtArgs>
    vasTransactions?: boolean | Service$vasTransactionsArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    billingType?: boolean
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    billingType?: boolean
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    billingType?: boolean
  }

  export type ServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "description" | "isActive" | "createdAt" | "updatedAt" | "billingType", ExtArgs["result"]["service"]>
  export type ServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | Service$contractsArgs<ExtArgs>
    vasServices?: boolean | Service$vasServicesArgs<ExtArgs>
    bulkServices?: boolean | Service$bulkServicesArgs<ExtArgs>
    complaints?: boolean | Service$complaintsArgs<ExtArgs>
    transactions?: boolean | Service$transactionsArgs<ExtArgs>
    vasTransactions?: boolean | Service$vasTransactionsArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Service"
    objects: {
      contracts: Prisma.$ServiceContractPayload<ExtArgs>[]
      vasServices: Prisma.$VasServicePayload<ExtArgs>[]
      bulkServices: Prisma.$BulkServicePayload<ExtArgs>[]
      complaints: Prisma.$ComplaintPayload<ExtArgs>[]
      transactions: Prisma.$ParkingTransactionPayload<ExtArgs>[]
      vasTransactions: Prisma.$VasTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.ServiceType
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      billingType: $Enums.BillingType | null
    }, ExtArgs["result"]["service"]>
    composites: {}
  }

  type ServiceGetPayload<S extends boolean | null | undefined | ServiceDefaultArgs> = $Result.GetResult<Prisma.$ServicePayload, S>

  type ServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface ServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Service'], meta: { name: 'Service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceFindUniqueArgs>(args: SelectSubset<T, ServiceFindUniqueArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Service that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceFindFirstArgs>(args?: SelectSubset<T, ServiceFindFirstArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceFindManyArgs>(args?: SelectSubset<T, ServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
     */
    create<T extends ServiceCreateArgs>(args: SelectSubset<T, ServiceCreateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Services.
     * @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCreateManyArgs>(args?: SelectSubset<T, ServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Services and returns the data saved in the database.
     * @param {ServiceCreateManyAndReturnArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
     */
    delete<T extends ServiceDeleteArgs>(args: SelectSubset<T, ServiceDeleteArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceUpdateArgs>(args: SelectSubset<T, ServiceUpdateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceDeleteManyArgs>(args?: SelectSubset<T, ServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceUpdateManyArgs>(args: SelectSubset<T, ServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services and returns the data updated in the database.
     * @param {ServiceUpdateManyAndReturnArgs} args - Arguments to update many Services.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
     */
    upsert<T extends ServiceUpsertArgs>(args: SelectSubset<T, ServiceUpsertArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Service model
   */
  readonly fields: ServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contracts<T extends Service$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Service$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vasServices<T extends Service$vasServicesArgs<ExtArgs> = {}>(args?: Subset<T, Service$vasServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bulkServices<T extends Service$bulkServicesArgs<ExtArgs> = {}>(args?: Subset<T, Service$bulkServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    complaints<T extends Service$complaintsArgs<ExtArgs> = {}>(args?: Subset<T, Service$complaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends Service$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Service$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vasTransactions<T extends Service$vasTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Service$vasTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VasTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Service model
   */
  interface ServiceFieldRefs {
    readonly id: FieldRef<"Service", 'String'>
    readonly name: FieldRef<"Service", 'String'>
    readonly type: FieldRef<"Service", 'ServiceType'>
    readonly description: FieldRef<"Service", 'String'>
    readonly isActive: FieldRef<"Service", 'Boolean'>
    readonly createdAt: FieldRef<"Service", 'DateTime'>
    readonly updatedAt: FieldRef<"Service", 'DateTime'>
    readonly billingType: FieldRef<"Service", 'BillingType'>
  }
    

  // Custom InputTypes
  /**
   * Service findUnique
   */
  export type ServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findFirst
   */
  export type ServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findMany
   */
  export type ServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service create
   */
  export type ServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Service.
     */
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }

  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Service createManyAndReturn
   */
  export type ServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Service update
   */
  export type ServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Service.
     */
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
  }

  /**
   * Service updateManyAndReturn
   */
  export type ServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
  }

  /**
   * Service upsert
   */
  export type ServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Service to update in case it exists.
     */
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     */
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }

  /**
   * Service delete
   */
  export type ServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter which Service to delete.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to delete.
     */
    limit?: number
  }

  /**
   * Service.contracts
   */
  export type Service$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceContract
     */
    select?: ServiceContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceContract
     */
    omit?: ServiceContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceContractInclude<ExtArgs> | null
    where?: ServiceContractWhereInput
    orderBy?: ServiceContractOrderByWithRelationInput | ServiceContractOrderByWithRelationInput[]
    cursor?: ServiceContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceContractScalarFieldEnum | ServiceContractScalarFieldEnum[]
  }

  /**
   * Service.vasServices
   */
  export type Service$vasServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceInclude<ExtArgs> | null
    where?: VasServiceWhereInput
    orderBy?: VasServiceOrderByWithRelationInput | VasServiceOrderByWithRelationInput[]
    cursor?: VasServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VasServiceScalarFieldEnum | VasServiceScalarFieldEnum[]
  }

  /**
   * Service.bulkServices
   */
  export type Service$bulkServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
    where?: BulkServiceWhereInput
    orderBy?: BulkServiceOrderByWithRelationInput | BulkServiceOrderByWithRelationInput[]
    cursor?: BulkServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BulkServiceScalarFieldEnum | BulkServiceScalarFieldEnum[]
  }

  /**
   * Service.complaints
   */
  export type Service$complaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Service.transactions
   */
  export type Service$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingTransaction
     */
    select?: ParkingTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingTransaction
     */
    omit?: ParkingTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingTransactionInclude<ExtArgs> | null
    where?: ParkingTransactionWhereInput
    orderBy?: ParkingTransactionOrderByWithRelationInput | ParkingTransactionOrderByWithRelationInput[]
    cursor?: ParkingTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParkingTransactionScalarFieldEnum | ParkingTransactionScalarFieldEnum[]
  }

  /**
   * Service.vasTransactions
   */
  export type Service$vasTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasTransaction
     */
    select?: VasTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasTransaction
     */
    omit?: VasTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasTransactionInclude<ExtArgs> | null
    where?: VasTransactionWhereInput
    orderBy?: VasTransactionOrderByWithRelationInput | VasTransactionOrderByWithRelationInput[]
    cursor?: VasTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VasTransactionScalarFieldEnum | VasTransactionScalarFieldEnum[]
  }

  /**
   * Service without action
   */
  export type ServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
  }


  /**
   * Model VasService
   */

  export type AggregateVasService = {
    _count: VasServiceCountAggregateOutputType | null
    _avg: VasServiceAvgAggregateOutputType | null
    _sum: VasServiceSumAggregateOutputType | null
    _min: VasServiceMinAggregateOutputType | null
    _max: VasServiceMaxAggregateOutputType | null
  }

  export type VasServiceAvgAggregateOutputType = {
    jedinicna_cena: number | null
    broj_transakcija: number | null
    fakturisan_iznos: number | null
    fakturisan_korigovan_iznos: number | null
    naplacen_iznos: number | null
    kumulativ_naplacenih_iznosa: number | null
    nenaplacen_iznos: number | null
    nenaplacen_korigovan_iznos: number | null
    storniran_iznos: number | null
    otkazan_iznos: number | null
    kumulativ_otkazanih_iznosa: number | null
    iznos_za_prenos_sredstava: number | null
  }

  export type VasServiceSumAggregateOutputType = {
    jedinicna_cena: number | null
    broj_transakcija: number | null
    fakturisan_iznos: number | null
    fakturisan_korigovan_iznos: number | null
    naplacen_iznos: number | null
    kumulativ_naplacenih_iznosa: number | null
    nenaplacen_iznos: number | null
    nenaplacen_korigovan_iznos: number | null
    storniran_iznos: number | null
    otkazan_iznos: number | null
    kumulativ_otkazanih_iznosa: number | null
    iznos_za_prenos_sredstava: number | null
  }

  export type VasServiceMinAggregateOutputType = {
    id: string | null
    proizvod: string | null
    mesec_pruzanja_usluge: Date | null
    jedinicna_cena: number | null
    broj_transakcija: number | null
    fakturisan_iznos: number | null
    fakturisan_korigovan_iznos: number | null
    naplacen_iznos: number | null
    kumulativ_naplacenih_iznosa: number | null
    nenaplacen_iznos: number | null
    nenaplacen_korigovan_iznos: number | null
    storniran_iznos: number | null
    otkazan_iznos: number | null
    kumulativ_otkazanih_iznosa: number | null
    iznos_za_prenos_sredstava: number | null
    serviceId: string | null
    provajderId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VasServiceMaxAggregateOutputType = {
    id: string | null
    proizvod: string | null
    mesec_pruzanja_usluge: Date | null
    jedinicna_cena: number | null
    broj_transakcija: number | null
    fakturisan_iznos: number | null
    fakturisan_korigovan_iznos: number | null
    naplacen_iznos: number | null
    kumulativ_naplacenih_iznosa: number | null
    nenaplacen_iznos: number | null
    nenaplacen_korigovan_iznos: number | null
    storniran_iznos: number | null
    otkazan_iznos: number | null
    kumulativ_otkazanih_iznosa: number | null
    iznos_za_prenos_sredstava: number | null
    serviceId: string | null
    provajderId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VasServiceCountAggregateOutputType = {
    id: number
    proizvod: number
    mesec_pruzanja_usluge: number
    jedinicna_cena: number
    broj_transakcija: number
    fakturisan_iznos: number
    fakturisan_korigovan_iznos: number
    naplacen_iznos: number
    kumulativ_naplacenih_iznosa: number
    nenaplacen_iznos: number
    nenaplacen_korigovan_iznos: number
    storniran_iznos: number
    otkazan_iznos: number
    kumulativ_otkazanih_iznosa: number
    iznos_za_prenos_sredstava: number
    serviceId: number
    provajderId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VasServiceAvgAggregateInputType = {
    jedinicna_cena?: true
    broj_transakcija?: true
    fakturisan_iznos?: true
    fakturisan_korigovan_iznos?: true
    naplacen_iznos?: true
    kumulativ_naplacenih_iznosa?: true
    nenaplacen_iznos?: true
    nenaplacen_korigovan_iznos?: true
    storniran_iznos?: true
    otkazan_iznos?: true
    kumulativ_otkazanih_iznosa?: true
    iznos_za_prenos_sredstava?: true
  }

  export type VasServiceSumAggregateInputType = {
    jedinicna_cena?: true
    broj_transakcija?: true
    fakturisan_iznos?: true
    fakturisan_korigovan_iznos?: true
    naplacen_iznos?: true
    kumulativ_naplacenih_iznosa?: true
    nenaplacen_iznos?: true
    nenaplacen_korigovan_iznos?: true
    storniran_iznos?: true
    otkazan_iznos?: true
    kumulativ_otkazanih_iznosa?: true
    iznos_za_prenos_sredstava?: true
  }

  export type VasServiceMinAggregateInputType = {
    id?: true
    proizvod?: true
    mesec_pruzanja_usluge?: true
    jedinicna_cena?: true
    broj_transakcija?: true
    fakturisan_iznos?: true
    fakturisan_korigovan_iznos?: true
    naplacen_iznos?: true
    kumulativ_naplacenih_iznosa?: true
    nenaplacen_iznos?: true
    nenaplacen_korigovan_iznos?: true
    storniran_iznos?: true
    otkazan_iznos?: true
    kumulativ_otkazanih_iznosa?: true
    iznos_za_prenos_sredstava?: true
    serviceId?: true
    provajderId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VasServiceMaxAggregateInputType = {
    id?: true
    proizvod?: true
    mesec_pruzanja_usluge?: true
    jedinicna_cena?: true
    broj_transakcija?: true
    fakturisan_iznos?: true
    fakturisan_korigovan_iznos?: true
    naplacen_iznos?: true
    kumulativ_naplacenih_iznosa?: true
    nenaplacen_iznos?: true
    nenaplacen_korigovan_iznos?: true
    storniran_iznos?: true
    otkazan_iznos?: true
    kumulativ_otkazanih_iznosa?: true
    iznos_za_prenos_sredstava?: true
    serviceId?: true
    provajderId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VasServiceCountAggregateInputType = {
    id?: true
    proizvod?: true
    mesec_pruzanja_usluge?: true
    jedinicna_cena?: true
    broj_transakcija?: true
    fakturisan_iznos?: true
    fakturisan_korigovan_iznos?: true
    naplacen_iznos?: true
    kumulativ_naplacenih_iznosa?: true
    nenaplacen_iznos?: true
    nenaplacen_korigovan_iznos?: true
    storniran_iznos?: true
    otkazan_iznos?: true
    kumulativ_otkazanih_iznosa?: true
    iznos_za_prenos_sredstava?: true
    serviceId?: true
    provajderId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VasServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VasService to aggregate.
     */
    where?: VasServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VasServices to fetch.
     */
    orderBy?: VasServiceOrderByWithRelationInput | VasServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VasServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VasServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VasServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VasServices
    **/
    _count?: true | VasServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VasServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VasServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VasServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VasServiceMaxAggregateInputType
  }

  export type GetVasServiceAggregateType<T extends VasServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateVasService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVasService[P]>
      : GetScalarType<T[P], AggregateVasService[P]>
  }




  export type VasServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VasServiceWhereInput
    orderBy?: VasServiceOrderByWithAggregationInput | VasServiceOrderByWithAggregationInput[]
    by: VasServiceScalarFieldEnum[] | VasServiceScalarFieldEnum
    having?: VasServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VasServiceCountAggregateInputType | true
    _avg?: VasServiceAvgAggregateInputType
    _sum?: VasServiceSumAggregateInputType
    _min?: VasServiceMinAggregateInputType
    _max?: VasServiceMaxAggregateInputType
  }

  export type VasServiceGroupByOutputType = {
    id: string
    proizvod: string
    mesec_pruzanja_usluge: Date
    jedinicna_cena: number
    broj_transakcija: number
    fakturisan_iznos: number
    fakturisan_korigovan_iznos: number
    naplacen_iznos: number
    kumulativ_naplacenih_iznosa: number
    nenaplacen_iznos: number
    nenaplacen_korigovan_iznos: number
    storniran_iznos: number
    otkazan_iznos: number
    kumulativ_otkazanih_iznosa: number
    iznos_za_prenos_sredstava: number
    serviceId: string
    provajderId: string
    createdAt: Date
    updatedAt: Date
    _count: VasServiceCountAggregateOutputType | null
    _avg: VasServiceAvgAggregateOutputType | null
    _sum: VasServiceSumAggregateOutputType | null
    _min: VasServiceMinAggregateOutputType | null
    _max: VasServiceMaxAggregateOutputType | null
  }

  type GetVasServiceGroupByPayload<T extends VasServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VasServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VasServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VasServiceGroupByOutputType[P]>
            : GetScalarType<T[P], VasServiceGroupByOutputType[P]>
        }
      >
    >


  export type VasServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proizvod?: boolean
    mesec_pruzanja_usluge?: boolean
    jedinicna_cena?: boolean
    broj_transakcija?: boolean
    fakturisan_iznos?: boolean
    fakturisan_korigovan_iznos?: boolean
    naplacen_iznos?: boolean
    kumulativ_naplacenih_iznosa?: boolean
    nenaplacen_iznos?: boolean
    nenaplacen_korigovan_iznos?: boolean
    storniran_iznos?: boolean
    otkazan_iznos?: boolean
    kumulativ_otkazanih_iznosa?: boolean
    iznos_za_prenos_sredstava?: boolean
    serviceId?: boolean
    provajderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vasService"]>

  export type VasServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proizvod?: boolean
    mesec_pruzanja_usluge?: boolean
    jedinicna_cena?: boolean
    broj_transakcija?: boolean
    fakturisan_iznos?: boolean
    fakturisan_korigovan_iznos?: boolean
    naplacen_iznos?: boolean
    kumulativ_naplacenih_iznosa?: boolean
    nenaplacen_iznos?: boolean
    nenaplacen_korigovan_iznos?: boolean
    storniran_iznos?: boolean
    otkazan_iznos?: boolean
    kumulativ_otkazanih_iznosa?: boolean
    iznos_za_prenos_sredstava?: boolean
    serviceId?: boolean
    provajderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vasService"]>

  export type VasServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proizvod?: boolean
    mesec_pruzanja_usluge?: boolean
    jedinicna_cena?: boolean
    broj_transakcija?: boolean
    fakturisan_iznos?: boolean
    fakturisan_korigovan_iznos?: boolean
    naplacen_iznos?: boolean
    kumulativ_naplacenih_iznosa?: boolean
    nenaplacen_iznos?: boolean
    nenaplacen_korigovan_iznos?: boolean
    storniran_iznos?: boolean
    otkazan_iznos?: boolean
    kumulativ_otkazanih_iznosa?: boolean
    iznos_za_prenos_sredstava?: boolean
    serviceId?: boolean
    provajderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vasService"]>

  export type VasServiceSelectScalar = {
    id?: boolean
    proizvod?: boolean
    mesec_pruzanja_usluge?: boolean
    jedinicna_cena?: boolean
    broj_transakcija?: boolean
    fakturisan_iznos?: boolean
    fakturisan_korigovan_iznos?: boolean
    naplacen_iznos?: boolean
    kumulativ_naplacenih_iznosa?: boolean
    nenaplacen_iznos?: boolean
    nenaplacen_korigovan_iznos?: boolean
    storniran_iznos?: boolean
    otkazan_iznos?: boolean
    kumulativ_otkazanih_iznosa?: boolean
    iznos_za_prenos_sredstava?: boolean
    serviceId?: boolean
    provajderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VasServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "proizvod" | "mesec_pruzanja_usluge" | "jedinicna_cena" | "broj_transakcija" | "fakturisan_iznos" | "fakturisan_korigovan_iznos" | "naplacen_iznos" | "kumulativ_naplacenih_iznosa" | "nenaplacen_iznos" | "nenaplacen_korigovan_iznos" | "storniran_iznos" | "otkazan_iznos" | "kumulativ_otkazanih_iznosa" | "iznos_za_prenos_sredstava" | "serviceId" | "provajderId" | "createdAt" | "updatedAt", ExtArgs["result"]["vasService"]>
  export type VasServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }
  export type VasServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }
  export type VasServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }

  export type $VasServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VasService"
    objects: {
      service: Prisma.$ServicePayload<ExtArgs>
      provider: Prisma.$ProviderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      proizvod: string
      mesec_pruzanja_usluge: Date
      jedinicna_cena: number
      broj_transakcija: number
      fakturisan_iznos: number
      fakturisan_korigovan_iznos: number
      naplacen_iznos: number
      kumulativ_naplacenih_iznosa: number
      nenaplacen_iznos: number
      nenaplacen_korigovan_iznos: number
      storniran_iznos: number
      otkazan_iznos: number
      kumulativ_otkazanih_iznosa: number
      iznos_za_prenos_sredstava: number
      serviceId: string
      provajderId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vasService"]>
    composites: {}
  }

  type VasServiceGetPayload<S extends boolean | null | undefined | VasServiceDefaultArgs> = $Result.GetResult<Prisma.$VasServicePayload, S>

  type VasServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VasServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VasServiceCountAggregateInputType | true
    }

  export interface VasServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VasService'], meta: { name: 'VasService' } }
    /**
     * Find zero or one VasService that matches the filter.
     * @param {VasServiceFindUniqueArgs} args - Arguments to find a VasService
     * @example
     * // Get one VasService
     * const vasService = await prisma.vasService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VasServiceFindUniqueArgs>(args: SelectSubset<T, VasServiceFindUniqueArgs<ExtArgs>>): Prisma__VasServiceClient<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VasService that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VasServiceFindUniqueOrThrowArgs} args - Arguments to find a VasService
     * @example
     * // Get one VasService
     * const vasService = await prisma.vasService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VasServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, VasServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VasServiceClient<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VasService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasServiceFindFirstArgs} args - Arguments to find a VasService
     * @example
     * // Get one VasService
     * const vasService = await prisma.vasService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VasServiceFindFirstArgs>(args?: SelectSubset<T, VasServiceFindFirstArgs<ExtArgs>>): Prisma__VasServiceClient<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VasService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasServiceFindFirstOrThrowArgs} args - Arguments to find a VasService
     * @example
     * // Get one VasService
     * const vasService = await prisma.vasService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VasServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, VasServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__VasServiceClient<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VasServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VasServices
     * const vasServices = await prisma.vasService.findMany()
     * 
     * // Get first 10 VasServices
     * const vasServices = await prisma.vasService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vasServiceWithIdOnly = await prisma.vasService.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VasServiceFindManyArgs>(args?: SelectSubset<T, VasServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VasService.
     * @param {VasServiceCreateArgs} args - Arguments to create a VasService.
     * @example
     * // Create one VasService
     * const VasService = await prisma.vasService.create({
     *   data: {
     *     // ... data to create a VasService
     *   }
     * })
     * 
     */
    create<T extends VasServiceCreateArgs>(args: SelectSubset<T, VasServiceCreateArgs<ExtArgs>>): Prisma__VasServiceClient<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VasServices.
     * @param {VasServiceCreateManyArgs} args - Arguments to create many VasServices.
     * @example
     * // Create many VasServices
     * const vasService = await prisma.vasService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VasServiceCreateManyArgs>(args?: SelectSubset<T, VasServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VasServices and returns the data saved in the database.
     * @param {VasServiceCreateManyAndReturnArgs} args - Arguments to create many VasServices.
     * @example
     * // Create many VasServices
     * const vasService = await prisma.vasService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VasServices and only return the `id`
     * const vasServiceWithIdOnly = await prisma.vasService.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VasServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, VasServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VasService.
     * @param {VasServiceDeleteArgs} args - Arguments to delete one VasService.
     * @example
     * // Delete one VasService
     * const VasService = await prisma.vasService.delete({
     *   where: {
     *     // ... filter to delete one VasService
     *   }
     * })
     * 
     */
    delete<T extends VasServiceDeleteArgs>(args: SelectSubset<T, VasServiceDeleteArgs<ExtArgs>>): Prisma__VasServiceClient<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VasService.
     * @param {VasServiceUpdateArgs} args - Arguments to update one VasService.
     * @example
     * // Update one VasService
     * const vasService = await prisma.vasService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VasServiceUpdateArgs>(args: SelectSubset<T, VasServiceUpdateArgs<ExtArgs>>): Prisma__VasServiceClient<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VasServices.
     * @param {VasServiceDeleteManyArgs} args - Arguments to filter VasServices to delete.
     * @example
     * // Delete a few VasServices
     * const { count } = await prisma.vasService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VasServiceDeleteManyArgs>(args?: SelectSubset<T, VasServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VasServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VasServices
     * const vasService = await prisma.vasService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VasServiceUpdateManyArgs>(args: SelectSubset<T, VasServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VasServices and returns the data updated in the database.
     * @param {VasServiceUpdateManyAndReturnArgs} args - Arguments to update many VasServices.
     * @example
     * // Update many VasServices
     * const vasService = await prisma.vasService.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VasServices and only return the `id`
     * const vasServiceWithIdOnly = await prisma.vasService.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VasServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, VasServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VasService.
     * @param {VasServiceUpsertArgs} args - Arguments to update or create a VasService.
     * @example
     * // Update or create a VasService
     * const vasService = await prisma.vasService.upsert({
     *   create: {
     *     // ... data to create a VasService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VasService we want to update
     *   }
     * })
     */
    upsert<T extends VasServiceUpsertArgs>(args: SelectSubset<T, VasServiceUpsertArgs<ExtArgs>>): Prisma__VasServiceClient<$Result.GetResult<Prisma.$VasServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VasServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasServiceCountArgs} args - Arguments to filter VasServices to count.
     * @example
     * // Count the number of VasServices
     * const count = await prisma.vasService.count({
     *   where: {
     *     // ... the filter for the VasServices we want to count
     *   }
     * })
    **/
    count<T extends VasServiceCountArgs>(
      args?: Subset<T, VasServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VasServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VasService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VasServiceAggregateArgs>(args: Subset<T, VasServiceAggregateArgs>): Prisma.PrismaPromise<GetVasServiceAggregateType<T>>

    /**
     * Group by VasService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VasServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VasServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VasServiceGroupByArgs['orderBy'] }
        : { orderBy?: VasServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VasServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVasServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VasService model
   */
  readonly fields: VasServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VasService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VasServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    provider<T extends ProviderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProviderDefaultArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VasService model
   */
  interface VasServiceFieldRefs {
    readonly id: FieldRef<"VasService", 'String'>
    readonly proizvod: FieldRef<"VasService", 'String'>
    readonly mesec_pruzanja_usluge: FieldRef<"VasService", 'DateTime'>
    readonly jedinicna_cena: FieldRef<"VasService", 'Float'>
    readonly broj_transakcija: FieldRef<"VasService", 'Int'>
    readonly fakturisan_iznos: FieldRef<"VasService", 'Float'>
    readonly fakturisan_korigovan_iznos: FieldRef<"VasService", 'Float'>
    readonly naplacen_iznos: FieldRef<"VasService", 'Float'>
    readonly kumulativ_naplacenih_iznosa: FieldRef<"VasService", 'Float'>
    readonly nenaplacen_iznos: FieldRef<"VasService", 'Float'>
    readonly nenaplacen_korigovan_iznos: FieldRef<"VasService", 'Float'>
    readonly storniran_iznos: FieldRef<"VasService", 'Float'>
    readonly otkazan_iznos: FieldRef<"VasService", 'Float'>
    readonly kumulativ_otkazanih_iznosa: FieldRef<"VasService", 'Float'>
    readonly iznos_za_prenos_sredstava: FieldRef<"VasService", 'Float'>
    readonly serviceId: FieldRef<"VasService", 'String'>
    readonly provajderId: FieldRef<"VasService", 'String'>
    readonly createdAt: FieldRef<"VasService", 'DateTime'>
    readonly updatedAt: FieldRef<"VasService", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VasService findUnique
   */
  export type VasServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceInclude<ExtArgs> | null
    /**
     * Filter, which VasService to fetch.
     */
    where: VasServiceWhereUniqueInput
  }

  /**
   * VasService findUniqueOrThrow
   */
  export type VasServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceInclude<ExtArgs> | null
    /**
     * Filter, which VasService to fetch.
     */
    where: VasServiceWhereUniqueInput
  }

  /**
   * VasService findFirst
   */
  export type VasServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceInclude<ExtArgs> | null
    /**
     * Filter, which VasService to fetch.
     */
    where?: VasServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VasServices to fetch.
     */
    orderBy?: VasServiceOrderByWithRelationInput | VasServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VasServices.
     */
    cursor?: VasServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VasServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VasServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VasServices.
     */
    distinct?: VasServiceScalarFieldEnum | VasServiceScalarFieldEnum[]
  }

  /**
   * VasService findFirstOrThrow
   */
  export type VasServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceInclude<ExtArgs> | null
    /**
     * Filter, which VasService to fetch.
     */
    where?: VasServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VasServices to fetch.
     */
    orderBy?: VasServiceOrderByWithRelationInput | VasServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VasServices.
     */
    cursor?: VasServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VasServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VasServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VasServices.
     */
    distinct?: VasServiceScalarFieldEnum | VasServiceScalarFieldEnum[]
  }

  /**
   * VasService findMany
   */
  export type VasServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceInclude<ExtArgs> | null
    /**
     * Filter, which VasServices to fetch.
     */
    where?: VasServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VasServices to fetch.
     */
    orderBy?: VasServiceOrderByWithRelationInput | VasServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VasServices.
     */
    cursor?: VasServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VasServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VasServices.
     */
    skip?: number
    distinct?: VasServiceScalarFieldEnum | VasServiceScalarFieldEnum[]
  }

  /**
   * VasService create
   */
  export type VasServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a VasService.
     */
    data: XOR<VasServiceCreateInput, VasServiceUncheckedCreateInput>
  }

  /**
   * VasService createMany
   */
  export type VasServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VasServices.
     */
    data: VasServiceCreateManyInput | VasServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VasService createManyAndReturn
   */
  export type VasServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * The data used to create many VasServices.
     */
    data: VasServiceCreateManyInput | VasServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VasService update
   */
  export type VasServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a VasService.
     */
    data: XOR<VasServiceUpdateInput, VasServiceUncheckedUpdateInput>
    /**
     * Choose, which VasService to update.
     */
    where: VasServiceWhereUniqueInput
  }

  /**
   * VasService updateMany
   */
  export type VasServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VasServices.
     */
    data: XOR<VasServiceUpdateManyMutationInput, VasServiceUncheckedUpdateManyInput>
    /**
     * Filter which VasServices to update
     */
    where?: VasServiceWhereInput
    /**
     * Limit how many VasServices to update.
     */
    limit?: number
  }

  /**
   * VasService updateManyAndReturn
   */
  export type VasServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * The data used to update VasServices.
     */
    data: XOR<VasServiceUpdateManyMutationInput, VasServiceUncheckedUpdateManyInput>
    /**
     * Filter which VasServices to update
     */
    where?: VasServiceWhereInput
    /**
     * Limit how many VasServices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VasService upsert
   */
  export type VasServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the VasService to update in case it exists.
     */
    where: VasServiceWhereUniqueInput
    /**
     * In case the VasService found by the `where` argument doesn't exist, create a new VasService with this data.
     */
    create: XOR<VasServiceCreateInput, VasServiceUncheckedCreateInput>
    /**
     * In case the VasService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VasServiceUpdateInput, VasServiceUncheckedUpdateInput>
  }

  /**
   * VasService delete
   */
  export type VasServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceInclude<ExtArgs> | null
    /**
     * Filter which VasService to delete.
     */
    where: VasServiceWhereUniqueInput
  }

  /**
   * VasService deleteMany
   */
  export type VasServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VasServices to delete
     */
    where?: VasServiceWhereInput
    /**
     * Limit how many VasServices to delete.
     */
    limit?: number
  }

  /**
   * VasService without action
   */
  export type VasServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VasService
     */
    select?: VasServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VasService
     */
    omit?: VasServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VasServiceInclude<ExtArgs> | null
  }


  /**
   * Model BulkService
   */

  export type AggregateBulkService = {
    _count: BulkServiceCountAggregateOutputType | null
    _avg: BulkServiceAvgAggregateOutputType | null
    _sum: BulkServiceSumAggregateOutputType | null
    _min: BulkServiceMinAggregateOutputType | null
    _max: BulkServiceMaxAggregateOutputType | null
  }

  export type BulkServiceAvgAggregateOutputType = {
    requests: number | null
    message_parts: number | null
  }

  export type BulkServiceSumAggregateOutputType = {
    requests: number | null
    message_parts: number | null
  }

  export type BulkServiceMinAggregateOutputType = {
    id: string | null
    provider_name: string | null
    agreement_name: string | null
    service_name: string | null
    step_name: string | null
    sender_name: string | null
    requests: number | null
    message_parts: number | null
    datumNaplate: Date | null
    serviceId: string | null
    providerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BulkServiceMaxAggregateOutputType = {
    id: string | null
    provider_name: string | null
    agreement_name: string | null
    service_name: string | null
    step_name: string | null
    sender_name: string | null
    requests: number | null
    message_parts: number | null
    datumNaplate: Date | null
    serviceId: string | null
    providerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BulkServiceCountAggregateOutputType = {
    id: number
    provider_name: number
    agreement_name: number
    service_name: number
    step_name: number
    sender_name: number
    requests: number
    message_parts: number
    datumNaplate: number
    serviceId: number
    providerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BulkServiceAvgAggregateInputType = {
    requests?: true
    message_parts?: true
  }

  export type BulkServiceSumAggregateInputType = {
    requests?: true
    message_parts?: true
  }

  export type BulkServiceMinAggregateInputType = {
    id?: true
    provider_name?: true
    agreement_name?: true
    service_name?: true
    step_name?: true
    sender_name?: true
    requests?: true
    message_parts?: true
    datumNaplate?: true
    serviceId?: true
    providerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BulkServiceMaxAggregateInputType = {
    id?: true
    provider_name?: true
    agreement_name?: true
    service_name?: true
    step_name?: true
    sender_name?: true
    requests?: true
    message_parts?: true
    datumNaplate?: true
    serviceId?: true
    providerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BulkServiceCountAggregateInputType = {
    id?: true
    provider_name?: true
    agreement_name?: true
    service_name?: true
    step_name?: true
    sender_name?: true
    requests?: true
    message_parts?: true
    datumNaplate?: true
    serviceId?: true
    providerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BulkServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BulkService to aggregate.
     */
    where?: BulkServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BulkServices to fetch.
     */
    orderBy?: BulkServiceOrderByWithRelationInput | BulkServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BulkServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BulkServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BulkServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BulkServices
    **/
    _count?: true | BulkServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BulkServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BulkServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BulkServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BulkServiceMaxAggregateInputType
  }

  export type GetBulkServiceAggregateType<T extends BulkServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateBulkService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBulkService[P]>
      : GetScalarType<T[P], AggregateBulkService[P]>
  }




  export type BulkServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BulkServiceWhereInput
    orderBy?: BulkServiceOrderByWithAggregationInput | BulkServiceOrderByWithAggregationInput[]
    by: BulkServiceScalarFieldEnum[] | BulkServiceScalarFieldEnum
    having?: BulkServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BulkServiceCountAggregateInputType | true
    _avg?: BulkServiceAvgAggregateInputType
    _sum?: BulkServiceSumAggregateInputType
    _min?: BulkServiceMinAggregateInputType
    _max?: BulkServiceMaxAggregateInputType
  }

  export type BulkServiceGroupByOutputType = {
    id: string
    provider_name: string
    agreement_name: string
    service_name: string
    step_name: string
    sender_name: string
    requests: number
    message_parts: number
    datumNaplate: Date
    serviceId: string
    providerId: string
    createdAt: Date
    updatedAt: Date
    _count: BulkServiceCountAggregateOutputType | null
    _avg: BulkServiceAvgAggregateOutputType | null
    _sum: BulkServiceSumAggregateOutputType | null
    _min: BulkServiceMinAggregateOutputType | null
    _max: BulkServiceMaxAggregateOutputType | null
  }

  type GetBulkServiceGroupByPayload<T extends BulkServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BulkServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BulkServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BulkServiceGroupByOutputType[P]>
            : GetScalarType<T[P], BulkServiceGroupByOutputType[P]>
        }
      >
    >


  export type BulkServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    provider_name?: boolean
    agreement_name?: boolean
    service_name?: boolean
    step_name?: boolean
    sender_name?: boolean
    requests?: boolean
    message_parts?: boolean
    datumNaplate?: boolean
    serviceId?: boolean
    providerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    logEntries?: boolean | BulkService$logEntriesArgs<ExtArgs>
    _count?: boolean | BulkServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bulkService"]>

  export type BulkServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    provider_name?: boolean
    agreement_name?: boolean
    service_name?: boolean
    step_name?: boolean
    sender_name?: boolean
    requests?: boolean
    message_parts?: boolean
    datumNaplate?: boolean
    serviceId?: boolean
    providerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bulkService"]>

  export type BulkServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    provider_name?: boolean
    agreement_name?: boolean
    service_name?: boolean
    step_name?: boolean
    sender_name?: boolean
    requests?: boolean
    message_parts?: boolean
    datumNaplate?: boolean
    serviceId?: boolean
    providerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bulkService"]>

  export type BulkServiceSelectScalar = {
    id?: boolean
    provider_name?: boolean
    agreement_name?: boolean
    service_name?: boolean
    step_name?: boolean
    sender_name?: boolean
    requests?: boolean
    message_parts?: boolean
    datumNaplate?: boolean
    serviceId?: boolean
    providerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BulkServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "provider_name" | "agreement_name" | "service_name" | "step_name" | "sender_name" | "requests" | "message_parts" | "datumNaplate" | "serviceId" | "providerId" | "createdAt" | "updatedAt", ExtArgs["result"]["bulkService"]>
  export type BulkServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    logEntries?: boolean | BulkService$logEntriesArgs<ExtArgs>
    _count?: boolean | BulkServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BulkServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }
  export type BulkServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }

  export type $BulkServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BulkService"
    objects: {
      service: Prisma.$ServicePayload<ExtArgs>
      provider: Prisma.$ProviderPayload<ExtArgs>
      logEntries: Prisma.$LogEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      provider_name: string
      agreement_name: string
      service_name: string
      step_name: string
      sender_name: string
      requests: number
      message_parts: number
      datumNaplate: Date
      serviceId: string
      providerId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bulkService"]>
    composites: {}
  }

  type BulkServiceGetPayload<S extends boolean | null | undefined | BulkServiceDefaultArgs> = $Result.GetResult<Prisma.$BulkServicePayload, S>

  type BulkServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BulkServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BulkServiceCountAggregateInputType | true
    }

  export interface BulkServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BulkService'], meta: { name: 'BulkService' } }
    /**
     * Find zero or one BulkService that matches the filter.
     * @param {BulkServiceFindUniqueArgs} args - Arguments to find a BulkService
     * @example
     * // Get one BulkService
     * const bulkService = await prisma.bulkService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BulkServiceFindUniqueArgs>(args: SelectSubset<T, BulkServiceFindUniqueArgs<ExtArgs>>): Prisma__BulkServiceClient<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BulkService that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BulkServiceFindUniqueOrThrowArgs} args - Arguments to find a BulkService
     * @example
     * // Get one BulkService
     * const bulkService = await prisma.bulkService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BulkServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, BulkServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BulkServiceClient<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BulkService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BulkServiceFindFirstArgs} args - Arguments to find a BulkService
     * @example
     * // Get one BulkService
     * const bulkService = await prisma.bulkService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BulkServiceFindFirstArgs>(args?: SelectSubset<T, BulkServiceFindFirstArgs<ExtArgs>>): Prisma__BulkServiceClient<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BulkService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BulkServiceFindFirstOrThrowArgs} args - Arguments to find a BulkService
     * @example
     * // Get one BulkService
     * const bulkService = await prisma.bulkService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BulkServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, BulkServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__BulkServiceClient<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BulkServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BulkServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BulkServices
     * const bulkServices = await prisma.bulkService.findMany()
     * 
     * // Get first 10 BulkServices
     * const bulkServices = await prisma.bulkService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bulkServiceWithIdOnly = await prisma.bulkService.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BulkServiceFindManyArgs>(args?: SelectSubset<T, BulkServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BulkService.
     * @param {BulkServiceCreateArgs} args - Arguments to create a BulkService.
     * @example
     * // Create one BulkService
     * const BulkService = await prisma.bulkService.create({
     *   data: {
     *     // ... data to create a BulkService
     *   }
     * })
     * 
     */
    create<T extends BulkServiceCreateArgs>(args: SelectSubset<T, BulkServiceCreateArgs<ExtArgs>>): Prisma__BulkServiceClient<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BulkServices.
     * @param {BulkServiceCreateManyArgs} args - Arguments to create many BulkServices.
     * @example
     * // Create many BulkServices
     * const bulkService = await prisma.bulkService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BulkServiceCreateManyArgs>(args?: SelectSubset<T, BulkServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BulkServices and returns the data saved in the database.
     * @param {BulkServiceCreateManyAndReturnArgs} args - Arguments to create many BulkServices.
     * @example
     * // Create many BulkServices
     * const bulkService = await prisma.bulkService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BulkServices and only return the `id`
     * const bulkServiceWithIdOnly = await prisma.bulkService.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BulkServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, BulkServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BulkService.
     * @param {BulkServiceDeleteArgs} args - Arguments to delete one BulkService.
     * @example
     * // Delete one BulkService
     * const BulkService = await prisma.bulkService.delete({
     *   where: {
     *     // ... filter to delete one BulkService
     *   }
     * })
     * 
     */
    delete<T extends BulkServiceDeleteArgs>(args: SelectSubset<T, BulkServiceDeleteArgs<ExtArgs>>): Prisma__BulkServiceClient<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BulkService.
     * @param {BulkServiceUpdateArgs} args - Arguments to update one BulkService.
     * @example
     * // Update one BulkService
     * const bulkService = await prisma.bulkService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BulkServiceUpdateArgs>(args: SelectSubset<T, BulkServiceUpdateArgs<ExtArgs>>): Prisma__BulkServiceClient<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BulkServices.
     * @param {BulkServiceDeleteManyArgs} args - Arguments to filter BulkServices to delete.
     * @example
     * // Delete a few BulkServices
     * const { count } = await prisma.bulkService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BulkServiceDeleteManyArgs>(args?: SelectSubset<T, BulkServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BulkServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BulkServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BulkServices
     * const bulkService = await prisma.bulkService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BulkServiceUpdateManyArgs>(args: SelectSubset<T, BulkServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BulkServices and returns the data updated in the database.
     * @param {BulkServiceUpdateManyAndReturnArgs} args - Arguments to update many BulkServices.
     * @example
     * // Update many BulkServices
     * const bulkService = await prisma.bulkService.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BulkServices and only return the `id`
     * const bulkServiceWithIdOnly = await prisma.bulkService.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BulkServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, BulkServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BulkService.
     * @param {BulkServiceUpsertArgs} args - Arguments to update or create a BulkService.
     * @example
     * // Update or create a BulkService
     * const bulkService = await prisma.bulkService.upsert({
     *   create: {
     *     // ... data to create a BulkService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BulkService we want to update
     *   }
     * })
     */
    upsert<T extends BulkServiceUpsertArgs>(args: SelectSubset<T, BulkServiceUpsertArgs<ExtArgs>>): Prisma__BulkServiceClient<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BulkServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BulkServiceCountArgs} args - Arguments to filter BulkServices to count.
     * @example
     * // Count the number of BulkServices
     * const count = await prisma.bulkService.count({
     *   where: {
     *     // ... the filter for the BulkServices we want to count
     *   }
     * })
    **/
    count<T extends BulkServiceCountArgs>(
      args?: Subset<T, BulkServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BulkServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BulkService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BulkServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BulkServiceAggregateArgs>(args: Subset<T, BulkServiceAggregateArgs>): Prisma.PrismaPromise<GetBulkServiceAggregateType<T>>

    /**
     * Group by BulkService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BulkServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BulkServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BulkServiceGroupByArgs['orderBy'] }
        : { orderBy?: BulkServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BulkServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBulkServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BulkService model
   */
  readonly fields: BulkServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BulkService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BulkServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    provider<T extends ProviderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProviderDefaultArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    logEntries<T extends BulkService$logEntriesArgs<ExtArgs> = {}>(args?: Subset<T, BulkService$logEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BulkService model
   */
  interface BulkServiceFieldRefs {
    readonly id: FieldRef<"BulkService", 'String'>
    readonly provider_name: FieldRef<"BulkService", 'String'>
    readonly agreement_name: FieldRef<"BulkService", 'String'>
    readonly service_name: FieldRef<"BulkService", 'String'>
    readonly step_name: FieldRef<"BulkService", 'String'>
    readonly sender_name: FieldRef<"BulkService", 'String'>
    readonly requests: FieldRef<"BulkService", 'Int'>
    readonly message_parts: FieldRef<"BulkService", 'Int'>
    readonly datumNaplate: FieldRef<"BulkService", 'DateTime'>
    readonly serviceId: FieldRef<"BulkService", 'String'>
    readonly providerId: FieldRef<"BulkService", 'String'>
    readonly createdAt: FieldRef<"BulkService", 'DateTime'>
    readonly updatedAt: FieldRef<"BulkService", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BulkService findUnique
   */
  export type BulkServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
    /**
     * Filter, which BulkService to fetch.
     */
    where: BulkServiceWhereUniqueInput
  }

  /**
   * BulkService findUniqueOrThrow
   */
  export type BulkServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
    /**
     * Filter, which BulkService to fetch.
     */
    where: BulkServiceWhereUniqueInput
  }

  /**
   * BulkService findFirst
   */
  export type BulkServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
    /**
     * Filter, which BulkService to fetch.
     */
    where?: BulkServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BulkServices to fetch.
     */
    orderBy?: BulkServiceOrderByWithRelationInput | BulkServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BulkServices.
     */
    cursor?: BulkServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BulkServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BulkServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BulkServices.
     */
    distinct?: BulkServiceScalarFieldEnum | BulkServiceScalarFieldEnum[]
  }

  /**
   * BulkService findFirstOrThrow
   */
  export type BulkServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
    /**
     * Filter, which BulkService to fetch.
     */
    where?: BulkServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BulkServices to fetch.
     */
    orderBy?: BulkServiceOrderByWithRelationInput | BulkServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BulkServices.
     */
    cursor?: BulkServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BulkServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BulkServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BulkServices.
     */
    distinct?: BulkServiceScalarFieldEnum | BulkServiceScalarFieldEnum[]
  }

  /**
   * BulkService findMany
   */
  export type BulkServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
    /**
     * Filter, which BulkServices to fetch.
     */
    where?: BulkServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BulkServices to fetch.
     */
    orderBy?: BulkServiceOrderByWithRelationInput | BulkServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BulkServices.
     */
    cursor?: BulkServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BulkServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BulkServices.
     */
    skip?: number
    distinct?: BulkServiceScalarFieldEnum | BulkServiceScalarFieldEnum[]
  }

  /**
   * BulkService create
   */
  export type BulkServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a BulkService.
     */
    data: XOR<BulkServiceCreateInput, BulkServiceUncheckedCreateInput>
  }

  /**
   * BulkService createMany
   */
  export type BulkServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BulkServices.
     */
    data: BulkServiceCreateManyInput | BulkServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BulkService createManyAndReturn
   */
  export type BulkServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * The data used to create many BulkServices.
     */
    data: BulkServiceCreateManyInput | BulkServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BulkService update
   */
  export type BulkServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a BulkService.
     */
    data: XOR<BulkServiceUpdateInput, BulkServiceUncheckedUpdateInput>
    /**
     * Choose, which BulkService to update.
     */
    where: BulkServiceWhereUniqueInput
  }

  /**
   * BulkService updateMany
   */
  export type BulkServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BulkServices.
     */
    data: XOR<BulkServiceUpdateManyMutationInput, BulkServiceUncheckedUpdateManyInput>
    /**
     * Filter which BulkServices to update
     */
    where?: BulkServiceWhereInput
    /**
     * Limit how many BulkServices to update.
     */
    limit?: number
  }

  /**
   * BulkService updateManyAndReturn
   */
  export type BulkServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * The data used to update BulkServices.
     */
    data: XOR<BulkServiceUpdateManyMutationInput, BulkServiceUncheckedUpdateManyInput>
    /**
     * Filter which BulkServices to update
     */
    where?: BulkServiceWhereInput
    /**
     * Limit how many BulkServices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BulkService upsert
   */
  export type BulkServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the BulkService to update in case it exists.
     */
    where: BulkServiceWhereUniqueInput
    /**
     * In case the BulkService found by the `where` argument doesn't exist, create a new BulkService with this data.
     */
    create: XOR<BulkServiceCreateInput, BulkServiceUncheckedCreateInput>
    /**
     * In case the BulkService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BulkServiceUpdateInput, BulkServiceUncheckedUpdateInput>
  }

  /**
   * BulkService delete
   */
  export type BulkServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
    /**
     * Filter which BulkService to delete.
     */
    where: BulkServiceWhereUniqueInput
  }

  /**
   * BulkService deleteMany
   */
  export type BulkServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BulkServices to delete
     */
    where?: BulkServiceWhereInput
    /**
     * Limit how many BulkServices to delete.
     */
    limit?: number
  }

  /**
   * BulkService.logEntries
   */
  export type BulkService$logEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    where?: LogEntryWhereInput
    orderBy?: LogEntryOrderByWithRelationInput | LogEntryOrderByWithRelationInput[]
    cursor?: LogEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogEntryScalarFieldEnum | LogEntryScalarFieldEnum[]
  }

  /**
   * BulkService without action
   */
  export type BulkServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    code: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    complaints?: boolean | Product$complaintsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "description" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaints?: boolean | Product$complaintsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      complaints: Prisma.$ComplaintPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    complaints<T extends Product$complaintsArgs<ExtArgs> = {}>(args?: Subset<T, Product$complaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly code: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly isActive: FieldRef<"Product", 'Boolean'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.complaints
   */
  export type Product$complaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Complaint
   */

  export type AggregateComplaint = {
    _count: ComplaintCountAggregateOutputType | null
    _avg: ComplaintAvgAggregateOutputType | null
    _sum: ComplaintSumAggregateOutputType | null
    _min: ComplaintMinAggregateOutputType | null
    _max: ComplaintMaxAggregateOutputType | null
  }

  export type ComplaintAvgAggregateOutputType = {
    priority: number | null
    financialImpact: number | null
  }

  export type ComplaintSumAggregateOutputType = {
    priority: number | null
    financialImpact: number | null
  }

  export type ComplaintMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.ComplaintStatus | null
    priority: number | null
    financialImpact: number | null
    serviceId: string | null
    productId: string | null
    providerId: string | null
    submittedById: string | null
    assignedAgentId: string | null
    assignedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    resolvedAt: Date | null
    closedAt: Date | null
    humanitarianOrgId: string | null
    parkingServiceId: string | null
  }

  export type ComplaintMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.ComplaintStatus | null
    priority: number | null
    financialImpact: number | null
    serviceId: string | null
    productId: string | null
    providerId: string | null
    submittedById: string | null
    assignedAgentId: string | null
    assignedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    resolvedAt: Date | null
    closedAt: Date | null
    humanitarianOrgId: string | null
    parkingServiceId: string | null
  }

  export type ComplaintCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    priority: number
    financialImpact: number
    serviceId: number
    productId: number
    providerId: number
    submittedById: number
    assignedAgentId: number
    assignedAt: number
    createdAt: number
    updatedAt: number
    resolvedAt: number
    closedAt: number
    humanitarianOrgId: number
    parkingServiceId: number
    _all: number
  }


  export type ComplaintAvgAggregateInputType = {
    priority?: true
    financialImpact?: true
  }

  export type ComplaintSumAggregateInputType = {
    priority?: true
    financialImpact?: true
  }

  export type ComplaintMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    financialImpact?: true
    serviceId?: true
    productId?: true
    providerId?: true
    submittedById?: true
    assignedAgentId?: true
    assignedAt?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    closedAt?: true
    humanitarianOrgId?: true
    parkingServiceId?: true
  }

  export type ComplaintMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    financialImpact?: true
    serviceId?: true
    productId?: true
    providerId?: true
    submittedById?: true
    assignedAgentId?: true
    assignedAt?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    closedAt?: true
    humanitarianOrgId?: true
    parkingServiceId?: true
  }

  export type ComplaintCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    financialImpact?: true
    serviceId?: true
    productId?: true
    providerId?: true
    submittedById?: true
    assignedAgentId?: true
    assignedAt?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    closedAt?: true
    humanitarianOrgId?: true
    parkingServiceId?: true
    _all?: true
  }

  export type ComplaintAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Complaint to aggregate.
     */
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     */
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Complaints
    **/
    _count?: true | ComplaintCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComplaintAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComplaintSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComplaintMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComplaintMaxAggregateInputType
  }

  export type GetComplaintAggregateType<T extends ComplaintAggregateArgs> = {
        [P in keyof T & keyof AggregateComplaint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComplaint[P]>
      : GetScalarType<T[P], AggregateComplaint[P]>
  }




  export type ComplaintGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithAggregationInput | ComplaintOrderByWithAggregationInput[]
    by: ComplaintScalarFieldEnum[] | ComplaintScalarFieldEnum
    having?: ComplaintScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComplaintCountAggregateInputType | true
    _avg?: ComplaintAvgAggregateInputType
    _sum?: ComplaintSumAggregateInputType
    _min?: ComplaintMinAggregateInputType
    _max?: ComplaintMaxAggregateInputType
  }

  export type ComplaintGroupByOutputType = {
    id: string
    title: string
    description: string
    status: $Enums.ComplaintStatus
    priority: number
    financialImpact: number | null
    serviceId: string | null
    productId: string | null
    providerId: string | null
    submittedById: string
    assignedAgentId: string | null
    assignedAt: Date | null
    createdAt: Date
    updatedAt: Date
    resolvedAt: Date | null
    closedAt: Date | null
    humanitarianOrgId: string | null
    parkingServiceId: string | null
    _count: ComplaintCountAggregateOutputType | null
    _avg: ComplaintAvgAggregateOutputType | null
    _sum: ComplaintSumAggregateOutputType | null
    _min: ComplaintMinAggregateOutputType | null
    _max: ComplaintMaxAggregateOutputType | null
  }

  type GetComplaintGroupByPayload<T extends ComplaintGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComplaintGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComplaintGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComplaintGroupByOutputType[P]>
            : GetScalarType<T[P], ComplaintGroupByOutputType[P]>
        }
      >
    >


  export type ComplaintSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    financialImpact?: boolean
    serviceId?: boolean
    productId?: boolean
    providerId?: boolean
    submittedById?: boolean
    assignedAgentId?: boolean
    assignedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    closedAt?: boolean
    humanitarianOrgId?: boolean
    parkingServiceId?: boolean
    service?: boolean | Complaint$serviceArgs<ExtArgs>
    product?: boolean | Complaint$productArgs<ExtArgs>
    provider?: boolean | Complaint$providerArgs<ExtArgs>
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedAgent?: boolean | Complaint$assignedAgentArgs<ExtArgs>
    comments?: boolean | Complaint$commentsArgs<ExtArgs>
    attachments?: boolean | Complaint$attachmentsArgs<ExtArgs>
    humanitarianOrg?: boolean | Complaint$humanitarianOrgArgs<ExtArgs>
    parkingService?: boolean | Complaint$parkingServiceArgs<ExtArgs>
    statusHistory?: boolean | Complaint$statusHistoryArgs<ExtArgs>
    _count?: boolean | ComplaintCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["complaint"]>

  export type ComplaintSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    financialImpact?: boolean
    serviceId?: boolean
    productId?: boolean
    providerId?: boolean
    submittedById?: boolean
    assignedAgentId?: boolean
    assignedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    closedAt?: boolean
    humanitarianOrgId?: boolean
    parkingServiceId?: boolean
    service?: boolean | Complaint$serviceArgs<ExtArgs>
    product?: boolean | Complaint$productArgs<ExtArgs>
    provider?: boolean | Complaint$providerArgs<ExtArgs>
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedAgent?: boolean | Complaint$assignedAgentArgs<ExtArgs>
    humanitarianOrg?: boolean | Complaint$humanitarianOrgArgs<ExtArgs>
    parkingService?: boolean | Complaint$parkingServiceArgs<ExtArgs>
  }, ExtArgs["result"]["complaint"]>

  export type ComplaintSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    financialImpact?: boolean
    serviceId?: boolean
    productId?: boolean
    providerId?: boolean
    submittedById?: boolean
    assignedAgentId?: boolean
    assignedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    closedAt?: boolean
    humanitarianOrgId?: boolean
    parkingServiceId?: boolean
    service?: boolean | Complaint$serviceArgs<ExtArgs>
    product?: boolean | Complaint$productArgs<ExtArgs>
    provider?: boolean | Complaint$providerArgs<ExtArgs>
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedAgent?: boolean | Complaint$assignedAgentArgs<ExtArgs>
    humanitarianOrg?: boolean | Complaint$humanitarianOrgArgs<ExtArgs>
    parkingService?: boolean | Complaint$parkingServiceArgs<ExtArgs>
  }, ExtArgs["result"]["complaint"]>

  export type ComplaintSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    financialImpact?: boolean
    serviceId?: boolean
    productId?: boolean
    providerId?: boolean
    submittedById?: boolean
    assignedAgentId?: boolean
    assignedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    closedAt?: boolean
    humanitarianOrgId?: boolean
    parkingServiceId?: boolean
  }

  export type ComplaintOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "status" | "priority" | "financialImpact" | "serviceId" | "productId" | "providerId" | "submittedById" | "assignedAgentId" | "assignedAt" | "createdAt" | "updatedAt" | "resolvedAt" | "closedAt" | "humanitarianOrgId" | "parkingServiceId", ExtArgs["result"]["complaint"]>
  export type ComplaintInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | Complaint$serviceArgs<ExtArgs>
    product?: boolean | Complaint$productArgs<ExtArgs>
    provider?: boolean | Complaint$providerArgs<ExtArgs>
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedAgent?: boolean | Complaint$assignedAgentArgs<ExtArgs>
    comments?: boolean | Complaint$commentsArgs<ExtArgs>
    attachments?: boolean | Complaint$attachmentsArgs<ExtArgs>
    humanitarianOrg?: boolean | Complaint$humanitarianOrgArgs<ExtArgs>
    parkingService?: boolean | Complaint$parkingServiceArgs<ExtArgs>
    statusHistory?: boolean | Complaint$statusHistoryArgs<ExtArgs>
    _count?: boolean | ComplaintCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ComplaintIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | Complaint$serviceArgs<ExtArgs>
    product?: boolean | Complaint$productArgs<ExtArgs>
    provider?: boolean | Complaint$providerArgs<ExtArgs>
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedAgent?: boolean | Complaint$assignedAgentArgs<ExtArgs>
    humanitarianOrg?: boolean | Complaint$humanitarianOrgArgs<ExtArgs>
    parkingService?: boolean | Complaint$parkingServiceArgs<ExtArgs>
  }
  export type ComplaintIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | Complaint$serviceArgs<ExtArgs>
    product?: boolean | Complaint$productArgs<ExtArgs>
    provider?: boolean | Complaint$providerArgs<ExtArgs>
    submittedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedAgent?: boolean | Complaint$assignedAgentArgs<ExtArgs>
    humanitarianOrg?: boolean | Complaint$humanitarianOrgArgs<ExtArgs>
    parkingService?: boolean | Complaint$parkingServiceArgs<ExtArgs>
  }

  export type $ComplaintPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Complaint"
    objects: {
      service: Prisma.$ServicePayload<ExtArgs> | null
      product: Prisma.$ProductPayload<ExtArgs> | null
      provider: Prisma.$ProviderPayload<ExtArgs> | null
      submittedBy: Prisma.$UserPayload<ExtArgs>
      assignedAgent: Prisma.$UserPayload<ExtArgs> | null
      comments: Prisma.$CommentPayload<ExtArgs>[]
      attachments: Prisma.$AttachmentPayload<ExtArgs>[]
      humanitarianOrg: Prisma.$HumanitarianOrgPayload<ExtArgs> | null
      parkingService: Prisma.$ParkingServicePayload<ExtArgs> | null
      statusHistory: Prisma.$ComplaintStatusHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      status: $Enums.ComplaintStatus
      priority: number
      financialImpact: number | null
      serviceId: string | null
      productId: string | null
      providerId: string | null
      submittedById: string
      assignedAgentId: string | null
      assignedAt: Date | null
      createdAt: Date
      updatedAt: Date
      resolvedAt: Date | null
      closedAt: Date | null
      humanitarianOrgId: string | null
      parkingServiceId: string | null
    }, ExtArgs["result"]["complaint"]>
    composites: {}
  }

  type ComplaintGetPayload<S extends boolean | null | undefined | ComplaintDefaultArgs> = $Result.GetResult<Prisma.$ComplaintPayload, S>

  type ComplaintCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ComplaintFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComplaintCountAggregateInputType | true
    }

  export interface ComplaintDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Complaint'], meta: { name: 'Complaint' } }
    /**
     * Find zero or one Complaint that matches the filter.
     * @param {ComplaintFindUniqueArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComplaintFindUniqueArgs>(args: SelectSubset<T, ComplaintFindUniqueArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Complaint that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ComplaintFindUniqueOrThrowArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComplaintFindUniqueOrThrowArgs>(args: SelectSubset<T, ComplaintFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Complaint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintFindFirstArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComplaintFindFirstArgs>(args?: SelectSubset<T, ComplaintFindFirstArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Complaint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintFindFirstOrThrowArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComplaintFindFirstOrThrowArgs>(args?: SelectSubset<T, ComplaintFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Complaints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Complaints
     * const complaints = await prisma.complaint.findMany()
     * 
     * // Get first 10 Complaints
     * const complaints = await prisma.complaint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const complaintWithIdOnly = await prisma.complaint.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComplaintFindManyArgs>(args?: SelectSubset<T, ComplaintFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Complaint.
     * @param {ComplaintCreateArgs} args - Arguments to create a Complaint.
     * @example
     * // Create one Complaint
     * const Complaint = await prisma.complaint.create({
     *   data: {
     *     // ... data to create a Complaint
     *   }
     * })
     * 
     */
    create<T extends ComplaintCreateArgs>(args: SelectSubset<T, ComplaintCreateArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Complaints.
     * @param {ComplaintCreateManyArgs} args - Arguments to create many Complaints.
     * @example
     * // Create many Complaints
     * const complaint = await prisma.complaint.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComplaintCreateManyArgs>(args?: SelectSubset<T, ComplaintCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Complaints and returns the data saved in the database.
     * @param {ComplaintCreateManyAndReturnArgs} args - Arguments to create many Complaints.
     * @example
     * // Create many Complaints
     * const complaint = await prisma.complaint.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Complaints and only return the `id`
     * const complaintWithIdOnly = await prisma.complaint.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComplaintCreateManyAndReturnArgs>(args?: SelectSubset<T, ComplaintCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Complaint.
     * @param {ComplaintDeleteArgs} args - Arguments to delete one Complaint.
     * @example
     * // Delete one Complaint
     * const Complaint = await prisma.complaint.delete({
     *   where: {
     *     // ... filter to delete one Complaint
     *   }
     * })
     * 
     */
    delete<T extends ComplaintDeleteArgs>(args: SelectSubset<T, ComplaintDeleteArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Complaint.
     * @param {ComplaintUpdateArgs} args - Arguments to update one Complaint.
     * @example
     * // Update one Complaint
     * const complaint = await prisma.complaint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComplaintUpdateArgs>(args: SelectSubset<T, ComplaintUpdateArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Complaints.
     * @param {ComplaintDeleteManyArgs} args - Arguments to filter Complaints to delete.
     * @example
     * // Delete a few Complaints
     * const { count } = await prisma.complaint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComplaintDeleteManyArgs>(args?: SelectSubset<T, ComplaintDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Complaints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Complaints
     * const complaint = await prisma.complaint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComplaintUpdateManyArgs>(args: SelectSubset<T, ComplaintUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Complaints and returns the data updated in the database.
     * @param {ComplaintUpdateManyAndReturnArgs} args - Arguments to update many Complaints.
     * @example
     * // Update many Complaints
     * const complaint = await prisma.complaint.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Complaints and only return the `id`
     * const complaintWithIdOnly = await prisma.complaint.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ComplaintUpdateManyAndReturnArgs>(args: SelectSubset<T, ComplaintUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Complaint.
     * @param {ComplaintUpsertArgs} args - Arguments to update or create a Complaint.
     * @example
     * // Update or create a Complaint
     * const complaint = await prisma.complaint.upsert({
     *   create: {
     *     // ... data to create a Complaint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Complaint we want to update
     *   }
     * })
     */
    upsert<T extends ComplaintUpsertArgs>(args: SelectSubset<T, ComplaintUpsertArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Complaints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintCountArgs} args - Arguments to filter Complaints to count.
     * @example
     * // Count the number of Complaints
     * const count = await prisma.complaint.count({
     *   where: {
     *     // ... the filter for the Complaints we want to count
     *   }
     * })
    **/
    count<T extends ComplaintCountArgs>(
      args?: Subset<T, ComplaintCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComplaintCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Complaint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComplaintAggregateArgs>(args: Subset<T, ComplaintAggregateArgs>): Prisma.PrismaPromise<GetComplaintAggregateType<T>>

    /**
     * Group by Complaint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComplaintGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComplaintGroupByArgs['orderBy'] }
        : { orderBy?: ComplaintGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComplaintGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComplaintGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Complaint model
   */
  readonly fields: ComplaintFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Complaint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComplaintClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    service<T extends Complaint$serviceArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$serviceArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    product<T extends Complaint$productArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    provider<T extends Complaint$providerArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$providerArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    submittedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedAgent<T extends Complaint$assignedAgentArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$assignedAgentArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    comments<T extends Complaint$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attachments<T extends Complaint$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    humanitarianOrg<T extends Complaint$humanitarianOrgArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$humanitarianOrgArgs<ExtArgs>>): Prisma__HumanitarianOrgClient<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    parkingService<T extends Complaint$parkingServiceArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$parkingServiceArgs<ExtArgs>>): Prisma__ParkingServiceClient<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    statusHistory<T extends Complaint$statusHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$statusHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintStatusHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Complaint model
   */
  interface ComplaintFieldRefs {
    readonly id: FieldRef<"Complaint", 'String'>
    readonly title: FieldRef<"Complaint", 'String'>
    readonly description: FieldRef<"Complaint", 'String'>
    readonly status: FieldRef<"Complaint", 'ComplaintStatus'>
    readonly priority: FieldRef<"Complaint", 'Int'>
    readonly financialImpact: FieldRef<"Complaint", 'Float'>
    readonly serviceId: FieldRef<"Complaint", 'String'>
    readonly productId: FieldRef<"Complaint", 'String'>
    readonly providerId: FieldRef<"Complaint", 'String'>
    readonly submittedById: FieldRef<"Complaint", 'String'>
    readonly assignedAgentId: FieldRef<"Complaint", 'String'>
    readonly assignedAt: FieldRef<"Complaint", 'DateTime'>
    readonly createdAt: FieldRef<"Complaint", 'DateTime'>
    readonly updatedAt: FieldRef<"Complaint", 'DateTime'>
    readonly resolvedAt: FieldRef<"Complaint", 'DateTime'>
    readonly closedAt: FieldRef<"Complaint", 'DateTime'>
    readonly humanitarianOrgId: FieldRef<"Complaint", 'String'>
    readonly parkingServiceId: FieldRef<"Complaint", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Complaint findUnique
   */
  export type ComplaintFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaint to fetch.
     */
    where: ComplaintWhereUniqueInput
  }

  /**
   * Complaint findUniqueOrThrow
   */
  export type ComplaintFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaint to fetch.
     */
    where: ComplaintWhereUniqueInput
  }

  /**
   * Complaint findFirst
   */
  export type ComplaintFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaint to fetch.
     */
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     */
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Complaints.
     */
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Complaints.
     */
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Complaint findFirstOrThrow
   */
  export type ComplaintFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaint to fetch.
     */
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     */
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Complaints.
     */
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Complaints.
     */
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Complaint findMany
   */
  export type ComplaintFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaints to fetch.
     */
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     */
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Complaints.
     */
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     */
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Complaint create
   */
  export type ComplaintCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * The data needed to create a Complaint.
     */
    data: XOR<ComplaintCreateInput, ComplaintUncheckedCreateInput>
  }

  /**
   * Complaint createMany
   */
  export type ComplaintCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Complaints.
     */
    data: ComplaintCreateManyInput | ComplaintCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Complaint createManyAndReturn
   */
  export type ComplaintCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * The data used to create many Complaints.
     */
    data: ComplaintCreateManyInput | ComplaintCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Complaint update
   */
  export type ComplaintUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * The data needed to update a Complaint.
     */
    data: XOR<ComplaintUpdateInput, ComplaintUncheckedUpdateInput>
    /**
     * Choose, which Complaint to update.
     */
    where: ComplaintWhereUniqueInput
  }

  /**
   * Complaint updateMany
   */
  export type ComplaintUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Complaints.
     */
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyInput>
    /**
     * Filter which Complaints to update
     */
    where?: ComplaintWhereInput
    /**
     * Limit how many Complaints to update.
     */
    limit?: number
  }

  /**
   * Complaint updateManyAndReturn
   */
  export type ComplaintUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * The data used to update Complaints.
     */
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyInput>
    /**
     * Filter which Complaints to update
     */
    where?: ComplaintWhereInput
    /**
     * Limit how many Complaints to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Complaint upsert
   */
  export type ComplaintUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * The filter to search for the Complaint to update in case it exists.
     */
    where: ComplaintWhereUniqueInput
    /**
     * In case the Complaint found by the `where` argument doesn't exist, create a new Complaint with this data.
     */
    create: XOR<ComplaintCreateInput, ComplaintUncheckedCreateInput>
    /**
     * In case the Complaint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComplaintUpdateInput, ComplaintUncheckedUpdateInput>
  }

  /**
   * Complaint delete
   */
  export type ComplaintDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter which Complaint to delete.
     */
    where: ComplaintWhereUniqueInput
  }

  /**
   * Complaint deleteMany
   */
  export type ComplaintDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Complaints to delete
     */
    where?: ComplaintWhereInput
    /**
     * Limit how many Complaints to delete.
     */
    limit?: number
  }

  /**
   * Complaint.service
   */
  export type Complaint$serviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
  }

  /**
   * Complaint.product
   */
  export type Complaint$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }

  /**
   * Complaint.provider
   */
  export type Complaint$providerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    where?: ProviderWhereInput
  }

  /**
   * Complaint.assignedAgent
   */
  export type Complaint$assignedAgentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Complaint.comments
   */
  export type Complaint$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Complaint.attachments
   */
  export type Complaint$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    cursor?: AttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Complaint.humanitarianOrg
   */
  export type Complaint$humanitarianOrgArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HumanitarianOrg
     */
    select?: HumanitarianOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HumanitarianOrg
     */
    omit?: HumanitarianOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HumanitarianOrgInclude<ExtArgs> | null
    where?: HumanitarianOrgWhereInput
  }

  /**
   * Complaint.parkingService
   */
  export type Complaint$parkingServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    where?: ParkingServiceWhereInput
  }

  /**
   * Complaint.statusHistory
   */
  export type Complaint$statusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryInclude<ExtArgs> | null
    where?: ComplaintStatusHistoryWhereInput
    orderBy?: ComplaintStatusHistoryOrderByWithRelationInput | ComplaintStatusHistoryOrderByWithRelationInput[]
    cursor?: ComplaintStatusHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintStatusHistoryScalarFieldEnum | ComplaintStatusHistoryScalarFieldEnum[]
  }

  /**
   * Complaint without action
   */
  export type ComplaintDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
  }


  /**
   * Model ComplaintStatusHistory
   */

  export type AggregateComplaintStatusHistory = {
    _count: ComplaintStatusHistoryCountAggregateOutputType | null
    _min: ComplaintStatusHistoryMinAggregateOutputType | null
    _max: ComplaintStatusHistoryMaxAggregateOutputType | null
  }

  export type ComplaintStatusHistoryMinAggregateOutputType = {
    id: string | null
    complaintId: string | null
    previousStatus: $Enums.ComplaintStatus | null
    newStatus: $Enums.ComplaintStatus | null
    changedById: string | null
    changedAt: Date | null
    notes: string | null
  }

  export type ComplaintStatusHistoryMaxAggregateOutputType = {
    id: string | null
    complaintId: string | null
    previousStatus: $Enums.ComplaintStatus | null
    newStatus: $Enums.ComplaintStatus | null
    changedById: string | null
    changedAt: Date | null
    notes: string | null
  }

  export type ComplaintStatusHistoryCountAggregateOutputType = {
    id: number
    complaintId: number
    previousStatus: number
    newStatus: number
    changedById: number
    changedAt: number
    notes: number
    _all: number
  }


  export type ComplaintStatusHistoryMinAggregateInputType = {
    id?: true
    complaintId?: true
    previousStatus?: true
    newStatus?: true
    changedById?: true
    changedAt?: true
    notes?: true
  }

  export type ComplaintStatusHistoryMaxAggregateInputType = {
    id?: true
    complaintId?: true
    previousStatus?: true
    newStatus?: true
    changedById?: true
    changedAt?: true
    notes?: true
  }

  export type ComplaintStatusHistoryCountAggregateInputType = {
    id?: true
    complaintId?: true
    previousStatus?: true
    newStatus?: true
    changedById?: true
    changedAt?: true
    notes?: true
    _all?: true
  }

  export type ComplaintStatusHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComplaintStatusHistory to aggregate.
     */
    where?: ComplaintStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplaintStatusHistories to fetch.
     */
    orderBy?: ComplaintStatusHistoryOrderByWithRelationInput | ComplaintStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComplaintStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplaintStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplaintStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComplaintStatusHistories
    **/
    _count?: true | ComplaintStatusHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComplaintStatusHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComplaintStatusHistoryMaxAggregateInputType
  }

  export type GetComplaintStatusHistoryAggregateType<T extends ComplaintStatusHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateComplaintStatusHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComplaintStatusHistory[P]>
      : GetScalarType<T[P], AggregateComplaintStatusHistory[P]>
  }




  export type ComplaintStatusHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintStatusHistoryWhereInput
    orderBy?: ComplaintStatusHistoryOrderByWithAggregationInput | ComplaintStatusHistoryOrderByWithAggregationInput[]
    by: ComplaintStatusHistoryScalarFieldEnum[] | ComplaintStatusHistoryScalarFieldEnum
    having?: ComplaintStatusHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComplaintStatusHistoryCountAggregateInputType | true
    _min?: ComplaintStatusHistoryMinAggregateInputType
    _max?: ComplaintStatusHistoryMaxAggregateInputType
  }

  export type ComplaintStatusHistoryGroupByOutputType = {
    id: string
    complaintId: string
    previousStatus: $Enums.ComplaintStatus | null
    newStatus: $Enums.ComplaintStatus
    changedById: string
    changedAt: Date
    notes: string | null
    _count: ComplaintStatusHistoryCountAggregateOutputType | null
    _min: ComplaintStatusHistoryMinAggregateOutputType | null
    _max: ComplaintStatusHistoryMaxAggregateOutputType | null
  }

  type GetComplaintStatusHistoryGroupByPayload<T extends ComplaintStatusHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComplaintStatusHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComplaintStatusHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComplaintStatusHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ComplaintStatusHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ComplaintStatusHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    complaintId?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    changedById?: boolean
    changedAt?: boolean
    notes?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["complaintStatusHistory"]>

  export type ComplaintStatusHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    complaintId?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    changedById?: boolean
    changedAt?: boolean
    notes?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["complaintStatusHistory"]>

  export type ComplaintStatusHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    complaintId?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    changedById?: boolean
    changedAt?: boolean
    notes?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["complaintStatusHistory"]>

  export type ComplaintStatusHistorySelectScalar = {
    id?: boolean
    complaintId?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    changedById?: boolean
    changedAt?: boolean
    notes?: boolean
  }

  export type ComplaintStatusHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "complaintId" | "previousStatus" | "newStatus" | "changedById" | "changedAt" | "notes", ExtArgs["result"]["complaintStatusHistory"]>
  export type ComplaintStatusHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }
  export type ComplaintStatusHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }
  export type ComplaintStatusHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }

  export type $ComplaintStatusHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComplaintStatusHistory"
    objects: {
      complaint: Prisma.$ComplaintPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      complaintId: string
      previousStatus: $Enums.ComplaintStatus | null
      newStatus: $Enums.ComplaintStatus
      changedById: string
      changedAt: Date
      notes: string | null
    }, ExtArgs["result"]["complaintStatusHistory"]>
    composites: {}
  }

  type ComplaintStatusHistoryGetPayload<S extends boolean | null | undefined | ComplaintStatusHistoryDefaultArgs> = $Result.GetResult<Prisma.$ComplaintStatusHistoryPayload, S>

  type ComplaintStatusHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ComplaintStatusHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComplaintStatusHistoryCountAggregateInputType | true
    }

  export interface ComplaintStatusHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComplaintStatusHistory'], meta: { name: 'ComplaintStatusHistory' } }
    /**
     * Find zero or one ComplaintStatusHistory that matches the filter.
     * @param {ComplaintStatusHistoryFindUniqueArgs} args - Arguments to find a ComplaintStatusHistory
     * @example
     * // Get one ComplaintStatusHistory
     * const complaintStatusHistory = await prisma.complaintStatusHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComplaintStatusHistoryFindUniqueArgs>(args: SelectSubset<T, ComplaintStatusHistoryFindUniqueArgs<ExtArgs>>): Prisma__ComplaintStatusHistoryClient<$Result.GetResult<Prisma.$ComplaintStatusHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ComplaintStatusHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ComplaintStatusHistoryFindUniqueOrThrowArgs} args - Arguments to find a ComplaintStatusHistory
     * @example
     * // Get one ComplaintStatusHistory
     * const complaintStatusHistory = await prisma.complaintStatusHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComplaintStatusHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ComplaintStatusHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComplaintStatusHistoryClient<$Result.GetResult<Prisma.$ComplaintStatusHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComplaintStatusHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintStatusHistoryFindFirstArgs} args - Arguments to find a ComplaintStatusHistory
     * @example
     * // Get one ComplaintStatusHistory
     * const complaintStatusHistory = await prisma.complaintStatusHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComplaintStatusHistoryFindFirstArgs>(args?: SelectSubset<T, ComplaintStatusHistoryFindFirstArgs<ExtArgs>>): Prisma__ComplaintStatusHistoryClient<$Result.GetResult<Prisma.$ComplaintStatusHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComplaintStatusHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintStatusHistoryFindFirstOrThrowArgs} args - Arguments to find a ComplaintStatusHistory
     * @example
     * // Get one ComplaintStatusHistory
     * const complaintStatusHistory = await prisma.complaintStatusHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComplaintStatusHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ComplaintStatusHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComplaintStatusHistoryClient<$Result.GetResult<Prisma.$ComplaintStatusHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ComplaintStatusHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintStatusHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComplaintStatusHistories
     * const complaintStatusHistories = await prisma.complaintStatusHistory.findMany()
     * 
     * // Get first 10 ComplaintStatusHistories
     * const complaintStatusHistories = await prisma.complaintStatusHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const complaintStatusHistoryWithIdOnly = await prisma.complaintStatusHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComplaintStatusHistoryFindManyArgs>(args?: SelectSubset<T, ComplaintStatusHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintStatusHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ComplaintStatusHistory.
     * @param {ComplaintStatusHistoryCreateArgs} args - Arguments to create a ComplaintStatusHistory.
     * @example
     * // Create one ComplaintStatusHistory
     * const ComplaintStatusHistory = await prisma.complaintStatusHistory.create({
     *   data: {
     *     // ... data to create a ComplaintStatusHistory
     *   }
     * })
     * 
     */
    create<T extends ComplaintStatusHistoryCreateArgs>(args: SelectSubset<T, ComplaintStatusHistoryCreateArgs<ExtArgs>>): Prisma__ComplaintStatusHistoryClient<$Result.GetResult<Prisma.$ComplaintStatusHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ComplaintStatusHistories.
     * @param {ComplaintStatusHistoryCreateManyArgs} args - Arguments to create many ComplaintStatusHistories.
     * @example
     * // Create many ComplaintStatusHistories
     * const complaintStatusHistory = await prisma.complaintStatusHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComplaintStatusHistoryCreateManyArgs>(args?: SelectSubset<T, ComplaintStatusHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ComplaintStatusHistories and returns the data saved in the database.
     * @param {ComplaintStatusHistoryCreateManyAndReturnArgs} args - Arguments to create many ComplaintStatusHistories.
     * @example
     * // Create many ComplaintStatusHistories
     * const complaintStatusHistory = await prisma.complaintStatusHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ComplaintStatusHistories and only return the `id`
     * const complaintStatusHistoryWithIdOnly = await prisma.complaintStatusHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComplaintStatusHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ComplaintStatusHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintStatusHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ComplaintStatusHistory.
     * @param {ComplaintStatusHistoryDeleteArgs} args - Arguments to delete one ComplaintStatusHistory.
     * @example
     * // Delete one ComplaintStatusHistory
     * const ComplaintStatusHistory = await prisma.complaintStatusHistory.delete({
     *   where: {
     *     // ... filter to delete one ComplaintStatusHistory
     *   }
     * })
     * 
     */
    delete<T extends ComplaintStatusHistoryDeleteArgs>(args: SelectSubset<T, ComplaintStatusHistoryDeleteArgs<ExtArgs>>): Prisma__ComplaintStatusHistoryClient<$Result.GetResult<Prisma.$ComplaintStatusHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ComplaintStatusHistory.
     * @param {ComplaintStatusHistoryUpdateArgs} args - Arguments to update one ComplaintStatusHistory.
     * @example
     * // Update one ComplaintStatusHistory
     * const complaintStatusHistory = await prisma.complaintStatusHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComplaintStatusHistoryUpdateArgs>(args: SelectSubset<T, ComplaintStatusHistoryUpdateArgs<ExtArgs>>): Prisma__ComplaintStatusHistoryClient<$Result.GetResult<Prisma.$ComplaintStatusHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ComplaintStatusHistories.
     * @param {ComplaintStatusHistoryDeleteManyArgs} args - Arguments to filter ComplaintStatusHistories to delete.
     * @example
     * // Delete a few ComplaintStatusHistories
     * const { count } = await prisma.complaintStatusHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComplaintStatusHistoryDeleteManyArgs>(args?: SelectSubset<T, ComplaintStatusHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComplaintStatusHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintStatusHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComplaintStatusHistories
     * const complaintStatusHistory = await prisma.complaintStatusHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComplaintStatusHistoryUpdateManyArgs>(args: SelectSubset<T, ComplaintStatusHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComplaintStatusHistories and returns the data updated in the database.
     * @param {ComplaintStatusHistoryUpdateManyAndReturnArgs} args - Arguments to update many ComplaintStatusHistories.
     * @example
     * // Update many ComplaintStatusHistories
     * const complaintStatusHistory = await prisma.complaintStatusHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ComplaintStatusHistories and only return the `id`
     * const complaintStatusHistoryWithIdOnly = await prisma.complaintStatusHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ComplaintStatusHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ComplaintStatusHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintStatusHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ComplaintStatusHistory.
     * @param {ComplaintStatusHistoryUpsertArgs} args - Arguments to update or create a ComplaintStatusHistory.
     * @example
     * // Update or create a ComplaintStatusHistory
     * const complaintStatusHistory = await prisma.complaintStatusHistory.upsert({
     *   create: {
     *     // ... data to create a ComplaintStatusHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComplaintStatusHistory we want to update
     *   }
     * })
     */
    upsert<T extends ComplaintStatusHistoryUpsertArgs>(args: SelectSubset<T, ComplaintStatusHistoryUpsertArgs<ExtArgs>>): Prisma__ComplaintStatusHistoryClient<$Result.GetResult<Prisma.$ComplaintStatusHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ComplaintStatusHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintStatusHistoryCountArgs} args - Arguments to filter ComplaintStatusHistories to count.
     * @example
     * // Count the number of ComplaintStatusHistories
     * const count = await prisma.complaintStatusHistory.count({
     *   where: {
     *     // ... the filter for the ComplaintStatusHistories we want to count
     *   }
     * })
    **/
    count<T extends ComplaintStatusHistoryCountArgs>(
      args?: Subset<T, ComplaintStatusHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComplaintStatusHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComplaintStatusHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintStatusHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComplaintStatusHistoryAggregateArgs>(args: Subset<T, ComplaintStatusHistoryAggregateArgs>): Prisma.PrismaPromise<GetComplaintStatusHistoryAggregateType<T>>

    /**
     * Group by ComplaintStatusHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintStatusHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComplaintStatusHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComplaintStatusHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ComplaintStatusHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComplaintStatusHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComplaintStatusHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComplaintStatusHistory model
   */
  readonly fields: ComplaintStatusHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComplaintStatusHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComplaintStatusHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    complaint<T extends ComplaintDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComplaintDefaultArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComplaintStatusHistory model
   */
  interface ComplaintStatusHistoryFieldRefs {
    readonly id: FieldRef<"ComplaintStatusHistory", 'String'>
    readonly complaintId: FieldRef<"ComplaintStatusHistory", 'String'>
    readonly previousStatus: FieldRef<"ComplaintStatusHistory", 'ComplaintStatus'>
    readonly newStatus: FieldRef<"ComplaintStatusHistory", 'ComplaintStatus'>
    readonly changedById: FieldRef<"ComplaintStatusHistory", 'String'>
    readonly changedAt: FieldRef<"ComplaintStatusHistory", 'DateTime'>
    readonly notes: FieldRef<"ComplaintStatusHistory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ComplaintStatusHistory findUnique
   */
  export type ComplaintStatusHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintStatusHistory to fetch.
     */
    where: ComplaintStatusHistoryWhereUniqueInput
  }

  /**
   * ComplaintStatusHistory findUniqueOrThrow
   */
  export type ComplaintStatusHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintStatusHistory to fetch.
     */
    where: ComplaintStatusHistoryWhereUniqueInput
  }

  /**
   * ComplaintStatusHistory findFirst
   */
  export type ComplaintStatusHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintStatusHistory to fetch.
     */
    where?: ComplaintStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplaintStatusHistories to fetch.
     */
    orderBy?: ComplaintStatusHistoryOrderByWithRelationInput | ComplaintStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComplaintStatusHistories.
     */
    cursor?: ComplaintStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplaintStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplaintStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComplaintStatusHistories.
     */
    distinct?: ComplaintStatusHistoryScalarFieldEnum | ComplaintStatusHistoryScalarFieldEnum[]
  }

  /**
   * ComplaintStatusHistory findFirstOrThrow
   */
  export type ComplaintStatusHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintStatusHistory to fetch.
     */
    where?: ComplaintStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplaintStatusHistories to fetch.
     */
    orderBy?: ComplaintStatusHistoryOrderByWithRelationInput | ComplaintStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComplaintStatusHistories.
     */
    cursor?: ComplaintStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplaintStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplaintStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComplaintStatusHistories.
     */
    distinct?: ComplaintStatusHistoryScalarFieldEnum | ComplaintStatusHistoryScalarFieldEnum[]
  }

  /**
   * ComplaintStatusHistory findMany
   */
  export type ComplaintStatusHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintStatusHistories to fetch.
     */
    where?: ComplaintStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplaintStatusHistories to fetch.
     */
    orderBy?: ComplaintStatusHistoryOrderByWithRelationInput | ComplaintStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComplaintStatusHistories.
     */
    cursor?: ComplaintStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplaintStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplaintStatusHistories.
     */
    skip?: number
    distinct?: ComplaintStatusHistoryScalarFieldEnum | ComplaintStatusHistoryScalarFieldEnum[]
  }

  /**
   * ComplaintStatusHistory create
   */
  export type ComplaintStatusHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ComplaintStatusHistory.
     */
    data: XOR<ComplaintStatusHistoryCreateInput, ComplaintStatusHistoryUncheckedCreateInput>
  }

  /**
   * ComplaintStatusHistory createMany
   */
  export type ComplaintStatusHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComplaintStatusHistories.
     */
    data: ComplaintStatusHistoryCreateManyInput | ComplaintStatusHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ComplaintStatusHistory createManyAndReturn
   */
  export type ComplaintStatusHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many ComplaintStatusHistories.
     */
    data: ComplaintStatusHistoryCreateManyInput | ComplaintStatusHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComplaintStatusHistory update
   */
  export type ComplaintStatusHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ComplaintStatusHistory.
     */
    data: XOR<ComplaintStatusHistoryUpdateInput, ComplaintStatusHistoryUncheckedUpdateInput>
    /**
     * Choose, which ComplaintStatusHistory to update.
     */
    where: ComplaintStatusHistoryWhereUniqueInput
  }

  /**
   * ComplaintStatusHistory updateMany
   */
  export type ComplaintStatusHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComplaintStatusHistories.
     */
    data: XOR<ComplaintStatusHistoryUpdateManyMutationInput, ComplaintStatusHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ComplaintStatusHistories to update
     */
    where?: ComplaintStatusHistoryWhereInput
    /**
     * Limit how many ComplaintStatusHistories to update.
     */
    limit?: number
  }

  /**
   * ComplaintStatusHistory updateManyAndReturn
   */
  export type ComplaintStatusHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * The data used to update ComplaintStatusHistories.
     */
    data: XOR<ComplaintStatusHistoryUpdateManyMutationInput, ComplaintStatusHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ComplaintStatusHistories to update
     */
    where?: ComplaintStatusHistoryWhereInput
    /**
     * Limit how many ComplaintStatusHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComplaintStatusHistory upsert
   */
  export type ComplaintStatusHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ComplaintStatusHistory to update in case it exists.
     */
    where: ComplaintStatusHistoryWhereUniqueInput
    /**
     * In case the ComplaintStatusHistory found by the `where` argument doesn't exist, create a new ComplaintStatusHistory with this data.
     */
    create: XOR<ComplaintStatusHistoryCreateInput, ComplaintStatusHistoryUncheckedCreateInput>
    /**
     * In case the ComplaintStatusHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComplaintStatusHistoryUpdateInput, ComplaintStatusHistoryUncheckedUpdateInput>
  }

  /**
   * ComplaintStatusHistory delete
   */
  export type ComplaintStatusHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter which ComplaintStatusHistory to delete.
     */
    where: ComplaintStatusHistoryWhereUniqueInput
  }

  /**
   * ComplaintStatusHistory deleteMany
   */
  export type ComplaintStatusHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComplaintStatusHistories to delete
     */
    where?: ComplaintStatusHistoryWhereInput
    /**
     * Limit how many ComplaintStatusHistories to delete.
     */
    limit?: number
  }

  /**
   * ComplaintStatusHistory without action
   */
  export type ComplaintStatusHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintStatusHistory
     */
    select?: ComplaintStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintStatusHistory
     */
    omit?: ComplaintStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintStatusHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    text: string | null
    complaintId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isInternal: boolean | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    text: string | null
    complaintId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isInternal: boolean | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    text: number
    complaintId: number
    userId: number
    createdAt: number
    updatedAt: number
    isInternal: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    text?: true
    complaintId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    isInternal?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    text?: true
    complaintId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    isInternal?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    text?: true
    complaintId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    isInternal?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    text: string
    complaintId: string
    userId: string
    createdAt: Date
    updatedAt: Date
    isInternal: boolean
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    complaintId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isInternal?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    complaintId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isInternal?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    complaintId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isInternal?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    text?: boolean
    complaintId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isInternal?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "complaintId" | "userId" | "createdAt" | "updatedAt" | "isInternal", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      complaint: Prisma.$ComplaintPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      complaintId: string
      userId: string
      createdAt: Date
      updatedAt: Date
      isInternal: boolean
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    complaint<T extends ComplaintDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComplaintDefaultArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly text: FieldRef<"Comment", 'String'>
    readonly complaintId: FieldRef<"Comment", 'String'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
    readonly isInternal: FieldRef<"Comment", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Attachment
   */

  export type AggregateAttachment = {
    _count: AttachmentCountAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  export type AttachmentMinAggregateOutputType = {
    id: string | null
    fileName: string | null
    fileUrl: string | null
    fileType: string | null
    complaintId: string | null
    uploadedAt: Date | null
  }

  export type AttachmentMaxAggregateOutputType = {
    id: string | null
    fileName: string | null
    fileUrl: string | null
    fileType: string | null
    complaintId: string | null
    uploadedAt: Date | null
  }

  export type AttachmentCountAggregateOutputType = {
    id: number
    fileName: number
    fileUrl: number
    fileType: number
    complaintId: number
    uploadedAt: number
    _all: number
  }


  export type AttachmentMinAggregateInputType = {
    id?: true
    fileName?: true
    fileUrl?: true
    fileType?: true
    complaintId?: true
    uploadedAt?: true
  }

  export type AttachmentMaxAggregateInputType = {
    id?: true
    fileName?: true
    fileUrl?: true
    fileType?: true
    complaintId?: true
    uploadedAt?: true
  }

  export type AttachmentCountAggregateInputType = {
    id?: true
    fileName?: true
    fileUrl?: true
    fileType?: true
    complaintId?: true
    uploadedAt?: true
    _all?: true
  }

  export type AttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachment to aggregate.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attachments
    **/
    _count?: true | AttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttachmentMaxAggregateInputType
  }

  export type GetAttachmentAggregateType<T extends AttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttachment[P]>
      : GetScalarType<T[P], AggregateAttachment[P]>
  }




  export type AttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithAggregationInput | AttachmentOrderByWithAggregationInput[]
    by: AttachmentScalarFieldEnum[] | AttachmentScalarFieldEnum
    having?: AttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttachmentCountAggregateInputType | true
    _min?: AttachmentMinAggregateInputType
    _max?: AttachmentMaxAggregateInputType
  }

  export type AttachmentGroupByOutputType = {
    id: string
    fileName: string
    fileUrl: string
    fileType: string
    complaintId: string
    uploadedAt: Date
    _count: AttachmentCountAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  type GetAttachmentGroupByPayload<T extends AttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
        }
      >
    >


  export type AttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileType?: boolean
    complaintId?: boolean
    uploadedAt?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileType?: boolean
    complaintId?: boolean
    uploadedAt?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileType?: boolean
    complaintId?: boolean
    uploadedAt?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectScalar = {
    id?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileType?: boolean
    complaintId?: boolean
    uploadedAt?: boolean
  }

  export type AttachmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fileName" | "fileUrl" | "fileType" | "complaintId" | "uploadedAt", ExtArgs["result"]["attachment"]>
  export type AttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }
  export type AttachmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }
  export type AttachmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }

  export type $AttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attachment"
    objects: {
      complaint: Prisma.$ComplaintPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fileName: string
      fileUrl: string
      fileType: string
      complaintId: string
      uploadedAt: Date
    }, ExtArgs["result"]["attachment"]>
    composites: {}
  }

  type AttachmentGetPayload<S extends boolean | null | undefined | AttachmentDefaultArgs> = $Result.GetResult<Prisma.$AttachmentPayload, S>

  type AttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttachmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttachmentCountAggregateInputType | true
    }

  export interface AttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attachment'], meta: { name: 'Attachment' } }
    /**
     * Find zero or one Attachment that matches the filter.
     * @param {AttachmentFindUniqueArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttachmentFindUniqueArgs>(args: SelectSubset<T, AttachmentFindUniqueArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attachment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttachmentFindUniqueOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttachmentFindFirstArgs>(args?: SelectSubset<T, AttachmentFindFirstArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attachments
     * const attachments = await prisma.attachment.findMany()
     * 
     * // Get first 10 Attachments
     * const attachments = await prisma.attachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attachmentWithIdOnly = await prisma.attachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttachmentFindManyArgs>(args?: SelectSubset<T, AttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attachment.
     * @param {AttachmentCreateArgs} args - Arguments to create a Attachment.
     * @example
     * // Create one Attachment
     * const Attachment = await prisma.attachment.create({
     *   data: {
     *     // ... data to create a Attachment
     *   }
     * })
     * 
     */
    create<T extends AttachmentCreateArgs>(args: SelectSubset<T, AttachmentCreateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attachments.
     * @param {AttachmentCreateManyArgs} args - Arguments to create many Attachments.
     * @example
     * // Create many Attachments
     * const attachment = await prisma.attachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttachmentCreateManyArgs>(args?: SelectSubset<T, AttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attachments and returns the data saved in the database.
     * @param {AttachmentCreateManyAndReturnArgs} args - Arguments to create many Attachments.
     * @example
     * // Create many Attachments
     * const attachment = await prisma.attachment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attachments and only return the `id`
     * const attachmentWithIdOnly = await prisma.attachment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttachmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AttachmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Attachment.
     * @param {AttachmentDeleteArgs} args - Arguments to delete one Attachment.
     * @example
     * // Delete one Attachment
     * const Attachment = await prisma.attachment.delete({
     *   where: {
     *     // ... filter to delete one Attachment
     *   }
     * })
     * 
     */
    delete<T extends AttachmentDeleteArgs>(args: SelectSubset<T, AttachmentDeleteArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attachment.
     * @param {AttachmentUpdateArgs} args - Arguments to update one Attachment.
     * @example
     * // Update one Attachment
     * const attachment = await prisma.attachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttachmentUpdateArgs>(args: SelectSubset<T, AttachmentUpdateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attachments.
     * @param {AttachmentDeleteManyArgs} args - Arguments to filter Attachments to delete.
     * @example
     * // Delete a few Attachments
     * const { count } = await prisma.attachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttachmentDeleteManyArgs>(args?: SelectSubset<T, AttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attachments
     * const attachment = await prisma.attachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttachmentUpdateManyArgs>(args: SelectSubset<T, AttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attachments and returns the data updated in the database.
     * @param {AttachmentUpdateManyAndReturnArgs} args - Arguments to update many Attachments.
     * @example
     * // Update many Attachments
     * const attachment = await prisma.attachment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Attachments and only return the `id`
     * const attachmentWithIdOnly = await prisma.attachment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttachmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AttachmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Attachment.
     * @param {AttachmentUpsertArgs} args - Arguments to update or create a Attachment.
     * @example
     * // Update or create a Attachment
     * const attachment = await prisma.attachment.upsert({
     *   create: {
     *     // ... data to create a Attachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attachment we want to update
     *   }
     * })
     */
    upsert<T extends AttachmentUpsertArgs>(args: SelectSubset<T, AttachmentUpsertArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentCountArgs} args - Arguments to filter Attachments to count.
     * @example
     * // Count the number of Attachments
     * const count = await prisma.attachment.count({
     *   where: {
     *     // ... the filter for the Attachments we want to count
     *   }
     * })
    **/
    count<T extends AttachmentCountArgs>(
      args?: Subset<T, AttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttachmentAggregateArgs>(args: Subset<T, AttachmentAggregateArgs>): Prisma.PrismaPromise<GetAttachmentAggregateType<T>>

    /**
     * Group by Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttachmentGroupByArgs['orderBy'] }
        : { orderBy?: AttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attachment model
   */
  readonly fields: AttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    complaint<T extends ComplaintDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComplaintDefaultArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attachment model
   */
  interface AttachmentFieldRefs {
    readonly id: FieldRef<"Attachment", 'String'>
    readonly fileName: FieldRef<"Attachment", 'String'>
    readonly fileUrl: FieldRef<"Attachment", 'String'>
    readonly fileType: FieldRef<"Attachment", 'String'>
    readonly complaintId: FieldRef<"Attachment", 'String'>
    readonly uploadedAt: FieldRef<"Attachment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Attachment findUnique
   */
  export type AttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findUniqueOrThrow
   */
  export type AttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findFirst
   */
  export type AttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findFirstOrThrow
   */
  export type AttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findMany
   */
  export type AttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachments to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment create
   */
  export type AttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Attachment.
     */
    data: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
  }

  /**
   * Attachment createMany
   */
  export type AttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attachments.
     */
    data: AttachmentCreateManyInput | AttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attachment createManyAndReturn
   */
  export type AttachmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * The data used to create many Attachments.
     */
    data: AttachmentCreateManyInput | AttachmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attachment update
   */
  export type AttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Attachment.
     */
    data: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
    /**
     * Choose, which Attachment to update.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment updateMany
   */
  export type AttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attachments.
     */
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyInput>
    /**
     * Filter which Attachments to update
     */
    where?: AttachmentWhereInput
    /**
     * Limit how many Attachments to update.
     */
    limit?: number
  }

  /**
   * Attachment updateManyAndReturn
   */
  export type AttachmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * The data used to update Attachments.
     */
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyInput>
    /**
     * Filter which Attachments to update
     */
    where?: AttachmentWhereInput
    /**
     * Limit how many Attachments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attachment upsert
   */
  export type AttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Attachment to update in case it exists.
     */
    where: AttachmentWhereUniqueInput
    /**
     * In case the Attachment found by the `where` argument doesn't exist, create a new Attachment with this data.
     */
    create: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
    /**
     * In case the Attachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
  }

  /**
   * Attachment delete
   */
  export type AttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter which Attachment to delete.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment deleteMany
   */
  export type AttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachments to delete
     */
    where?: AttachmentWhereInput
    /**
     * Limit how many Attachments to delete.
     */
    limit?: number
  }

  /**
   * Attachment without action
   */
  export type AttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
  }


  /**
   * Model LogEntry
   */

  export type AggregateLogEntry = {
    _count: LogEntryCountAggregateOutputType | null
    _min: LogEntryMinAggregateOutputType | null
    _max: LogEntryMaxAggregateOutputType | null
  }

  export type LogEntryMinAggregateOutputType = {
    id: string | null
    entityType: $Enums.LogEntityType | null
    entityId: string | null
    action: $Enums.LogActionType | null
    subject: string | null
    description: string | null
    status: $Enums.LogStatus | null
    sendEmail: boolean | null
    providerId: string | null
    parkingServiceId: string | null
    bulkServiceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type LogEntryMaxAggregateOutputType = {
    id: string | null
    entityType: $Enums.LogEntityType | null
    entityId: string | null
    action: $Enums.LogActionType | null
    subject: string | null
    description: string | null
    status: $Enums.LogStatus | null
    sendEmail: boolean | null
    providerId: string | null
    parkingServiceId: string | null
    bulkServiceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type LogEntryCountAggregateOutputType = {
    id: number
    entityType: number
    entityId: number
    action: number
    subject: number
    description: number
    status: number
    sendEmail: number
    providerId: number
    parkingServiceId: number
    bulkServiceId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type LogEntryMinAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    action?: true
    subject?: true
    description?: true
    status?: true
    sendEmail?: true
    providerId?: true
    parkingServiceId?: true
    bulkServiceId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type LogEntryMaxAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    action?: true
    subject?: true
    description?: true
    status?: true
    sendEmail?: true
    providerId?: true
    parkingServiceId?: true
    bulkServiceId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type LogEntryCountAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    action?: true
    subject?: true
    description?: true
    status?: true
    sendEmail?: true
    providerId?: true
    parkingServiceId?: true
    bulkServiceId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type LogEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogEntry to aggregate.
     */
    where?: LogEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogEntries to fetch.
     */
    orderBy?: LogEntryOrderByWithRelationInput | LogEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LogEntries
    **/
    _count?: true | LogEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogEntryMaxAggregateInputType
  }

  export type GetLogEntryAggregateType<T extends LogEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateLogEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogEntry[P]>
      : GetScalarType<T[P], AggregateLogEntry[P]>
  }




  export type LogEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogEntryWhereInput
    orderBy?: LogEntryOrderByWithAggregationInput | LogEntryOrderByWithAggregationInput[]
    by: LogEntryScalarFieldEnum[] | LogEntryScalarFieldEnum
    having?: LogEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogEntryCountAggregateInputType | true
    _min?: LogEntryMinAggregateInputType
    _max?: LogEntryMaxAggregateInputType
  }

  export type LogEntryGroupByOutputType = {
    id: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description: string | null
    status: $Enums.LogStatus
    sendEmail: boolean
    providerId: string | null
    parkingServiceId: string | null
    bulkServiceId: string | null
    createdAt: Date
    updatedAt: Date
    createdById: string
    updatedById: string | null
    _count: LogEntryCountAggregateOutputType | null
    _min: LogEntryMinAggregateOutputType | null
    _max: LogEntryMaxAggregateOutputType | null
  }

  type GetLogEntryGroupByPayload<T extends LogEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogEntryGroupByOutputType[P]>
            : GetScalarType<T[P], LogEntryGroupByOutputType[P]>
        }
      >
    >


  export type LogEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    action?: boolean
    subject?: boolean
    description?: boolean
    status?: boolean
    sendEmail?: boolean
    providerId?: boolean
    parkingServiceId?: boolean
    bulkServiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    provider?: boolean | LogEntry$providerArgs<ExtArgs>
    parkingService?: boolean | LogEntry$parkingServiceArgs<ExtArgs>
    bulkService?: boolean | LogEntry$bulkServiceArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | LogEntry$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["logEntry"]>

  export type LogEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    action?: boolean
    subject?: boolean
    description?: boolean
    status?: boolean
    sendEmail?: boolean
    providerId?: boolean
    parkingServiceId?: boolean
    bulkServiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    provider?: boolean | LogEntry$providerArgs<ExtArgs>
    parkingService?: boolean | LogEntry$parkingServiceArgs<ExtArgs>
    bulkService?: boolean | LogEntry$bulkServiceArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | LogEntry$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["logEntry"]>

  export type LogEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    action?: boolean
    subject?: boolean
    description?: boolean
    status?: boolean
    sendEmail?: boolean
    providerId?: boolean
    parkingServiceId?: boolean
    bulkServiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    provider?: boolean | LogEntry$providerArgs<ExtArgs>
    parkingService?: boolean | LogEntry$parkingServiceArgs<ExtArgs>
    bulkService?: boolean | LogEntry$bulkServiceArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | LogEntry$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["logEntry"]>

  export type LogEntrySelectScalar = {
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    action?: boolean
    subject?: boolean
    description?: boolean
    status?: boolean
    sendEmail?: boolean
    providerId?: boolean
    parkingServiceId?: boolean
    bulkServiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type LogEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entityType" | "entityId" | "action" | "subject" | "description" | "status" | "sendEmail" | "providerId" | "parkingServiceId" | "bulkServiceId" | "createdAt" | "updatedAt" | "createdById" | "updatedById", ExtArgs["result"]["logEntry"]>
  export type LogEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | LogEntry$providerArgs<ExtArgs>
    parkingService?: boolean | LogEntry$parkingServiceArgs<ExtArgs>
    bulkService?: boolean | LogEntry$bulkServiceArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | LogEntry$updatedByArgs<ExtArgs>
  }
  export type LogEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | LogEntry$providerArgs<ExtArgs>
    parkingService?: boolean | LogEntry$parkingServiceArgs<ExtArgs>
    bulkService?: boolean | LogEntry$bulkServiceArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | LogEntry$updatedByArgs<ExtArgs>
  }
  export type LogEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | LogEntry$providerArgs<ExtArgs>
    parkingService?: boolean | LogEntry$parkingServiceArgs<ExtArgs>
    bulkService?: boolean | LogEntry$bulkServiceArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | LogEntry$updatedByArgs<ExtArgs>
  }

  export type $LogEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LogEntry"
    objects: {
      provider: Prisma.$ProviderPayload<ExtArgs> | null
      parkingService: Prisma.$ParkingServicePayload<ExtArgs> | null
      bulkService: Prisma.$BulkServicePayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityType: $Enums.LogEntityType
      entityId: string
      action: $Enums.LogActionType
      subject: string
      description: string | null
      status: $Enums.LogStatus
      sendEmail: boolean
      providerId: string | null
      parkingServiceId: string | null
      bulkServiceId: string | null
      createdAt: Date
      updatedAt: Date
      createdById: string
      updatedById: string | null
    }, ExtArgs["result"]["logEntry"]>
    composites: {}
  }

  type LogEntryGetPayload<S extends boolean | null | undefined | LogEntryDefaultArgs> = $Result.GetResult<Prisma.$LogEntryPayload, S>

  type LogEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LogEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LogEntryCountAggregateInputType | true
    }

  export interface LogEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LogEntry'], meta: { name: 'LogEntry' } }
    /**
     * Find zero or one LogEntry that matches the filter.
     * @param {LogEntryFindUniqueArgs} args - Arguments to find a LogEntry
     * @example
     * // Get one LogEntry
     * const logEntry = await prisma.logEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogEntryFindUniqueArgs>(args: SelectSubset<T, LogEntryFindUniqueArgs<ExtArgs>>): Prisma__LogEntryClient<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LogEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LogEntryFindUniqueOrThrowArgs} args - Arguments to find a LogEntry
     * @example
     * // Get one LogEntry
     * const logEntry = await prisma.logEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, LogEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogEntryClient<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LogEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogEntryFindFirstArgs} args - Arguments to find a LogEntry
     * @example
     * // Get one LogEntry
     * const logEntry = await prisma.logEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogEntryFindFirstArgs>(args?: SelectSubset<T, LogEntryFindFirstArgs<ExtArgs>>): Prisma__LogEntryClient<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LogEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogEntryFindFirstOrThrowArgs} args - Arguments to find a LogEntry
     * @example
     * // Get one LogEntry
     * const logEntry = await prisma.logEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, LogEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogEntryClient<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LogEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LogEntries
     * const logEntries = await prisma.logEntry.findMany()
     * 
     * // Get first 10 LogEntries
     * const logEntries = await prisma.logEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logEntryWithIdOnly = await prisma.logEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogEntryFindManyArgs>(args?: SelectSubset<T, LogEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LogEntry.
     * @param {LogEntryCreateArgs} args - Arguments to create a LogEntry.
     * @example
     * // Create one LogEntry
     * const LogEntry = await prisma.logEntry.create({
     *   data: {
     *     // ... data to create a LogEntry
     *   }
     * })
     * 
     */
    create<T extends LogEntryCreateArgs>(args: SelectSubset<T, LogEntryCreateArgs<ExtArgs>>): Prisma__LogEntryClient<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LogEntries.
     * @param {LogEntryCreateManyArgs} args - Arguments to create many LogEntries.
     * @example
     * // Create many LogEntries
     * const logEntry = await prisma.logEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogEntryCreateManyArgs>(args?: SelectSubset<T, LogEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LogEntries and returns the data saved in the database.
     * @param {LogEntryCreateManyAndReturnArgs} args - Arguments to create many LogEntries.
     * @example
     * // Create many LogEntries
     * const logEntry = await prisma.logEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LogEntries and only return the `id`
     * const logEntryWithIdOnly = await prisma.logEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, LogEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LogEntry.
     * @param {LogEntryDeleteArgs} args - Arguments to delete one LogEntry.
     * @example
     * // Delete one LogEntry
     * const LogEntry = await prisma.logEntry.delete({
     *   where: {
     *     // ... filter to delete one LogEntry
     *   }
     * })
     * 
     */
    delete<T extends LogEntryDeleteArgs>(args: SelectSubset<T, LogEntryDeleteArgs<ExtArgs>>): Prisma__LogEntryClient<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LogEntry.
     * @param {LogEntryUpdateArgs} args - Arguments to update one LogEntry.
     * @example
     * // Update one LogEntry
     * const logEntry = await prisma.logEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogEntryUpdateArgs>(args: SelectSubset<T, LogEntryUpdateArgs<ExtArgs>>): Prisma__LogEntryClient<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LogEntries.
     * @param {LogEntryDeleteManyArgs} args - Arguments to filter LogEntries to delete.
     * @example
     * // Delete a few LogEntries
     * const { count } = await prisma.logEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogEntryDeleteManyArgs>(args?: SelectSubset<T, LogEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LogEntries
     * const logEntry = await prisma.logEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogEntryUpdateManyArgs>(args: SelectSubset<T, LogEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogEntries and returns the data updated in the database.
     * @param {LogEntryUpdateManyAndReturnArgs} args - Arguments to update many LogEntries.
     * @example
     * // Update many LogEntries
     * const logEntry = await prisma.logEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LogEntries and only return the `id`
     * const logEntryWithIdOnly = await prisma.logEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LogEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, LogEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LogEntry.
     * @param {LogEntryUpsertArgs} args - Arguments to update or create a LogEntry.
     * @example
     * // Update or create a LogEntry
     * const logEntry = await prisma.logEntry.upsert({
     *   create: {
     *     // ... data to create a LogEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LogEntry we want to update
     *   }
     * })
     */
    upsert<T extends LogEntryUpsertArgs>(args: SelectSubset<T, LogEntryUpsertArgs<ExtArgs>>): Prisma__LogEntryClient<$Result.GetResult<Prisma.$LogEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LogEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogEntryCountArgs} args - Arguments to filter LogEntries to count.
     * @example
     * // Count the number of LogEntries
     * const count = await prisma.logEntry.count({
     *   where: {
     *     // ... the filter for the LogEntries we want to count
     *   }
     * })
    **/
    count<T extends LogEntryCountArgs>(
      args?: Subset<T, LogEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LogEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogEntryAggregateArgs>(args: Subset<T, LogEntryAggregateArgs>): Prisma.PrismaPromise<GetLogEntryAggregateType<T>>

    /**
     * Group by LogEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogEntryGroupByArgs['orderBy'] }
        : { orderBy?: LogEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LogEntry model
   */
  readonly fields: LogEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LogEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    provider<T extends LogEntry$providerArgs<ExtArgs> = {}>(args?: Subset<T, LogEntry$providerArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    parkingService<T extends LogEntry$parkingServiceArgs<ExtArgs> = {}>(args?: Subset<T, LogEntry$parkingServiceArgs<ExtArgs>>): Prisma__ParkingServiceClient<$Result.GetResult<Prisma.$ParkingServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    bulkService<T extends LogEntry$bulkServiceArgs<ExtArgs> = {}>(args?: Subset<T, LogEntry$bulkServiceArgs<ExtArgs>>): Prisma__BulkServiceClient<$Result.GetResult<Prisma.$BulkServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends LogEntry$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, LogEntry$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LogEntry model
   */
  interface LogEntryFieldRefs {
    readonly id: FieldRef<"LogEntry", 'String'>
    readonly entityType: FieldRef<"LogEntry", 'LogEntityType'>
    readonly entityId: FieldRef<"LogEntry", 'String'>
    readonly action: FieldRef<"LogEntry", 'LogActionType'>
    readonly subject: FieldRef<"LogEntry", 'String'>
    readonly description: FieldRef<"LogEntry", 'String'>
    readonly status: FieldRef<"LogEntry", 'LogStatus'>
    readonly sendEmail: FieldRef<"LogEntry", 'Boolean'>
    readonly providerId: FieldRef<"LogEntry", 'String'>
    readonly parkingServiceId: FieldRef<"LogEntry", 'String'>
    readonly bulkServiceId: FieldRef<"LogEntry", 'String'>
    readonly createdAt: FieldRef<"LogEntry", 'DateTime'>
    readonly updatedAt: FieldRef<"LogEntry", 'DateTime'>
    readonly createdById: FieldRef<"LogEntry", 'String'>
    readonly updatedById: FieldRef<"LogEntry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LogEntry findUnique
   */
  export type LogEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    /**
     * Filter, which LogEntry to fetch.
     */
    where: LogEntryWhereUniqueInput
  }

  /**
   * LogEntry findUniqueOrThrow
   */
  export type LogEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    /**
     * Filter, which LogEntry to fetch.
     */
    where: LogEntryWhereUniqueInput
  }

  /**
   * LogEntry findFirst
   */
  export type LogEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    /**
     * Filter, which LogEntry to fetch.
     */
    where?: LogEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogEntries to fetch.
     */
    orderBy?: LogEntryOrderByWithRelationInput | LogEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogEntries.
     */
    cursor?: LogEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogEntries.
     */
    distinct?: LogEntryScalarFieldEnum | LogEntryScalarFieldEnum[]
  }

  /**
   * LogEntry findFirstOrThrow
   */
  export type LogEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    /**
     * Filter, which LogEntry to fetch.
     */
    where?: LogEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogEntries to fetch.
     */
    orderBy?: LogEntryOrderByWithRelationInput | LogEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogEntries.
     */
    cursor?: LogEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogEntries.
     */
    distinct?: LogEntryScalarFieldEnum | LogEntryScalarFieldEnum[]
  }

  /**
   * LogEntry findMany
   */
  export type LogEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    /**
     * Filter, which LogEntries to fetch.
     */
    where?: LogEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogEntries to fetch.
     */
    orderBy?: LogEntryOrderByWithRelationInput | LogEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LogEntries.
     */
    cursor?: LogEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogEntries.
     */
    skip?: number
    distinct?: LogEntryScalarFieldEnum | LogEntryScalarFieldEnum[]
  }

  /**
   * LogEntry create
   */
  export type LogEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a LogEntry.
     */
    data: XOR<LogEntryCreateInput, LogEntryUncheckedCreateInput>
  }

  /**
   * LogEntry createMany
   */
  export type LogEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LogEntries.
     */
    data: LogEntryCreateManyInput | LogEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LogEntry createManyAndReturn
   */
  export type LogEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * The data used to create many LogEntries.
     */
    data: LogEntryCreateManyInput | LogEntryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LogEntry update
   */
  export type LogEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a LogEntry.
     */
    data: XOR<LogEntryUpdateInput, LogEntryUncheckedUpdateInput>
    /**
     * Choose, which LogEntry to update.
     */
    where: LogEntryWhereUniqueInput
  }

  /**
   * LogEntry updateMany
   */
  export type LogEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LogEntries.
     */
    data: XOR<LogEntryUpdateManyMutationInput, LogEntryUncheckedUpdateManyInput>
    /**
     * Filter which LogEntries to update
     */
    where?: LogEntryWhereInput
    /**
     * Limit how many LogEntries to update.
     */
    limit?: number
  }

  /**
   * LogEntry updateManyAndReturn
   */
  export type LogEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * The data used to update LogEntries.
     */
    data: XOR<LogEntryUpdateManyMutationInput, LogEntryUncheckedUpdateManyInput>
    /**
     * Filter which LogEntries to update
     */
    where?: LogEntryWhereInput
    /**
     * Limit how many LogEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LogEntry upsert
   */
  export type LogEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the LogEntry to update in case it exists.
     */
    where: LogEntryWhereUniqueInput
    /**
     * In case the LogEntry found by the `where` argument doesn't exist, create a new LogEntry with this data.
     */
    create: XOR<LogEntryCreateInput, LogEntryUncheckedCreateInput>
    /**
     * In case the LogEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogEntryUpdateInput, LogEntryUncheckedUpdateInput>
  }

  /**
   * LogEntry delete
   */
  export type LogEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
    /**
     * Filter which LogEntry to delete.
     */
    where: LogEntryWhereUniqueInput
  }

  /**
   * LogEntry deleteMany
   */
  export type LogEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogEntries to delete
     */
    where?: LogEntryWhereInput
    /**
     * Limit how many LogEntries to delete.
     */
    limit?: number
  }

  /**
   * LogEntry.provider
   */
  export type LogEntry$providerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    where?: ProviderWhereInput
  }

  /**
   * LogEntry.parkingService
   */
  export type LogEntry$parkingServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingService
     */
    select?: ParkingServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParkingService
     */
    omit?: ParkingServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParkingServiceInclude<ExtArgs> | null
    where?: ParkingServiceWhereInput
  }

  /**
   * LogEntry.bulkService
   */
  export type LogEntry$bulkServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BulkService
     */
    select?: BulkServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BulkService
     */
    omit?: BulkServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BulkServiceInclude<ExtArgs> | null
    where?: BulkServiceWhereInput
  }

  /**
   * LogEntry.updatedBy
   */
  export type LogEntry$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * LogEntry without action
   */
  export type LogEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogEntry
     */
    select?: LogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogEntry
     */
    omit?: LogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogEntryInclude<ExtArgs> | null
  }


  /**
   * Model ActivityLog
   */

  export type AggregateActivityLog = {
    _count: ActivityLogCountAggregateOutputType | null
    _min: ActivityLogMinAggregateOutputType | null
    _max: ActivityLogMaxAggregateOutputType | null
  }

  export type ActivityLogMinAggregateOutputType = {
    id: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    details: string | null
    severity: $Enums.LogSeverity | null
    userId: string | null
    createdAt: Date | null
  }

  export type ActivityLogMaxAggregateOutputType = {
    id: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    details: string | null
    severity: $Enums.LogSeverity | null
    userId: string | null
    createdAt: Date | null
  }

  export type ActivityLogCountAggregateOutputType = {
    id: number
    action: number
    entityType: number
    entityId: number
    details: number
    severity: number
    userId: number
    createdAt: number
    _all: number
  }


  export type ActivityLogMinAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    details?: true
    severity?: true
    userId?: true
    createdAt?: true
  }

  export type ActivityLogMaxAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    details?: true
    severity?: true
    userId?: true
    createdAt?: true
  }

  export type ActivityLogCountAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    details?: true
    severity?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type ActivityLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLog to aggregate.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityLogs
    **/
    _count?: true | ActivityLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityLogMaxAggregateInputType
  }

  export type GetActivityLogAggregateType<T extends ActivityLogAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityLog[P]>
      : GetScalarType<T[P], AggregateActivityLog[P]>
  }




  export type ActivityLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithAggregationInput | ActivityLogOrderByWithAggregationInput[]
    by: ActivityLogScalarFieldEnum[] | ActivityLogScalarFieldEnum
    having?: ActivityLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityLogCountAggregateInputType | true
    _min?: ActivityLogMinAggregateInputType
    _max?: ActivityLogMaxAggregateInputType
  }

  export type ActivityLogGroupByOutputType = {
    id: string
    action: string
    entityType: string
    entityId: string | null
    details: string | null
    severity: $Enums.LogSeverity
    userId: string
    createdAt: Date
    _count: ActivityLogCountAggregateOutputType | null
    _min: ActivityLogMinAggregateOutputType | null
    _max: ActivityLogMaxAggregateOutputType | null
  }

  type GetActivityLogGroupByPayload<T extends ActivityLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityLogGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityLogGroupByOutputType[P]>
        }
      >
    >


  export type ActivityLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    details?: boolean
    severity?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    details?: boolean
    severity?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    details?: boolean
    severity?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectScalar = {
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    details?: boolean
    severity?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type ActivityLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "entityType" | "entityId" | "details" | "severity" | "userId" | "createdAt", ExtArgs["result"]["activityLog"]>
  export type ActivityLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ActivityLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ActivityLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ActivityLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      entityType: string
      entityId: string | null
      details: string | null
      severity: $Enums.LogSeverity
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["activityLog"]>
    composites: {}
  }

  type ActivityLogGetPayload<S extends boolean | null | undefined | ActivityLogDefaultArgs> = $Result.GetResult<Prisma.$ActivityLogPayload, S>

  type ActivityLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityLogCountAggregateInputType | true
    }

  export interface ActivityLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityLog'], meta: { name: 'ActivityLog' } }
    /**
     * Find zero or one ActivityLog that matches the filter.
     * @param {ActivityLogFindUniqueArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityLogFindUniqueArgs>(args: SelectSubset<T, ActivityLogFindUniqueArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityLogFindUniqueOrThrowArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindFirstArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityLogFindFirstArgs>(args?: SelectSubset<T, ActivityLogFindFirstArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindFirstOrThrowArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityLogs
     * const activityLogs = await prisma.activityLog.findMany()
     * 
     * // Get first 10 ActivityLogs
     * const activityLogs = await prisma.activityLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityLogFindManyArgs>(args?: SelectSubset<T, ActivityLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityLog.
     * @param {ActivityLogCreateArgs} args - Arguments to create a ActivityLog.
     * @example
     * // Create one ActivityLog
     * const ActivityLog = await prisma.activityLog.create({
     *   data: {
     *     // ... data to create a ActivityLog
     *   }
     * })
     * 
     */
    create<T extends ActivityLogCreateArgs>(args: SelectSubset<T, ActivityLogCreateArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityLogs.
     * @param {ActivityLogCreateManyArgs} args - Arguments to create many ActivityLogs.
     * @example
     * // Create many ActivityLogs
     * const activityLog = await prisma.activityLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityLogCreateManyArgs>(args?: SelectSubset<T, ActivityLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityLogs and returns the data saved in the database.
     * @param {ActivityLogCreateManyAndReturnArgs} args - Arguments to create many ActivityLogs.
     * @example
     * // Create many ActivityLogs
     * const activityLog = await prisma.activityLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityLogs and only return the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityLog.
     * @param {ActivityLogDeleteArgs} args - Arguments to delete one ActivityLog.
     * @example
     * // Delete one ActivityLog
     * const ActivityLog = await prisma.activityLog.delete({
     *   where: {
     *     // ... filter to delete one ActivityLog
     *   }
     * })
     * 
     */
    delete<T extends ActivityLogDeleteArgs>(args: SelectSubset<T, ActivityLogDeleteArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityLog.
     * @param {ActivityLogUpdateArgs} args - Arguments to update one ActivityLog.
     * @example
     * // Update one ActivityLog
     * const activityLog = await prisma.activityLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityLogUpdateArgs>(args: SelectSubset<T, ActivityLogUpdateArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityLogs.
     * @param {ActivityLogDeleteManyArgs} args - Arguments to filter ActivityLogs to delete.
     * @example
     * // Delete a few ActivityLogs
     * const { count } = await prisma.activityLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityLogDeleteManyArgs>(args?: SelectSubset<T, ActivityLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityLogs
     * const activityLog = await prisma.activityLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityLogUpdateManyArgs>(args: SelectSubset<T, ActivityLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLogs and returns the data updated in the database.
     * @param {ActivityLogUpdateManyAndReturnArgs} args - Arguments to update many ActivityLogs.
     * @example
     * // Update many ActivityLogs
     * const activityLog = await prisma.activityLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityLogs and only return the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityLog.
     * @param {ActivityLogUpsertArgs} args - Arguments to update or create a ActivityLog.
     * @example
     * // Update or create a ActivityLog
     * const activityLog = await prisma.activityLog.upsert({
     *   create: {
     *     // ... data to create a ActivityLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityLog we want to update
     *   }
     * })
     */
    upsert<T extends ActivityLogUpsertArgs>(args: SelectSubset<T, ActivityLogUpsertArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogCountArgs} args - Arguments to filter ActivityLogs to count.
     * @example
     * // Count the number of ActivityLogs
     * const count = await prisma.activityLog.count({
     *   where: {
     *     // ... the filter for the ActivityLogs we want to count
     *   }
     * })
    **/
    count<T extends ActivityLogCountArgs>(
      args?: Subset<T, ActivityLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityLogAggregateArgs>(args: Subset<T, ActivityLogAggregateArgs>): Prisma.PrismaPromise<GetActivityLogAggregateType<T>>

    /**
     * Group by ActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityLogGroupByArgs['orderBy'] }
        : { orderBy?: ActivityLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityLog model
   */
  readonly fields: ActivityLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityLog model
   */
  interface ActivityLogFieldRefs {
    readonly id: FieldRef<"ActivityLog", 'String'>
    readonly action: FieldRef<"ActivityLog", 'String'>
    readonly entityType: FieldRef<"ActivityLog", 'String'>
    readonly entityId: FieldRef<"ActivityLog", 'String'>
    readonly details: FieldRef<"ActivityLog", 'String'>
    readonly severity: FieldRef<"ActivityLog", 'LogSeverity'>
    readonly userId: FieldRef<"ActivityLog", 'String'>
    readonly createdAt: FieldRef<"ActivityLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActivityLog findUnique
   */
  export type ActivityLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog findUniqueOrThrow
   */
  export type ActivityLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog findFirst
   */
  export type ActivityLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLogs.
     */
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog findFirstOrThrow
   */
  export type ActivityLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLogs.
     */
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog findMany
   */
  export type ActivityLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLogs to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog create
   */
  export type ActivityLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityLog.
     */
    data: XOR<ActivityLogCreateInput, ActivityLogUncheckedCreateInput>
  }

  /**
   * ActivityLog createMany
   */
  export type ActivityLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityLogs.
     */
    data: ActivityLogCreateManyInput | ActivityLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityLog createManyAndReturn
   */
  export type ActivityLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityLogs.
     */
    data: ActivityLogCreateManyInput | ActivityLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityLog update
   */
  export type ActivityLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityLog.
     */
    data: XOR<ActivityLogUpdateInput, ActivityLogUncheckedUpdateInput>
    /**
     * Choose, which ActivityLog to update.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog updateMany
   */
  export type ActivityLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityLogs.
     */
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLogs to update
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to update.
     */
    limit?: number
  }

  /**
   * ActivityLog updateManyAndReturn
   */
  export type ActivityLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * The data used to update ActivityLogs.
     */
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLogs to update
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityLog upsert
   */
  export type ActivityLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityLog to update in case it exists.
     */
    where: ActivityLogWhereUniqueInput
    /**
     * In case the ActivityLog found by the `where` argument doesn't exist, create a new ActivityLog with this data.
     */
    create: XOR<ActivityLogCreateInput, ActivityLogUncheckedCreateInput>
    /**
     * In case the ActivityLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityLogUpdateInput, ActivityLogUncheckedUpdateInput>
  }

  /**
   * ActivityLog delete
   */
  export type ActivityLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter which ActivityLog to delete.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog deleteMany
   */
  export type ActivityLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLogs to delete
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to delete.
     */
    limit?: number
  }

  /**
   * ActivityLog without action
   */
  export type ActivityLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    userId: string | null
    entityType: string | null
    entityId: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    userId: string | null
    entityType: string | null
    entityId: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    title: number
    message: number
    type: number
    isRead: number
    userId: number
    entityType: number
    entityId: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    userId?: true
    entityType?: true
    entityId?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    userId?: true
    entityType?: true
    entityId?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    userId?: true
    entityType?: true
    entityId?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead: boolean
    userId: string
    entityType: string | null
    entityId: string | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    userId?: boolean
    entityType?: boolean
    entityId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    userId?: boolean
    entityType?: boolean
    entityId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    userId?: boolean
    entityType?: boolean
    entityId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    userId?: boolean
    entityType?: boolean
    entityId?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "message" | "type" | "isRead" | "userId" | "entityType" | "entityId" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      message: string
      type: $Enums.NotificationType
      isRead: boolean
      userId: string
      entityType: string | null
      entityId: string | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly entityType: FieldRef<"Notification", 'String'>
    readonly entityId: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model ScheduledReport
   */

  export type AggregateScheduledReport = {
    _count: ScheduledReportCountAggregateOutputType | null
    _min: ScheduledReportMinAggregateOutputType | null
    _max: ScheduledReportMaxAggregateOutputType | null
  }

  export type ScheduledReportMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    reportType: string | null
    frequency: $Enums.ReportFrequency | null
    lastRun: Date | null
    nextRun: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduledReportMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    reportType: string | null
    frequency: $Enums.ReportFrequency | null
    lastRun: Date | null
    nextRun: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduledReportCountAggregateOutputType = {
    id: number
    name: number
    description: number
    reportType: number
    frequency: number
    lastRun: number
    nextRun: number
    parameters: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScheduledReportMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    reportType?: true
    frequency?: true
    lastRun?: true
    nextRun?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduledReportMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    reportType?: true
    frequency?: true
    lastRun?: true
    nextRun?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduledReportCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    reportType?: true
    frequency?: true
    lastRun?: true
    nextRun?: true
    parameters?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScheduledReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduledReport to aggregate.
     */
    where?: ScheduledReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledReports to fetch.
     */
    orderBy?: ScheduledReportOrderByWithRelationInput | ScheduledReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduledReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScheduledReports
    **/
    _count?: true | ScheduledReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduledReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduledReportMaxAggregateInputType
  }

  export type GetScheduledReportAggregateType<T extends ScheduledReportAggregateArgs> = {
        [P in keyof T & keyof AggregateScheduledReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScheduledReport[P]>
      : GetScalarType<T[P], AggregateScheduledReport[P]>
  }




  export type ScheduledReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduledReportWhereInput
    orderBy?: ScheduledReportOrderByWithAggregationInput | ScheduledReportOrderByWithAggregationInput[]
    by: ScheduledReportScalarFieldEnum[] | ScheduledReportScalarFieldEnum
    having?: ScheduledReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduledReportCountAggregateInputType | true
    _min?: ScheduledReportMinAggregateInputType
    _max?: ScheduledReportMaxAggregateInputType
  }

  export type ScheduledReportGroupByOutputType = {
    id: string
    name: string
    description: string | null
    reportType: string
    frequency: $Enums.ReportFrequency
    lastRun: Date | null
    nextRun: Date | null
    parameters: JsonValue | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ScheduledReportCountAggregateOutputType | null
    _min: ScheduledReportMinAggregateOutputType | null
    _max: ScheduledReportMaxAggregateOutputType | null
  }

  type GetScheduledReportGroupByPayload<T extends ScheduledReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduledReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduledReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduledReportGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduledReportGroupByOutputType[P]>
        }
      >
    >


  export type ScheduledReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    reportType?: boolean
    frequency?: boolean
    lastRun?: boolean
    nextRun?: boolean
    parameters?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["scheduledReport"]>

  export type ScheduledReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    reportType?: boolean
    frequency?: boolean
    lastRun?: boolean
    nextRun?: boolean
    parameters?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["scheduledReport"]>

  export type ScheduledReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    reportType?: boolean
    frequency?: boolean
    lastRun?: boolean
    nextRun?: boolean
    parameters?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["scheduledReport"]>

  export type ScheduledReportSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    reportType?: boolean
    frequency?: boolean
    lastRun?: boolean
    nextRun?: boolean
    parameters?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScheduledReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "reportType" | "frequency" | "lastRun" | "nextRun" | "parameters" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["scheduledReport"]>

  export type $ScheduledReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScheduledReport"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      reportType: string
      frequency: $Enums.ReportFrequency
      lastRun: Date | null
      nextRun: Date | null
      parameters: Prisma.JsonValue | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scheduledReport"]>
    composites: {}
  }

  type ScheduledReportGetPayload<S extends boolean | null | undefined | ScheduledReportDefaultArgs> = $Result.GetResult<Prisma.$ScheduledReportPayload, S>

  type ScheduledReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScheduledReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScheduledReportCountAggregateInputType | true
    }

  export interface ScheduledReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduledReport'], meta: { name: 'ScheduledReport' } }
    /**
     * Find zero or one ScheduledReport that matches the filter.
     * @param {ScheduledReportFindUniqueArgs} args - Arguments to find a ScheduledReport
     * @example
     * // Get one ScheduledReport
     * const scheduledReport = await prisma.scheduledReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduledReportFindUniqueArgs>(args: SelectSubset<T, ScheduledReportFindUniqueArgs<ExtArgs>>): Prisma__ScheduledReportClient<$Result.GetResult<Prisma.$ScheduledReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScheduledReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScheduledReportFindUniqueOrThrowArgs} args - Arguments to find a ScheduledReport
     * @example
     * // Get one ScheduledReport
     * const scheduledReport = await prisma.scheduledReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduledReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduledReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduledReportClient<$Result.GetResult<Prisma.$ScheduledReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScheduledReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledReportFindFirstArgs} args - Arguments to find a ScheduledReport
     * @example
     * // Get one ScheduledReport
     * const scheduledReport = await prisma.scheduledReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduledReportFindFirstArgs>(args?: SelectSubset<T, ScheduledReportFindFirstArgs<ExtArgs>>): Prisma__ScheduledReportClient<$Result.GetResult<Prisma.$ScheduledReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScheduledReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledReportFindFirstOrThrowArgs} args - Arguments to find a ScheduledReport
     * @example
     * // Get one ScheduledReport
     * const scheduledReport = await prisma.scheduledReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduledReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduledReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduledReportClient<$Result.GetResult<Prisma.$ScheduledReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScheduledReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScheduledReports
     * const scheduledReports = await prisma.scheduledReport.findMany()
     * 
     * // Get first 10 ScheduledReports
     * const scheduledReports = await prisma.scheduledReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduledReportWithIdOnly = await prisma.scheduledReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduledReportFindManyArgs>(args?: SelectSubset<T, ScheduledReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScheduledReport.
     * @param {ScheduledReportCreateArgs} args - Arguments to create a ScheduledReport.
     * @example
     * // Create one ScheduledReport
     * const ScheduledReport = await prisma.scheduledReport.create({
     *   data: {
     *     // ... data to create a ScheduledReport
     *   }
     * })
     * 
     */
    create<T extends ScheduledReportCreateArgs>(args: SelectSubset<T, ScheduledReportCreateArgs<ExtArgs>>): Prisma__ScheduledReportClient<$Result.GetResult<Prisma.$ScheduledReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScheduledReports.
     * @param {ScheduledReportCreateManyArgs} args - Arguments to create many ScheduledReports.
     * @example
     * // Create many ScheduledReports
     * const scheduledReport = await prisma.scheduledReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduledReportCreateManyArgs>(args?: SelectSubset<T, ScheduledReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScheduledReports and returns the data saved in the database.
     * @param {ScheduledReportCreateManyAndReturnArgs} args - Arguments to create many ScheduledReports.
     * @example
     * // Create many ScheduledReports
     * const scheduledReport = await prisma.scheduledReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScheduledReports and only return the `id`
     * const scheduledReportWithIdOnly = await prisma.scheduledReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduledReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduledReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScheduledReport.
     * @param {ScheduledReportDeleteArgs} args - Arguments to delete one ScheduledReport.
     * @example
     * // Delete one ScheduledReport
     * const ScheduledReport = await prisma.scheduledReport.delete({
     *   where: {
     *     // ... filter to delete one ScheduledReport
     *   }
     * })
     * 
     */
    delete<T extends ScheduledReportDeleteArgs>(args: SelectSubset<T, ScheduledReportDeleteArgs<ExtArgs>>): Prisma__ScheduledReportClient<$Result.GetResult<Prisma.$ScheduledReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScheduledReport.
     * @param {ScheduledReportUpdateArgs} args - Arguments to update one ScheduledReport.
     * @example
     * // Update one ScheduledReport
     * const scheduledReport = await prisma.scheduledReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduledReportUpdateArgs>(args: SelectSubset<T, ScheduledReportUpdateArgs<ExtArgs>>): Prisma__ScheduledReportClient<$Result.GetResult<Prisma.$ScheduledReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScheduledReports.
     * @param {ScheduledReportDeleteManyArgs} args - Arguments to filter ScheduledReports to delete.
     * @example
     * // Delete a few ScheduledReports
     * const { count } = await prisma.scheduledReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduledReportDeleteManyArgs>(args?: SelectSubset<T, ScheduledReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduledReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScheduledReports
     * const scheduledReport = await prisma.scheduledReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduledReportUpdateManyArgs>(args: SelectSubset<T, ScheduledReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduledReports and returns the data updated in the database.
     * @param {ScheduledReportUpdateManyAndReturnArgs} args - Arguments to update many ScheduledReports.
     * @example
     * // Update many ScheduledReports
     * const scheduledReport = await prisma.scheduledReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScheduledReports and only return the `id`
     * const scheduledReportWithIdOnly = await prisma.scheduledReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScheduledReportUpdateManyAndReturnArgs>(args: SelectSubset<T, ScheduledReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScheduledReport.
     * @param {ScheduledReportUpsertArgs} args - Arguments to update or create a ScheduledReport.
     * @example
     * // Update or create a ScheduledReport
     * const scheduledReport = await prisma.scheduledReport.upsert({
     *   create: {
     *     // ... data to create a ScheduledReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScheduledReport we want to update
     *   }
     * })
     */
    upsert<T extends ScheduledReportUpsertArgs>(args: SelectSubset<T, ScheduledReportUpsertArgs<ExtArgs>>): Prisma__ScheduledReportClient<$Result.GetResult<Prisma.$ScheduledReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScheduledReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledReportCountArgs} args - Arguments to filter ScheduledReports to count.
     * @example
     * // Count the number of ScheduledReports
     * const count = await prisma.scheduledReport.count({
     *   where: {
     *     // ... the filter for the ScheduledReports we want to count
     *   }
     * })
    **/
    count<T extends ScheduledReportCountArgs>(
      args?: Subset<T, ScheduledReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduledReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScheduledReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduledReportAggregateArgs>(args: Subset<T, ScheduledReportAggregateArgs>): Prisma.PrismaPromise<GetScheduledReportAggregateType<T>>

    /**
     * Group by ScheduledReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduledReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduledReportGroupByArgs['orderBy'] }
        : { orderBy?: ScheduledReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduledReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduledReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScheduledReport model
   */
  readonly fields: ScheduledReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScheduledReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduledReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScheduledReport model
   */
  interface ScheduledReportFieldRefs {
    readonly id: FieldRef<"ScheduledReport", 'String'>
    readonly name: FieldRef<"ScheduledReport", 'String'>
    readonly description: FieldRef<"ScheduledReport", 'String'>
    readonly reportType: FieldRef<"ScheduledReport", 'String'>
    readonly frequency: FieldRef<"ScheduledReport", 'ReportFrequency'>
    readonly lastRun: FieldRef<"ScheduledReport", 'DateTime'>
    readonly nextRun: FieldRef<"ScheduledReport", 'DateTime'>
    readonly parameters: FieldRef<"ScheduledReport", 'Json'>
    readonly isActive: FieldRef<"ScheduledReport", 'Boolean'>
    readonly createdAt: FieldRef<"ScheduledReport", 'DateTime'>
    readonly updatedAt: FieldRef<"ScheduledReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScheduledReport findUnique
   */
  export type ScheduledReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledReport
     */
    select?: ScheduledReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledReport
     */
    omit?: ScheduledReportOmit<ExtArgs> | null
    /**
     * Filter, which ScheduledReport to fetch.
     */
    where: ScheduledReportWhereUniqueInput
  }

  /**
   * ScheduledReport findUniqueOrThrow
   */
  export type ScheduledReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledReport
     */
    select?: ScheduledReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledReport
     */
    omit?: ScheduledReportOmit<ExtArgs> | null
    /**
     * Filter, which ScheduledReport to fetch.
     */
    where: ScheduledReportWhereUniqueInput
  }

  /**
   * ScheduledReport findFirst
   */
  export type ScheduledReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledReport
     */
    select?: ScheduledReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledReport
     */
    omit?: ScheduledReportOmit<ExtArgs> | null
    /**
     * Filter, which ScheduledReport to fetch.
     */
    where?: ScheduledReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledReports to fetch.
     */
    orderBy?: ScheduledReportOrderByWithRelationInput | ScheduledReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduledReports.
     */
    cursor?: ScheduledReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduledReports.
     */
    distinct?: ScheduledReportScalarFieldEnum | ScheduledReportScalarFieldEnum[]
  }

  /**
   * ScheduledReport findFirstOrThrow
   */
  export type ScheduledReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledReport
     */
    select?: ScheduledReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledReport
     */
    omit?: ScheduledReportOmit<ExtArgs> | null
    /**
     * Filter, which ScheduledReport to fetch.
     */
    where?: ScheduledReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledReports to fetch.
     */
    orderBy?: ScheduledReportOrderByWithRelationInput | ScheduledReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduledReports.
     */
    cursor?: ScheduledReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduledReports.
     */
    distinct?: ScheduledReportScalarFieldEnum | ScheduledReportScalarFieldEnum[]
  }

  /**
   * ScheduledReport findMany
   */
  export type ScheduledReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledReport
     */
    select?: ScheduledReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledReport
     */
    omit?: ScheduledReportOmit<ExtArgs> | null
    /**
     * Filter, which ScheduledReports to fetch.
     */
    where?: ScheduledReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledReports to fetch.
     */
    orderBy?: ScheduledReportOrderByWithRelationInput | ScheduledReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScheduledReports.
     */
    cursor?: ScheduledReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledReports.
     */
    skip?: number
    distinct?: ScheduledReportScalarFieldEnum | ScheduledReportScalarFieldEnum[]
  }

  /**
   * ScheduledReport create
   */
  export type ScheduledReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledReport
     */
    select?: ScheduledReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledReport
     */
    omit?: ScheduledReportOmit<ExtArgs> | null
    /**
     * The data needed to create a ScheduledReport.
     */
    data: XOR<ScheduledReportCreateInput, ScheduledReportUncheckedCreateInput>
  }

  /**
   * ScheduledReport createMany
   */
  export type ScheduledReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScheduledReports.
     */
    data: ScheduledReportCreateManyInput | ScheduledReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScheduledReport createManyAndReturn
   */
  export type ScheduledReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledReport
     */
    select?: ScheduledReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledReport
     */
    omit?: ScheduledReportOmit<ExtArgs> | null
    /**
     * The data used to create many ScheduledReports.
     */
    data: ScheduledReportCreateManyInput | ScheduledReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScheduledReport update
   */
  export type ScheduledReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledReport
     */
    select?: ScheduledReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledReport
     */
    omit?: ScheduledReportOmit<ExtArgs> | null
    /**
     * The data needed to update a ScheduledReport.
     */
    data: XOR<ScheduledReportUpdateInput, ScheduledReportUncheckedUpdateInput>
    /**
     * Choose, which ScheduledReport to update.
     */
    where: ScheduledReportWhereUniqueInput
  }

  /**
   * ScheduledReport updateMany
   */
  export type ScheduledReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScheduledReports.
     */
    data: XOR<ScheduledReportUpdateManyMutationInput, ScheduledReportUncheckedUpdateManyInput>
    /**
     * Filter which ScheduledReports to update
     */
    where?: ScheduledReportWhereInput
    /**
     * Limit how many ScheduledReports to update.
     */
    limit?: number
  }

  /**
   * ScheduledReport updateManyAndReturn
   */
  export type ScheduledReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledReport
     */
    select?: ScheduledReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledReport
     */
    omit?: ScheduledReportOmit<ExtArgs> | null
    /**
     * The data used to update ScheduledReports.
     */
    data: XOR<ScheduledReportUpdateManyMutationInput, ScheduledReportUncheckedUpdateManyInput>
    /**
     * Filter which ScheduledReports to update
     */
    where?: ScheduledReportWhereInput
    /**
     * Limit how many ScheduledReports to update.
     */
    limit?: number
  }

  /**
   * ScheduledReport upsert
   */
  export type ScheduledReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledReport
     */
    select?: ScheduledReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledReport
     */
    omit?: ScheduledReportOmit<ExtArgs> | null
    /**
     * The filter to search for the ScheduledReport to update in case it exists.
     */
    where: ScheduledReportWhereUniqueInput
    /**
     * In case the ScheduledReport found by the `where` argument doesn't exist, create a new ScheduledReport with this data.
     */
    create: XOR<ScheduledReportCreateInput, ScheduledReportUncheckedCreateInput>
    /**
     * In case the ScheduledReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduledReportUpdateInput, ScheduledReportUncheckedUpdateInput>
  }

  /**
   * ScheduledReport delete
   */
  export type ScheduledReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledReport
     */
    select?: ScheduledReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledReport
     */
    omit?: ScheduledReportOmit<ExtArgs> | null
    /**
     * Filter which ScheduledReport to delete.
     */
    where: ScheduledReportWhereUniqueInput
  }

  /**
   * ScheduledReport deleteMany
   */
  export type ScheduledReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduledReports to delete
     */
    where?: ScheduledReportWhereInput
    /**
     * Limit how many ScheduledReports to delete.
     */
    limit?: number
  }

  /**
   * ScheduledReport without action
   */
  export type ScheduledReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledReport
     */
    select?: ScheduledReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledReport
     */
    omit?: ScheduledReportOmit<ExtArgs> | null
  }


  /**
   * Model GeneratedReport
   */

  export type AggregateGeneratedReport = {
    _count: GeneratedReportCountAggregateOutputType | null
    _min: GeneratedReportMinAggregateOutputType | null
    _max: GeneratedReportMaxAggregateOutputType | null
  }

  export type GeneratedReportMinAggregateOutputType = {
    id: string | null
    name: string | null
    reportType: string | null
    fileUrl: string | null
    generatedAt: Date | null
    scheduledReportId: string | null
  }

  export type GeneratedReportMaxAggregateOutputType = {
    id: string | null
    name: string | null
    reportType: string | null
    fileUrl: string | null
    generatedAt: Date | null
    scheduledReportId: string | null
  }

  export type GeneratedReportCountAggregateOutputType = {
    id: number
    name: number
    reportType: number
    fileUrl: number
    generatedAt: number
    scheduledReportId: number
    _all: number
  }


  export type GeneratedReportMinAggregateInputType = {
    id?: true
    name?: true
    reportType?: true
    fileUrl?: true
    generatedAt?: true
    scheduledReportId?: true
  }

  export type GeneratedReportMaxAggregateInputType = {
    id?: true
    name?: true
    reportType?: true
    fileUrl?: true
    generatedAt?: true
    scheduledReportId?: true
  }

  export type GeneratedReportCountAggregateInputType = {
    id?: true
    name?: true
    reportType?: true
    fileUrl?: true
    generatedAt?: true
    scheduledReportId?: true
    _all?: true
  }

  export type GeneratedReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedReport to aggregate.
     */
    where?: GeneratedReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedReports to fetch.
     */
    orderBy?: GeneratedReportOrderByWithRelationInput | GeneratedReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneratedReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneratedReports
    **/
    _count?: true | GeneratedReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneratedReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneratedReportMaxAggregateInputType
  }

  export type GetGeneratedReportAggregateType<T extends GeneratedReportAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneratedReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneratedReport[P]>
      : GetScalarType<T[P], AggregateGeneratedReport[P]>
  }




  export type GeneratedReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneratedReportWhereInput
    orderBy?: GeneratedReportOrderByWithAggregationInput | GeneratedReportOrderByWithAggregationInput[]
    by: GeneratedReportScalarFieldEnum[] | GeneratedReportScalarFieldEnum
    having?: GeneratedReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneratedReportCountAggregateInputType | true
    _min?: GeneratedReportMinAggregateInputType
    _max?: GeneratedReportMaxAggregateInputType
  }

  export type GeneratedReportGroupByOutputType = {
    id: string
    name: string
    reportType: string
    fileUrl: string
    generatedAt: Date
    scheduledReportId: string | null
    _count: GeneratedReportCountAggregateOutputType | null
    _min: GeneratedReportMinAggregateOutputType | null
    _max: GeneratedReportMaxAggregateOutputType | null
  }

  type GetGeneratedReportGroupByPayload<T extends GeneratedReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneratedReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneratedReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneratedReportGroupByOutputType[P]>
            : GetScalarType<T[P], GeneratedReportGroupByOutputType[P]>
        }
      >
    >


  export type GeneratedReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    reportType?: boolean
    fileUrl?: boolean
    generatedAt?: boolean
    scheduledReportId?: boolean
  }, ExtArgs["result"]["generatedReport"]>

  export type GeneratedReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    reportType?: boolean
    fileUrl?: boolean
    generatedAt?: boolean
    scheduledReportId?: boolean
  }, ExtArgs["result"]["generatedReport"]>

  export type GeneratedReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    reportType?: boolean
    fileUrl?: boolean
    generatedAt?: boolean
    scheduledReportId?: boolean
  }, ExtArgs["result"]["generatedReport"]>

  export type GeneratedReportSelectScalar = {
    id?: boolean
    name?: boolean
    reportType?: boolean
    fileUrl?: boolean
    generatedAt?: boolean
    scheduledReportId?: boolean
  }

  export type GeneratedReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "reportType" | "fileUrl" | "generatedAt" | "scheduledReportId", ExtArgs["result"]["generatedReport"]>

  export type $GeneratedReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneratedReport"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      reportType: string
      fileUrl: string
      generatedAt: Date
      scheduledReportId: string | null
    }, ExtArgs["result"]["generatedReport"]>
    composites: {}
  }

  type GeneratedReportGetPayload<S extends boolean | null | undefined | GeneratedReportDefaultArgs> = $Result.GetResult<Prisma.$GeneratedReportPayload, S>

  type GeneratedReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GeneratedReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GeneratedReportCountAggregateInputType | true
    }

  export interface GeneratedReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneratedReport'], meta: { name: 'GeneratedReport' } }
    /**
     * Find zero or one GeneratedReport that matches the filter.
     * @param {GeneratedReportFindUniqueArgs} args - Arguments to find a GeneratedReport
     * @example
     * // Get one GeneratedReport
     * const generatedReport = await prisma.generatedReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeneratedReportFindUniqueArgs>(args: SelectSubset<T, GeneratedReportFindUniqueArgs<ExtArgs>>): Prisma__GeneratedReportClient<$Result.GetResult<Prisma.$GeneratedReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GeneratedReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GeneratedReportFindUniqueOrThrowArgs} args - Arguments to find a GeneratedReport
     * @example
     * // Get one GeneratedReport
     * const generatedReport = await prisma.generatedReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeneratedReportFindUniqueOrThrowArgs>(args: SelectSubset<T, GeneratedReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeneratedReportClient<$Result.GetResult<Prisma.$GeneratedReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneratedReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedReportFindFirstArgs} args - Arguments to find a GeneratedReport
     * @example
     * // Get one GeneratedReport
     * const generatedReport = await prisma.generatedReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeneratedReportFindFirstArgs>(args?: SelectSubset<T, GeneratedReportFindFirstArgs<ExtArgs>>): Prisma__GeneratedReportClient<$Result.GetResult<Prisma.$GeneratedReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneratedReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedReportFindFirstOrThrowArgs} args - Arguments to find a GeneratedReport
     * @example
     * // Get one GeneratedReport
     * const generatedReport = await prisma.generatedReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeneratedReportFindFirstOrThrowArgs>(args?: SelectSubset<T, GeneratedReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeneratedReportClient<$Result.GetResult<Prisma.$GeneratedReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GeneratedReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneratedReports
     * const generatedReports = await prisma.generatedReport.findMany()
     * 
     * // Get first 10 GeneratedReports
     * const generatedReports = await prisma.generatedReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generatedReportWithIdOnly = await prisma.generatedReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GeneratedReportFindManyArgs>(args?: SelectSubset<T, GeneratedReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GeneratedReport.
     * @param {GeneratedReportCreateArgs} args - Arguments to create a GeneratedReport.
     * @example
     * // Create one GeneratedReport
     * const GeneratedReport = await prisma.generatedReport.create({
     *   data: {
     *     // ... data to create a GeneratedReport
     *   }
     * })
     * 
     */
    create<T extends GeneratedReportCreateArgs>(args: SelectSubset<T, GeneratedReportCreateArgs<ExtArgs>>): Prisma__GeneratedReportClient<$Result.GetResult<Prisma.$GeneratedReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GeneratedReports.
     * @param {GeneratedReportCreateManyArgs} args - Arguments to create many GeneratedReports.
     * @example
     * // Create many GeneratedReports
     * const generatedReport = await prisma.generatedReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeneratedReportCreateManyArgs>(args?: SelectSubset<T, GeneratedReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GeneratedReports and returns the data saved in the database.
     * @param {GeneratedReportCreateManyAndReturnArgs} args - Arguments to create many GeneratedReports.
     * @example
     * // Create many GeneratedReports
     * const generatedReport = await prisma.generatedReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GeneratedReports and only return the `id`
     * const generatedReportWithIdOnly = await prisma.generatedReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GeneratedReportCreateManyAndReturnArgs>(args?: SelectSubset<T, GeneratedReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GeneratedReport.
     * @param {GeneratedReportDeleteArgs} args - Arguments to delete one GeneratedReport.
     * @example
     * // Delete one GeneratedReport
     * const GeneratedReport = await prisma.generatedReport.delete({
     *   where: {
     *     // ... filter to delete one GeneratedReport
     *   }
     * })
     * 
     */
    delete<T extends GeneratedReportDeleteArgs>(args: SelectSubset<T, GeneratedReportDeleteArgs<ExtArgs>>): Prisma__GeneratedReportClient<$Result.GetResult<Prisma.$GeneratedReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GeneratedReport.
     * @param {GeneratedReportUpdateArgs} args - Arguments to update one GeneratedReport.
     * @example
     * // Update one GeneratedReport
     * const generatedReport = await prisma.generatedReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeneratedReportUpdateArgs>(args: SelectSubset<T, GeneratedReportUpdateArgs<ExtArgs>>): Prisma__GeneratedReportClient<$Result.GetResult<Prisma.$GeneratedReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GeneratedReports.
     * @param {GeneratedReportDeleteManyArgs} args - Arguments to filter GeneratedReports to delete.
     * @example
     * // Delete a few GeneratedReports
     * const { count } = await prisma.generatedReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeneratedReportDeleteManyArgs>(args?: SelectSubset<T, GeneratedReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneratedReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneratedReports
     * const generatedReport = await prisma.generatedReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeneratedReportUpdateManyArgs>(args: SelectSubset<T, GeneratedReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneratedReports and returns the data updated in the database.
     * @param {GeneratedReportUpdateManyAndReturnArgs} args - Arguments to update many GeneratedReports.
     * @example
     * // Update many GeneratedReports
     * const generatedReport = await prisma.generatedReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GeneratedReports and only return the `id`
     * const generatedReportWithIdOnly = await prisma.generatedReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GeneratedReportUpdateManyAndReturnArgs>(args: SelectSubset<T, GeneratedReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GeneratedReport.
     * @param {GeneratedReportUpsertArgs} args - Arguments to update or create a GeneratedReport.
     * @example
     * // Update or create a GeneratedReport
     * const generatedReport = await prisma.generatedReport.upsert({
     *   create: {
     *     // ... data to create a GeneratedReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneratedReport we want to update
     *   }
     * })
     */
    upsert<T extends GeneratedReportUpsertArgs>(args: SelectSubset<T, GeneratedReportUpsertArgs<ExtArgs>>): Prisma__GeneratedReportClient<$Result.GetResult<Prisma.$GeneratedReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GeneratedReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedReportCountArgs} args - Arguments to filter GeneratedReports to count.
     * @example
     * // Count the number of GeneratedReports
     * const count = await prisma.generatedReport.count({
     *   where: {
     *     // ... the filter for the GeneratedReports we want to count
     *   }
     * })
    **/
    count<T extends GeneratedReportCountArgs>(
      args?: Subset<T, GeneratedReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneratedReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneratedReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneratedReportAggregateArgs>(args: Subset<T, GeneratedReportAggregateArgs>): Prisma.PrismaPromise<GetGeneratedReportAggregateType<T>>

    /**
     * Group by GeneratedReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneratedReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneratedReportGroupByArgs['orderBy'] }
        : { orderBy?: GeneratedReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneratedReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneratedReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneratedReport model
   */
  readonly fields: GeneratedReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneratedReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneratedReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GeneratedReport model
   */
  interface GeneratedReportFieldRefs {
    readonly id: FieldRef<"GeneratedReport", 'String'>
    readonly name: FieldRef<"GeneratedReport", 'String'>
    readonly reportType: FieldRef<"GeneratedReport", 'String'>
    readonly fileUrl: FieldRef<"GeneratedReport", 'String'>
    readonly generatedAt: FieldRef<"GeneratedReport", 'DateTime'>
    readonly scheduledReportId: FieldRef<"GeneratedReport", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GeneratedReport findUnique
   */
  export type GeneratedReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedReport
     */
    select?: GeneratedReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedReport
     */
    omit?: GeneratedReportOmit<ExtArgs> | null
    /**
     * Filter, which GeneratedReport to fetch.
     */
    where: GeneratedReportWhereUniqueInput
  }

  /**
   * GeneratedReport findUniqueOrThrow
   */
  export type GeneratedReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedReport
     */
    select?: GeneratedReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedReport
     */
    omit?: GeneratedReportOmit<ExtArgs> | null
    /**
     * Filter, which GeneratedReport to fetch.
     */
    where: GeneratedReportWhereUniqueInput
  }

  /**
   * GeneratedReport findFirst
   */
  export type GeneratedReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedReport
     */
    select?: GeneratedReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedReport
     */
    omit?: GeneratedReportOmit<ExtArgs> | null
    /**
     * Filter, which GeneratedReport to fetch.
     */
    where?: GeneratedReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedReports to fetch.
     */
    orderBy?: GeneratedReportOrderByWithRelationInput | GeneratedReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedReports.
     */
    cursor?: GeneratedReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedReports.
     */
    distinct?: GeneratedReportScalarFieldEnum | GeneratedReportScalarFieldEnum[]
  }

  /**
   * GeneratedReport findFirstOrThrow
   */
  export type GeneratedReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedReport
     */
    select?: GeneratedReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedReport
     */
    omit?: GeneratedReportOmit<ExtArgs> | null
    /**
     * Filter, which GeneratedReport to fetch.
     */
    where?: GeneratedReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedReports to fetch.
     */
    orderBy?: GeneratedReportOrderByWithRelationInput | GeneratedReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedReports.
     */
    cursor?: GeneratedReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedReports.
     */
    distinct?: GeneratedReportScalarFieldEnum | GeneratedReportScalarFieldEnum[]
  }

  /**
   * GeneratedReport findMany
   */
  export type GeneratedReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedReport
     */
    select?: GeneratedReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedReport
     */
    omit?: GeneratedReportOmit<ExtArgs> | null
    /**
     * Filter, which GeneratedReports to fetch.
     */
    where?: GeneratedReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedReports to fetch.
     */
    orderBy?: GeneratedReportOrderByWithRelationInput | GeneratedReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneratedReports.
     */
    cursor?: GeneratedReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedReports.
     */
    skip?: number
    distinct?: GeneratedReportScalarFieldEnum | GeneratedReportScalarFieldEnum[]
  }

  /**
   * GeneratedReport create
   */
  export type GeneratedReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedReport
     */
    select?: GeneratedReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedReport
     */
    omit?: GeneratedReportOmit<ExtArgs> | null
    /**
     * The data needed to create a GeneratedReport.
     */
    data: XOR<GeneratedReportCreateInput, GeneratedReportUncheckedCreateInput>
  }

  /**
   * GeneratedReport createMany
   */
  export type GeneratedReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneratedReports.
     */
    data: GeneratedReportCreateManyInput | GeneratedReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeneratedReport createManyAndReturn
   */
  export type GeneratedReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedReport
     */
    select?: GeneratedReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedReport
     */
    omit?: GeneratedReportOmit<ExtArgs> | null
    /**
     * The data used to create many GeneratedReports.
     */
    data: GeneratedReportCreateManyInput | GeneratedReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeneratedReport update
   */
  export type GeneratedReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedReport
     */
    select?: GeneratedReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedReport
     */
    omit?: GeneratedReportOmit<ExtArgs> | null
    /**
     * The data needed to update a GeneratedReport.
     */
    data: XOR<GeneratedReportUpdateInput, GeneratedReportUncheckedUpdateInput>
    /**
     * Choose, which GeneratedReport to update.
     */
    where: GeneratedReportWhereUniqueInput
  }

  /**
   * GeneratedReport updateMany
   */
  export type GeneratedReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneratedReports.
     */
    data: XOR<GeneratedReportUpdateManyMutationInput, GeneratedReportUncheckedUpdateManyInput>
    /**
     * Filter which GeneratedReports to update
     */
    where?: GeneratedReportWhereInput
    /**
     * Limit how many GeneratedReports to update.
     */
    limit?: number
  }

  /**
   * GeneratedReport updateManyAndReturn
   */
  export type GeneratedReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedReport
     */
    select?: GeneratedReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedReport
     */
    omit?: GeneratedReportOmit<ExtArgs> | null
    /**
     * The data used to update GeneratedReports.
     */
    data: XOR<GeneratedReportUpdateManyMutationInput, GeneratedReportUncheckedUpdateManyInput>
    /**
     * Filter which GeneratedReports to update
     */
    where?: GeneratedReportWhereInput
    /**
     * Limit how many GeneratedReports to update.
     */
    limit?: number
  }

  /**
   * GeneratedReport upsert
   */
  export type GeneratedReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedReport
     */
    select?: GeneratedReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedReport
     */
    omit?: GeneratedReportOmit<ExtArgs> | null
    /**
     * The filter to search for the GeneratedReport to update in case it exists.
     */
    where: GeneratedReportWhereUniqueInput
    /**
     * In case the GeneratedReport found by the `where` argument doesn't exist, create a new GeneratedReport with this data.
     */
    create: XOR<GeneratedReportCreateInput, GeneratedReportUncheckedCreateInput>
    /**
     * In case the GeneratedReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneratedReportUpdateInput, GeneratedReportUncheckedUpdateInput>
  }

  /**
   * GeneratedReport delete
   */
  export type GeneratedReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedReport
     */
    select?: GeneratedReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedReport
     */
    omit?: GeneratedReportOmit<ExtArgs> | null
    /**
     * Filter which GeneratedReport to delete.
     */
    where: GeneratedReportWhereUniqueInput
  }

  /**
   * GeneratedReport deleteMany
   */
  export type GeneratedReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedReports to delete
     */
    where?: GeneratedReportWhereInput
    /**
     * Limit how many GeneratedReports to delete.
     */
    limit?: number
  }

  /**
   * GeneratedReport without action
   */
  export type GeneratedReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedReport
     */
    select?: GeneratedReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedReport
     */
    omit?: GeneratedReportOmit<ExtArgs> | null
  }


  /**
   * Model NotificationPreference
   */

  export type AggregateNotificationPreference = {
    _count: NotificationPreferenceCountAggregateOutputType | null
    _min: NotificationPreferenceMinAggregateOutputType | null
    _max: NotificationPreferenceMaxAggregateOutputType | null
  }

  export type NotificationPreferenceMinAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationPreferenceMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationPreferenceCountAggregateOutputType = {
    id: number
    userId: number
    preferences: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationPreferenceMinAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationPreferenceMaxAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationPreferenceCountAggregateInputType = {
    id?: true
    userId?: true
    preferences?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationPreference to aggregate.
     */
    where?: NotificationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPreferences to fetch.
     */
    orderBy?: NotificationPreferenceOrderByWithRelationInput | NotificationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationPreferences
    **/
    _count?: true | NotificationPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationPreferenceMaxAggregateInputType
  }

  export type GetNotificationPreferenceAggregateType<T extends NotificationPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationPreference[P]>
      : GetScalarType<T[P], AggregateNotificationPreference[P]>
  }




  export type NotificationPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationPreferenceWhereInput
    orderBy?: NotificationPreferenceOrderByWithAggregationInput | NotificationPreferenceOrderByWithAggregationInput[]
    by: NotificationPreferenceScalarFieldEnum[] | NotificationPreferenceScalarFieldEnum
    having?: NotificationPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationPreferenceCountAggregateInputType | true
    _min?: NotificationPreferenceMinAggregateInputType
    _max?: NotificationPreferenceMaxAggregateInputType
  }

  export type NotificationPreferenceGroupByOutputType = {
    id: string
    userId: string
    preferences: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: NotificationPreferenceCountAggregateOutputType | null
    _min: NotificationPreferenceMinAggregateOutputType | null
    _max: NotificationPreferenceMaxAggregateOutputType | null
  }

  type GetNotificationPreferenceGroupByPayload<T extends NotificationPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type NotificationPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationPreference"]>

  export type NotificationPreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationPreference"]>

  export type NotificationPreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationPreference"]>

  export type NotificationPreferenceSelectScalar = {
    id?: boolean
    userId?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationPreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "preferences" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationPreference"]>
  export type NotificationPreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationPreferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationPreferenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationPreference"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      preferences: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationPreference"]>
    composites: {}
  }

  type NotificationPreferenceGetPayload<S extends boolean | null | undefined | NotificationPreferenceDefaultArgs> = $Result.GetResult<Prisma.$NotificationPreferencePayload, S>

  type NotificationPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationPreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationPreferenceCountAggregateInputType | true
    }

  export interface NotificationPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationPreference'], meta: { name: 'NotificationPreference' } }
    /**
     * Find zero or one NotificationPreference that matches the filter.
     * @param {NotificationPreferenceFindUniqueArgs} args - Arguments to find a NotificationPreference
     * @example
     * // Get one NotificationPreference
     * const notificationPreference = await prisma.notificationPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationPreferenceFindUniqueArgs>(args: SelectSubset<T, NotificationPreferenceFindUniqueArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationPreference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationPreferenceFindUniqueOrThrowArgs} args - Arguments to find a NotificationPreference
     * @example
     * // Get one NotificationPreference
     * const notificationPreference = await prisma.notificationPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceFindFirstArgs} args - Arguments to find a NotificationPreference
     * @example
     * // Get one NotificationPreference
     * const notificationPreference = await prisma.notificationPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationPreferenceFindFirstArgs>(args?: SelectSubset<T, NotificationPreferenceFindFirstArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceFindFirstOrThrowArgs} args - Arguments to find a NotificationPreference
     * @example
     * // Get one NotificationPreference
     * const notificationPreference = await prisma.notificationPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreference.findMany()
     * 
     * // Get first 10 NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationPreferenceWithIdOnly = await prisma.notificationPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationPreferenceFindManyArgs>(args?: SelectSubset<T, NotificationPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationPreference.
     * @param {NotificationPreferenceCreateArgs} args - Arguments to create a NotificationPreference.
     * @example
     * // Create one NotificationPreference
     * const NotificationPreference = await prisma.notificationPreference.create({
     *   data: {
     *     // ... data to create a NotificationPreference
     *   }
     * })
     * 
     */
    create<T extends NotificationPreferenceCreateArgs>(args: SelectSubset<T, NotificationPreferenceCreateArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationPreferences.
     * @param {NotificationPreferenceCreateManyArgs} args - Arguments to create many NotificationPreferences.
     * @example
     * // Create many NotificationPreferences
     * const notificationPreference = await prisma.notificationPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationPreferenceCreateManyArgs>(args?: SelectSubset<T, NotificationPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationPreferences and returns the data saved in the database.
     * @param {NotificationPreferenceCreateManyAndReturnArgs} args - Arguments to create many NotificationPreferences.
     * @example
     * // Create many NotificationPreferences
     * const notificationPreference = await prisma.notificationPreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationPreferences and only return the `id`
     * const notificationPreferenceWithIdOnly = await prisma.notificationPreference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationPreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationPreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationPreference.
     * @param {NotificationPreferenceDeleteArgs} args - Arguments to delete one NotificationPreference.
     * @example
     * // Delete one NotificationPreference
     * const NotificationPreference = await prisma.notificationPreference.delete({
     *   where: {
     *     // ... filter to delete one NotificationPreference
     *   }
     * })
     * 
     */
    delete<T extends NotificationPreferenceDeleteArgs>(args: SelectSubset<T, NotificationPreferenceDeleteArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationPreference.
     * @param {NotificationPreferenceUpdateArgs} args - Arguments to update one NotificationPreference.
     * @example
     * // Update one NotificationPreference
     * const notificationPreference = await prisma.notificationPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationPreferenceUpdateArgs>(args: SelectSubset<T, NotificationPreferenceUpdateArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationPreferences.
     * @param {NotificationPreferenceDeleteManyArgs} args - Arguments to filter NotificationPreferences to delete.
     * @example
     * // Delete a few NotificationPreferences
     * const { count } = await prisma.notificationPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationPreferenceDeleteManyArgs>(args?: SelectSubset<T, NotificationPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationPreferences
     * const notificationPreference = await prisma.notificationPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationPreferenceUpdateManyArgs>(args: SelectSubset<T, NotificationPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationPreferences and returns the data updated in the database.
     * @param {NotificationPreferenceUpdateManyAndReturnArgs} args - Arguments to update many NotificationPreferences.
     * @example
     * // Update many NotificationPreferences
     * const notificationPreference = await prisma.notificationPreference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationPreferences and only return the `id`
     * const notificationPreferenceWithIdOnly = await prisma.notificationPreference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationPreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationPreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationPreference.
     * @param {NotificationPreferenceUpsertArgs} args - Arguments to update or create a NotificationPreference.
     * @example
     * // Update or create a NotificationPreference
     * const notificationPreference = await prisma.notificationPreference.upsert({
     *   create: {
     *     // ... data to create a NotificationPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationPreference we want to update
     *   }
     * })
     */
    upsert<T extends NotificationPreferenceUpsertArgs>(args: SelectSubset<T, NotificationPreferenceUpsertArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceCountArgs} args - Arguments to filter NotificationPreferences to count.
     * @example
     * // Count the number of NotificationPreferences
     * const count = await prisma.notificationPreference.count({
     *   where: {
     *     // ... the filter for the NotificationPreferences we want to count
     *   }
     * })
    **/
    count<T extends NotificationPreferenceCountArgs>(
      args?: Subset<T, NotificationPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationPreferenceAggregateArgs>(args: Subset<T, NotificationPreferenceAggregateArgs>): Prisma.PrismaPromise<GetNotificationPreferenceAggregateType<T>>

    /**
     * Group by NotificationPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: NotificationPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationPreference model
   */
  readonly fields: NotificationPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationPreference model
   */
  interface NotificationPreferenceFieldRefs {
    readonly id: FieldRef<"NotificationPreference", 'String'>
    readonly userId: FieldRef<"NotificationPreference", 'String'>
    readonly preferences: FieldRef<"NotificationPreference", 'Json'>
    readonly createdAt: FieldRef<"NotificationPreference", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationPreference findUnique
   */
  export type NotificationPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreference to fetch.
     */
    where: NotificationPreferenceWhereUniqueInput
  }

  /**
   * NotificationPreference findUniqueOrThrow
   */
  export type NotificationPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreference to fetch.
     */
    where: NotificationPreferenceWhereUniqueInput
  }

  /**
   * NotificationPreference findFirst
   */
  export type NotificationPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreference to fetch.
     */
    where?: NotificationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPreferences to fetch.
     */
    orderBy?: NotificationPreferenceOrderByWithRelationInput | NotificationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationPreferences.
     */
    cursor?: NotificationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationPreferences.
     */
    distinct?: NotificationPreferenceScalarFieldEnum | NotificationPreferenceScalarFieldEnum[]
  }

  /**
   * NotificationPreference findFirstOrThrow
   */
  export type NotificationPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreference to fetch.
     */
    where?: NotificationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPreferences to fetch.
     */
    orderBy?: NotificationPreferenceOrderByWithRelationInput | NotificationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationPreferences.
     */
    cursor?: NotificationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationPreferences.
     */
    distinct?: NotificationPreferenceScalarFieldEnum | NotificationPreferenceScalarFieldEnum[]
  }

  /**
   * NotificationPreference findMany
   */
  export type NotificationPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreferences to fetch.
     */
    where?: NotificationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPreferences to fetch.
     */
    orderBy?: NotificationPreferenceOrderByWithRelationInput | NotificationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationPreferences.
     */
    cursor?: NotificationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPreferences.
     */
    skip?: number
    distinct?: NotificationPreferenceScalarFieldEnum | NotificationPreferenceScalarFieldEnum[]
  }

  /**
   * NotificationPreference create
   */
  export type NotificationPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationPreference.
     */
    data: XOR<NotificationPreferenceCreateInput, NotificationPreferenceUncheckedCreateInput>
  }

  /**
   * NotificationPreference createMany
   */
  export type NotificationPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationPreferences.
     */
    data: NotificationPreferenceCreateManyInput | NotificationPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationPreference createManyAndReturn
   */
  export type NotificationPreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationPreferences.
     */
    data: NotificationPreferenceCreateManyInput | NotificationPreferenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationPreference update
   */
  export type NotificationPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationPreference.
     */
    data: XOR<NotificationPreferenceUpdateInput, NotificationPreferenceUncheckedUpdateInput>
    /**
     * Choose, which NotificationPreference to update.
     */
    where: NotificationPreferenceWhereUniqueInput
  }

  /**
   * NotificationPreference updateMany
   */
  export type NotificationPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationPreferences.
     */
    data: XOR<NotificationPreferenceUpdateManyMutationInput, NotificationPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which NotificationPreferences to update
     */
    where?: NotificationPreferenceWhereInput
    /**
     * Limit how many NotificationPreferences to update.
     */
    limit?: number
  }

  /**
   * NotificationPreference updateManyAndReturn
   */
  export type NotificationPreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * The data used to update NotificationPreferences.
     */
    data: XOR<NotificationPreferenceUpdateManyMutationInput, NotificationPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which NotificationPreferences to update
     */
    where?: NotificationPreferenceWhereInput
    /**
     * Limit how many NotificationPreferences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationPreference upsert
   */
  export type NotificationPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationPreference to update in case it exists.
     */
    where: NotificationPreferenceWhereUniqueInput
    /**
     * In case the NotificationPreference found by the `where` argument doesn't exist, create a new NotificationPreference with this data.
     */
    create: XOR<NotificationPreferenceCreateInput, NotificationPreferenceUncheckedCreateInput>
    /**
     * In case the NotificationPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationPreferenceUpdateInput, NotificationPreferenceUncheckedUpdateInput>
  }

  /**
   * NotificationPreference delete
   */
  export type NotificationPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter which NotificationPreference to delete.
     */
    where: NotificationPreferenceWhereUniqueInput
  }

  /**
   * NotificationPreference deleteMany
   */
  export type NotificationPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationPreferences to delete
     */
    where?: NotificationPreferenceWhereInput
    /**
     * Limit how many NotificationPreferences to delete.
     */
    limit?: number
  }

  /**
   * NotificationPreference without action
   */
  export type NotificationPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
  }


  /**
   * Model ReportFile
   */

  export type AggregateReportFile = {
    _count: ReportFileCountAggregateOutputType | null
    _avg: ReportFileAvgAggregateOutputType | null
    _sum: ReportFileSumAggregateOutputType | null
    _min: ReportFileMinAggregateOutputType | null
    _max: ReportFileMaxAggregateOutputType | null
  }

  export type ReportFileAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type ReportFileSumAggregateOutputType = {
    fileSize: number | null
  }

  export type ReportFileMinAggregateOutputType = {
    id: string | null
    fileName: string | null
    filePath: string | null
    organizationId: string | null
    startDate: Date | null
    endDate: Date | null
    fileSize: number | null
    mimeType: string | null
    uploadedAt: Date | null
  }

  export type ReportFileMaxAggregateOutputType = {
    id: string | null
    fileName: string | null
    filePath: string | null
    organizationId: string | null
    startDate: Date | null
    endDate: Date | null
    fileSize: number | null
    mimeType: string | null
    uploadedAt: Date | null
  }

  export type ReportFileCountAggregateOutputType = {
    id: number
    fileName: number
    filePath: number
    organizationId: number
    startDate: number
    endDate: number
    fileSize: number
    mimeType: number
    uploadedAt: number
    _all: number
  }


  export type ReportFileAvgAggregateInputType = {
    fileSize?: true
  }

  export type ReportFileSumAggregateInputType = {
    fileSize?: true
  }

  export type ReportFileMinAggregateInputType = {
    id?: true
    fileName?: true
    filePath?: true
    organizationId?: true
    startDate?: true
    endDate?: true
    fileSize?: true
    mimeType?: true
    uploadedAt?: true
  }

  export type ReportFileMaxAggregateInputType = {
    id?: true
    fileName?: true
    filePath?: true
    organizationId?: true
    startDate?: true
    endDate?: true
    fileSize?: true
    mimeType?: true
    uploadedAt?: true
  }

  export type ReportFileCountAggregateInputType = {
    id?: true
    fileName?: true
    filePath?: true
    organizationId?: true
    startDate?: true
    endDate?: true
    fileSize?: true
    mimeType?: true
    uploadedAt?: true
    _all?: true
  }

  export type ReportFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportFile to aggregate.
     */
    where?: ReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportFiles to fetch.
     */
    orderBy?: ReportFileOrderByWithRelationInput | ReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportFiles
    **/
    _count?: true | ReportFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportFileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportFileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportFileMaxAggregateInputType
  }

  export type GetReportFileAggregateType<T extends ReportFileAggregateArgs> = {
        [P in keyof T & keyof AggregateReportFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportFile[P]>
      : GetScalarType<T[P], AggregateReportFile[P]>
  }




  export type ReportFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportFileWhereInput
    orderBy?: ReportFileOrderByWithAggregationInput | ReportFileOrderByWithAggregationInput[]
    by: ReportFileScalarFieldEnum[] | ReportFileScalarFieldEnum
    having?: ReportFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportFileCountAggregateInputType | true
    _avg?: ReportFileAvgAggregateInputType
    _sum?: ReportFileSumAggregateInputType
    _min?: ReportFileMinAggregateInputType
    _max?: ReportFileMaxAggregateInputType
  }

  export type ReportFileGroupByOutputType = {
    id: string
    fileName: string
    filePath: string
    organizationId: string
    startDate: Date
    endDate: Date
    fileSize: number
    mimeType: string
    uploadedAt: Date
    _count: ReportFileCountAggregateOutputType | null
    _avg: ReportFileAvgAggregateOutputType | null
    _sum: ReportFileSumAggregateOutputType | null
    _min: ReportFileMinAggregateOutputType | null
    _max: ReportFileMaxAggregateOutputType | null
  }

  type GetReportFileGroupByPayload<T extends ReportFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportFileGroupByOutputType[P]>
            : GetScalarType<T[P], ReportFileGroupByOutputType[P]>
        }
      >
    >


  export type ReportFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    filePath?: boolean
    organizationId?: boolean
    startDate?: boolean
    endDate?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
    organization?: boolean | HumanitarianOrgDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportFile"]>

  export type ReportFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    filePath?: boolean
    organizationId?: boolean
    startDate?: boolean
    endDate?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
    organization?: boolean | HumanitarianOrgDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportFile"]>

  export type ReportFileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    filePath?: boolean
    organizationId?: boolean
    startDate?: boolean
    endDate?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
    organization?: boolean | HumanitarianOrgDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportFile"]>

  export type ReportFileSelectScalar = {
    id?: boolean
    fileName?: boolean
    filePath?: boolean
    organizationId?: boolean
    startDate?: boolean
    endDate?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
  }

  export type ReportFileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fileName" | "filePath" | "organizationId" | "startDate" | "endDate" | "fileSize" | "mimeType" | "uploadedAt", ExtArgs["result"]["reportFile"]>
  export type ReportFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | HumanitarianOrgDefaultArgs<ExtArgs>
  }
  export type ReportFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | HumanitarianOrgDefaultArgs<ExtArgs>
  }
  export type ReportFileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | HumanitarianOrgDefaultArgs<ExtArgs>
  }

  export type $ReportFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportFile"
    objects: {
      organization: Prisma.$HumanitarianOrgPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fileName: string
      filePath: string
      organizationId: string
      startDate: Date
      endDate: Date
      fileSize: number
      mimeType: string
      uploadedAt: Date
    }, ExtArgs["result"]["reportFile"]>
    composites: {}
  }

  type ReportFileGetPayload<S extends boolean | null | undefined | ReportFileDefaultArgs> = $Result.GetResult<Prisma.$ReportFilePayload, S>

  type ReportFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportFileCountAggregateInputType | true
    }

  export interface ReportFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportFile'], meta: { name: 'ReportFile' } }
    /**
     * Find zero or one ReportFile that matches the filter.
     * @param {ReportFileFindUniqueArgs} args - Arguments to find a ReportFile
     * @example
     * // Get one ReportFile
     * const reportFile = await prisma.reportFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFileFindUniqueArgs>(args: SelectSubset<T, ReportFileFindUniqueArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportFile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportFileFindUniqueOrThrowArgs} args - Arguments to find a ReportFile
     * @example
     * // Get one ReportFile
     * const reportFile = await prisma.reportFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFileFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileFindFirstArgs} args - Arguments to find a ReportFile
     * @example
     * // Get one ReportFile
     * const reportFile = await prisma.reportFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFileFindFirstArgs>(args?: SelectSubset<T, ReportFileFindFirstArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileFindFirstOrThrowArgs} args - Arguments to find a ReportFile
     * @example
     * // Get one ReportFile
     * const reportFile = await prisma.reportFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFileFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportFiles
     * const reportFiles = await prisma.reportFile.findMany()
     * 
     * // Get first 10 ReportFiles
     * const reportFiles = await prisma.reportFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportFileWithIdOnly = await prisma.reportFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFileFindManyArgs>(args?: SelectSubset<T, ReportFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportFile.
     * @param {ReportFileCreateArgs} args - Arguments to create a ReportFile.
     * @example
     * // Create one ReportFile
     * const ReportFile = await prisma.reportFile.create({
     *   data: {
     *     // ... data to create a ReportFile
     *   }
     * })
     * 
     */
    create<T extends ReportFileCreateArgs>(args: SelectSubset<T, ReportFileCreateArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportFiles.
     * @param {ReportFileCreateManyArgs} args - Arguments to create many ReportFiles.
     * @example
     * // Create many ReportFiles
     * const reportFile = await prisma.reportFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportFileCreateManyArgs>(args?: SelectSubset<T, ReportFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportFiles and returns the data saved in the database.
     * @param {ReportFileCreateManyAndReturnArgs} args - Arguments to create many ReportFiles.
     * @example
     * // Create many ReportFiles
     * const reportFile = await prisma.reportFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportFiles and only return the `id`
     * const reportFileWithIdOnly = await prisma.reportFile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportFileCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportFile.
     * @param {ReportFileDeleteArgs} args - Arguments to delete one ReportFile.
     * @example
     * // Delete one ReportFile
     * const ReportFile = await prisma.reportFile.delete({
     *   where: {
     *     // ... filter to delete one ReportFile
     *   }
     * })
     * 
     */
    delete<T extends ReportFileDeleteArgs>(args: SelectSubset<T, ReportFileDeleteArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportFile.
     * @param {ReportFileUpdateArgs} args - Arguments to update one ReportFile.
     * @example
     * // Update one ReportFile
     * const reportFile = await prisma.reportFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportFileUpdateArgs>(args: SelectSubset<T, ReportFileUpdateArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportFiles.
     * @param {ReportFileDeleteManyArgs} args - Arguments to filter ReportFiles to delete.
     * @example
     * // Delete a few ReportFiles
     * const { count } = await prisma.reportFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportFileDeleteManyArgs>(args?: SelectSubset<T, ReportFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportFiles
     * const reportFile = await prisma.reportFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportFileUpdateManyArgs>(args: SelectSubset<T, ReportFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportFiles and returns the data updated in the database.
     * @param {ReportFileUpdateManyAndReturnArgs} args - Arguments to update many ReportFiles.
     * @example
     * // Update many ReportFiles
     * const reportFile = await prisma.reportFile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportFiles and only return the `id`
     * const reportFileWithIdOnly = await prisma.reportFile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportFileUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportFileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportFile.
     * @param {ReportFileUpsertArgs} args - Arguments to update or create a ReportFile.
     * @example
     * // Update or create a ReportFile
     * const reportFile = await prisma.reportFile.upsert({
     *   create: {
     *     // ... data to create a ReportFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportFile we want to update
     *   }
     * })
     */
    upsert<T extends ReportFileUpsertArgs>(args: SelectSubset<T, ReportFileUpsertArgs<ExtArgs>>): Prisma__ReportFileClient<$Result.GetResult<Prisma.$ReportFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileCountArgs} args - Arguments to filter ReportFiles to count.
     * @example
     * // Count the number of ReportFiles
     * const count = await prisma.reportFile.count({
     *   where: {
     *     // ... the filter for the ReportFiles we want to count
     *   }
     * })
    **/
    count<T extends ReportFileCountArgs>(
      args?: Subset<T, ReportFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportFileAggregateArgs>(args: Subset<T, ReportFileAggregateArgs>): Prisma.PrismaPromise<GetReportFileAggregateType<T>>

    /**
     * Group by ReportFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportFileGroupByArgs['orderBy'] }
        : { orderBy?: ReportFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportFile model
   */
  readonly fields: ReportFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends HumanitarianOrgDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HumanitarianOrgDefaultArgs<ExtArgs>>): Prisma__HumanitarianOrgClient<$Result.GetResult<Prisma.$HumanitarianOrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportFile model
   */
  interface ReportFileFieldRefs {
    readonly id: FieldRef<"ReportFile", 'String'>
    readonly fileName: FieldRef<"ReportFile", 'String'>
    readonly filePath: FieldRef<"ReportFile", 'String'>
    readonly organizationId: FieldRef<"ReportFile", 'String'>
    readonly startDate: FieldRef<"ReportFile", 'DateTime'>
    readonly endDate: FieldRef<"ReportFile", 'DateTime'>
    readonly fileSize: FieldRef<"ReportFile", 'Int'>
    readonly mimeType: FieldRef<"ReportFile", 'String'>
    readonly uploadedAt: FieldRef<"ReportFile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReportFile findUnique
   */
  export type ReportFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * Filter, which ReportFile to fetch.
     */
    where: ReportFileWhereUniqueInput
  }

  /**
   * ReportFile findUniqueOrThrow
   */
  export type ReportFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * Filter, which ReportFile to fetch.
     */
    where: ReportFileWhereUniqueInput
  }

  /**
   * ReportFile findFirst
   */
  export type ReportFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * Filter, which ReportFile to fetch.
     */
    where?: ReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportFiles to fetch.
     */
    orderBy?: ReportFileOrderByWithRelationInput | ReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportFiles.
     */
    cursor?: ReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportFiles.
     */
    distinct?: ReportFileScalarFieldEnum | ReportFileScalarFieldEnum[]
  }

  /**
   * ReportFile findFirstOrThrow
   */
  export type ReportFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * Filter, which ReportFile to fetch.
     */
    where?: ReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportFiles to fetch.
     */
    orderBy?: ReportFileOrderByWithRelationInput | ReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportFiles.
     */
    cursor?: ReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportFiles.
     */
    distinct?: ReportFileScalarFieldEnum | ReportFileScalarFieldEnum[]
  }

  /**
   * ReportFile findMany
   */
  export type ReportFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * Filter, which ReportFiles to fetch.
     */
    where?: ReportFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportFiles to fetch.
     */
    orderBy?: ReportFileOrderByWithRelationInput | ReportFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportFiles.
     */
    cursor?: ReportFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportFiles.
     */
    skip?: number
    distinct?: ReportFileScalarFieldEnum | ReportFileScalarFieldEnum[]
  }

  /**
   * ReportFile create
   */
  export type ReportFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportFile.
     */
    data: XOR<ReportFileCreateInput, ReportFileUncheckedCreateInput>
  }

  /**
   * ReportFile createMany
   */
  export type ReportFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportFiles.
     */
    data: ReportFileCreateManyInput | ReportFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportFile createManyAndReturn
   */
  export type ReportFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * The data used to create many ReportFiles.
     */
    data: ReportFileCreateManyInput | ReportFileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportFile update
   */
  export type ReportFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportFile.
     */
    data: XOR<ReportFileUpdateInput, ReportFileUncheckedUpdateInput>
    /**
     * Choose, which ReportFile to update.
     */
    where: ReportFileWhereUniqueInput
  }

  /**
   * ReportFile updateMany
   */
  export type ReportFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportFiles.
     */
    data: XOR<ReportFileUpdateManyMutationInput, ReportFileUncheckedUpdateManyInput>
    /**
     * Filter which ReportFiles to update
     */
    where?: ReportFileWhereInput
    /**
     * Limit how many ReportFiles to update.
     */
    limit?: number
  }

  /**
   * ReportFile updateManyAndReturn
   */
  export type ReportFileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * The data used to update ReportFiles.
     */
    data: XOR<ReportFileUpdateManyMutationInput, ReportFileUncheckedUpdateManyInput>
    /**
     * Filter which ReportFiles to update
     */
    where?: ReportFileWhereInput
    /**
     * Limit how many ReportFiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportFile upsert
   */
  export type ReportFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportFile to update in case it exists.
     */
    where: ReportFileWhereUniqueInput
    /**
     * In case the ReportFile found by the `where` argument doesn't exist, create a new ReportFile with this data.
     */
    create: XOR<ReportFileCreateInput, ReportFileUncheckedCreateInput>
    /**
     * In case the ReportFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportFileUpdateInput, ReportFileUncheckedUpdateInput>
  }

  /**
   * ReportFile delete
   */
  export type ReportFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
    /**
     * Filter which ReportFile to delete.
     */
    where: ReportFileWhereUniqueInput
  }

  /**
   * ReportFile deleteMany
   */
  export type ReportFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportFiles to delete
     */
    where?: ReportFileWhereInput
    /**
     * Limit how many ReportFiles to delete.
     */
    limit?: number
  }

  /**
   * ReportFile without action
   */
  export type ReportFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportFile
     */
    select?: ReportFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportFile
     */
    omit?: ReportFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportFileInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const PasswordResetTokenScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    expires: 'expires'
  };

  export type PasswordResetTokenScalarFieldEnum = (typeof PasswordResetTokenScalarFieldEnum)[keyof typeof PasswordResetTokenScalarFieldEnum]


  export const TwoFactorTokenScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    expires: 'expires'
  };

  export type TwoFactorTokenScalarFieldEnum = (typeof TwoFactorTokenScalarFieldEnum)[keyof typeof TwoFactorTokenScalarFieldEnum]


  export const TwoFactorConfirmationScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type TwoFactorConfirmationScalarFieldEnum = (typeof TwoFactorConfirmationScalarFieldEnum)[keyof typeof TwoFactorConfirmationScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    password: 'password',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProviderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contactName: 'contactName',
    email: 'email',
    phone: 'phone',
    address: 'address',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    imageUrl: 'imageUrl'
  };

  export type ProviderScalarFieldEnum = (typeof ProviderScalarFieldEnum)[keyof typeof ProviderScalarFieldEnum]


  export const HumanitarianOrgScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contactName: 'contactName',
    email: 'email',
    phone: 'phone',
    address: 'address',
    website: 'website',
    mission: 'mission',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    pib: 'pib',
    registrationNumber: 'registrationNumber',
    bank: 'bank',
    accountNumber: 'accountNumber',
    shortNumber: 'shortNumber'
  };

  export type HumanitarianOrgScalarFieldEnum = (typeof HumanitarianOrgScalarFieldEnum)[keyof typeof HumanitarianOrgScalarFieldEnum]


  export const VasTransactionScalarFieldEnum: {
    id: 'id',
    providerId: 'providerId',
    serviceId: 'serviceId',
    date: 'date',
    group: 'group',
    serviceName: 'serviceName',
    serviceCode: 'serviceCode',
    price: 'price',
    quantity: 'quantity',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VasTransactionScalarFieldEnum = (typeof VasTransactionScalarFieldEnum)[keyof typeof VasTransactionScalarFieldEnum]


  export const ParkingTransactionScalarFieldEnum: {
    id: 'id',
    parkingServiceId: 'parkingServiceId',
    date: 'date',
    group: 'group',
    serviceName: 'serviceName',
    price: 'price',
    quantity: 'quantity',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    serviceId: 'serviceId'
  };

  export type ParkingTransactionScalarFieldEnum = (typeof ParkingTransactionScalarFieldEnum)[keyof typeof ParkingTransactionScalarFieldEnum]


  export const ParkingServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    contactName: 'contactName',
    email: 'email',
    phone: 'phone',
    address: 'address',
    additionalEmails: 'additionalEmails',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    originalFileName: 'originalFileName',
    originalFilePath: 'originalFilePath',
    fileSize: 'fileSize',
    mimeType: 'mimeType',
    lastImportDate: 'lastImportDate',
    importedBy: 'importedBy',
    importStatus: 'importStatus',
    createdById: 'createdById'
  };

  export type ParkingServiceScalarFieldEnum = (typeof ParkingServiceScalarFieldEnum)[keyof typeof ParkingServiceScalarFieldEnum]


  export const ContractScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contractNumber: 'contractNumber',
    type: 'type',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    revenuePercentage: 'revenuePercentage',
    description: 'description',
    operatorRevenue: 'operatorRevenue',
    isRevenueSharing: 'isRevenueSharing',
    operatorId: 'operatorId',
    providerId: 'providerId',
    humanitarianOrgId: 'humanitarianOrgId',
    parkingServiceId: 'parkingServiceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    lastModifiedById: 'lastModifiedById'
  };

  export type ContractScalarFieldEnum = (typeof ContractScalarFieldEnum)[keyof typeof ContractScalarFieldEnum]


  export const ContractRenewalScalarFieldEnum: {
    id: 'id',
    contractId: 'contractId',
    subStatus: 'subStatus',
    renewalStartDate: 'renewalStartDate',
    proposedStartDate: 'proposedStartDate',
    proposedEndDate: 'proposedEndDate',
    proposedRevenue: 'proposedRevenue',
    documentsReceived: 'documentsReceived',
    legalApproved: 'legalApproved',
    financialApproved: 'financialApproved',
    technicalApproved: 'technicalApproved',
    managementApproved: 'managementApproved',
    signatureReceived: 'signatureReceived',
    comments: 'comments',
    internalNotes: 'internalNotes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    lastModifiedById: 'lastModifiedById'
  };

  export type ContractRenewalScalarFieldEnum = (typeof ContractRenewalScalarFieldEnum)[keyof typeof ContractRenewalScalarFieldEnum]


  export const ContractRenewalAttachmentScalarFieldEnum: {
    id: 'id',
    renewalId: 'renewalId',
    fileName: 'fileName',
    fileSize: 'fileSize',
    fileType: 'fileType',
    filePath: 'filePath',
    uploadedAt: 'uploadedAt',
    uploadedById: 'uploadedById',
    description: 'description'
  };

  export type ContractRenewalAttachmentScalarFieldEnum = (typeof ContractRenewalAttachmentScalarFieldEnum)[keyof typeof ContractRenewalAttachmentScalarFieldEnum]


  export const HumanitarianContractRenewalScalarFieldEnum: {
    id: 'id',
    contractId: 'contractId',
    humanitarianOrgId: 'humanitarianOrgId',
    subStatus: 'subStatus',
    renewalStartDate: 'renewalStartDate',
    proposedStartDate: 'proposedStartDate',
    proposedEndDate: 'proposedEndDate',
    proposedRevenue: 'proposedRevenue',
    documentsReceived: 'documentsReceived',
    legalApproved: 'legalApproved',
    financialApproved: 'financialApproved',
    signatureReceived: 'signatureReceived',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    lastModifiedById: 'lastModifiedById'
  };

  export type HumanitarianContractRenewalScalarFieldEnum = (typeof HumanitarianContractRenewalScalarFieldEnum)[keyof typeof HumanitarianContractRenewalScalarFieldEnum]


  export const SenderBlacklistScalarFieldEnum: {
    id: 'id',
    senderName: 'senderName',
    effectiveDate: 'effectiveDate',
    description: 'description',
    isActive: 'isActive',
    matchCount: 'matchCount',
    lastMatchDate: 'lastMatchDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    modifiedById: 'modifiedById'
  };

  export type SenderBlacklistScalarFieldEnum = (typeof SenderBlacklistScalarFieldEnum)[keyof typeof SenderBlacklistScalarFieldEnum]


  export const BlacklistLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    entityId: 'entityId',
    entityType: 'entityType',
    oldData: 'oldData',
    newData: 'newData',
    userId: 'userId',
    timestamp: 'timestamp'
  };

  export type BlacklistLogScalarFieldEnum = (typeof BlacklistLogScalarFieldEnum)[keyof typeof BlacklistLogScalarFieldEnum]


  export const OperatorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    logoUrl: 'logoUrl',
    website: 'website',
    contactEmail: 'contactEmail',
    contactPhone: 'contactPhone',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OperatorScalarFieldEnum = (typeof OperatorScalarFieldEnum)[keyof typeof OperatorScalarFieldEnum]


  export const ServiceContractScalarFieldEnum: {
    id: 'id',
    contractId: 'contractId',
    serviceId: 'serviceId',
    specificTerms: 'specificTerms',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceContractScalarFieldEnum = (typeof ServiceContractScalarFieldEnum)[keyof typeof ServiceContractScalarFieldEnum]


  export const ContractAttachmentScalarFieldEnum: {
    id: 'id',
    contractId: 'contractId',
    name: 'name',
    fileUrl: 'fileUrl',
    fileType: 'fileType',
    uploadedAt: 'uploadedAt',
    uploadedById: 'uploadedById'
  };

  export type ContractAttachmentScalarFieldEnum = (typeof ContractAttachmentScalarFieldEnum)[keyof typeof ContractAttachmentScalarFieldEnum]


  export const ContractReminderScalarFieldEnum: {
    id: 'id',
    contractId: 'contractId',
    reminderDate: 'reminderDate',
    reminderType: 'reminderType',
    isAcknowledged: 'isAcknowledged',
    acknowledgedById: 'acknowledgedById',
    createdAt: 'createdAt'
  };

  export type ContractReminderScalarFieldEnum = (typeof ContractReminderScalarFieldEnum)[keyof typeof ContractReminderScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    billingType: 'billingType'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const VasServiceScalarFieldEnum: {
    id: 'id',
    proizvod: 'proizvod',
    mesec_pruzanja_usluge: 'mesec_pruzanja_usluge',
    jedinicna_cena: 'jedinicna_cena',
    broj_transakcija: 'broj_transakcija',
    fakturisan_iznos: 'fakturisan_iznos',
    fakturisan_korigovan_iznos: 'fakturisan_korigovan_iznos',
    naplacen_iznos: 'naplacen_iznos',
    kumulativ_naplacenih_iznosa: 'kumulativ_naplacenih_iznosa',
    nenaplacen_iznos: 'nenaplacen_iznos',
    nenaplacen_korigovan_iznos: 'nenaplacen_korigovan_iznos',
    storniran_iznos: 'storniran_iznos',
    otkazan_iznos: 'otkazan_iznos',
    kumulativ_otkazanih_iznosa: 'kumulativ_otkazanih_iznosa',
    iznos_za_prenos_sredstava: 'iznos_za_prenos_sredstava',
    serviceId: 'serviceId',
    provajderId: 'provajderId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VasServiceScalarFieldEnum = (typeof VasServiceScalarFieldEnum)[keyof typeof VasServiceScalarFieldEnum]


  export const BulkServiceScalarFieldEnum: {
    id: 'id',
    provider_name: 'provider_name',
    agreement_name: 'agreement_name',
    service_name: 'service_name',
    step_name: 'step_name',
    sender_name: 'sender_name',
    requests: 'requests',
    message_parts: 'message_parts',
    datumNaplate: 'datumNaplate',
    serviceId: 'serviceId',
    providerId: 'providerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BulkServiceScalarFieldEnum = (typeof BulkServiceScalarFieldEnum)[keyof typeof BulkServiceScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ComplaintScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    financialImpact: 'financialImpact',
    serviceId: 'serviceId',
    productId: 'productId',
    providerId: 'providerId',
    submittedById: 'submittedById',
    assignedAgentId: 'assignedAgentId',
    assignedAt: 'assignedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    resolvedAt: 'resolvedAt',
    closedAt: 'closedAt',
    humanitarianOrgId: 'humanitarianOrgId',
    parkingServiceId: 'parkingServiceId'
  };

  export type ComplaintScalarFieldEnum = (typeof ComplaintScalarFieldEnum)[keyof typeof ComplaintScalarFieldEnum]


  export const ComplaintStatusHistoryScalarFieldEnum: {
    id: 'id',
    complaintId: 'complaintId',
    previousStatus: 'previousStatus',
    newStatus: 'newStatus',
    changedById: 'changedById',
    changedAt: 'changedAt',
    notes: 'notes'
  };

  export type ComplaintStatusHistoryScalarFieldEnum = (typeof ComplaintStatusHistoryScalarFieldEnum)[keyof typeof ComplaintStatusHistoryScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    text: 'text',
    complaintId: 'complaintId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isInternal: 'isInternal'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const AttachmentScalarFieldEnum: {
    id: 'id',
    fileName: 'fileName',
    fileUrl: 'fileUrl',
    fileType: 'fileType',
    complaintId: 'complaintId',
    uploadedAt: 'uploadedAt'
  };

  export type AttachmentScalarFieldEnum = (typeof AttachmentScalarFieldEnum)[keyof typeof AttachmentScalarFieldEnum]


  export const LogEntryScalarFieldEnum: {
    id: 'id',
    entityType: 'entityType',
    entityId: 'entityId',
    action: 'action',
    subject: 'subject',
    description: 'description',
    status: 'status',
    sendEmail: 'sendEmail',
    providerId: 'providerId',
    parkingServiceId: 'parkingServiceId',
    bulkServiceId: 'bulkServiceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type LogEntryScalarFieldEnum = (typeof LogEntryScalarFieldEnum)[keyof typeof LogEntryScalarFieldEnum]


  export const ActivityLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    entityType: 'entityType',
    entityId: 'entityId',
    details: 'details',
    severity: 'severity',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type ActivityLogScalarFieldEnum = (typeof ActivityLogScalarFieldEnum)[keyof typeof ActivityLogScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    message: 'message',
    type: 'type',
    isRead: 'isRead',
    userId: 'userId',
    entityType: 'entityType',
    entityId: 'entityId',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const ScheduledReportScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    reportType: 'reportType',
    frequency: 'frequency',
    lastRun: 'lastRun',
    nextRun: 'nextRun',
    parameters: 'parameters',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScheduledReportScalarFieldEnum = (typeof ScheduledReportScalarFieldEnum)[keyof typeof ScheduledReportScalarFieldEnum]


  export const GeneratedReportScalarFieldEnum: {
    id: 'id',
    name: 'name',
    reportType: 'reportType',
    fileUrl: 'fileUrl',
    generatedAt: 'generatedAt',
    scheduledReportId: 'scheduledReportId'
  };

  export type GeneratedReportScalarFieldEnum = (typeof GeneratedReportScalarFieldEnum)[keyof typeof GeneratedReportScalarFieldEnum]


  export const NotificationPreferenceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    preferences: 'preferences',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationPreferenceScalarFieldEnum = (typeof NotificationPreferenceScalarFieldEnum)[keyof typeof NotificationPreferenceScalarFieldEnum]


  export const ReportFileScalarFieldEnum: {
    id: 'id',
    fileName: 'fileName',
    filePath: 'filePath',
    organizationId: 'organizationId',
    startDate: 'startDate',
    endDate: 'endDate',
    fileSize: 'fileSize',
    mimeType: 'mimeType',
    uploadedAt: 'uploadedAt'
  };

  export type ReportFileScalarFieldEnum = (typeof ReportFileScalarFieldEnum)[keyof typeof ReportFileScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ContractType'
   */
  export type EnumContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractType'>
    


  /**
   * Reference to a field of type 'ContractType[]'
   */
  export type ListEnumContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractType[]'>
    


  /**
   * Reference to a field of type 'ContractStatus'
   */
  export type EnumContractStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractStatus'>
    


  /**
   * Reference to a field of type 'ContractStatus[]'
   */
  export type ListEnumContractStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractStatus[]'>
    


  /**
   * Reference to a field of type 'ContractRenewalSubStatus'
   */
  export type EnumContractRenewalSubStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractRenewalSubStatus'>
    


  /**
   * Reference to a field of type 'ContractRenewalSubStatus[]'
   */
  export type ListEnumContractRenewalSubStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractRenewalSubStatus[]'>
    


  /**
   * Reference to a field of type 'HumanitarianRenewalSubStatus'
   */
  export type EnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HumanitarianRenewalSubStatus'>
    


  /**
   * Reference to a field of type 'HumanitarianRenewalSubStatus[]'
   */
  export type ListEnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HumanitarianRenewalSubStatus[]'>
    


  /**
   * Reference to a field of type 'LogBlackType'
   */
  export type EnumLogBlackTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogBlackType'>
    


  /**
   * Reference to a field of type 'LogBlackType[]'
   */
  export type ListEnumLogBlackTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogBlackType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'ServiceType'
   */
  export type EnumServiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceType'>
    


  /**
   * Reference to a field of type 'ServiceType[]'
   */
  export type ListEnumServiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceType[]'>
    


  /**
   * Reference to a field of type 'BillingType'
   */
  export type EnumBillingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillingType'>
    


  /**
   * Reference to a field of type 'BillingType[]'
   */
  export type ListEnumBillingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillingType[]'>
    


  /**
   * Reference to a field of type 'ComplaintStatus'
   */
  export type EnumComplaintStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintStatus'>
    


  /**
   * Reference to a field of type 'ComplaintStatus[]'
   */
  export type ListEnumComplaintStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintStatus[]'>
    


  /**
   * Reference to a field of type 'LogEntityType'
   */
  export type EnumLogEntityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogEntityType'>
    


  /**
   * Reference to a field of type 'LogEntityType[]'
   */
  export type ListEnumLogEntityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogEntityType[]'>
    


  /**
   * Reference to a field of type 'LogActionType'
   */
  export type EnumLogActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogActionType'>
    


  /**
   * Reference to a field of type 'LogActionType[]'
   */
  export type ListEnumLogActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogActionType[]'>
    


  /**
   * Reference to a field of type 'LogStatus'
   */
  export type EnumLogStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogStatus'>
    


  /**
   * Reference to a field of type 'LogStatus[]'
   */
  export type ListEnumLogStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogStatus[]'>
    


  /**
   * Reference to a field of type 'LogSeverity'
   */
  export type EnumLogSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogSeverity'>
    


  /**
   * Reference to a field of type 'LogSeverity[]'
   */
  export type ListEnumLogSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogSeverity[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'ReportFrequency'
   */
  export type EnumReportFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportFrequency'>
    


  /**
   * Reference to a field of type 'ReportFrequency[]'
   */
  export type ListEnumReportFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportFrequency[]'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    id?: StringFilter<"VerificationToken"> | string
    email?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    email_token?: VerificationTokenEmailTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    email?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "id" | "token" | "email_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VerificationToken"> | string
    email?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type PasswordResetTokenWhereInput = {
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    id?: StringFilter<"PasswordResetToken"> | string
    email?: StringFilter<"PasswordResetToken"> | string
    token?: StringFilter<"PasswordResetToken"> | string
    expires?: DateTimeFilter<"PasswordResetToken"> | Date | string
  }

  export type PasswordResetTokenOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type PasswordResetTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    email_token?: PasswordResetTokenEmailTokenCompoundUniqueInput
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    email?: StringFilter<"PasswordResetToken"> | string
    expires?: DateTimeFilter<"PasswordResetToken"> | Date | string
  }, "id" | "token" | "email_token">

  export type PasswordResetTokenOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: PasswordResetTokenCountOrderByAggregateInput
    _max?: PasswordResetTokenMaxOrderByAggregateInput
    _min?: PasswordResetTokenMinOrderByAggregateInput
  }

  export type PasswordResetTokenScalarWhereWithAggregatesInput = {
    AND?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    OR?: PasswordResetTokenScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    email?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    token?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    expires?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
  }

  export type TwoFactorTokenWhereInput = {
    AND?: TwoFactorTokenWhereInput | TwoFactorTokenWhereInput[]
    OR?: TwoFactorTokenWhereInput[]
    NOT?: TwoFactorTokenWhereInput | TwoFactorTokenWhereInput[]
    id?: StringFilter<"TwoFactorToken"> | string
    email?: StringFilter<"TwoFactorToken"> | string
    token?: StringFilter<"TwoFactorToken"> | string
    expires?: DateTimeFilter<"TwoFactorToken"> | Date | string
  }

  export type TwoFactorTokenOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type TwoFactorTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    email_token?: TwoFactorTokenEmailTokenCompoundUniqueInput
    AND?: TwoFactorTokenWhereInput | TwoFactorTokenWhereInput[]
    OR?: TwoFactorTokenWhereInput[]
    NOT?: TwoFactorTokenWhereInput | TwoFactorTokenWhereInput[]
    email?: StringFilter<"TwoFactorToken"> | string
    expires?: DateTimeFilter<"TwoFactorToken"> | Date | string
  }, "id" | "token" | "email_token">

  export type TwoFactorTokenOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: TwoFactorTokenCountOrderByAggregateInput
    _max?: TwoFactorTokenMaxOrderByAggregateInput
    _min?: TwoFactorTokenMinOrderByAggregateInput
  }

  export type TwoFactorTokenScalarWhereWithAggregatesInput = {
    AND?: TwoFactorTokenScalarWhereWithAggregatesInput | TwoFactorTokenScalarWhereWithAggregatesInput[]
    OR?: TwoFactorTokenScalarWhereWithAggregatesInput[]
    NOT?: TwoFactorTokenScalarWhereWithAggregatesInput | TwoFactorTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TwoFactorToken"> | string
    email?: StringWithAggregatesFilter<"TwoFactorToken"> | string
    token?: StringWithAggregatesFilter<"TwoFactorToken"> | string
    expires?: DateTimeWithAggregatesFilter<"TwoFactorToken"> | Date | string
  }

  export type TwoFactorConfirmationWhereInput = {
    AND?: TwoFactorConfirmationWhereInput | TwoFactorConfirmationWhereInput[]
    OR?: TwoFactorConfirmationWhereInput[]
    NOT?: TwoFactorConfirmationWhereInput | TwoFactorConfirmationWhereInput[]
    id?: StringFilter<"TwoFactorConfirmation"> | string
    userId?: StringFilter<"TwoFactorConfirmation"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TwoFactorConfirmationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TwoFactorConfirmationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: TwoFactorConfirmationWhereInput | TwoFactorConfirmationWhereInput[]
    OR?: TwoFactorConfirmationWhereInput[]
    NOT?: TwoFactorConfirmationWhereInput | TwoFactorConfirmationWhereInput[]
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type TwoFactorConfirmationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: TwoFactorConfirmationCountOrderByAggregateInput
    _max?: TwoFactorConfirmationMaxOrderByAggregateInput
    _min?: TwoFactorConfirmationMinOrderByAggregateInput
  }

  export type TwoFactorConfirmationScalarWhereWithAggregatesInput = {
    AND?: TwoFactorConfirmationScalarWhereWithAggregatesInput | TwoFactorConfirmationScalarWhereWithAggregatesInput[]
    OR?: TwoFactorConfirmationScalarWhereWithAggregatesInput[]
    NOT?: TwoFactorConfirmationScalarWhereWithAggregatesInput | TwoFactorConfirmationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TwoFactorConfirmation"> | string
    userId?: StringWithAggregatesFilter<"TwoFactorConfirmation"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    image?: StringNullableFilter<"User"> | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    twoFactorConfirmation?: XOR<TwoFactorConfirmationNullableScalarRelationFilter, TwoFactorConfirmationWhereInput> | null
    createdContracts?: ContractListRelationFilter
    modifiedContracts?: ContractListRelationFilter
    uploadedAttachments?: ContractAttachmentListRelationFilter
    acknowledgedReminders?: ContractReminderListRelationFilter
    submittedComplaints?: ComplaintListRelationFilter
    assignedComplaints?: ComplaintListRelationFilter
    comments?: CommentListRelationFilter
    activities?: ActivityLogListRelationFilter
    notifications?: NotificationListRelationFilter
    notificationPreferences?: XOR<NotificationPreferenceNullableScalarRelationFilter, NotificationPreferenceWhereInput> | null
    createdHumanitarianRenewals?: HumanitarianContractRenewalListRelationFilter
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalListRelationFilter
    senderBlacklists?: SenderBlacklistListRelationFilter
    modifiedBlacklists?: SenderBlacklistListRelationFilter
    auditLogs?: BlacklistLogListRelationFilter
    createdRenewals?: ContractRenewalListRelationFilter
    modifiedRenewals?: ContractRenewalListRelationFilter
    uploadedRenewalFiles?: ContractRenewalAttachmentListRelationFilter
    createdParkingServices?: ParkingServiceListRelationFilter
    logEntries?: LogEntryListRelationFilter
    updatedLogs?: LogEntryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrderInput | SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    twoFactorConfirmation?: TwoFactorConfirmationOrderByWithRelationInput
    createdContracts?: ContractOrderByRelationAggregateInput
    modifiedContracts?: ContractOrderByRelationAggregateInput
    uploadedAttachments?: ContractAttachmentOrderByRelationAggregateInput
    acknowledgedReminders?: ContractReminderOrderByRelationAggregateInput
    submittedComplaints?: ComplaintOrderByRelationAggregateInput
    assignedComplaints?: ComplaintOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    activities?: ActivityLogOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    notificationPreferences?: NotificationPreferenceOrderByWithRelationInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalOrderByRelationAggregateInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalOrderByRelationAggregateInput
    senderBlacklists?: SenderBlacklistOrderByRelationAggregateInput
    modifiedBlacklists?: SenderBlacklistOrderByRelationAggregateInput
    auditLogs?: BlacklistLogOrderByRelationAggregateInput
    createdRenewals?: ContractRenewalOrderByRelationAggregateInput
    modifiedRenewals?: ContractRenewalOrderByRelationAggregateInput
    uploadedRenewalFiles?: ContractRenewalAttachmentOrderByRelationAggregateInput
    createdParkingServices?: ParkingServiceOrderByRelationAggregateInput
    logEntries?: LogEntryOrderByRelationAggregateInput
    updatedLogs?: LogEntryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    image?: StringNullableFilter<"User"> | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    twoFactorConfirmation?: XOR<TwoFactorConfirmationNullableScalarRelationFilter, TwoFactorConfirmationWhereInput> | null
    createdContracts?: ContractListRelationFilter
    modifiedContracts?: ContractListRelationFilter
    uploadedAttachments?: ContractAttachmentListRelationFilter
    acknowledgedReminders?: ContractReminderListRelationFilter
    submittedComplaints?: ComplaintListRelationFilter
    assignedComplaints?: ComplaintListRelationFilter
    comments?: CommentListRelationFilter
    activities?: ActivityLogListRelationFilter
    notifications?: NotificationListRelationFilter
    notificationPreferences?: XOR<NotificationPreferenceNullableScalarRelationFilter, NotificationPreferenceWhereInput> | null
    createdHumanitarianRenewals?: HumanitarianContractRenewalListRelationFilter
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalListRelationFilter
    senderBlacklists?: SenderBlacklistListRelationFilter
    modifiedBlacklists?: SenderBlacklistListRelationFilter
    auditLogs?: BlacklistLogListRelationFilter
    createdRenewals?: ContractRenewalListRelationFilter
    modifiedRenewals?: ContractRenewalListRelationFilter
    uploadedRenewalFiles?: ContractRenewalAttachmentListRelationFilter
    createdParkingServices?: ParkingServiceListRelationFilter
    logEntries?: LogEntryListRelationFilter
    updatedLogs?: LogEntryListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ProviderWhereInput = {
    AND?: ProviderWhereInput | ProviderWhereInput[]
    OR?: ProviderWhereInput[]
    NOT?: ProviderWhereInput | ProviderWhereInput[]
    id?: StringFilter<"Provider"> | string
    name?: StringFilter<"Provider"> | string
    contactName?: StringNullableFilter<"Provider"> | string | null
    email?: StringNullableFilter<"Provider"> | string | null
    phone?: StringNullableFilter<"Provider"> | string | null
    address?: StringNullableFilter<"Provider"> | string | null
    isActive?: BoolFilter<"Provider"> | boolean
    createdAt?: DateTimeFilter<"Provider"> | Date | string
    updatedAt?: DateTimeFilter<"Provider"> | Date | string
    imageUrl?: StringNullableFilter<"Provider"> | string | null
    contracts?: ContractListRelationFilter
    vasServices?: VasServiceListRelationFilter
    bulkServices?: BulkServiceListRelationFilter
    complaints?: ComplaintListRelationFilter
    vasTransactions?: VasTransactionListRelationFilter
    logEntries?: LogEntryListRelationFilter
  }

  export type ProviderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    contracts?: ContractOrderByRelationAggregateInput
    vasServices?: VasServiceOrderByRelationAggregateInput
    bulkServices?: BulkServiceOrderByRelationAggregateInput
    complaints?: ComplaintOrderByRelationAggregateInput
    vasTransactions?: VasTransactionOrderByRelationAggregateInput
    logEntries?: LogEntryOrderByRelationAggregateInput
  }

  export type ProviderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ProviderWhereInput | ProviderWhereInput[]
    OR?: ProviderWhereInput[]
    NOT?: ProviderWhereInput | ProviderWhereInput[]
    contactName?: StringNullableFilter<"Provider"> | string | null
    email?: StringNullableFilter<"Provider"> | string | null
    phone?: StringNullableFilter<"Provider"> | string | null
    address?: StringNullableFilter<"Provider"> | string | null
    isActive?: BoolFilter<"Provider"> | boolean
    createdAt?: DateTimeFilter<"Provider"> | Date | string
    updatedAt?: DateTimeFilter<"Provider"> | Date | string
    imageUrl?: StringNullableFilter<"Provider"> | string | null
    contracts?: ContractListRelationFilter
    vasServices?: VasServiceListRelationFilter
    bulkServices?: BulkServiceListRelationFilter
    complaints?: ComplaintListRelationFilter
    vasTransactions?: VasTransactionListRelationFilter
    logEntries?: LogEntryListRelationFilter
  }, "id" | "name">

  export type ProviderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    _count?: ProviderCountOrderByAggregateInput
    _max?: ProviderMaxOrderByAggregateInput
    _min?: ProviderMinOrderByAggregateInput
  }

  export type ProviderScalarWhereWithAggregatesInput = {
    AND?: ProviderScalarWhereWithAggregatesInput | ProviderScalarWhereWithAggregatesInput[]
    OR?: ProviderScalarWhereWithAggregatesInput[]
    NOT?: ProviderScalarWhereWithAggregatesInput | ProviderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Provider"> | string
    name?: StringWithAggregatesFilter<"Provider"> | string
    contactName?: StringNullableWithAggregatesFilter<"Provider"> | string | null
    email?: StringNullableWithAggregatesFilter<"Provider"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Provider"> | string | null
    address?: StringNullableWithAggregatesFilter<"Provider"> | string | null
    isActive?: BoolWithAggregatesFilter<"Provider"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Provider"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Provider"> | Date | string
    imageUrl?: StringNullableWithAggregatesFilter<"Provider"> | string | null
  }

  export type HumanitarianOrgWhereInput = {
    AND?: HumanitarianOrgWhereInput | HumanitarianOrgWhereInput[]
    OR?: HumanitarianOrgWhereInput[]
    NOT?: HumanitarianOrgWhereInput | HumanitarianOrgWhereInput[]
    id?: StringFilter<"HumanitarianOrg"> | string
    name?: StringFilter<"HumanitarianOrg"> | string
    contactName?: StringNullableFilter<"HumanitarianOrg"> | string | null
    email?: StringNullableFilter<"HumanitarianOrg"> | string | null
    phone?: StringNullableFilter<"HumanitarianOrg"> | string | null
    address?: StringNullableFilter<"HumanitarianOrg"> | string | null
    website?: StringNullableFilter<"HumanitarianOrg"> | string | null
    mission?: StringNullableFilter<"HumanitarianOrg"> | string | null
    isActive?: BoolFilter<"HumanitarianOrg"> | boolean
    createdAt?: DateTimeFilter<"HumanitarianOrg"> | Date | string
    updatedAt?: DateTimeFilter<"HumanitarianOrg"> | Date | string
    pib?: StringNullableFilter<"HumanitarianOrg"> | string | null
    registrationNumber?: StringNullableFilter<"HumanitarianOrg"> | string | null
    bank?: StringNullableFilter<"HumanitarianOrg"> | string | null
    accountNumber?: StringNullableFilter<"HumanitarianOrg"> | string | null
    shortNumber?: StringNullableFilter<"HumanitarianOrg"> | string | null
    contracts?: ContractListRelationFilter
    renewals?: HumanitarianContractRenewalListRelationFilter
    complaints?: ComplaintListRelationFilter
    reportFiles?: ReportFileListRelationFilter
  }

  export type HumanitarianOrgOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    mission?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pib?: SortOrderInput | SortOrder
    registrationNumber?: SortOrderInput | SortOrder
    bank?: SortOrderInput | SortOrder
    accountNumber?: SortOrderInput | SortOrder
    shortNumber?: SortOrderInput | SortOrder
    contracts?: ContractOrderByRelationAggregateInput
    renewals?: HumanitarianContractRenewalOrderByRelationAggregateInput
    complaints?: ComplaintOrderByRelationAggregateInput
    reportFiles?: ReportFileOrderByRelationAggregateInput
  }

  export type HumanitarianOrgWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: HumanitarianOrgWhereInput | HumanitarianOrgWhereInput[]
    OR?: HumanitarianOrgWhereInput[]
    NOT?: HumanitarianOrgWhereInput | HumanitarianOrgWhereInput[]
    contactName?: StringNullableFilter<"HumanitarianOrg"> | string | null
    email?: StringNullableFilter<"HumanitarianOrg"> | string | null
    phone?: StringNullableFilter<"HumanitarianOrg"> | string | null
    address?: StringNullableFilter<"HumanitarianOrg"> | string | null
    website?: StringNullableFilter<"HumanitarianOrg"> | string | null
    mission?: StringNullableFilter<"HumanitarianOrg"> | string | null
    isActive?: BoolFilter<"HumanitarianOrg"> | boolean
    createdAt?: DateTimeFilter<"HumanitarianOrg"> | Date | string
    updatedAt?: DateTimeFilter<"HumanitarianOrg"> | Date | string
    pib?: StringNullableFilter<"HumanitarianOrg"> | string | null
    registrationNumber?: StringNullableFilter<"HumanitarianOrg"> | string | null
    bank?: StringNullableFilter<"HumanitarianOrg"> | string | null
    accountNumber?: StringNullableFilter<"HumanitarianOrg"> | string | null
    shortNumber?: StringNullableFilter<"HumanitarianOrg"> | string | null
    contracts?: ContractListRelationFilter
    renewals?: HumanitarianContractRenewalListRelationFilter
    complaints?: ComplaintListRelationFilter
    reportFiles?: ReportFileListRelationFilter
  }, "id" | "name">

  export type HumanitarianOrgOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    mission?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pib?: SortOrderInput | SortOrder
    registrationNumber?: SortOrderInput | SortOrder
    bank?: SortOrderInput | SortOrder
    accountNumber?: SortOrderInput | SortOrder
    shortNumber?: SortOrderInput | SortOrder
    _count?: HumanitarianOrgCountOrderByAggregateInput
    _max?: HumanitarianOrgMaxOrderByAggregateInput
    _min?: HumanitarianOrgMinOrderByAggregateInput
  }

  export type HumanitarianOrgScalarWhereWithAggregatesInput = {
    AND?: HumanitarianOrgScalarWhereWithAggregatesInput | HumanitarianOrgScalarWhereWithAggregatesInput[]
    OR?: HumanitarianOrgScalarWhereWithAggregatesInput[]
    NOT?: HumanitarianOrgScalarWhereWithAggregatesInput | HumanitarianOrgScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HumanitarianOrg"> | string
    name?: StringWithAggregatesFilter<"HumanitarianOrg"> | string
    contactName?: StringNullableWithAggregatesFilter<"HumanitarianOrg"> | string | null
    email?: StringNullableWithAggregatesFilter<"HumanitarianOrg"> | string | null
    phone?: StringNullableWithAggregatesFilter<"HumanitarianOrg"> | string | null
    address?: StringNullableWithAggregatesFilter<"HumanitarianOrg"> | string | null
    website?: StringNullableWithAggregatesFilter<"HumanitarianOrg"> | string | null
    mission?: StringNullableWithAggregatesFilter<"HumanitarianOrg"> | string | null
    isActive?: BoolWithAggregatesFilter<"HumanitarianOrg"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"HumanitarianOrg"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HumanitarianOrg"> | Date | string
    pib?: StringNullableWithAggregatesFilter<"HumanitarianOrg"> | string | null
    registrationNumber?: StringNullableWithAggregatesFilter<"HumanitarianOrg"> | string | null
    bank?: StringNullableWithAggregatesFilter<"HumanitarianOrg"> | string | null
    accountNumber?: StringNullableWithAggregatesFilter<"HumanitarianOrg"> | string | null
    shortNumber?: StringNullableWithAggregatesFilter<"HumanitarianOrg"> | string | null
  }

  export type VasTransactionWhereInput = {
    AND?: VasTransactionWhereInput | VasTransactionWhereInput[]
    OR?: VasTransactionWhereInput[]
    NOT?: VasTransactionWhereInput | VasTransactionWhereInput[]
    id?: StringFilter<"VasTransaction"> | string
    providerId?: StringFilter<"VasTransaction"> | string
    serviceId?: StringFilter<"VasTransaction"> | string
    date?: DateTimeFilter<"VasTransaction"> | Date | string
    group?: StringFilter<"VasTransaction"> | string
    serviceName?: StringFilter<"VasTransaction"> | string
    serviceCode?: StringFilter<"VasTransaction"> | string
    price?: FloatFilter<"VasTransaction"> | number
    quantity?: FloatFilter<"VasTransaction"> | number
    amount?: FloatFilter<"VasTransaction"> | number
    createdAt?: DateTimeFilter<"VasTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"VasTransaction"> | Date | string
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
  }

  export type VasTransactionOrderByWithRelationInput = {
    id?: SortOrder
    providerId?: SortOrder
    serviceId?: SortOrder
    date?: SortOrder
    group?: SortOrder
    serviceName?: SortOrder
    serviceCode?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    provider?: ProviderOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
  }

  export type VasTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    providerId_date_serviceName_group?: VasTransactionProviderIdDateServiceNameGroupCompoundUniqueInput
    AND?: VasTransactionWhereInput | VasTransactionWhereInput[]
    OR?: VasTransactionWhereInput[]
    NOT?: VasTransactionWhereInput | VasTransactionWhereInput[]
    providerId?: StringFilter<"VasTransaction"> | string
    serviceId?: StringFilter<"VasTransaction"> | string
    date?: DateTimeFilter<"VasTransaction"> | Date | string
    group?: StringFilter<"VasTransaction"> | string
    serviceName?: StringFilter<"VasTransaction"> | string
    serviceCode?: StringFilter<"VasTransaction"> | string
    price?: FloatFilter<"VasTransaction"> | number
    quantity?: FloatFilter<"VasTransaction"> | number
    amount?: FloatFilter<"VasTransaction"> | number
    createdAt?: DateTimeFilter<"VasTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"VasTransaction"> | Date | string
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
  }, "id" | "providerId_date_serviceName_group">

  export type VasTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    providerId?: SortOrder
    serviceId?: SortOrder
    date?: SortOrder
    group?: SortOrder
    serviceName?: SortOrder
    serviceCode?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VasTransactionCountOrderByAggregateInput
    _avg?: VasTransactionAvgOrderByAggregateInput
    _max?: VasTransactionMaxOrderByAggregateInput
    _min?: VasTransactionMinOrderByAggregateInput
    _sum?: VasTransactionSumOrderByAggregateInput
  }

  export type VasTransactionScalarWhereWithAggregatesInput = {
    AND?: VasTransactionScalarWhereWithAggregatesInput | VasTransactionScalarWhereWithAggregatesInput[]
    OR?: VasTransactionScalarWhereWithAggregatesInput[]
    NOT?: VasTransactionScalarWhereWithAggregatesInput | VasTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VasTransaction"> | string
    providerId?: StringWithAggregatesFilter<"VasTransaction"> | string
    serviceId?: StringWithAggregatesFilter<"VasTransaction"> | string
    date?: DateTimeWithAggregatesFilter<"VasTransaction"> | Date | string
    group?: StringWithAggregatesFilter<"VasTransaction"> | string
    serviceName?: StringWithAggregatesFilter<"VasTransaction"> | string
    serviceCode?: StringWithAggregatesFilter<"VasTransaction"> | string
    price?: FloatWithAggregatesFilter<"VasTransaction"> | number
    quantity?: FloatWithAggregatesFilter<"VasTransaction"> | number
    amount?: FloatWithAggregatesFilter<"VasTransaction"> | number
    createdAt?: DateTimeWithAggregatesFilter<"VasTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VasTransaction"> | Date | string
  }

  export type ParkingTransactionWhereInput = {
    AND?: ParkingTransactionWhereInput | ParkingTransactionWhereInput[]
    OR?: ParkingTransactionWhereInput[]
    NOT?: ParkingTransactionWhereInput | ParkingTransactionWhereInput[]
    id?: StringFilter<"ParkingTransaction"> | string
    parkingServiceId?: StringFilter<"ParkingTransaction"> | string
    date?: DateTimeFilter<"ParkingTransaction"> | Date | string
    group?: StringFilter<"ParkingTransaction"> | string
    serviceName?: StringFilter<"ParkingTransaction"> | string
    price?: FloatFilter<"ParkingTransaction"> | number
    quantity?: FloatFilter<"ParkingTransaction"> | number
    amount?: FloatFilter<"ParkingTransaction"> | number
    createdAt?: DateTimeFilter<"ParkingTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"ParkingTransaction"> | Date | string
    serviceId?: StringFilter<"ParkingTransaction"> | string
    parkingService?: XOR<ParkingServiceScalarRelationFilter, ParkingServiceWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
  }

  export type ParkingTransactionOrderByWithRelationInput = {
    id?: SortOrder
    parkingServiceId?: SortOrder
    date?: SortOrder
    group?: SortOrder
    serviceName?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceId?: SortOrder
    parkingService?: ParkingServiceOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
  }

  export type ParkingTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    parkingServiceId_date_serviceName_group?: ParkingTransactionParkingServiceIdDateServiceNameGroupCompoundUniqueInput
    AND?: ParkingTransactionWhereInput | ParkingTransactionWhereInput[]
    OR?: ParkingTransactionWhereInput[]
    NOT?: ParkingTransactionWhereInput | ParkingTransactionWhereInput[]
    parkingServiceId?: StringFilter<"ParkingTransaction"> | string
    date?: DateTimeFilter<"ParkingTransaction"> | Date | string
    group?: StringFilter<"ParkingTransaction"> | string
    serviceName?: StringFilter<"ParkingTransaction"> | string
    price?: FloatFilter<"ParkingTransaction"> | number
    quantity?: FloatFilter<"ParkingTransaction"> | number
    amount?: FloatFilter<"ParkingTransaction"> | number
    createdAt?: DateTimeFilter<"ParkingTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"ParkingTransaction"> | Date | string
    serviceId?: StringFilter<"ParkingTransaction"> | string
    parkingService?: XOR<ParkingServiceScalarRelationFilter, ParkingServiceWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
  }, "id" | "parkingServiceId_date_serviceName_group">

  export type ParkingTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    parkingServiceId?: SortOrder
    date?: SortOrder
    group?: SortOrder
    serviceName?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceId?: SortOrder
    _count?: ParkingTransactionCountOrderByAggregateInput
    _avg?: ParkingTransactionAvgOrderByAggregateInput
    _max?: ParkingTransactionMaxOrderByAggregateInput
    _min?: ParkingTransactionMinOrderByAggregateInput
    _sum?: ParkingTransactionSumOrderByAggregateInput
  }

  export type ParkingTransactionScalarWhereWithAggregatesInput = {
    AND?: ParkingTransactionScalarWhereWithAggregatesInput | ParkingTransactionScalarWhereWithAggregatesInput[]
    OR?: ParkingTransactionScalarWhereWithAggregatesInput[]
    NOT?: ParkingTransactionScalarWhereWithAggregatesInput | ParkingTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ParkingTransaction"> | string
    parkingServiceId?: StringWithAggregatesFilter<"ParkingTransaction"> | string
    date?: DateTimeWithAggregatesFilter<"ParkingTransaction"> | Date | string
    group?: StringWithAggregatesFilter<"ParkingTransaction"> | string
    serviceName?: StringWithAggregatesFilter<"ParkingTransaction"> | string
    price?: FloatWithAggregatesFilter<"ParkingTransaction"> | number
    quantity?: FloatWithAggregatesFilter<"ParkingTransaction"> | number
    amount?: FloatWithAggregatesFilter<"ParkingTransaction"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ParkingTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ParkingTransaction"> | Date | string
    serviceId?: StringWithAggregatesFilter<"ParkingTransaction"> | string
  }

  export type ParkingServiceWhereInput = {
    AND?: ParkingServiceWhereInput | ParkingServiceWhereInput[]
    OR?: ParkingServiceWhereInput[]
    NOT?: ParkingServiceWhereInput | ParkingServiceWhereInput[]
    id?: StringFilter<"ParkingService"> | string
    name?: StringFilter<"ParkingService"> | string
    description?: StringNullableFilter<"ParkingService"> | string | null
    contactName?: StringNullableFilter<"ParkingService"> | string | null
    email?: StringNullableFilter<"ParkingService"> | string | null
    phone?: StringNullableFilter<"ParkingService"> | string | null
    address?: StringNullableFilter<"ParkingService"> | string | null
    additionalEmails?: StringNullableListFilter<"ParkingService">
    isActive?: BoolFilter<"ParkingService"> | boolean
    createdAt?: DateTimeFilter<"ParkingService"> | Date | string
    updatedAt?: DateTimeFilter<"ParkingService"> | Date | string
    originalFileName?: StringNullableFilter<"ParkingService"> | string | null
    originalFilePath?: StringNullableFilter<"ParkingService"> | string | null
    fileSize?: IntNullableFilter<"ParkingService"> | number | null
    mimeType?: StringNullableFilter<"ParkingService"> | string | null
    lastImportDate?: DateTimeNullableFilter<"ParkingService"> | Date | string | null
    importedBy?: StringNullableFilter<"ParkingService"> | string | null
    importStatus?: StringNullableFilter<"ParkingService"> | string | null
    createdById?: StringNullableFilter<"ParkingService"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    transactions?: ParkingTransactionListRelationFilter
    contracts?: ContractListRelationFilter
    logEntries?: LogEntryListRelationFilter
    complaints?: ComplaintListRelationFilter
  }

  export type ParkingServiceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    contactName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    additionalEmails?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalFileName?: SortOrderInput | SortOrder
    originalFilePath?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    mimeType?: SortOrderInput | SortOrder
    lastImportDate?: SortOrderInput | SortOrder
    importedBy?: SortOrderInput | SortOrder
    importStatus?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    transactions?: ParkingTransactionOrderByRelationAggregateInput
    contracts?: ContractOrderByRelationAggregateInput
    logEntries?: LogEntryOrderByRelationAggregateInput
    complaints?: ComplaintOrderByRelationAggregateInput
  }

  export type ParkingServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ParkingServiceWhereInput | ParkingServiceWhereInput[]
    OR?: ParkingServiceWhereInput[]
    NOT?: ParkingServiceWhereInput | ParkingServiceWhereInput[]
    name?: StringFilter<"ParkingService"> | string
    description?: StringNullableFilter<"ParkingService"> | string | null
    contactName?: StringNullableFilter<"ParkingService"> | string | null
    email?: StringNullableFilter<"ParkingService"> | string | null
    phone?: StringNullableFilter<"ParkingService"> | string | null
    address?: StringNullableFilter<"ParkingService"> | string | null
    additionalEmails?: StringNullableListFilter<"ParkingService">
    isActive?: BoolFilter<"ParkingService"> | boolean
    createdAt?: DateTimeFilter<"ParkingService"> | Date | string
    updatedAt?: DateTimeFilter<"ParkingService"> | Date | string
    originalFileName?: StringNullableFilter<"ParkingService"> | string | null
    originalFilePath?: StringNullableFilter<"ParkingService"> | string | null
    fileSize?: IntNullableFilter<"ParkingService"> | number | null
    mimeType?: StringNullableFilter<"ParkingService"> | string | null
    lastImportDate?: DateTimeNullableFilter<"ParkingService"> | Date | string | null
    importedBy?: StringNullableFilter<"ParkingService"> | string | null
    importStatus?: StringNullableFilter<"ParkingService"> | string | null
    createdById?: StringNullableFilter<"ParkingService"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    transactions?: ParkingTransactionListRelationFilter
    contracts?: ContractListRelationFilter
    logEntries?: LogEntryListRelationFilter
    complaints?: ComplaintListRelationFilter
  }, "id">

  export type ParkingServiceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    contactName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    additionalEmails?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalFileName?: SortOrderInput | SortOrder
    originalFilePath?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    mimeType?: SortOrderInput | SortOrder
    lastImportDate?: SortOrderInput | SortOrder
    importedBy?: SortOrderInput | SortOrder
    importStatus?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: ParkingServiceCountOrderByAggregateInput
    _avg?: ParkingServiceAvgOrderByAggregateInput
    _max?: ParkingServiceMaxOrderByAggregateInput
    _min?: ParkingServiceMinOrderByAggregateInput
    _sum?: ParkingServiceSumOrderByAggregateInput
  }

  export type ParkingServiceScalarWhereWithAggregatesInput = {
    AND?: ParkingServiceScalarWhereWithAggregatesInput | ParkingServiceScalarWhereWithAggregatesInput[]
    OR?: ParkingServiceScalarWhereWithAggregatesInput[]
    NOT?: ParkingServiceScalarWhereWithAggregatesInput | ParkingServiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ParkingService"> | string
    name?: StringWithAggregatesFilter<"ParkingService"> | string
    description?: StringNullableWithAggregatesFilter<"ParkingService"> | string | null
    contactName?: StringNullableWithAggregatesFilter<"ParkingService"> | string | null
    email?: StringNullableWithAggregatesFilter<"ParkingService"> | string | null
    phone?: StringNullableWithAggregatesFilter<"ParkingService"> | string | null
    address?: StringNullableWithAggregatesFilter<"ParkingService"> | string | null
    additionalEmails?: StringNullableListFilter<"ParkingService">
    isActive?: BoolWithAggregatesFilter<"ParkingService"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ParkingService"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ParkingService"> | Date | string
    originalFileName?: StringNullableWithAggregatesFilter<"ParkingService"> | string | null
    originalFilePath?: StringNullableWithAggregatesFilter<"ParkingService"> | string | null
    fileSize?: IntNullableWithAggregatesFilter<"ParkingService"> | number | null
    mimeType?: StringNullableWithAggregatesFilter<"ParkingService"> | string | null
    lastImportDate?: DateTimeNullableWithAggregatesFilter<"ParkingService"> | Date | string | null
    importedBy?: StringNullableWithAggregatesFilter<"ParkingService"> | string | null
    importStatus?: StringNullableWithAggregatesFilter<"ParkingService"> | string | null
    createdById?: StringNullableWithAggregatesFilter<"ParkingService"> | string | null
  }

  export type ContractWhereInput = {
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    id?: StringFilter<"Contract"> | string
    name?: StringFilter<"Contract"> | string
    contractNumber?: StringFilter<"Contract"> | string
    type?: EnumContractTypeFilter<"Contract"> | $Enums.ContractType
    status?: EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    revenuePercentage?: FloatFilter<"Contract"> | number
    description?: StringNullableFilter<"Contract"> | string | null
    operatorRevenue?: FloatNullableFilter<"Contract"> | number | null
    isRevenueSharing?: BoolFilter<"Contract"> | boolean
    operatorId?: StringNullableFilter<"Contract"> | string | null
    providerId?: StringNullableFilter<"Contract"> | string | null
    humanitarianOrgId?: StringNullableFilter<"Contract"> | string | null
    parkingServiceId?: StringNullableFilter<"Contract"> | string | null
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    createdById?: StringFilter<"Contract"> | string
    lastModifiedById?: StringNullableFilter<"Contract"> | string | null
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
    operator?: XOR<OperatorNullableScalarRelationFilter, OperatorWhereInput> | null
    humanitarianOrg?: XOR<HumanitarianOrgNullableScalarRelationFilter, HumanitarianOrgWhereInput> | null
    parkingService?: XOR<ParkingServiceNullableScalarRelationFilter, ParkingServiceWhereInput> | null
    services?: ServiceContractListRelationFilter
    attachments?: ContractAttachmentListRelationFilter
    humanitarianRenewals?: HumanitarianContractRenewalListRelationFilter
    renewals?: ContractRenewalListRelationFilter
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    lastModifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    reminders?: ContractReminderListRelationFilter
  }

  export type ContractOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contractNumber?: SortOrder
    type?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    revenuePercentage?: SortOrder
    description?: SortOrderInput | SortOrder
    operatorRevenue?: SortOrderInput | SortOrder
    isRevenueSharing?: SortOrder
    operatorId?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    humanitarianOrgId?: SortOrderInput | SortOrder
    parkingServiceId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrderInput | SortOrder
    provider?: ProviderOrderByWithRelationInput
    operator?: OperatorOrderByWithRelationInput
    humanitarianOrg?: HumanitarianOrgOrderByWithRelationInput
    parkingService?: ParkingServiceOrderByWithRelationInput
    services?: ServiceContractOrderByRelationAggregateInput
    attachments?: ContractAttachmentOrderByRelationAggregateInput
    humanitarianRenewals?: HumanitarianContractRenewalOrderByRelationAggregateInput
    renewals?: ContractRenewalOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
    lastModifiedBy?: UserOrderByWithRelationInput
    reminders?: ContractReminderOrderByRelationAggregateInput
  }

  export type ContractWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    contractNumber?: string
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    name?: StringFilter<"Contract"> | string
    type?: EnumContractTypeFilter<"Contract"> | $Enums.ContractType
    status?: EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    revenuePercentage?: FloatFilter<"Contract"> | number
    description?: StringNullableFilter<"Contract"> | string | null
    operatorRevenue?: FloatNullableFilter<"Contract"> | number | null
    isRevenueSharing?: BoolFilter<"Contract"> | boolean
    operatorId?: StringNullableFilter<"Contract"> | string | null
    providerId?: StringNullableFilter<"Contract"> | string | null
    humanitarianOrgId?: StringNullableFilter<"Contract"> | string | null
    parkingServiceId?: StringNullableFilter<"Contract"> | string | null
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    createdById?: StringFilter<"Contract"> | string
    lastModifiedById?: StringNullableFilter<"Contract"> | string | null
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
    operator?: XOR<OperatorNullableScalarRelationFilter, OperatorWhereInput> | null
    humanitarianOrg?: XOR<HumanitarianOrgNullableScalarRelationFilter, HumanitarianOrgWhereInput> | null
    parkingService?: XOR<ParkingServiceNullableScalarRelationFilter, ParkingServiceWhereInput> | null
    services?: ServiceContractListRelationFilter
    attachments?: ContractAttachmentListRelationFilter
    humanitarianRenewals?: HumanitarianContractRenewalListRelationFilter
    renewals?: ContractRenewalListRelationFilter
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    lastModifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    reminders?: ContractReminderListRelationFilter
  }, "id" | "contractNumber">

  export type ContractOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contractNumber?: SortOrder
    type?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    revenuePercentage?: SortOrder
    description?: SortOrderInput | SortOrder
    operatorRevenue?: SortOrderInput | SortOrder
    isRevenueSharing?: SortOrder
    operatorId?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    humanitarianOrgId?: SortOrderInput | SortOrder
    parkingServiceId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrderInput | SortOrder
    _count?: ContractCountOrderByAggregateInput
    _avg?: ContractAvgOrderByAggregateInput
    _max?: ContractMaxOrderByAggregateInput
    _min?: ContractMinOrderByAggregateInput
    _sum?: ContractSumOrderByAggregateInput
  }

  export type ContractScalarWhereWithAggregatesInput = {
    AND?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    OR?: ContractScalarWhereWithAggregatesInput[]
    NOT?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contract"> | string
    name?: StringWithAggregatesFilter<"Contract"> | string
    contractNumber?: StringWithAggregatesFilter<"Contract"> | string
    type?: EnumContractTypeWithAggregatesFilter<"Contract"> | $Enums.ContractType
    status?: EnumContractStatusWithAggregatesFilter<"Contract"> | $Enums.ContractStatus
    startDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    revenuePercentage?: FloatWithAggregatesFilter<"Contract"> | number
    description?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    operatorRevenue?: FloatNullableWithAggregatesFilter<"Contract"> | number | null
    isRevenueSharing?: BoolWithAggregatesFilter<"Contract"> | boolean
    operatorId?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    providerId?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    humanitarianOrgId?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    parkingServiceId?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    createdById?: StringWithAggregatesFilter<"Contract"> | string
    lastModifiedById?: StringNullableWithAggregatesFilter<"Contract"> | string | null
  }

  export type ContractRenewalWhereInput = {
    AND?: ContractRenewalWhereInput | ContractRenewalWhereInput[]
    OR?: ContractRenewalWhereInput[]
    NOT?: ContractRenewalWhereInput | ContractRenewalWhereInput[]
    id?: StringFilter<"ContractRenewal"> | string
    contractId?: StringFilter<"ContractRenewal"> | string
    subStatus?: EnumContractRenewalSubStatusFilter<"ContractRenewal"> | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFilter<"ContractRenewal"> | Date | string
    proposedStartDate?: DateTimeFilter<"ContractRenewal"> | Date | string
    proposedEndDate?: DateTimeFilter<"ContractRenewal"> | Date | string
    proposedRevenue?: FloatNullableFilter<"ContractRenewal"> | number | null
    documentsReceived?: BoolFilter<"ContractRenewal"> | boolean
    legalApproved?: BoolFilter<"ContractRenewal"> | boolean
    financialApproved?: BoolFilter<"ContractRenewal"> | boolean
    technicalApproved?: BoolFilter<"ContractRenewal"> | boolean
    managementApproved?: BoolFilter<"ContractRenewal"> | boolean
    signatureReceived?: BoolFilter<"ContractRenewal"> | boolean
    comments?: StringNullableFilter<"ContractRenewal"> | string | null
    internalNotes?: StringNullableFilter<"ContractRenewal"> | string | null
    createdAt?: DateTimeFilter<"ContractRenewal"> | Date | string
    updatedAt?: DateTimeFilter<"ContractRenewal"> | Date | string
    createdById?: StringFilter<"ContractRenewal"> | string
    lastModifiedById?: StringNullableFilter<"ContractRenewal"> | string | null
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    attachments?: ContractRenewalAttachmentListRelationFilter
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    lastModifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ContractRenewalOrderByWithRelationInput = {
    id?: SortOrder
    contractId?: SortOrder
    subStatus?: SortOrder
    renewalStartDate?: SortOrder
    proposedStartDate?: SortOrder
    proposedEndDate?: SortOrder
    proposedRevenue?: SortOrderInput | SortOrder
    documentsReceived?: SortOrder
    legalApproved?: SortOrder
    financialApproved?: SortOrder
    technicalApproved?: SortOrder
    managementApproved?: SortOrder
    signatureReceived?: SortOrder
    comments?: SortOrderInput | SortOrder
    internalNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrderInput | SortOrder
    contract?: ContractOrderByWithRelationInput
    attachments?: ContractRenewalAttachmentOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
    lastModifiedBy?: UserOrderByWithRelationInput
  }

  export type ContractRenewalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContractRenewalWhereInput | ContractRenewalWhereInput[]
    OR?: ContractRenewalWhereInput[]
    NOT?: ContractRenewalWhereInput | ContractRenewalWhereInput[]
    contractId?: StringFilter<"ContractRenewal"> | string
    subStatus?: EnumContractRenewalSubStatusFilter<"ContractRenewal"> | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFilter<"ContractRenewal"> | Date | string
    proposedStartDate?: DateTimeFilter<"ContractRenewal"> | Date | string
    proposedEndDate?: DateTimeFilter<"ContractRenewal"> | Date | string
    proposedRevenue?: FloatNullableFilter<"ContractRenewal"> | number | null
    documentsReceived?: BoolFilter<"ContractRenewal"> | boolean
    legalApproved?: BoolFilter<"ContractRenewal"> | boolean
    financialApproved?: BoolFilter<"ContractRenewal"> | boolean
    technicalApproved?: BoolFilter<"ContractRenewal"> | boolean
    managementApproved?: BoolFilter<"ContractRenewal"> | boolean
    signatureReceived?: BoolFilter<"ContractRenewal"> | boolean
    comments?: StringNullableFilter<"ContractRenewal"> | string | null
    internalNotes?: StringNullableFilter<"ContractRenewal"> | string | null
    createdAt?: DateTimeFilter<"ContractRenewal"> | Date | string
    updatedAt?: DateTimeFilter<"ContractRenewal"> | Date | string
    createdById?: StringFilter<"ContractRenewal"> | string
    lastModifiedById?: StringNullableFilter<"ContractRenewal"> | string | null
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    attachments?: ContractRenewalAttachmentListRelationFilter
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    lastModifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ContractRenewalOrderByWithAggregationInput = {
    id?: SortOrder
    contractId?: SortOrder
    subStatus?: SortOrder
    renewalStartDate?: SortOrder
    proposedStartDate?: SortOrder
    proposedEndDate?: SortOrder
    proposedRevenue?: SortOrderInput | SortOrder
    documentsReceived?: SortOrder
    legalApproved?: SortOrder
    financialApproved?: SortOrder
    technicalApproved?: SortOrder
    managementApproved?: SortOrder
    signatureReceived?: SortOrder
    comments?: SortOrderInput | SortOrder
    internalNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrderInput | SortOrder
    _count?: ContractRenewalCountOrderByAggregateInput
    _avg?: ContractRenewalAvgOrderByAggregateInput
    _max?: ContractRenewalMaxOrderByAggregateInput
    _min?: ContractRenewalMinOrderByAggregateInput
    _sum?: ContractRenewalSumOrderByAggregateInput
  }

  export type ContractRenewalScalarWhereWithAggregatesInput = {
    AND?: ContractRenewalScalarWhereWithAggregatesInput | ContractRenewalScalarWhereWithAggregatesInput[]
    OR?: ContractRenewalScalarWhereWithAggregatesInput[]
    NOT?: ContractRenewalScalarWhereWithAggregatesInput | ContractRenewalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContractRenewal"> | string
    contractId?: StringWithAggregatesFilter<"ContractRenewal"> | string
    subStatus?: EnumContractRenewalSubStatusWithAggregatesFilter<"ContractRenewal"> | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeWithAggregatesFilter<"ContractRenewal"> | Date | string
    proposedStartDate?: DateTimeWithAggregatesFilter<"ContractRenewal"> | Date | string
    proposedEndDate?: DateTimeWithAggregatesFilter<"ContractRenewal"> | Date | string
    proposedRevenue?: FloatNullableWithAggregatesFilter<"ContractRenewal"> | number | null
    documentsReceived?: BoolWithAggregatesFilter<"ContractRenewal"> | boolean
    legalApproved?: BoolWithAggregatesFilter<"ContractRenewal"> | boolean
    financialApproved?: BoolWithAggregatesFilter<"ContractRenewal"> | boolean
    technicalApproved?: BoolWithAggregatesFilter<"ContractRenewal"> | boolean
    managementApproved?: BoolWithAggregatesFilter<"ContractRenewal"> | boolean
    signatureReceived?: BoolWithAggregatesFilter<"ContractRenewal"> | boolean
    comments?: StringNullableWithAggregatesFilter<"ContractRenewal"> | string | null
    internalNotes?: StringNullableWithAggregatesFilter<"ContractRenewal"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ContractRenewal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ContractRenewal"> | Date | string
    createdById?: StringWithAggregatesFilter<"ContractRenewal"> | string
    lastModifiedById?: StringNullableWithAggregatesFilter<"ContractRenewal"> | string | null
  }

  export type ContractRenewalAttachmentWhereInput = {
    AND?: ContractRenewalAttachmentWhereInput | ContractRenewalAttachmentWhereInput[]
    OR?: ContractRenewalAttachmentWhereInput[]
    NOT?: ContractRenewalAttachmentWhereInput | ContractRenewalAttachmentWhereInput[]
    id?: StringFilter<"ContractRenewalAttachment"> | string
    renewalId?: StringFilter<"ContractRenewalAttachment"> | string
    fileName?: StringFilter<"ContractRenewalAttachment"> | string
    fileSize?: IntFilter<"ContractRenewalAttachment"> | number
    fileType?: StringFilter<"ContractRenewalAttachment"> | string
    filePath?: StringFilter<"ContractRenewalAttachment"> | string
    uploadedAt?: DateTimeFilter<"ContractRenewalAttachment"> | Date | string
    uploadedById?: StringFilter<"ContractRenewalAttachment"> | string
    description?: StringNullableFilter<"ContractRenewalAttachment"> | string | null
    renewal?: XOR<ContractRenewalScalarRelationFilter, ContractRenewalWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ContractRenewalAttachmentOrderByWithRelationInput = {
    id?: SortOrder
    renewalId?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    fileType?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    uploadedById?: SortOrder
    description?: SortOrderInput | SortOrder
    renewal?: ContractRenewalOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
  }

  export type ContractRenewalAttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContractRenewalAttachmentWhereInput | ContractRenewalAttachmentWhereInput[]
    OR?: ContractRenewalAttachmentWhereInput[]
    NOT?: ContractRenewalAttachmentWhereInput | ContractRenewalAttachmentWhereInput[]
    renewalId?: StringFilter<"ContractRenewalAttachment"> | string
    fileName?: StringFilter<"ContractRenewalAttachment"> | string
    fileSize?: IntFilter<"ContractRenewalAttachment"> | number
    fileType?: StringFilter<"ContractRenewalAttachment"> | string
    filePath?: StringFilter<"ContractRenewalAttachment"> | string
    uploadedAt?: DateTimeFilter<"ContractRenewalAttachment"> | Date | string
    uploadedById?: StringFilter<"ContractRenewalAttachment"> | string
    description?: StringNullableFilter<"ContractRenewalAttachment"> | string | null
    renewal?: XOR<ContractRenewalScalarRelationFilter, ContractRenewalWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ContractRenewalAttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    renewalId?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    fileType?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    uploadedById?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: ContractRenewalAttachmentCountOrderByAggregateInput
    _avg?: ContractRenewalAttachmentAvgOrderByAggregateInput
    _max?: ContractRenewalAttachmentMaxOrderByAggregateInput
    _min?: ContractRenewalAttachmentMinOrderByAggregateInput
    _sum?: ContractRenewalAttachmentSumOrderByAggregateInput
  }

  export type ContractRenewalAttachmentScalarWhereWithAggregatesInput = {
    AND?: ContractRenewalAttachmentScalarWhereWithAggregatesInput | ContractRenewalAttachmentScalarWhereWithAggregatesInput[]
    OR?: ContractRenewalAttachmentScalarWhereWithAggregatesInput[]
    NOT?: ContractRenewalAttachmentScalarWhereWithAggregatesInput | ContractRenewalAttachmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContractRenewalAttachment"> | string
    renewalId?: StringWithAggregatesFilter<"ContractRenewalAttachment"> | string
    fileName?: StringWithAggregatesFilter<"ContractRenewalAttachment"> | string
    fileSize?: IntWithAggregatesFilter<"ContractRenewalAttachment"> | number
    fileType?: StringWithAggregatesFilter<"ContractRenewalAttachment"> | string
    filePath?: StringWithAggregatesFilter<"ContractRenewalAttachment"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"ContractRenewalAttachment"> | Date | string
    uploadedById?: StringWithAggregatesFilter<"ContractRenewalAttachment"> | string
    description?: StringNullableWithAggregatesFilter<"ContractRenewalAttachment"> | string | null
  }

  export type HumanitarianContractRenewalWhereInput = {
    AND?: HumanitarianContractRenewalWhereInput | HumanitarianContractRenewalWhereInput[]
    OR?: HumanitarianContractRenewalWhereInput[]
    NOT?: HumanitarianContractRenewalWhereInput | HumanitarianContractRenewalWhereInput[]
    id?: StringFilter<"HumanitarianContractRenewal"> | string
    contractId?: StringFilter<"HumanitarianContractRenewal"> | string
    humanitarianOrgId?: StringFilter<"HumanitarianContractRenewal"> | string
    subStatus?: EnumHumanitarianRenewalSubStatusFilter<"HumanitarianContractRenewal"> | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    proposedStartDate?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    proposedEndDate?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    proposedRevenue?: FloatFilter<"HumanitarianContractRenewal"> | number
    documentsReceived?: BoolFilter<"HumanitarianContractRenewal"> | boolean
    legalApproved?: BoolFilter<"HumanitarianContractRenewal"> | boolean
    financialApproved?: BoolFilter<"HumanitarianContractRenewal"> | boolean
    signatureReceived?: BoolFilter<"HumanitarianContractRenewal"> | boolean
    notes?: StringNullableFilter<"HumanitarianContractRenewal"> | string | null
    createdAt?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    updatedAt?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    createdById?: StringFilter<"HumanitarianContractRenewal"> | string
    lastModifiedById?: StringNullableFilter<"HumanitarianContractRenewal"> | string | null
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    humanitarianOrg?: XOR<HumanitarianOrgScalarRelationFilter, HumanitarianOrgWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    lastModifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type HumanitarianContractRenewalOrderByWithRelationInput = {
    id?: SortOrder
    contractId?: SortOrder
    humanitarianOrgId?: SortOrder
    subStatus?: SortOrder
    renewalStartDate?: SortOrder
    proposedStartDate?: SortOrder
    proposedEndDate?: SortOrder
    proposedRevenue?: SortOrder
    documentsReceived?: SortOrder
    legalApproved?: SortOrder
    financialApproved?: SortOrder
    signatureReceived?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrderInput | SortOrder
    contract?: ContractOrderByWithRelationInput
    humanitarianOrg?: HumanitarianOrgOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    lastModifiedBy?: UserOrderByWithRelationInput
  }

  export type HumanitarianContractRenewalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HumanitarianContractRenewalWhereInput | HumanitarianContractRenewalWhereInput[]
    OR?: HumanitarianContractRenewalWhereInput[]
    NOT?: HumanitarianContractRenewalWhereInput | HumanitarianContractRenewalWhereInput[]
    contractId?: StringFilter<"HumanitarianContractRenewal"> | string
    humanitarianOrgId?: StringFilter<"HumanitarianContractRenewal"> | string
    subStatus?: EnumHumanitarianRenewalSubStatusFilter<"HumanitarianContractRenewal"> | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    proposedStartDate?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    proposedEndDate?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    proposedRevenue?: FloatFilter<"HumanitarianContractRenewal"> | number
    documentsReceived?: BoolFilter<"HumanitarianContractRenewal"> | boolean
    legalApproved?: BoolFilter<"HumanitarianContractRenewal"> | boolean
    financialApproved?: BoolFilter<"HumanitarianContractRenewal"> | boolean
    signatureReceived?: BoolFilter<"HumanitarianContractRenewal"> | boolean
    notes?: StringNullableFilter<"HumanitarianContractRenewal"> | string | null
    createdAt?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    updatedAt?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    createdById?: StringFilter<"HumanitarianContractRenewal"> | string
    lastModifiedById?: StringNullableFilter<"HumanitarianContractRenewal"> | string | null
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    humanitarianOrg?: XOR<HumanitarianOrgScalarRelationFilter, HumanitarianOrgWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    lastModifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type HumanitarianContractRenewalOrderByWithAggregationInput = {
    id?: SortOrder
    contractId?: SortOrder
    humanitarianOrgId?: SortOrder
    subStatus?: SortOrder
    renewalStartDate?: SortOrder
    proposedStartDate?: SortOrder
    proposedEndDate?: SortOrder
    proposedRevenue?: SortOrder
    documentsReceived?: SortOrder
    legalApproved?: SortOrder
    financialApproved?: SortOrder
    signatureReceived?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrderInput | SortOrder
    _count?: HumanitarianContractRenewalCountOrderByAggregateInput
    _avg?: HumanitarianContractRenewalAvgOrderByAggregateInput
    _max?: HumanitarianContractRenewalMaxOrderByAggregateInput
    _min?: HumanitarianContractRenewalMinOrderByAggregateInput
    _sum?: HumanitarianContractRenewalSumOrderByAggregateInput
  }

  export type HumanitarianContractRenewalScalarWhereWithAggregatesInput = {
    AND?: HumanitarianContractRenewalScalarWhereWithAggregatesInput | HumanitarianContractRenewalScalarWhereWithAggregatesInput[]
    OR?: HumanitarianContractRenewalScalarWhereWithAggregatesInput[]
    NOT?: HumanitarianContractRenewalScalarWhereWithAggregatesInput | HumanitarianContractRenewalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HumanitarianContractRenewal"> | string
    contractId?: StringWithAggregatesFilter<"HumanitarianContractRenewal"> | string
    humanitarianOrgId?: StringWithAggregatesFilter<"HumanitarianContractRenewal"> | string
    subStatus?: EnumHumanitarianRenewalSubStatusWithAggregatesFilter<"HumanitarianContractRenewal"> | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeWithAggregatesFilter<"HumanitarianContractRenewal"> | Date | string
    proposedStartDate?: DateTimeWithAggregatesFilter<"HumanitarianContractRenewal"> | Date | string
    proposedEndDate?: DateTimeWithAggregatesFilter<"HumanitarianContractRenewal"> | Date | string
    proposedRevenue?: FloatWithAggregatesFilter<"HumanitarianContractRenewal"> | number
    documentsReceived?: BoolWithAggregatesFilter<"HumanitarianContractRenewal"> | boolean
    legalApproved?: BoolWithAggregatesFilter<"HumanitarianContractRenewal"> | boolean
    financialApproved?: BoolWithAggregatesFilter<"HumanitarianContractRenewal"> | boolean
    signatureReceived?: BoolWithAggregatesFilter<"HumanitarianContractRenewal"> | boolean
    notes?: StringNullableWithAggregatesFilter<"HumanitarianContractRenewal"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"HumanitarianContractRenewal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HumanitarianContractRenewal"> | Date | string
    createdById?: StringWithAggregatesFilter<"HumanitarianContractRenewal"> | string
    lastModifiedById?: StringNullableWithAggregatesFilter<"HumanitarianContractRenewal"> | string | null
  }

  export type SenderBlacklistWhereInput = {
    AND?: SenderBlacklistWhereInput | SenderBlacklistWhereInput[]
    OR?: SenderBlacklistWhereInput[]
    NOT?: SenderBlacklistWhereInput | SenderBlacklistWhereInput[]
    id?: StringFilter<"SenderBlacklist"> | string
    senderName?: StringFilter<"SenderBlacklist"> | string
    effectiveDate?: DateTimeFilter<"SenderBlacklist"> | Date | string
    description?: StringNullableFilter<"SenderBlacklist"> | string | null
    isActive?: BoolFilter<"SenderBlacklist"> | boolean
    matchCount?: IntFilter<"SenderBlacklist"> | number
    lastMatchDate?: DateTimeNullableFilter<"SenderBlacklist"> | Date | string | null
    createdAt?: DateTimeFilter<"SenderBlacklist"> | Date | string
    updatedAt?: DateTimeFilter<"SenderBlacklist"> | Date | string
    createdById?: StringFilter<"SenderBlacklist"> | string
    modifiedById?: StringNullableFilter<"SenderBlacklist"> | string | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    logs?: BlacklistLogListRelationFilter
    modifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type SenderBlacklistOrderByWithRelationInput = {
    id?: SortOrder
    senderName?: SortOrder
    effectiveDate?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    matchCount?: SortOrder
    lastMatchDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    logs?: BlacklistLogOrderByRelationAggregateInput
    modifiedBy?: UserOrderByWithRelationInput
  }

  export type SenderBlacklistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SenderBlacklistWhereInput | SenderBlacklistWhereInput[]
    OR?: SenderBlacklistWhereInput[]
    NOT?: SenderBlacklistWhereInput | SenderBlacklistWhereInput[]
    senderName?: StringFilter<"SenderBlacklist"> | string
    effectiveDate?: DateTimeFilter<"SenderBlacklist"> | Date | string
    description?: StringNullableFilter<"SenderBlacklist"> | string | null
    isActive?: BoolFilter<"SenderBlacklist"> | boolean
    matchCount?: IntFilter<"SenderBlacklist"> | number
    lastMatchDate?: DateTimeNullableFilter<"SenderBlacklist"> | Date | string | null
    createdAt?: DateTimeFilter<"SenderBlacklist"> | Date | string
    updatedAt?: DateTimeFilter<"SenderBlacklist"> | Date | string
    createdById?: StringFilter<"SenderBlacklist"> | string
    modifiedById?: StringNullableFilter<"SenderBlacklist"> | string | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    logs?: BlacklistLogListRelationFilter
    modifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type SenderBlacklistOrderByWithAggregationInput = {
    id?: SortOrder
    senderName?: SortOrder
    effectiveDate?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    matchCount?: SortOrder
    lastMatchDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrderInput | SortOrder
    _count?: SenderBlacklistCountOrderByAggregateInput
    _avg?: SenderBlacklistAvgOrderByAggregateInput
    _max?: SenderBlacklistMaxOrderByAggregateInput
    _min?: SenderBlacklistMinOrderByAggregateInput
    _sum?: SenderBlacklistSumOrderByAggregateInput
  }

  export type SenderBlacklistScalarWhereWithAggregatesInput = {
    AND?: SenderBlacklistScalarWhereWithAggregatesInput | SenderBlacklistScalarWhereWithAggregatesInput[]
    OR?: SenderBlacklistScalarWhereWithAggregatesInput[]
    NOT?: SenderBlacklistScalarWhereWithAggregatesInput | SenderBlacklistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SenderBlacklist"> | string
    senderName?: StringWithAggregatesFilter<"SenderBlacklist"> | string
    effectiveDate?: DateTimeWithAggregatesFilter<"SenderBlacklist"> | Date | string
    description?: StringNullableWithAggregatesFilter<"SenderBlacklist"> | string | null
    isActive?: BoolWithAggregatesFilter<"SenderBlacklist"> | boolean
    matchCount?: IntWithAggregatesFilter<"SenderBlacklist"> | number
    lastMatchDate?: DateTimeNullableWithAggregatesFilter<"SenderBlacklist"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SenderBlacklist"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SenderBlacklist"> | Date | string
    createdById?: StringWithAggregatesFilter<"SenderBlacklist"> | string
    modifiedById?: StringNullableWithAggregatesFilter<"SenderBlacklist"> | string | null
  }

  export type BlacklistLogWhereInput = {
    AND?: BlacklistLogWhereInput | BlacklistLogWhereInput[]
    OR?: BlacklistLogWhereInput[]
    NOT?: BlacklistLogWhereInput | BlacklistLogWhereInput[]
    id?: StringFilter<"BlacklistLog"> | string
    action?: EnumLogBlackTypeFilter<"BlacklistLog"> | $Enums.LogBlackType
    entityId?: StringNullableFilter<"BlacklistLog"> | string | null
    entityType?: StringFilter<"BlacklistLog"> | string
    oldData?: JsonNullableFilter<"BlacklistLog">
    newData?: JsonNullableFilter<"BlacklistLog">
    userId?: StringFilter<"BlacklistLog"> | string
    timestamp?: DateTimeFilter<"BlacklistLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    blacklistEntry?: XOR<SenderBlacklistNullableScalarRelationFilter, SenderBlacklistWhereInput> | null
  }

  export type BlacklistLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    entityId?: SortOrderInput | SortOrder
    entityType?: SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
    blacklistEntry?: SenderBlacklistOrderByWithRelationInput
  }

  export type BlacklistLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BlacklistLogWhereInput | BlacklistLogWhereInput[]
    OR?: BlacklistLogWhereInput[]
    NOT?: BlacklistLogWhereInput | BlacklistLogWhereInput[]
    action?: EnumLogBlackTypeFilter<"BlacklistLog"> | $Enums.LogBlackType
    entityId?: StringNullableFilter<"BlacklistLog"> | string | null
    entityType?: StringFilter<"BlacklistLog"> | string
    oldData?: JsonNullableFilter<"BlacklistLog">
    newData?: JsonNullableFilter<"BlacklistLog">
    userId?: StringFilter<"BlacklistLog"> | string
    timestamp?: DateTimeFilter<"BlacklistLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    blacklistEntry?: XOR<SenderBlacklistNullableScalarRelationFilter, SenderBlacklistWhereInput> | null
  }, "id">

  export type BlacklistLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    entityId?: SortOrderInput | SortOrder
    entityType?: SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    _count?: BlacklistLogCountOrderByAggregateInput
    _max?: BlacklistLogMaxOrderByAggregateInput
    _min?: BlacklistLogMinOrderByAggregateInput
  }

  export type BlacklistLogScalarWhereWithAggregatesInput = {
    AND?: BlacklistLogScalarWhereWithAggregatesInput | BlacklistLogScalarWhereWithAggregatesInput[]
    OR?: BlacklistLogScalarWhereWithAggregatesInput[]
    NOT?: BlacklistLogScalarWhereWithAggregatesInput | BlacklistLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BlacklistLog"> | string
    action?: EnumLogBlackTypeWithAggregatesFilter<"BlacklistLog"> | $Enums.LogBlackType
    entityId?: StringNullableWithAggregatesFilter<"BlacklistLog"> | string | null
    entityType?: StringWithAggregatesFilter<"BlacklistLog"> | string
    oldData?: JsonNullableWithAggregatesFilter<"BlacklistLog">
    newData?: JsonNullableWithAggregatesFilter<"BlacklistLog">
    userId?: StringWithAggregatesFilter<"BlacklistLog"> | string
    timestamp?: DateTimeWithAggregatesFilter<"BlacklistLog"> | Date | string
  }

  export type OperatorWhereInput = {
    AND?: OperatorWhereInput | OperatorWhereInput[]
    OR?: OperatorWhereInput[]
    NOT?: OperatorWhereInput | OperatorWhereInput[]
    id?: StringFilter<"Operator"> | string
    name?: StringFilter<"Operator"> | string
    code?: StringFilter<"Operator"> | string
    description?: StringNullableFilter<"Operator"> | string | null
    logoUrl?: StringNullableFilter<"Operator"> | string | null
    website?: StringNullableFilter<"Operator"> | string | null
    contactEmail?: StringNullableFilter<"Operator"> | string | null
    contactPhone?: StringNullableFilter<"Operator"> | string | null
    active?: BoolFilter<"Operator"> | boolean
    createdAt?: DateTimeFilter<"Operator"> | Date | string
    updatedAt?: DateTimeFilter<"Operator"> | Date | string
    contracts?: ContractListRelationFilter
  }

  export type OperatorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contracts?: ContractOrderByRelationAggregateInput
  }

  export type OperatorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: OperatorWhereInput | OperatorWhereInput[]
    OR?: OperatorWhereInput[]
    NOT?: OperatorWhereInput | OperatorWhereInput[]
    name?: StringFilter<"Operator"> | string
    description?: StringNullableFilter<"Operator"> | string | null
    logoUrl?: StringNullableFilter<"Operator"> | string | null
    website?: StringNullableFilter<"Operator"> | string | null
    contactEmail?: StringNullableFilter<"Operator"> | string | null
    contactPhone?: StringNullableFilter<"Operator"> | string | null
    active?: BoolFilter<"Operator"> | boolean
    createdAt?: DateTimeFilter<"Operator"> | Date | string
    updatedAt?: DateTimeFilter<"Operator"> | Date | string
    contracts?: ContractListRelationFilter
  }, "id" | "code">

  export type OperatorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OperatorCountOrderByAggregateInput
    _max?: OperatorMaxOrderByAggregateInput
    _min?: OperatorMinOrderByAggregateInput
  }

  export type OperatorScalarWhereWithAggregatesInput = {
    AND?: OperatorScalarWhereWithAggregatesInput | OperatorScalarWhereWithAggregatesInput[]
    OR?: OperatorScalarWhereWithAggregatesInput[]
    NOT?: OperatorScalarWhereWithAggregatesInput | OperatorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Operator"> | string
    name?: StringWithAggregatesFilter<"Operator"> | string
    code?: StringWithAggregatesFilter<"Operator"> | string
    description?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    logoUrl?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    website?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    contactEmail?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    contactPhone?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    active?: BoolWithAggregatesFilter<"Operator"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Operator"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Operator"> | Date | string
  }

  export type ServiceContractWhereInput = {
    AND?: ServiceContractWhereInput | ServiceContractWhereInput[]
    OR?: ServiceContractWhereInput[]
    NOT?: ServiceContractWhereInput | ServiceContractWhereInput[]
    id?: StringFilter<"ServiceContract"> | string
    contractId?: StringFilter<"ServiceContract"> | string
    serviceId?: StringFilter<"ServiceContract"> | string
    specificTerms?: StringNullableFilter<"ServiceContract"> | string | null
    createdAt?: DateTimeFilter<"ServiceContract"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceContract"> | Date | string
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
  }

  export type ServiceContractOrderByWithRelationInput = {
    id?: SortOrder
    contractId?: SortOrder
    serviceId?: SortOrder
    specificTerms?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contract?: ContractOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
  }

  export type ServiceContractWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    contractId_serviceId?: ServiceContractContractIdServiceIdCompoundUniqueInput
    AND?: ServiceContractWhereInput | ServiceContractWhereInput[]
    OR?: ServiceContractWhereInput[]
    NOT?: ServiceContractWhereInput | ServiceContractWhereInput[]
    contractId?: StringFilter<"ServiceContract"> | string
    serviceId?: StringFilter<"ServiceContract"> | string
    specificTerms?: StringNullableFilter<"ServiceContract"> | string | null
    createdAt?: DateTimeFilter<"ServiceContract"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceContract"> | Date | string
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
  }, "id" | "contractId_serviceId">

  export type ServiceContractOrderByWithAggregationInput = {
    id?: SortOrder
    contractId?: SortOrder
    serviceId?: SortOrder
    specificTerms?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceContractCountOrderByAggregateInput
    _max?: ServiceContractMaxOrderByAggregateInput
    _min?: ServiceContractMinOrderByAggregateInput
  }

  export type ServiceContractScalarWhereWithAggregatesInput = {
    AND?: ServiceContractScalarWhereWithAggregatesInput | ServiceContractScalarWhereWithAggregatesInput[]
    OR?: ServiceContractScalarWhereWithAggregatesInput[]
    NOT?: ServiceContractScalarWhereWithAggregatesInput | ServiceContractScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ServiceContract"> | string
    contractId?: StringWithAggregatesFilter<"ServiceContract"> | string
    serviceId?: StringWithAggregatesFilter<"ServiceContract"> | string
    specificTerms?: StringNullableWithAggregatesFilter<"ServiceContract"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ServiceContract"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ServiceContract"> | Date | string
  }

  export type ContractAttachmentWhereInput = {
    AND?: ContractAttachmentWhereInput | ContractAttachmentWhereInput[]
    OR?: ContractAttachmentWhereInput[]
    NOT?: ContractAttachmentWhereInput | ContractAttachmentWhereInput[]
    id?: StringFilter<"ContractAttachment"> | string
    contractId?: StringFilter<"ContractAttachment"> | string
    name?: StringFilter<"ContractAttachment"> | string
    fileUrl?: StringFilter<"ContractAttachment"> | string
    fileType?: StringFilter<"ContractAttachment"> | string
    uploadedAt?: DateTimeFilter<"ContractAttachment"> | Date | string
    uploadedById?: StringFilter<"ContractAttachment"> | string
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ContractAttachmentOrderByWithRelationInput = {
    id?: SortOrder
    contractId?: SortOrder
    name?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    uploadedAt?: SortOrder
    uploadedById?: SortOrder
    contract?: ContractOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
  }

  export type ContractAttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContractAttachmentWhereInput | ContractAttachmentWhereInput[]
    OR?: ContractAttachmentWhereInput[]
    NOT?: ContractAttachmentWhereInput | ContractAttachmentWhereInput[]
    contractId?: StringFilter<"ContractAttachment"> | string
    name?: StringFilter<"ContractAttachment"> | string
    fileUrl?: StringFilter<"ContractAttachment"> | string
    fileType?: StringFilter<"ContractAttachment"> | string
    uploadedAt?: DateTimeFilter<"ContractAttachment"> | Date | string
    uploadedById?: StringFilter<"ContractAttachment"> | string
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ContractAttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    contractId?: SortOrder
    name?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    uploadedAt?: SortOrder
    uploadedById?: SortOrder
    _count?: ContractAttachmentCountOrderByAggregateInput
    _max?: ContractAttachmentMaxOrderByAggregateInput
    _min?: ContractAttachmentMinOrderByAggregateInput
  }

  export type ContractAttachmentScalarWhereWithAggregatesInput = {
    AND?: ContractAttachmentScalarWhereWithAggregatesInput | ContractAttachmentScalarWhereWithAggregatesInput[]
    OR?: ContractAttachmentScalarWhereWithAggregatesInput[]
    NOT?: ContractAttachmentScalarWhereWithAggregatesInput | ContractAttachmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContractAttachment"> | string
    contractId?: StringWithAggregatesFilter<"ContractAttachment"> | string
    name?: StringWithAggregatesFilter<"ContractAttachment"> | string
    fileUrl?: StringWithAggregatesFilter<"ContractAttachment"> | string
    fileType?: StringWithAggregatesFilter<"ContractAttachment"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"ContractAttachment"> | Date | string
    uploadedById?: StringWithAggregatesFilter<"ContractAttachment"> | string
  }

  export type ContractReminderWhereInput = {
    AND?: ContractReminderWhereInput | ContractReminderWhereInput[]
    OR?: ContractReminderWhereInput[]
    NOT?: ContractReminderWhereInput | ContractReminderWhereInput[]
    id?: StringFilter<"ContractReminder"> | string
    contractId?: StringFilter<"ContractReminder"> | string
    reminderDate?: DateTimeFilter<"ContractReminder"> | Date | string
    reminderType?: StringFilter<"ContractReminder"> | string
    isAcknowledged?: BoolFilter<"ContractReminder"> | boolean
    acknowledgedById?: StringNullableFilter<"ContractReminder"> | string | null
    createdAt?: DateTimeFilter<"ContractReminder"> | Date | string
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    acknowledgedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ContractReminderOrderByWithRelationInput = {
    id?: SortOrder
    contractId?: SortOrder
    reminderDate?: SortOrder
    reminderType?: SortOrder
    isAcknowledged?: SortOrder
    acknowledgedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    contract?: ContractOrderByWithRelationInput
    acknowledgedBy?: UserOrderByWithRelationInput
  }

  export type ContractReminderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContractReminderWhereInput | ContractReminderWhereInput[]
    OR?: ContractReminderWhereInput[]
    NOT?: ContractReminderWhereInput | ContractReminderWhereInput[]
    contractId?: StringFilter<"ContractReminder"> | string
    reminderDate?: DateTimeFilter<"ContractReminder"> | Date | string
    reminderType?: StringFilter<"ContractReminder"> | string
    isAcknowledged?: BoolFilter<"ContractReminder"> | boolean
    acknowledgedById?: StringNullableFilter<"ContractReminder"> | string | null
    createdAt?: DateTimeFilter<"ContractReminder"> | Date | string
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    acknowledgedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ContractReminderOrderByWithAggregationInput = {
    id?: SortOrder
    contractId?: SortOrder
    reminderDate?: SortOrder
    reminderType?: SortOrder
    isAcknowledged?: SortOrder
    acknowledgedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ContractReminderCountOrderByAggregateInput
    _max?: ContractReminderMaxOrderByAggregateInput
    _min?: ContractReminderMinOrderByAggregateInput
  }

  export type ContractReminderScalarWhereWithAggregatesInput = {
    AND?: ContractReminderScalarWhereWithAggregatesInput | ContractReminderScalarWhereWithAggregatesInput[]
    OR?: ContractReminderScalarWhereWithAggregatesInput[]
    NOT?: ContractReminderScalarWhereWithAggregatesInput | ContractReminderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContractReminder"> | string
    contractId?: StringWithAggregatesFilter<"ContractReminder"> | string
    reminderDate?: DateTimeWithAggregatesFilter<"ContractReminder"> | Date | string
    reminderType?: StringWithAggregatesFilter<"ContractReminder"> | string
    isAcknowledged?: BoolWithAggregatesFilter<"ContractReminder"> | boolean
    acknowledgedById?: StringNullableWithAggregatesFilter<"ContractReminder"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ContractReminder"> | Date | string
  }

  export type ServiceWhereInput = {
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    id?: StringFilter<"Service"> | string
    name?: StringFilter<"Service"> | string
    type?: EnumServiceTypeFilter<"Service"> | $Enums.ServiceType
    description?: StringNullableFilter<"Service"> | string | null
    isActive?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    billingType?: EnumBillingTypeNullableFilter<"Service"> | $Enums.BillingType | null
    contracts?: ServiceContractListRelationFilter
    vasServices?: VasServiceListRelationFilter
    bulkServices?: BulkServiceListRelationFilter
    complaints?: ComplaintListRelationFilter
    transactions?: ParkingTransactionListRelationFilter
    vasTransactions?: VasTransactionListRelationFilter
  }

  export type ServiceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    billingType?: SortOrderInput | SortOrder
    contracts?: ServiceContractOrderByRelationAggregateInput
    vasServices?: VasServiceOrderByRelationAggregateInput
    bulkServices?: BulkServiceOrderByRelationAggregateInput
    complaints?: ComplaintOrderByRelationAggregateInput
    transactions?: ParkingTransactionOrderByRelationAggregateInput
    vasTransactions?: VasTransactionOrderByRelationAggregateInput
  }

  export type ServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    name?: StringFilter<"Service"> | string
    type?: EnumServiceTypeFilter<"Service"> | $Enums.ServiceType
    description?: StringNullableFilter<"Service"> | string | null
    isActive?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    billingType?: EnumBillingTypeNullableFilter<"Service"> | $Enums.BillingType | null
    contracts?: ServiceContractListRelationFilter
    vasServices?: VasServiceListRelationFilter
    bulkServices?: BulkServiceListRelationFilter
    complaints?: ComplaintListRelationFilter
    transactions?: ParkingTransactionListRelationFilter
    vasTransactions?: VasTransactionListRelationFilter
  }, "id">

  export type ServiceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    billingType?: SortOrderInput | SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    OR?: ServiceScalarWhereWithAggregatesInput[]
    NOT?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Service"> | string
    name?: StringWithAggregatesFilter<"Service"> | string
    type?: EnumServiceTypeWithAggregatesFilter<"Service"> | $Enums.ServiceType
    description?: StringNullableWithAggregatesFilter<"Service"> | string | null
    isActive?: BoolWithAggregatesFilter<"Service"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
    billingType?: EnumBillingTypeNullableWithAggregatesFilter<"Service"> | $Enums.BillingType | null
  }

  export type VasServiceWhereInput = {
    AND?: VasServiceWhereInput | VasServiceWhereInput[]
    OR?: VasServiceWhereInput[]
    NOT?: VasServiceWhereInput | VasServiceWhereInput[]
    id?: StringFilter<"VasService"> | string
    proizvod?: StringFilter<"VasService"> | string
    mesec_pruzanja_usluge?: DateTimeFilter<"VasService"> | Date | string
    jedinicna_cena?: FloatFilter<"VasService"> | number
    broj_transakcija?: IntFilter<"VasService"> | number
    fakturisan_iznos?: FloatFilter<"VasService"> | number
    fakturisan_korigovan_iznos?: FloatFilter<"VasService"> | number
    naplacen_iznos?: FloatFilter<"VasService"> | number
    kumulativ_naplacenih_iznosa?: FloatFilter<"VasService"> | number
    nenaplacen_iznos?: FloatFilter<"VasService"> | number
    nenaplacen_korigovan_iznos?: FloatFilter<"VasService"> | number
    storniran_iznos?: FloatFilter<"VasService"> | number
    otkazan_iznos?: FloatFilter<"VasService"> | number
    kumulativ_otkazanih_iznosa?: FloatFilter<"VasService"> | number
    iznos_za_prenos_sredstava?: FloatFilter<"VasService"> | number
    serviceId?: StringFilter<"VasService"> | string
    provajderId?: StringFilter<"VasService"> | string
    createdAt?: DateTimeFilter<"VasService"> | Date | string
    updatedAt?: DateTimeFilter<"VasService"> | Date | string
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
  }

  export type VasServiceOrderByWithRelationInput = {
    id?: SortOrder
    proizvod?: SortOrder
    mesec_pruzanja_usluge?: SortOrder
    jedinicna_cena?: SortOrder
    broj_transakcija?: SortOrder
    fakturisan_iznos?: SortOrder
    fakturisan_korigovan_iznos?: SortOrder
    naplacen_iznos?: SortOrder
    kumulativ_naplacenih_iznosa?: SortOrder
    nenaplacen_iznos?: SortOrder
    nenaplacen_korigovan_iznos?: SortOrder
    storniran_iznos?: SortOrder
    otkazan_iznos?: SortOrder
    kumulativ_otkazanih_iznosa?: SortOrder
    iznos_za_prenos_sredstava?: SortOrder
    serviceId?: SortOrder
    provajderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    service?: ServiceOrderByWithRelationInput
    provider?: ProviderOrderByWithRelationInput
  }

  export type VasServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    proizvod_mesec_pruzanja_usluge_provajderId?: VasServiceProizvodMesec_pruzanja_uslugeProvajderIdCompoundUniqueInput
    AND?: VasServiceWhereInput | VasServiceWhereInput[]
    OR?: VasServiceWhereInput[]
    NOT?: VasServiceWhereInput | VasServiceWhereInput[]
    proizvod?: StringFilter<"VasService"> | string
    mesec_pruzanja_usluge?: DateTimeFilter<"VasService"> | Date | string
    jedinicna_cena?: FloatFilter<"VasService"> | number
    broj_transakcija?: IntFilter<"VasService"> | number
    fakturisan_iznos?: FloatFilter<"VasService"> | number
    fakturisan_korigovan_iznos?: FloatFilter<"VasService"> | number
    naplacen_iznos?: FloatFilter<"VasService"> | number
    kumulativ_naplacenih_iznosa?: FloatFilter<"VasService"> | number
    nenaplacen_iznos?: FloatFilter<"VasService"> | number
    nenaplacen_korigovan_iznos?: FloatFilter<"VasService"> | number
    storniran_iznos?: FloatFilter<"VasService"> | number
    otkazan_iznos?: FloatFilter<"VasService"> | number
    kumulativ_otkazanih_iznosa?: FloatFilter<"VasService"> | number
    iznos_za_prenos_sredstava?: FloatFilter<"VasService"> | number
    serviceId?: StringFilter<"VasService"> | string
    provajderId?: StringFilter<"VasService"> | string
    createdAt?: DateTimeFilter<"VasService"> | Date | string
    updatedAt?: DateTimeFilter<"VasService"> | Date | string
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
  }, "id" | "proizvod_mesec_pruzanja_usluge_provajderId">

  export type VasServiceOrderByWithAggregationInput = {
    id?: SortOrder
    proizvod?: SortOrder
    mesec_pruzanja_usluge?: SortOrder
    jedinicna_cena?: SortOrder
    broj_transakcija?: SortOrder
    fakturisan_iznos?: SortOrder
    fakturisan_korigovan_iznos?: SortOrder
    naplacen_iznos?: SortOrder
    kumulativ_naplacenih_iznosa?: SortOrder
    nenaplacen_iznos?: SortOrder
    nenaplacen_korigovan_iznos?: SortOrder
    storniran_iznos?: SortOrder
    otkazan_iznos?: SortOrder
    kumulativ_otkazanih_iznosa?: SortOrder
    iznos_za_prenos_sredstava?: SortOrder
    serviceId?: SortOrder
    provajderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VasServiceCountOrderByAggregateInput
    _avg?: VasServiceAvgOrderByAggregateInput
    _max?: VasServiceMaxOrderByAggregateInput
    _min?: VasServiceMinOrderByAggregateInput
    _sum?: VasServiceSumOrderByAggregateInput
  }

  export type VasServiceScalarWhereWithAggregatesInput = {
    AND?: VasServiceScalarWhereWithAggregatesInput | VasServiceScalarWhereWithAggregatesInput[]
    OR?: VasServiceScalarWhereWithAggregatesInput[]
    NOT?: VasServiceScalarWhereWithAggregatesInput | VasServiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VasService"> | string
    proizvod?: StringWithAggregatesFilter<"VasService"> | string
    mesec_pruzanja_usluge?: DateTimeWithAggregatesFilter<"VasService"> | Date | string
    jedinicna_cena?: FloatWithAggregatesFilter<"VasService"> | number
    broj_transakcija?: IntWithAggregatesFilter<"VasService"> | number
    fakturisan_iznos?: FloatWithAggregatesFilter<"VasService"> | number
    fakturisan_korigovan_iznos?: FloatWithAggregatesFilter<"VasService"> | number
    naplacen_iznos?: FloatWithAggregatesFilter<"VasService"> | number
    kumulativ_naplacenih_iznosa?: FloatWithAggregatesFilter<"VasService"> | number
    nenaplacen_iznos?: FloatWithAggregatesFilter<"VasService"> | number
    nenaplacen_korigovan_iznos?: FloatWithAggregatesFilter<"VasService"> | number
    storniran_iznos?: FloatWithAggregatesFilter<"VasService"> | number
    otkazan_iznos?: FloatWithAggregatesFilter<"VasService"> | number
    kumulativ_otkazanih_iznosa?: FloatWithAggregatesFilter<"VasService"> | number
    iznos_za_prenos_sredstava?: FloatWithAggregatesFilter<"VasService"> | number
    serviceId?: StringWithAggregatesFilter<"VasService"> | string
    provajderId?: StringWithAggregatesFilter<"VasService"> | string
    createdAt?: DateTimeWithAggregatesFilter<"VasService"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VasService"> | Date | string
  }

  export type BulkServiceWhereInput = {
    AND?: BulkServiceWhereInput | BulkServiceWhereInput[]
    OR?: BulkServiceWhereInput[]
    NOT?: BulkServiceWhereInput | BulkServiceWhereInput[]
    id?: StringFilter<"BulkService"> | string
    provider_name?: StringFilter<"BulkService"> | string
    agreement_name?: StringFilter<"BulkService"> | string
    service_name?: StringFilter<"BulkService"> | string
    step_name?: StringFilter<"BulkService"> | string
    sender_name?: StringFilter<"BulkService"> | string
    requests?: IntFilter<"BulkService"> | number
    message_parts?: IntFilter<"BulkService"> | number
    datumNaplate?: DateTimeFilter<"BulkService"> | Date | string
    serviceId?: StringFilter<"BulkService"> | string
    providerId?: StringFilter<"BulkService"> | string
    createdAt?: DateTimeFilter<"BulkService"> | Date | string
    updatedAt?: DateTimeFilter<"BulkService"> | Date | string
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
    logEntries?: LogEntryListRelationFilter
  }

  export type BulkServiceOrderByWithRelationInput = {
    id?: SortOrder
    provider_name?: SortOrder
    agreement_name?: SortOrder
    service_name?: SortOrder
    step_name?: SortOrder
    sender_name?: SortOrder
    requests?: SortOrder
    message_parts?: SortOrder
    datumNaplate?: SortOrder
    serviceId?: SortOrder
    providerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    service?: ServiceOrderByWithRelationInput
    provider?: ProviderOrderByWithRelationInput
    logEntries?: LogEntryOrderByRelationAggregateInput
  }

  export type BulkServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_name_agreement_name_service_name_sender_name_datumNaplate?: BulkServiceProvider_nameAgreement_nameService_nameSender_nameDatumNaplateCompoundUniqueInput
    AND?: BulkServiceWhereInput | BulkServiceWhereInput[]
    OR?: BulkServiceWhereInput[]
    NOT?: BulkServiceWhereInput | BulkServiceWhereInput[]
    provider_name?: StringFilter<"BulkService"> | string
    agreement_name?: StringFilter<"BulkService"> | string
    service_name?: StringFilter<"BulkService"> | string
    step_name?: StringFilter<"BulkService"> | string
    sender_name?: StringFilter<"BulkService"> | string
    requests?: IntFilter<"BulkService"> | number
    message_parts?: IntFilter<"BulkService"> | number
    datumNaplate?: DateTimeFilter<"BulkService"> | Date | string
    serviceId?: StringFilter<"BulkService"> | string
    providerId?: StringFilter<"BulkService"> | string
    createdAt?: DateTimeFilter<"BulkService"> | Date | string
    updatedAt?: DateTimeFilter<"BulkService"> | Date | string
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
    logEntries?: LogEntryListRelationFilter
  }, "id" | "provider_name_agreement_name_service_name_sender_name_datumNaplate">

  export type BulkServiceOrderByWithAggregationInput = {
    id?: SortOrder
    provider_name?: SortOrder
    agreement_name?: SortOrder
    service_name?: SortOrder
    step_name?: SortOrder
    sender_name?: SortOrder
    requests?: SortOrder
    message_parts?: SortOrder
    datumNaplate?: SortOrder
    serviceId?: SortOrder
    providerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BulkServiceCountOrderByAggregateInput
    _avg?: BulkServiceAvgOrderByAggregateInput
    _max?: BulkServiceMaxOrderByAggregateInput
    _min?: BulkServiceMinOrderByAggregateInput
    _sum?: BulkServiceSumOrderByAggregateInput
  }

  export type BulkServiceScalarWhereWithAggregatesInput = {
    AND?: BulkServiceScalarWhereWithAggregatesInput | BulkServiceScalarWhereWithAggregatesInput[]
    OR?: BulkServiceScalarWhereWithAggregatesInput[]
    NOT?: BulkServiceScalarWhereWithAggregatesInput | BulkServiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BulkService"> | string
    provider_name?: StringWithAggregatesFilter<"BulkService"> | string
    agreement_name?: StringWithAggregatesFilter<"BulkService"> | string
    service_name?: StringWithAggregatesFilter<"BulkService"> | string
    step_name?: StringWithAggregatesFilter<"BulkService"> | string
    sender_name?: StringWithAggregatesFilter<"BulkService"> | string
    requests?: IntWithAggregatesFilter<"BulkService"> | number
    message_parts?: IntWithAggregatesFilter<"BulkService"> | number
    datumNaplate?: DateTimeWithAggregatesFilter<"BulkService"> | Date | string
    serviceId?: StringWithAggregatesFilter<"BulkService"> | string
    providerId?: StringWithAggregatesFilter<"BulkService"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BulkService"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BulkService"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    code?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    isActive?: BoolFilter<"Product"> | boolean
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    complaints?: ComplaintListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    complaints?: ComplaintOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    isActive?: BoolFilter<"Product"> | boolean
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    complaints?: ComplaintListRelationFilter
  }, "id" | "code">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    code?: StringWithAggregatesFilter<"Product"> | string
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    isActive?: BoolWithAggregatesFilter<"Product"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
  }

  export type ComplaintWhereInput = {
    AND?: ComplaintWhereInput | ComplaintWhereInput[]
    OR?: ComplaintWhereInput[]
    NOT?: ComplaintWhereInput | ComplaintWhereInput[]
    id?: StringFilter<"Complaint"> | string
    title?: StringFilter<"Complaint"> | string
    description?: StringFilter<"Complaint"> | string
    status?: EnumComplaintStatusFilter<"Complaint"> | $Enums.ComplaintStatus
    priority?: IntFilter<"Complaint"> | number
    financialImpact?: FloatNullableFilter<"Complaint"> | number | null
    serviceId?: StringNullableFilter<"Complaint"> | string | null
    productId?: StringNullableFilter<"Complaint"> | string | null
    providerId?: StringNullableFilter<"Complaint"> | string | null
    submittedById?: StringFilter<"Complaint"> | string
    assignedAgentId?: StringNullableFilter<"Complaint"> | string | null
    assignedAt?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    createdAt?: DateTimeFilter<"Complaint"> | Date | string
    updatedAt?: DateTimeFilter<"Complaint"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    closedAt?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    humanitarianOrgId?: StringNullableFilter<"Complaint"> | string | null
    parkingServiceId?: StringNullableFilter<"Complaint"> | string | null
    service?: XOR<ServiceNullableScalarRelationFilter, ServiceWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
    submittedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignedAgent?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    comments?: CommentListRelationFilter
    attachments?: AttachmentListRelationFilter
    humanitarianOrg?: XOR<HumanitarianOrgNullableScalarRelationFilter, HumanitarianOrgWhereInput> | null
    parkingService?: XOR<ParkingServiceNullableScalarRelationFilter, ParkingServiceWhereInput> | null
    statusHistory?: ComplaintStatusHistoryListRelationFilter
  }

  export type ComplaintOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    financialImpact?: SortOrderInput | SortOrder
    serviceId?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    submittedById?: SortOrder
    assignedAgentId?: SortOrderInput | SortOrder
    assignedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    humanitarianOrgId?: SortOrderInput | SortOrder
    parkingServiceId?: SortOrderInput | SortOrder
    service?: ServiceOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    provider?: ProviderOrderByWithRelationInput
    submittedBy?: UserOrderByWithRelationInput
    assignedAgent?: UserOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    attachments?: AttachmentOrderByRelationAggregateInput
    humanitarianOrg?: HumanitarianOrgOrderByWithRelationInput
    parkingService?: ParkingServiceOrderByWithRelationInput
    statusHistory?: ComplaintStatusHistoryOrderByRelationAggregateInput
  }

  export type ComplaintWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ComplaintWhereInput | ComplaintWhereInput[]
    OR?: ComplaintWhereInput[]
    NOT?: ComplaintWhereInput | ComplaintWhereInput[]
    title?: StringFilter<"Complaint"> | string
    description?: StringFilter<"Complaint"> | string
    status?: EnumComplaintStatusFilter<"Complaint"> | $Enums.ComplaintStatus
    priority?: IntFilter<"Complaint"> | number
    financialImpact?: FloatNullableFilter<"Complaint"> | number | null
    serviceId?: StringNullableFilter<"Complaint"> | string | null
    productId?: StringNullableFilter<"Complaint"> | string | null
    providerId?: StringNullableFilter<"Complaint"> | string | null
    submittedById?: StringFilter<"Complaint"> | string
    assignedAgentId?: StringNullableFilter<"Complaint"> | string | null
    assignedAt?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    createdAt?: DateTimeFilter<"Complaint"> | Date | string
    updatedAt?: DateTimeFilter<"Complaint"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    closedAt?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    humanitarianOrgId?: StringNullableFilter<"Complaint"> | string | null
    parkingServiceId?: StringNullableFilter<"Complaint"> | string | null
    service?: XOR<ServiceNullableScalarRelationFilter, ServiceWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
    submittedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignedAgent?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    comments?: CommentListRelationFilter
    attachments?: AttachmentListRelationFilter
    humanitarianOrg?: XOR<HumanitarianOrgNullableScalarRelationFilter, HumanitarianOrgWhereInput> | null
    parkingService?: XOR<ParkingServiceNullableScalarRelationFilter, ParkingServiceWhereInput> | null
    statusHistory?: ComplaintStatusHistoryListRelationFilter
  }, "id">

  export type ComplaintOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    financialImpact?: SortOrderInput | SortOrder
    serviceId?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    submittedById?: SortOrder
    assignedAgentId?: SortOrderInput | SortOrder
    assignedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    humanitarianOrgId?: SortOrderInput | SortOrder
    parkingServiceId?: SortOrderInput | SortOrder
    _count?: ComplaintCountOrderByAggregateInput
    _avg?: ComplaintAvgOrderByAggregateInput
    _max?: ComplaintMaxOrderByAggregateInput
    _min?: ComplaintMinOrderByAggregateInput
    _sum?: ComplaintSumOrderByAggregateInput
  }

  export type ComplaintScalarWhereWithAggregatesInput = {
    AND?: ComplaintScalarWhereWithAggregatesInput | ComplaintScalarWhereWithAggregatesInput[]
    OR?: ComplaintScalarWhereWithAggregatesInput[]
    NOT?: ComplaintScalarWhereWithAggregatesInput | ComplaintScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Complaint"> | string
    title?: StringWithAggregatesFilter<"Complaint"> | string
    description?: StringWithAggregatesFilter<"Complaint"> | string
    status?: EnumComplaintStatusWithAggregatesFilter<"Complaint"> | $Enums.ComplaintStatus
    priority?: IntWithAggregatesFilter<"Complaint"> | number
    financialImpact?: FloatNullableWithAggregatesFilter<"Complaint"> | number | null
    serviceId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    productId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    providerId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    submittedById?: StringWithAggregatesFilter<"Complaint"> | string
    assignedAgentId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    assignedAt?: DateTimeNullableWithAggregatesFilter<"Complaint"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Complaint"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Complaint"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"Complaint"> | Date | string | null
    closedAt?: DateTimeNullableWithAggregatesFilter<"Complaint"> | Date | string | null
    humanitarianOrgId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    parkingServiceId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
  }

  export type ComplaintStatusHistoryWhereInput = {
    AND?: ComplaintStatusHistoryWhereInput | ComplaintStatusHistoryWhereInput[]
    OR?: ComplaintStatusHistoryWhereInput[]
    NOT?: ComplaintStatusHistoryWhereInput | ComplaintStatusHistoryWhereInput[]
    id?: StringFilter<"ComplaintStatusHistory"> | string
    complaintId?: StringFilter<"ComplaintStatusHistory"> | string
    previousStatus?: EnumComplaintStatusNullableFilter<"ComplaintStatusHistory"> | $Enums.ComplaintStatus | null
    newStatus?: EnumComplaintStatusFilter<"ComplaintStatusHistory"> | $Enums.ComplaintStatus
    changedById?: StringFilter<"ComplaintStatusHistory"> | string
    changedAt?: DateTimeFilter<"ComplaintStatusHistory"> | Date | string
    notes?: StringNullableFilter<"ComplaintStatusHistory"> | string | null
    complaint?: XOR<ComplaintScalarRelationFilter, ComplaintWhereInput>
  }

  export type ComplaintStatusHistoryOrderByWithRelationInput = {
    id?: SortOrder
    complaintId?: SortOrder
    previousStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrder
    changedById?: SortOrder
    changedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    complaint?: ComplaintOrderByWithRelationInput
  }

  export type ComplaintStatusHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ComplaintStatusHistoryWhereInput | ComplaintStatusHistoryWhereInput[]
    OR?: ComplaintStatusHistoryWhereInput[]
    NOT?: ComplaintStatusHistoryWhereInput | ComplaintStatusHistoryWhereInput[]
    complaintId?: StringFilter<"ComplaintStatusHistory"> | string
    previousStatus?: EnumComplaintStatusNullableFilter<"ComplaintStatusHistory"> | $Enums.ComplaintStatus | null
    newStatus?: EnumComplaintStatusFilter<"ComplaintStatusHistory"> | $Enums.ComplaintStatus
    changedById?: StringFilter<"ComplaintStatusHistory"> | string
    changedAt?: DateTimeFilter<"ComplaintStatusHistory"> | Date | string
    notes?: StringNullableFilter<"ComplaintStatusHistory"> | string | null
    complaint?: XOR<ComplaintScalarRelationFilter, ComplaintWhereInput>
  }, "id">

  export type ComplaintStatusHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    complaintId?: SortOrder
    previousStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrder
    changedById?: SortOrder
    changedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: ComplaintStatusHistoryCountOrderByAggregateInput
    _max?: ComplaintStatusHistoryMaxOrderByAggregateInput
    _min?: ComplaintStatusHistoryMinOrderByAggregateInput
  }

  export type ComplaintStatusHistoryScalarWhereWithAggregatesInput = {
    AND?: ComplaintStatusHistoryScalarWhereWithAggregatesInput | ComplaintStatusHistoryScalarWhereWithAggregatesInput[]
    OR?: ComplaintStatusHistoryScalarWhereWithAggregatesInput[]
    NOT?: ComplaintStatusHistoryScalarWhereWithAggregatesInput | ComplaintStatusHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ComplaintStatusHistory"> | string
    complaintId?: StringWithAggregatesFilter<"ComplaintStatusHistory"> | string
    previousStatus?: EnumComplaintStatusNullableWithAggregatesFilter<"ComplaintStatusHistory"> | $Enums.ComplaintStatus | null
    newStatus?: EnumComplaintStatusWithAggregatesFilter<"ComplaintStatusHistory"> | $Enums.ComplaintStatus
    changedById?: StringWithAggregatesFilter<"ComplaintStatusHistory"> | string
    changedAt?: DateTimeWithAggregatesFilter<"ComplaintStatusHistory"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"ComplaintStatusHistory"> | string | null
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    text?: StringFilter<"Comment"> | string
    complaintId?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    isInternal?: BoolFilter<"Comment"> | boolean
    complaint?: XOR<ComplaintScalarRelationFilter, ComplaintWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    complaintId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isInternal?: SortOrder
    complaint?: ComplaintOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    text?: StringFilter<"Comment"> | string
    complaintId?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    isInternal?: BoolFilter<"Comment"> | boolean
    complaint?: XOR<ComplaintScalarRelationFilter, ComplaintWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    complaintId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isInternal?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    text?: StringWithAggregatesFilter<"Comment"> | string
    complaintId?: StringWithAggregatesFilter<"Comment"> | string
    userId?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    isInternal?: BoolWithAggregatesFilter<"Comment"> | boolean
  }

  export type AttachmentWhereInput = {
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    id?: StringFilter<"Attachment"> | string
    fileName?: StringFilter<"Attachment"> | string
    fileUrl?: StringFilter<"Attachment"> | string
    fileType?: StringFilter<"Attachment"> | string
    complaintId?: StringFilter<"Attachment"> | string
    uploadedAt?: DateTimeFilter<"Attachment"> | Date | string
    complaint?: XOR<ComplaintScalarRelationFilter, ComplaintWhereInput>
  }

  export type AttachmentOrderByWithRelationInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    complaintId?: SortOrder
    uploadedAt?: SortOrder
    complaint?: ComplaintOrderByWithRelationInput
  }

  export type AttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    fileName?: StringFilter<"Attachment"> | string
    fileUrl?: StringFilter<"Attachment"> | string
    fileType?: StringFilter<"Attachment"> | string
    complaintId?: StringFilter<"Attachment"> | string
    uploadedAt?: DateTimeFilter<"Attachment"> | Date | string
    complaint?: XOR<ComplaintScalarRelationFilter, ComplaintWhereInput>
  }, "id">

  export type AttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    complaintId?: SortOrder
    uploadedAt?: SortOrder
    _count?: AttachmentCountOrderByAggregateInput
    _max?: AttachmentMaxOrderByAggregateInput
    _min?: AttachmentMinOrderByAggregateInput
  }

  export type AttachmentScalarWhereWithAggregatesInput = {
    AND?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    OR?: AttachmentScalarWhereWithAggregatesInput[]
    NOT?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Attachment"> | string
    fileName?: StringWithAggregatesFilter<"Attachment"> | string
    fileUrl?: StringWithAggregatesFilter<"Attachment"> | string
    fileType?: StringWithAggregatesFilter<"Attachment"> | string
    complaintId?: StringWithAggregatesFilter<"Attachment"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"Attachment"> | Date | string
  }

  export type LogEntryWhereInput = {
    AND?: LogEntryWhereInput | LogEntryWhereInput[]
    OR?: LogEntryWhereInput[]
    NOT?: LogEntryWhereInput | LogEntryWhereInput[]
    id?: StringFilter<"LogEntry"> | string
    entityType?: EnumLogEntityTypeFilter<"LogEntry"> | $Enums.LogEntityType
    entityId?: StringFilter<"LogEntry"> | string
    action?: EnumLogActionTypeFilter<"LogEntry"> | $Enums.LogActionType
    subject?: StringFilter<"LogEntry"> | string
    description?: StringNullableFilter<"LogEntry"> | string | null
    status?: EnumLogStatusFilter<"LogEntry"> | $Enums.LogStatus
    sendEmail?: BoolFilter<"LogEntry"> | boolean
    providerId?: StringNullableFilter<"LogEntry"> | string | null
    parkingServiceId?: StringNullableFilter<"LogEntry"> | string | null
    bulkServiceId?: StringNullableFilter<"LogEntry"> | string | null
    createdAt?: DateTimeFilter<"LogEntry"> | Date | string
    updatedAt?: DateTimeFilter<"LogEntry"> | Date | string
    createdById?: StringFilter<"LogEntry"> | string
    updatedById?: StringNullableFilter<"LogEntry"> | string | null
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
    parkingService?: XOR<ParkingServiceNullableScalarRelationFilter, ParkingServiceWhereInput> | null
    bulkService?: XOR<BulkServiceNullableScalarRelationFilter, BulkServiceWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type LogEntryOrderByWithRelationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    subject?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    sendEmail?: SortOrder
    providerId?: SortOrderInput | SortOrder
    parkingServiceId?: SortOrderInput | SortOrder
    bulkServiceId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrderInput | SortOrder
    provider?: ProviderOrderByWithRelationInput
    parkingService?: ParkingServiceOrderByWithRelationInput
    bulkService?: BulkServiceOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
  }

  export type LogEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LogEntryWhereInput | LogEntryWhereInput[]
    OR?: LogEntryWhereInput[]
    NOT?: LogEntryWhereInput | LogEntryWhereInput[]
    entityType?: EnumLogEntityTypeFilter<"LogEntry"> | $Enums.LogEntityType
    entityId?: StringFilter<"LogEntry"> | string
    action?: EnumLogActionTypeFilter<"LogEntry"> | $Enums.LogActionType
    subject?: StringFilter<"LogEntry"> | string
    description?: StringNullableFilter<"LogEntry"> | string | null
    status?: EnumLogStatusFilter<"LogEntry"> | $Enums.LogStatus
    sendEmail?: BoolFilter<"LogEntry"> | boolean
    providerId?: StringNullableFilter<"LogEntry"> | string | null
    parkingServiceId?: StringNullableFilter<"LogEntry"> | string | null
    bulkServiceId?: StringNullableFilter<"LogEntry"> | string | null
    createdAt?: DateTimeFilter<"LogEntry"> | Date | string
    updatedAt?: DateTimeFilter<"LogEntry"> | Date | string
    createdById?: StringFilter<"LogEntry"> | string
    updatedById?: StringNullableFilter<"LogEntry"> | string | null
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
    parkingService?: XOR<ParkingServiceNullableScalarRelationFilter, ParkingServiceWhereInput> | null
    bulkService?: XOR<BulkServiceNullableScalarRelationFilter, BulkServiceWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type LogEntryOrderByWithAggregationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    subject?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    sendEmail?: SortOrder
    providerId?: SortOrderInput | SortOrder
    parkingServiceId?: SortOrderInput | SortOrder
    bulkServiceId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: LogEntryCountOrderByAggregateInput
    _max?: LogEntryMaxOrderByAggregateInput
    _min?: LogEntryMinOrderByAggregateInput
  }

  export type LogEntryScalarWhereWithAggregatesInput = {
    AND?: LogEntryScalarWhereWithAggregatesInput | LogEntryScalarWhereWithAggregatesInput[]
    OR?: LogEntryScalarWhereWithAggregatesInput[]
    NOT?: LogEntryScalarWhereWithAggregatesInput | LogEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LogEntry"> | string
    entityType?: EnumLogEntityTypeWithAggregatesFilter<"LogEntry"> | $Enums.LogEntityType
    entityId?: StringWithAggregatesFilter<"LogEntry"> | string
    action?: EnumLogActionTypeWithAggregatesFilter<"LogEntry"> | $Enums.LogActionType
    subject?: StringWithAggregatesFilter<"LogEntry"> | string
    description?: StringNullableWithAggregatesFilter<"LogEntry"> | string | null
    status?: EnumLogStatusWithAggregatesFilter<"LogEntry"> | $Enums.LogStatus
    sendEmail?: BoolWithAggregatesFilter<"LogEntry"> | boolean
    providerId?: StringNullableWithAggregatesFilter<"LogEntry"> | string | null
    parkingServiceId?: StringNullableWithAggregatesFilter<"LogEntry"> | string | null
    bulkServiceId?: StringNullableWithAggregatesFilter<"LogEntry"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LogEntry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LogEntry"> | Date | string
    createdById?: StringWithAggregatesFilter<"LogEntry"> | string
    updatedById?: StringNullableWithAggregatesFilter<"LogEntry"> | string | null
  }

  export type ActivityLogWhereInput = {
    AND?: ActivityLogWhereInput | ActivityLogWhereInput[]
    OR?: ActivityLogWhereInput[]
    NOT?: ActivityLogWhereInput | ActivityLogWhereInput[]
    id?: StringFilter<"ActivityLog"> | string
    action?: StringFilter<"ActivityLog"> | string
    entityType?: StringFilter<"ActivityLog"> | string
    entityId?: StringNullableFilter<"ActivityLog"> | string | null
    details?: StringNullableFilter<"ActivityLog"> | string | null
    severity?: EnumLogSeverityFilter<"ActivityLog"> | $Enums.LogSeverity
    userId?: StringFilter<"ActivityLog"> | string
    createdAt?: DateTimeFilter<"ActivityLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ActivityLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    severity?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ActivityLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityLogWhereInput | ActivityLogWhereInput[]
    OR?: ActivityLogWhereInput[]
    NOT?: ActivityLogWhereInput | ActivityLogWhereInput[]
    action?: StringFilter<"ActivityLog"> | string
    entityType?: StringFilter<"ActivityLog"> | string
    entityId?: StringNullableFilter<"ActivityLog"> | string | null
    details?: StringNullableFilter<"ActivityLog"> | string | null
    severity?: EnumLogSeverityFilter<"ActivityLog"> | $Enums.LogSeverity
    userId?: StringFilter<"ActivityLog"> | string
    createdAt?: DateTimeFilter<"ActivityLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ActivityLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    severity?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: ActivityLogCountOrderByAggregateInput
    _max?: ActivityLogMaxOrderByAggregateInput
    _min?: ActivityLogMinOrderByAggregateInput
  }

  export type ActivityLogScalarWhereWithAggregatesInput = {
    AND?: ActivityLogScalarWhereWithAggregatesInput | ActivityLogScalarWhereWithAggregatesInput[]
    OR?: ActivityLogScalarWhereWithAggregatesInput[]
    NOT?: ActivityLogScalarWhereWithAggregatesInput | ActivityLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityLog"> | string
    action?: StringWithAggregatesFilter<"ActivityLog"> | string
    entityType?: StringWithAggregatesFilter<"ActivityLog"> | string
    entityId?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    details?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    severity?: EnumLogSeverityWithAggregatesFilter<"ActivityLog"> | $Enums.LogSeverity
    userId?: StringWithAggregatesFilter<"ActivityLog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ActivityLog"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    entityType?: StringNullableFilter<"Notification"> | string | null
    entityId?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    entityType?: SortOrderInput | SortOrder
    entityId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    entityType?: StringNullableFilter<"Notification"> | string | null
    entityId?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    entityType?: SortOrderInput | SortOrder
    entityId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    userId?: StringWithAggregatesFilter<"Notification"> | string
    entityType?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    entityId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type ScheduledReportWhereInput = {
    AND?: ScheduledReportWhereInput | ScheduledReportWhereInput[]
    OR?: ScheduledReportWhereInput[]
    NOT?: ScheduledReportWhereInput | ScheduledReportWhereInput[]
    id?: StringFilter<"ScheduledReport"> | string
    name?: StringFilter<"ScheduledReport"> | string
    description?: StringNullableFilter<"ScheduledReport"> | string | null
    reportType?: StringFilter<"ScheduledReport"> | string
    frequency?: EnumReportFrequencyFilter<"ScheduledReport"> | $Enums.ReportFrequency
    lastRun?: DateTimeNullableFilter<"ScheduledReport"> | Date | string | null
    nextRun?: DateTimeNullableFilter<"ScheduledReport"> | Date | string | null
    parameters?: JsonNullableFilter<"ScheduledReport">
    isActive?: BoolFilter<"ScheduledReport"> | boolean
    createdAt?: DateTimeFilter<"ScheduledReport"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduledReport"> | Date | string
  }

  export type ScheduledReportOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    reportType?: SortOrder
    frequency?: SortOrder
    lastRun?: SortOrderInput | SortOrder
    nextRun?: SortOrderInput | SortOrder
    parameters?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduledReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScheduledReportWhereInput | ScheduledReportWhereInput[]
    OR?: ScheduledReportWhereInput[]
    NOT?: ScheduledReportWhereInput | ScheduledReportWhereInput[]
    name?: StringFilter<"ScheduledReport"> | string
    description?: StringNullableFilter<"ScheduledReport"> | string | null
    reportType?: StringFilter<"ScheduledReport"> | string
    frequency?: EnumReportFrequencyFilter<"ScheduledReport"> | $Enums.ReportFrequency
    lastRun?: DateTimeNullableFilter<"ScheduledReport"> | Date | string | null
    nextRun?: DateTimeNullableFilter<"ScheduledReport"> | Date | string | null
    parameters?: JsonNullableFilter<"ScheduledReport">
    isActive?: BoolFilter<"ScheduledReport"> | boolean
    createdAt?: DateTimeFilter<"ScheduledReport"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduledReport"> | Date | string
  }, "id">

  export type ScheduledReportOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    reportType?: SortOrder
    frequency?: SortOrder
    lastRun?: SortOrderInput | SortOrder
    nextRun?: SortOrderInput | SortOrder
    parameters?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScheduledReportCountOrderByAggregateInput
    _max?: ScheduledReportMaxOrderByAggregateInput
    _min?: ScheduledReportMinOrderByAggregateInput
  }

  export type ScheduledReportScalarWhereWithAggregatesInput = {
    AND?: ScheduledReportScalarWhereWithAggregatesInput | ScheduledReportScalarWhereWithAggregatesInput[]
    OR?: ScheduledReportScalarWhereWithAggregatesInput[]
    NOT?: ScheduledReportScalarWhereWithAggregatesInput | ScheduledReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScheduledReport"> | string
    name?: StringWithAggregatesFilter<"ScheduledReport"> | string
    description?: StringNullableWithAggregatesFilter<"ScheduledReport"> | string | null
    reportType?: StringWithAggregatesFilter<"ScheduledReport"> | string
    frequency?: EnumReportFrequencyWithAggregatesFilter<"ScheduledReport"> | $Enums.ReportFrequency
    lastRun?: DateTimeNullableWithAggregatesFilter<"ScheduledReport"> | Date | string | null
    nextRun?: DateTimeNullableWithAggregatesFilter<"ScheduledReport"> | Date | string | null
    parameters?: JsonNullableWithAggregatesFilter<"ScheduledReport">
    isActive?: BoolWithAggregatesFilter<"ScheduledReport"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ScheduledReport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScheduledReport"> | Date | string
  }

  export type GeneratedReportWhereInput = {
    AND?: GeneratedReportWhereInput | GeneratedReportWhereInput[]
    OR?: GeneratedReportWhereInput[]
    NOT?: GeneratedReportWhereInput | GeneratedReportWhereInput[]
    id?: StringFilter<"GeneratedReport"> | string
    name?: StringFilter<"GeneratedReport"> | string
    reportType?: StringFilter<"GeneratedReport"> | string
    fileUrl?: StringFilter<"GeneratedReport"> | string
    generatedAt?: DateTimeFilter<"GeneratedReport"> | Date | string
    scheduledReportId?: StringNullableFilter<"GeneratedReport"> | string | null
  }

  export type GeneratedReportOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    reportType?: SortOrder
    fileUrl?: SortOrder
    generatedAt?: SortOrder
    scheduledReportId?: SortOrderInput | SortOrder
  }

  export type GeneratedReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GeneratedReportWhereInput | GeneratedReportWhereInput[]
    OR?: GeneratedReportWhereInput[]
    NOT?: GeneratedReportWhereInput | GeneratedReportWhereInput[]
    name?: StringFilter<"GeneratedReport"> | string
    reportType?: StringFilter<"GeneratedReport"> | string
    fileUrl?: StringFilter<"GeneratedReport"> | string
    generatedAt?: DateTimeFilter<"GeneratedReport"> | Date | string
    scheduledReportId?: StringNullableFilter<"GeneratedReport"> | string | null
  }, "id">

  export type GeneratedReportOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    reportType?: SortOrder
    fileUrl?: SortOrder
    generatedAt?: SortOrder
    scheduledReportId?: SortOrderInput | SortOrder
    _count?: GeneratedReportCountOrderByAggregateInput
    _max?: GeneratedReportMaxOrderByAggregateInput
    _min?: GeneratedReportMinOrderByAggregateInput
  }

  export type GeneratedReportScalarWhereWithAggregatesInput = {
    AND?: GeneratedReportScalarWhereWithAggregatesInput | GeneratedReportScalarWhereWithAggregatesInput[]
    OR?: GeneratedReportScalarWhereWithAggregatesInput[]
    NOT?: GeneratedReportScalarWhereWithAggregatesInput | GeneratedReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GeneratedReport"> | string
    name?: StringWithAggregatesFilter<"GeneratedReport"> | string
    reportType?: StringWithAggregatesFilter<"GeneratedReport"> | string
    fileUrl?: StringWithAggregatesFilter<"GeneratedReport"> | string
    generatedAt?: DateTimeWithAggregatesFilter<"GeneratedReport"> | Date | string
    scheduledReportId?: StringNullableWithAggregatesFilter<"GeneratedReport"> | string | null
  }

  export type NotificationPreferenceWhereInput = {
    AND?: NotificationPreferenceWhereInput | NotificationPreferenceWhereInput[]
    OR?: NotificationPreferenceWhereInput[]
    NOT?: NotificationPreferenceWhereInput | NotificationPreferenceWhereInput[]
    id?: StringFilter<"NotificationPreference"> | string
    userId?: StringFilter<"NotificationPreference"> | string
    preferences?: JsonFilter<"NotificationPreference">
    createdAt?: DateTimeFilter<"NotificationPreference"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationPreference"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: NotificationPreferenceWhereInput | NotificationPreferenceWhereInput[]
    OR?: NotificationPreferenceWhereInput[]
    NOT?: NotificationPreferenceWhereInput | NotificationPreferenceWhereInput[]
    preferences?: JsonFilter<"NotificationPreference">
    createdAt?: DateTimeFilter<"NotificationPreference"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationPreference"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type NotificationPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationPreferenceCountOrderByAggregateInput
    _max?: NotificationPreferenceMaxOrderByAggregateInput
    _min?: NotificationPreferenceMinOrderByAggregateInput
  }

  export type NotificationPreferenceScalarWhereWithAggregatesInput = {
    AND?: NotificationPreferenceScalarWhereWithAggregatesInput | NotificationPreferenceScalarWhereWithAggregatesInput[]
    OR?: NotificationPreferenceScalarWhereWithAggregatesInput[]
    NOT?: NotificationPreferenceScalarWhereWithAggregatesInput | NotificationPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationPreference"> | string
    userId?: StringWithAggregatesFilter<"NotificationPreference"> | string
    preferences?: JsonWithAggregatesFilter<"NotificationPreference">
    createdAt?: DateTimeWithAggregatesFilter<"NotificationPreference"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationPreference"> | Date | string
  }

  export type ReportFileWhereInput = {
    AND?: ReportFileWhereInput | ReportFileWhereInput[]
    OR?: ReportFileWhereInput[]
    NOT?: ReportFileWhereInput | ReportFileWhereInput[]
    id?: StringFilter<"ReportFile"> | string
    fileName?: StringFilter<"ReportFile"> | string
    filePath?: StringFilter<"ReportFile"> | string
    organizationId?: StringFilter<"ReportFile"> | string
    startDate?: DateTimeFilter<"ReportFile"> | Date | string
    endDate?: DateTimeFilter<"ReportFile"> | Date | string
    fileSize?: IntFilter<"ReportFile"> | number
    mimeType?: StringFilter<"ReportFile"> | string
    uploadedAt?: DateTimeFilter<"ReportFile"> | Date | string
    organization?: XOR<HumanitarianOrgScalarRelationFilter, HumanitarianOrgWhereInput>
  }

  export type ReportFileOrderByWithRelationInput = {
    id?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    organizationId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    organization?: HumanitarianOrgOrderByWithRelationInput
  }

  export type ReportFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportFileWhereInput | ReportFileWhereInput[]
    OR?: ReportFileWhereInput[]
    NOT?: ReportFileWhereInput | ReportFileWhereInput[]
    fileName?: StringFilter<"ReportFile"> | string
    filePath?: StringFilter<"ReportFile"> | string
    organizationId?: StringFilter<"ReportFile"> | string
    startDate?: DateTimeFilter<"ReportFile"> | Date | string
    endDate?: DateTimeFilter<"ReportFile"> | Date | string
    fileSize?: IntFilter<"ReportFile"> | number
    mimeType?: StringFilter<"ReportFile"> | string
    uploadedAt?: DateTimeFilter<"ReportFile"> | Date | string
    organization?: XOR<HumanitarianOrgScalarRelationFilter, HumanitarianOrgWhereInput>
  }, "id">

  export type ReportFileOrderByWithAggregationInput = {
    id?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    organizationId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    _count?: ReportFileCountOrderByAggregateInput
    _avg?: ReportFileAvgOrderByAggregateInput
    _max?: ReportFileMaxOrderByAggregateInput
    _min?: ReportFileMinOrderByAggregateInput
    _sum?: ReportFileSumOrderByAggregateInput
  }

  export type ReportFileScalarWhereWithAggregatesInput = {
    AND?: ReportFileScalarWhereWithAggregatesInput | ReportFileScalarWhereWithAggregatesInput[]
    OR?: ReportFileScalarWhereWithAggregatesInput[]
    NOT?: ReportFileScalarWhereWithAggregatesInput | ReportFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportFile"> | string
    fileName?: StringWithAggregatesFilter<"ReportFile"> | string
    filePath?: StringWithAggregatesFilter<"ReportFile"> | string
    organizationId?: StringWithAggregatesFilter<"ReportFile"> | string
    startDate?: DateTimeWithAggregatesFilter<"ReportFile"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"ReportFile"> | Date | string
    fileSize?: IntWithAggregatesFilter<"ReportFile"> | number
    mimeType?: StringWithAggregatesFilter<"ReportFile"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"ReportFile"> | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type PasswordResetTokenUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type PasswordResetTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateManyInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type PasswordResetTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwoFactorTokenCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type TwoFactorTokenUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type TwoFactorTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwoFactorTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwoFactorTokenCreateManyInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
  }

  export type TwoFactorTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwoFactorTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwoFactorConfirmationCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutTwoFactorConfirmationInput
  }

  export type TwoFactorConfirmationUncheckedCreateInput = {
    id?: string
    userId: string
  }

  export type TwoFactorConfirmationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTwoFactorConfirmationNestedInput
  }

  export type TwoFactorConfirmationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TwoFactorConfirmationCreateManyInput = {
    id?: string
    userId: string
  }

  export type TwoFactorConfirmationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type TwoFactorConfirmationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProviderCreateInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    contracts?: ContractCreateNestedManyWithoutProviderInput
    vasServices?: VasServiceCreateNestedManyWithoutProviderInput
    bulkServices?: BulkServiceCreateNestedManyWithoutProviderInput
    complaints?: ComplaintCreateNestedManyWithoutProviderInput
    vasTransactions?: VasTransactionCreateNestedManyWithoutProviderInput
    logEntries?: LogEntryCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutProviderInput
    vasServices?: VasServiceUncheckedCreateNestedManyWithoutProviderInput
    bulkServices?: BulkServiceUncheckedCreateNestedManyWithoutProviderInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutProviderInput
    vasTransactions?: VasTransactionUncheckedCreateNestedManyWithoutProviderInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUpdateManyWithoutProviderNestedInput
    vasServices?: VasServiceUpdateManyWithoutProviderNestedInput
    bulkServices?: BulkServiceUpdateManyWithoutProviderNestedInput
    complaints?: ComplaintUpdateManyWithoutProviderNestedInput
    vasTransactions?: VasTransactionUpdateManyWithoutProviderNestedInput
    logEntries?: LogEntryUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutProviderNestedInput
    vasServices?: VasServiceUncheckedUpdateManyWithoutProviderNestedInput
    bulkServices?: BulkServiceUncheckedUpdateManyWithoutProviderNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutProviderNestedInput
    vasTransactions?: VasTransactionUncheckedUpdateManyWithoutProviderNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ProviderCreateManyInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
  }

  export type ProviderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProviderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HumanitarianOrgCreateInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    mission?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pib?: string | null
    registrationNumber?: string | null
    bank?: string | null
    accountNumber?: string | null
    shortNumber?: string | null
    contracts?: ContractCreateNestedManyWithoutHumanitarianOrgInput
    renewals?: HumanitarianContractRenewalCreateNestedManyWithoutHumanitarianOrgInput
    complaints?: ComplaintCreateNestedManyWithoutHumanitarianOrgInput
    reportFiles?: ReportFileCreateNestedManyWithoutOrganizationInput
  }

  export type HumanitarianOrgUncheckedCreateInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    mission?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pib?: string | null
    registrationNumber?: string | null
    bank?: string | null
    accountNumber?: string | null
    shortNumber?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutHumanitarianOrgInput
    renewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutHumanitarianOrgInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutHumanitarianOrgInput
    reportFiles?: ReportFileUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type HumanitarianOrgUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pib?: NullableStringFieldUpdateOperationsInput | string | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shortNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUpdateManyWithoutHumanitarianOrgNestedInput
    renewals?: HumanitarianContractRenewalUpdateManyWithoutHumanitarianOrgNestedInput
    complaints?: ComplaintUpdateManyWithoutHumanitarianOrgNestedInput
    reportFiles?: ReportFileUpdateManyWithoutOrganizationNestedInput
  }

  export type HumanitarianOrgUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pib?: NullableStringFieldUpdateOperationsInput | string | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shortNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutHumanitarianOrgNestedInput
    renewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutHumanitarianOrgNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutHumanitarianOrgNestedInput
    reportFiles?: ReportFileUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type HumanitarianOrgCreateManyInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    mission?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pib?: string | null
    registrationNumber?: string | null
    bank?: string | null
    accountNumber?: string | null
    shortNumber?: string | null
  }

  export type HumanitarianOrgUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pib?: NullableStringFieldUpdateOperationsInput | string | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shortNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HumanitarianOrgUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pib?: NullableStringFieldUpdateOperationsInput | string | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shortNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VasTransactionCreateInput = {
    id?: string
    date: Date | string
    group: string
    serviceName: string
    serviceCode: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    provider: ProviderCreateNestedOneWithoutVasTransactionsInput
    service: ServiceCreateNestedOneWithoutVasTransactionsInput
  }

  export type VasTransactionUncheckedCreateInput = {
    id?: string
    providerId: string
    serviceId: string
    date: Date | string
    group: string
    serviceName: string
    serviceCode: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VasTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneRequiredWithoutVasTransactionsNestedInput
    service?: ServiceUpdateOneRequiredWithoutVasTransactionsNestedInput
  }

  export type VasTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VasTransactionCreateManyInput = {
    id?: string
    providerId: string
    serviceId: string
    date: Date | string
    group: string
    serviceName: string
    serviceCode: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VasTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VasTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParkingTransactionCreateInput = {
    id?: string
    date: Date | string
    group: string
    serviceName: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parkingService: ParkingServiceCreateNestedOneWithoutTransactionsInput
    service: ServiceCreateNestedOneWithoutTransactionsInput
  }

  export type ParkingTransactionUncheckedCreateInput = {
    id?: string
    parkingServiceId: string
    date: Date | string
    group: string
    serviceName: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceId: string
  }

  export type ParkingTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parkingService?: ParkingServiceUpdateOneRequiredWithoutTransactionsNestedInput
    service?: ServiceUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type ParkingTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parkingServiceId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
  }

  export type ParkingTransactionCreateManyInput = {
    id?: string
    parkingServiceId: string
    date: Date | string
    group: string
    serviceName: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceId: string
  }

  export type ParkingTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParkingTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    parkingServiceId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
  }

  export type ParkingServiceCreateInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    createdBy?: UserCreateNestedOneWithoutCreatedParkingServicesInput
    transactions?: ParkingTransactionCreateNestedManyWithoutParkingServiceInput
    contracts?: ContractCreateNestedManyWithoutParkingServiceInput
    logEntries?: LogEntryCreateNestedManyWithoutParkingServiceInput
    complaints?: ComplaintCreateNestedManyWithoutParkingServiceInput
  }

  export type ParkingServiceUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    createdById?: string | null
    transactions?: ParkingTransactionUncheckedCreateNestedManyWithoutParkingServiceInput
    contracts?: ContractUncheckedCreateNestedManyWithoutParkingServiceInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutParkingServiceInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutParkingServiceInput
  }

  export type ParkingServiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneWithoutCreatedParkingServicesNestedInput
    transactions?: ParkingTransactionUpdateManyWithoutParkingServiceNestedInput
    contracts?: ContractUpdateManyWithoutParkingServiceNestedInput
    logEntries?: LogEntryUpdateManyWithoutParkingServiceNestedInput
    complaints?: ComplaintUpdateManyWithoutParkingServiceNestedInput
  }

  export type ParkingServiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    transactions?: ParkingTransactionUncheckedUpdateManyWithoutParkingServiceNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutParkingServiceNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutParkingServiceNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutParkingServiceNestedInput
  }

  export type ParkingServiceCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    createdById?: string | null
  }

  export type ParkingServiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ParkingServiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractCreateInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutContractsInput
    operator?: OperatorCreateNestedOneWithoutContractsInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutContractsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutContractsInput
    services?: ServiceContractCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalCreateNestedManyWithoutContractInput
    createdBy: UserCreateNestedOneWithoutCreatedContractsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedContractsInput
    reminders?: ContractReminderCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
    services?: ServiceContractUncheckedCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentUncheckedCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalUncheckedCreateNestedManyWithoutContractInput
    reminders?: ContractReminderUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutContractsNestedInput
    operator?: OperatorUpdateOneWithoutContractsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutContractsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutContractsNestedInput
    services?: ServiceContractUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUpdateManyWithoutContractNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedContractsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedContractsNestedInput
    reminders?: ContractReminderUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceContractUncheckedUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUncheckedUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    reminders?: ContractReminderUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractCreateManyInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type ContractUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractRenewalCreateInput = {
    id?: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: ContractCreateNestedOneWithoutRenewalsInput
    attachments?: ContractRenewalAttachmentCreateNestedManyWithoutRenewalInput
    createdBy: UserCreateNestedOneWithoutCreatedRenewalsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedRenewalsInput
  }

  export type ContractRenewalUncheckedCreateInput = {
    id?: string
    contractId: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
    attachments?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutRenewalInput
  }

  export type ContractRenewalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutRenewalsNestedInput
    attachments?: ContractRenewalAttachmentUpdateManyWithoutRenewalNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedRenewalsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedRenewalsNestedInput
  }

  export type ContractRenewalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ContractRenewalAttachmentUncheckedUpdateManyWithoutRenewalNestedInput
  }

  export type ContractRenewalCreateManyInput = {
    id?: string
    contractId: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type ContractRenewalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractRenewalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractRenewalAttachmentCreateInput = {
    id?: string
    fileName: string
    fileSize: number
    fileType: string
    filePath: string
    uploadedAt?: Date | string
    description?: string | null
    renewal: ContractRenewalCreateNestedOneWithoutAttachmentsInput
    uploadedBy: UserCreateNestedOneWithoutUploadedRenewalFilesInput
  }

  export type ContractRenewalAttachmentUncheckedCreateInput = {
    id?: string
    renewalId: string
    fileName: string
    fileSize: number
    fileType: string
    filePath: string
    uploadedAt?: Date | string
    uploadedById: string
    description?: string | null
  }

  export type ContractRenewalAttachmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    fileType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    renewal?: ContractRenewalUpdateOneRequiredWithoutAttachmentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedRenewalFilesNestedInput
  }

  export type ContractRenewalAttachmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    renewalId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    fileType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractRenewalAttachmentCreateManyInput = {
    id?: string
    renewalId: string
    fileName: string
    fileSize: number
    fileType: string
    filePath: string
    uploadedAt?: Date | string
    uploadedById: string
    description?: string | null
  }

  export type ContractRenewalAttachmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    fileType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractRenewalAttachmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    renewalId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    fileType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HumanitarianContractRenewalCreateInput = {
    id?: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: ContractCreateNestedOneWithoutHumanitarianRenewalsInput
    humanitarianOrg: HumanitarianOrgCreateNestedOneWithoutRenewalsInput
    createdBy: UserCreateNestedOneWithoutCreatedHumanitarianRenewalsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedHumanitarianRenewalsInput
  }

  export type HumanitarianContractRenewalUncheckedCreateInput = {
    id?: string
    contractId: string
    humanitarianOrgId: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type HumanitarianContractRenewalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutHumanitarianRenewalsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneRequiredWithoutRenewalsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedHumanitarianRenewalsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedHumanitarianRenewalsNestedInput
  }

  export type HumanitarianContractRenewalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    humanitarianOrgId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HumanitarianContractRenewalCreateManyInput = {
    id?: string
    contractId: string
    humanitarianOrgId: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type HumanitarianContractRenewalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HumanitarianContractRenewalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    humanitarianOrgId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SenderBlacklistCreateInput = {
    id?: string
    senderName: string
    effectiveDate: Date | string
    description?: string | null
    isActive?: boolean
    matchCount?: number
    lastMatchDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutSenderBlacklistsInput
    logs?: BlacklistLogCreateNestedManyWithoutBlacklistEntryInput
    modifiedBy?: UserCreateNestedOneWithoutModifiedBlacklistsInput
  }

  export type SenderBlacklistUncheckedCreateInput = {
    id?: string
    senderName: string
    effectiveDate: Date | string
    description?: string | null
    isActive?: boolean
    matchCount?: number
    lastMatchDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    modifiedById?: string | null
    logs?: BlacklistLogUncheckedCreateNestedManyWithoutBlacklistEntryInput
  }

  export type SenderBlacklistUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    matchCount?: IntFieldUpdateOperationsInput | number
    lastMatchDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutSenderBlacklistsNestedInput
    logs?: BlacklistLogUpdateManyWithoutBlacklistEntryNestedInput
    modifiedBy?: UserUpdateOneWithoutModifiedBlacklistsNestedInput
  }

  export type SenderBlacklistUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    matchCount?: IntFieldUpdateOperationsInput | number
    lastMatchDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: BlacklistLogUncheckedUpdateManyWithoutBlacklistEntryNestedInput
  }

  export type SenderBlacklistCreateManyInput = {
    id?: string
    senderName: string
    effectiveDate: Date | string
    description?: string | null
    isActive?: boolean
    matchCount?: number
    lastMatchDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    modifiedById?: string | null
  }

  export type SenderBlacklistUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    matchCount?: IntFieldUpdateOperationsInput | number
    lastMatchDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SenderBlacklistUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    matchCount?: IntFieldUpdateOperationsInput | number
    lastMatchDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlacklistLogCreateInput = {
    id?: string
    action: $Enums.LogBlackType
    entityType?: string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
    blacklistEntry?: SenderBlacklistCreateNestedOneWithoutLogsInput
  }

  export type BlacklistLogUncheckedCreateInput = {
    id?: string
    action: $Enums.LogBlackType
    entityId?: string | null
    entityType?: string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type BlacklistLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumLogBlackTypeFieldUpdateOperationsInput | $Enums.LogBlackType
    entityType?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    blacklistEntry?: SenderBlacklistUpdateOneWithoutLogsNestedInput
  }

  export type BlacklistLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumLogBlackTypeFieldUpdateOperationsInput | $Enums.LogBlackType
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlacklistLogCreateManyInput = {
    id?: string
    action: $Enums.LogBlackType
    entityId?: string | null
    entityType?: string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type BlacklistLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumLogBlackTypeFieldUpdateOperationsInput | $Enums.LogBlackType
    entityType?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlacklistLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumLogBlackTypeFieldUpdateOperationsInput | $Enums.LogBlackType
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperatorCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    logoUrl?: string | null
    website?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractCreateNestedManyWithoutOperatorInput
  }

  export type OperatorUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    logoUrl?: string | null
    website?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutOperatorInput
  }

  export type OperatorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorCreateManyInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    logoUrl?: string | null
    website?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperatorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperatorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceContractCreateInput = {
    id?: string
    specificTerms?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: ContractCreateNestedOneWithoutServicesInput
    service: ServiceCreateNestedOneWithoutContractsInput
  }

  export type ServiceContractUncheckedCreateInput = {
    id?: string
    contractId: string
    serviceId: string
    specificTerms?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceContractUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    specificTerms?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutServicesNestedInput
    service?: ServiceUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ServiceContractUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    specificTerms?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceContractCreateManyInput = {
    id?: string
    contractId: string
    serviceId: string
    specificTerms?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceContractUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    specificTerms?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceContractUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    specificTerms?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractAttachmentCreateInput = {
    id?: string
    name: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
    contract: ContractCreateNestedOneWithoutAttachmentsInput
    uploadedBy: UserCreateNestedOneWithoutUploadedAttachmentsInput
  }

  export type ContractAttachmentUncheckedCreateInput = {
    id?: string
    contractId: string
    name: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
    uploadedById: string
  }

  export type ContractAttachmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutAttachmentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedAttachmentsNestedInput
  }

  export type ContractAttachmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type ContractAttachmentCreateManyInput = {
    id?: string
    contractId: string
    name: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
    uploadedById: string
  }

  export type ContractAttachmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractAttachmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type ContractReminderCreateInput = {
    id?: string
    reminderDate: Date | string
    reminderType: string
    isAcknowledged?: boolean
    createdAt?: Date | string
    contract: ContractCreateNestedOneWithoutRemindersInput
    acknowledgedBy?: UserCreateNestedOneWithoutAcknowledgedRemindersInput
  }

  export type ContractReminderUncheckedCreateInput = {
    id?: string
    contractId: string
    reminderDate: Date | string
    reminderType: string
    isAcknowledged?: boolean
    acknowledgedById?: string | null
    createdAt?: Date | string
  }

  export type ContractReminderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderType?: StringFieldUpdateOperationsInput | string
    isAcknowledged?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutRemindersNestedInput
    acknowledgedBy?: UserUpdateOneWithoutAcknowledgedRemindersNestedInput
  }

  export type ContractReminderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderType?: StringFieldUpdateOperationsInput | string
    isAcknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractReminderCreateManyInput = {
    id?: string
    contractId: string
    reminderDate: Date | string
    reminderType: string
    isAcknowledged?: boolean
    acknowledgedById?: string | null
    createdAt?: Date | string
  }

  export type ContractReminderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderType?: StringFieldUpdateOperationsInput | string
    isAcknowledged?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractReminderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderType?: StringFieldUpdateOperationsInput | string
    isAcknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCreateInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    contracts?: ServiceContractCreateNestedManyWithoutServiceInput
    vasServices?: VasServiceCreateNestedManyWithoutServiceInput
    bulkServices?: BulkServiceCreateNestedManyWithoutServiceInput
    complaints?: ComplaintCreateNestedManyWithoutServiceInput
    transactions?: ParkingTransactionCreateNestedManyWithoutServiceInput
    vasTransactions?: VasTransactionCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    contracts?: ServiceContractUncheckedCreateNestedManyWithoutServiceInput
    vasServices?: VasServiceUncheckedCreateNestedManyWithoutServiceInput
    bulkServices?: BulkServiceUncheckedCreateNestedManyWithoutServiceInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutServiceInput
    transactions?: ParkingTransactionUncheckedCreateNestedManyWithoutServiceInput
    vasTransactions?: VasTransactionUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    contracts?: ServiceContractUpdateManyWithoutServiceNestedInput
    vasServices?: VasServiceUpdateManyWithoutServiceNestedInput
    bulkServices?: BulkServiceUpdateManyWithoutServiceNestedInput
    complaints?: ComplaintUpdateManyWithoutServiceNestedInput
    transactions?: ParkingTransactionUpdateManyWithoutServiceNestedInput
    vasTransactions?: VasTransactionUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    contracts?: ServiceContractUncheckedUpdateManyWithoutServiceNestedInput
    vasServices?: VasServiceUncheckedUpdateManyWithoutServiceNestedInput
    bulkServices?: BulkServiceUncheckedUpdateManyWithoutServiceNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutServiceNestedInput
    transactions?: ParkingTransactionUncheckedUpdateManyWithoutServiceNestedInput
    vasTransactions?: VasTransactionUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceCreateManyInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
  }

  export type ServiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
  }

  export type ServiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
  }

  export type VasServiceCreateInput = {
    id?: string
    proizvod: string
    mesec_pruzanja_usluge: Date | string
    jedinicna_cena: number
    broj_transakcija: number
    fakturisan_iznos: number
    fakturisan_korigovan_iznos: number
    naplacen_iznos: number
    kumulativ_naplacenih_iznosa: number
    nenaplacen_iznos: number
    nenaplacen_korigovan_iznos: number
    storniran_iznos: number
    otkazan_iznos: number
    kumulativ_otkazanih_iznosa: number
    iznos_za_prenos_sredstava: number
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutVasServicesInput
    provider: ProviderCreateNestedOneWithoutVasServicesInput
  }

  export type VasServiceUncheckedCreateInput = {
    id?: string
    proizvod: string
    mesec_pruzanja_usluge: Date | string
    jedinicna_cena: number
    broj_transakcija: number
    fakturisan_iznos: number
    fakturisan_korigovan_iznos: number
    naplacen_iznos: number
    kumulativ_naplacenih_iznosa: number
    nenaplacen_iznos: number
    nenaplacen_korigovan_iznos: number
    storniran_iznos: number
    otkazan_iznos: number
    kumulativ_otkazanih_iznosa: number
    iznos_za_prenos_sredstava: number
    serviceId: string
    provajderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VasServiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    proizvod?: StringFieldUpdateOperationsInput | string
    mesec_pruzanja_usluge?: DateTimeFieldUpdateOperationsInput | Date | string
    jedinicna_cena?: FloatFieldUpdateOperationsInput | number
    broj_transakcija?: IntFieldUpdateOperationsInput | number
    fakturisan_iznos?: FloatFieldUpdateOperationsInput | number
    fakturisan_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    naplacen_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_naplacenih_iznosa?: FloatFieldUpdateOperationsInput | number
    nenaplacen_iznos?: FloatFieldUpdateOperationsInput | number
    nenaplacen_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    storniran_iznos?: FloatFieldUpdateOperationsInput | number
    otkazan_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_otkazanih_iznosa?: FloatFieldUpdateOperationsInput | number
    iznos_za_prenos_sredstava?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutVasServicesNestedInput
    provider?: ProviderUpdateOneRequiredWithoutVasServicesNestedInput
  }

  export type VasServiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    proizvod?: StringFieldUpdateOperationsInput | string
    mesec_pruzanja_usluge?: DateTimeFieldUpdateOperationsInput | Date | string
    jedinicna_cena?: FloatFieldUpdateOperationsInput | number
    broj_transakcija?: IntFieldUpdateOperationsInput | number
    fakturisan_iznos?: FloatFieldUpdateOperationsInput | number
    fakturisan_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    naplacen_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_naplacenih_iznosa?: FloatFieldUpdateOperationsInput | number
    nenaplacen_iznos?: FloatFieldUpdateOperationsInput | number
    nenaplacen_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    storniran_iznos?: FloatFieldUpdateOperationsInput | number
    otkazan_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_otkazanih_iznosa?: FloatFieldUpdateOperationsInput | number
    iznos_za_prenos_sredstava?: FloatFieldUpdateOperationsInput | number
    serviceId?: StringFieldUpdateOperationsInput | string
    provajderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VasServiceCreateManyInput = {
    id?: string
    proizvod: string
    mesec_pruzanja_usluge: Date | string
    jedinicna_cena: number
    broj_transakcija: number
    fakturisan_iznos: number
    fakturisan_korigovan_iznos: number
    naplacen_iznos: number
    kumulativ_naplacenih_iznosa: number
    nenaplacen_iznos: number
    nenaplacen_korigovan_iznos: number
    storniran_iznos: number
    otkazan_iznos: number
    kumulativ_otkazanih_iznosa: number
    iznos_za_prenos_sredstava: number
    serviceId: string
    provajderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VasServiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    proizvod?: StringFieldUpdateOperationsInput | string
    mesec_pruzanja_usluge?: DateTimeFieldUpdateOperationsInput | Date | string
    jedinicna_cena?: FloatFieldUpdateOperationsInput | number
    broj_transakcija?: IntFieldUpdateOperationsInput | number
    fakturisan_iznos?: FloatFieldUpdateOperationsInput | number
    fakturisan_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    naplacen_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_naplacenih_iznosa?: FloatFieldUpdateOperationsInput | number
    nenaplacen_iznos?: FloatFieldUpdateOperationsInput | number
    nenaplacen_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    storniran_iznos?: FloatFieldUpdateOperationsInput | number
    otkazan_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_otkazanih_iznosa?: FloatFieldUpdateOperationsInput | number
    iznos_za_prenos_sredstava?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VasServiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    proizvod?: StringFieldUpdateOperationsInput | string
    mesec_pruzanja_usluge?: DateTimeFieldUpdateOperationsInput | Date | string
    jedinicna_cena?: FloatFieldUpdateOperationsInput | number
    broj_transakcija?: IntFieldUpdateOperationsInput | number
    fakturisan_iznos?: FloatFieldUpdateOperationsInput | number
    fakturisan_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    naplacen_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_naplacenih_iznosa?: FloatFieldUpdateOperationsInput | number
    nenaplacen_iznos?: FloatFieldUpdateOperationsInput | number
    nenaplacen_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    storniran_iznos?: FloatFieldUpdateOperationsInput | number
    otkazan_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_otkazanih_iznosa?: FloatFieldUpdateOperationsInput | number
    iznos_za_prenos_sredstava?: FloatFieldUpdateOperationsInput | number
    serviceId?: StringFieldUpdateOperationsInput | string
    provajderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BulkServiceCreateInput = {
    id?: string
    provider_name: string
    agreement_name: string
    service_name: string
    step_name: string
    sender_name: string
    requests: number
    message_parts: number
    datumNaplate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutBulkServicesInput
    provider: ProviderCreateNestedOneWithoutBulkServicesInput
    logEntries?: LogEntryCreateNestedManyWithoutBulkServiceInput
  }

  export type BulkServiceUncheckedCreateInput = {
    id?: string
    provider_name: string
    agreement_name: string
    service_name: string
    step_name: string
    sender_name: string
    requests: number
    message_parts: number
    datumNaplate: Date | string
    serviceId: string
    providerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutBulkServiceInput
  }

  export type BulkServiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider_name?: StringFieldUpdateOperationsInput | string
    agreement_name?: StringFieldUpdateOperationsInput | string
    service_name?: StringFieldUpdateOperationsInput | string
    step_name?: StringFieldUpdateOperationsInput | string
    sender_name?: StringFieldUpdateOperationsInput | string
    requests?: IntFieldUpdateOperationsInput | number
    message_parts?: IntFieldUpdateOperationsInput | number
    datumNaplate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutBulkServicesNestedInput
    provider?: ProviderUpdateOneRequiredWithoutBulkServicesNestedInput
    logEntries?: LogEntryUpdateManyWithoutBulkServiceNestedInput
  }

  export type BulkServiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider_name?: StringFieldUpdateOperationsInput | string
    agreement_name?: StringFieldUpdateOperationsInput | string
    service_name?: StringFieldUpdateOperationsInput | string
    step_name?: StringFieldUpdateOperationsInput | string
    sender_name?: StringFieldUpdateOperationsInput | string
    requests?: IntFieldUpdateOperationsInput | number
    message_parts?: IntFieldUpdateOperationsInput | number
    datumNaplate?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logEntries?: LogEntryUncheckedUpdateManyWithoutBulkServiceNestedInput
  }

  export type BulkServiceCreateManyInput = {
    id?: string
    provider_name: string
    agreement_name: string
    service_name: string
    step_name: string
    sender_name: string
    requests: number
    message_parts: number
    datumNaplate: Date | string
    serviceId: string
    providerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BulkServiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider_name?: StringFieldUpdateOperationsInput | string
    agreement_name?: StringFieldUpdateOperationsInput | string
    service_name?: StringFieldUpdateOperationsInput | string
    step_name?: StringFieldUpdateOperationsInput | string
    sender_name?: StringFieldUpdateOperationsInput | string
    requests?: IntFieldUpdateOperationsInput | number
    message_parts?: IntFieldUpdateOperationsInput | number
    datumNaplate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BulkServiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider_name?: StringFieldUpdateOperationsInput | string
    agreement_name?: StringFieldUpdateOperationsInput | string
    service_name?: StringFieldUpdateOperationsInput | string
    step_name?: StringFieldUpdateOperationsInput | string
    sender_name?: StringFieldUpdateOperationsInput | string
    requests?: IntFieldUpdateOperationsInput | number
    message_parts?: IntFieldUpdateOperationsInput | number
    datumNaplate?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    complaints?: ComplaintCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    complaints?: ComplaintUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: ComplaintUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: ComplaintUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintCreateInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    service?: ServiceCreateNestedOneWithoutComplaintsInput
    product?: ProductCreateNestedOneWithoutComplaintsInput
    provider?: ProviderCreateNestedOneWithoutComplaintsInput
    submittedBy: UserCreateNestedOneWithoutSubmittedComplaintsInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedComplaintsInput
    comments?: CommentCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentCreateNestedManyWithoutComplaintInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutComplaintsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutComplaintsInput
    statusHistory?: ComplaintStatusHistoryCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutComplaintInput
    statusHistory?: ComplaintStatusHistoryUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    service?: ServiceUpdateOneWithoutComplaintsNestedInput
    product?: ProductUpdateOneWithoutComplaintsNestedInput
    provider?: ProviderUpdateOneWithoutComplaintsNestedInput
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedComplaintsNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedComplaintsNestedInput
    comments?: CommentUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUpdateManyWithoutComplaintNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutComplaintsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutComplaintsNestedInput
    statusHistory?: ComplaintStatusHistoryUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutComplaintNestedInput
    statusHistory?: ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintCreateManyInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
  }

  export type ComplaintUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ComplaintUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintStatusHistoryCreateInput = {
    id?: string
    previousStatus?: $Enums.ComplaintStatus | null
    newStatus: $Enums.ComplaintStatus
    changedById: string
    changedAt?: Date | string
    notes?: string | null
    complaint: ComplaintCreateNestedOneWithoutStatusHistoryInput
  }

  export type ComplaintStatusHistoryUncheckedCreateInput = {
    id?: string
    complaintId: string
    previousStatus?: $Enums.ComplaintStatus | null
    newStatus: $Enums.ComplaintStatus
    changedById: string
    changedAt?: Date | string
    notes?: string | null
  }

  export type ComplaintStatusHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableEnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus | null
    newStatus?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complaint?: ComplaintUpdateOneRequiredWithoutStatusHistoryNestedInput
  }

  export type ComplaintStatusHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableEnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus | null
    newStatus?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintStatusHistoryCreateManyInput = {
    id?: string
    complaintId: string
    previousStatus?: $Enums.ComplaintStatus | null
    newStatus: $Enums.ComplaintStatus
    changedById: string
    changedAt?: Date | string
    notes?: string | null
  }

  export type ComplaintStatusHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableEnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus | null
    newStatus?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintStatusHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableEnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus | null
    newStatus?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateInput = {
    id?: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isInternal?: boolean
    complaint: ComplaintCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    text: string
    complaintId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isInternal?: boolean
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    complaint?: ComplaintUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CommentCreateManyInput = {
    id?: string
    text: string
    complaintId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isInternal?: boolean
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttachmentCreateInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
    complaint: ComplaintCreateNestedOneWithoutAttachmentsInput
  }

  export type AttachmentUncheckedCreateInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    complaintId: string
    uploadedAt?: Date | string
  }

  export type AttachmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaint?: ComplaintUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type AttachmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentCreateManyInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    complaintId: string
    uploadedAt?: Date | string
  }

  export type AttachmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogEntryCreateInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutLogEntriesInput
    parkingService?: ParkingServiceCreateNestedOneWithoutLogEntriesInput
    bulkService?: BulkServiceCreateNestedOneWithoutLogEntriesInput
    createdBy: UserCreateNestedOneWithoutLogEntriesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedLogsInput
  }

  export type LogEntryUncheckedCreateInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    providerId?: string | null
    parkingServiceId?: string | null
    bulkServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById?: string | null
  }

  export type LogEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutLogEntriesNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutLogEntriesNestedInput
    bulkService?: BulkServiceUpdateOneWithoutLogEntriesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutLogEntriesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedLogsNestedInput
  }

  export type LogEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    bulkServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogEntryCreateManyInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    providerId?: string | null
    parkingServiceId?: string | null
    bulkServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById?: string | null
  }

  export type LogEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    bulkServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityLogCreateInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    details?: string | null
    severity?: $Enums.LogSeverity
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutActivitiesInput
  }

  export type ActivityLogUncheckedCreateInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    details?: string | null
    severity?: $Enums.LogSeverity
    userId: string
    createdAt?: Date | string
  }

  export type ActivityLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: EnumLogSeverityFieldUpdateOperationsInput | $Enums.LogSeverity
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type ActivityLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: EnumLogSeverityFieldUpdateOperationsInput | $Enums.LogSeverity
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogCreateManyInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    details?: string | null
    severity?: $Enums.LogSeverity
    userId: string
    createdAt?: Date | string
  }

  export type ActivityLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: EnumLogSeverityFieldUpdateOperationsInput | $Enums.LogSeverity
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: EnumLogSeverityFieldUpdateOperationsInput | $Enums.LogSeverity
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    entityType?: string | null
    entityId?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    userId: string
    entityType?: string | null
    entityId?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    userId: string
    entityType?: string | null
    entityId?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledReportCreateInput = {
    id?: string
    name: string
    description?: string | null
    reportType: string
    frequency: $Enums.ReportFrequency
    lastRun?: Date | string | null
    nextRun?: Date | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledReportUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    reportType: string
    frequency: $Enums.ReportFrequency
    lastRun?: Date | string | null
    nextRun?: Date | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: EnumReportFrequencyFieldUpdateOperationsInput | $Enums.ReportFrequency
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: EnumReportFrequencyFieldUpdateOperationsInput | $Enums.ReportFrequency
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledReportCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    reportType: string
    frequency: $Enums.ReportFrequency
    lastRun?: Date | string | null
    nextRun?: Date | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: EnumReportFrequencyFieldUpdateOperationsInput | $Enums.ReportFrequency
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: EnumReportFrequencyFieldUpdateOperationsInput | $Enums.ReportFrequency
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedReportCreateInput = {
    id?: string
    name: string
    reportType: string
    fileUrl: string
    generatedAt?: Date | string
    scheduledReportId?: string | null
  }

  export type GeneratedReportUncheckedCreateInput = {
    id?: string
    name: string
    reportType: string
    fileUrl: string
    generatedAt?: Date | string
    scheduledReportId?: string | null
  }

  export type GeneratedReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    reportType?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduledReportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GeneratedReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    reportType?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduledReportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GeneratedReportCreateManyInput = {
    id?: string
    name: string
    reportType: string
    fileUrl: string
    generatedAt?: Date | string
    scheduledReportId?: string | null
  }

  export type GeneratedReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    reportType?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduledReportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GeneratedReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    reportType?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduledReportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationPreferenceCreateInput = {
    id?: string
    preferences: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationPreferencesInput
  }

  export type NotificationPreferenceUncheckedCreateInput = {
    id?: string
    userId: string
    preferences: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationPreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationPreferencesNestedInput
  }

  export type NotificationPreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferenceCreateManyInput = {
    id?: string
    userId: string
    preferences: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationPreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportFileCreateInput = {
    id?: string
    fileName: string
    filePath: string
    startDate: Date | string
    endDate: Date | string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    organization: HumanitarianOrgCreateNestedOneWithoutReportFilesInput
  }

  export type ReportFileUncheckedCreateInput = {
    id?: string
    fileName: string
    filePath: string
    organizationId: string
    startDate: Date | string
    endDate: Date | string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
  }

  export type ReportFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: HumanitarianOrgUpdateOneRequiredWithoutReportFilesNestedInput
  }

  export type ReportFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportFileCreateManyInput = {
    id?: string
    fileName: string
    filePath: string
    organizationId: string
    startDate: Date | string
    endDate: Date | string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
  }

  export type ReportFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type VerificationTokenEmailTokenCompoundUniqueInput = {
    email: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type PasswordResetTokenEmailTokenCompoundUniqueInput = {
    email: string
    token: string
  }

  export type PasswordResetTokenCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type PasswordResetTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type PasswordResetTokenMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type TwoFactorTokenEmailTokenCompoundUniqueInput = {
    email: string
    token: string
  }

  export type TwoFactorTokenCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type TwoFactorTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type TwoFactorTokenMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type TwoFactorConfirmationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type TwoFactorConfirmationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type TwoFactorConfirmationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type TwoFactorConfirmationNullableScalarRelationFilter = {
    is?: TwoFactorConfirmationWhereInput | null
    isNot?: TwoFactorConfirmationWhereInput | null
  }

  export type ContractListRelationFilter = {
    every?: ContractWhereInput
    some?: ContractWhereInput
    none?: ContractWhereInput
  }

  export type ContractAttachmentListRelationFilter = {
    every?: ContractAttachmentWhereInput
    some?: ContractAttachmentWhereInput
    none?: ContractAttachmentWhereInput
  }

  export type ContractReminderListRelationFilter = {
    every?: ContractReminderWhereInput
    some?: ContractReminderWhereInput
    none?: ContractReminderWhereInput
  }

  export type ComplaintListRelationFilter = {
    every?: ComplaintWhereInput
    some?: ComplaintWhereInput
    none?: ComplaintWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type ActivityLogListRelationFilter = {
    every?: ActivityLogWhereInput
    some?: ActivityLogWhereInput
    none?: ActivityLogWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type NotificationPreferenceNullableScalarRelationFilter = {
    is?: NotificationPreferenceWhereInput | null
    isNot?: NotificationPreferenceWhereInput | null
  }

  export type HumanitarianContractRenewalListRelationFilter = {
    every?: HumanitarianContractRenewalWhereInput
    some?: HumanitarianContractRenewalWhereInput
    none?: HumanitarianContractRenewalWhereInput
  }

  export type SenderBlacklistListRelationFilter = {
    every?: SenderBlacklistWhereInput
    some?: SenderBlacklistWhereInput
    none?: SenderBlacklistWhereInput
  }

  export type BlacklistLogListRelationFilter = {
    every?: BlacklistLogWhereInput
    some?: BlacklistLogWhereInput
    none?: BlacklistLogWhereInput
  }

  export type ContractRenewalListRelationFilter = {
    every?: ContractRenewalWhereInput
    some?: ContractRenewalWhereInput
    none?: ContractRenewalWhereInput
  }

  export type ContractRenewalAttachmentListRelationFilter = {
    every?: ContractRenewalAttachmentWhereInput
    some?: ContractRenewalAttachmentWhereInput
    none?: ContractRenewalAttachmentWhereInput
  }

  export type ParkingServiceListRelationFilter = {
    every?: ParkingServiceWhereInput
    some?: ParkingServiceWhereInput
    none?: ParkingServiceWhereInput
  }

  export type LogEntryListRelationFilter = {
    every?: LogEntryWhereInput
    some?: LogEntryWhereInput
    none?: LogEntryWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractAttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractReminderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComplaintOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HumanitarianContractRenewalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SenderBlacklistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BlacklistLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractRenewalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractRenewalAttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParkingServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LogEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type VasServiceListRelationFilter = {
    every?: VasServiceWhereInput
    some?: VasServiceWhereInput
    none?: VasServiceWhereInput
  }

  export type BulkServiceListRelationFilter = {
    every?: BulkServiceWhereInput
    some?: BulkServiceWhereInput
    none?: BulkServiceWhereInput
  }

  export type VasTransactionListRelationFilter = {
    every?: VasTransactionWhereInput
    some?: VasTransactionWhereInput
    none?: VasTransactionWhereInput
  }

  export type VasServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BulkServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VasTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProviderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageUrl?: SortOrder
  }

  export type ProviderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageUrl?: SortOrder
  }

  export type ProviderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageUrl?: SortOrder
  }

  export type ReportFileListRelationFilter = {
    every?: ReportFileWhereInput
    some?: ReportFileWhereInput
    none?: ReportFileWhereInput
  }

  export type ReportFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HumanitarianOrgCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    website?: SortOrder
    mission?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pib?: SortOrder
    registrationNumber?: SortOrder
    bank?: SortOrder
    accountNumber?: SortOrder
    shortNumber?: SortOrder
  }

  export type HumanitarianOrgMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    website?: SortOrder
    mission?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pib?: SortOrder
    registrationNumber?: SortOrder
    bank?: SortOrder
    accountNumber?: SortOrder
    shortNumber?: SortOrder
  }

  export type HumanitarianOrgMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    website?: SortOrder
    mission?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pib?: SortOrder
    registrationNumber?: SortOrder
    bank?: SortOrder
    accountNumber?: SortOrder
    shortNumber?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ProviderScalarRelationFilter = {
    is?: ProviderWhereInput
    isNot?: ProviderWhereInput
  }

  export type ServiceScalarRelationFilter = {
    is?: ServiceWhereInput
    isNot?: ServiceWhereInput
  }

  export type VasTransactionProviderIdDateServiceNameGroupCompoundUniqueInput = {
    providerId: string
    date: Date | string
    serviceName: string
    group: string
  }

  export type VasTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    serviceId?: SortOrder
    date?: SortOrder
    group?: SortOrder
    serviceName?: SortOrder
    serviceCode?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VasTransactionAvgOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
  }

  export type VasTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    serviceId?: SortOrder
    date?: SortOrder
    group?: SortOrder
    serviceName?: SortOrder
    serviceCode?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VasTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    serviceId?: SortOrder
    date?: SortOrder
    group?: SortOrder
    serviceName?: SortOrder
    serviceCode?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VasTransactionSumOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ParkingServiceScalarRelationFilter = {
    is?: ParkingServiceWhereInput
    isNot?: ParkingServiceWhereInput
  }

  export type ParkingTransactionParkingServiceIdDateServiceNameGroupCompoundUniqueInput = {
    parkingServiceId: string
    date: Date | string
    serviceName: string
    group: string
  }

  export type ParkingTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    parkingServiceId?: SortOrder
    date?: SortOrder
    group?: SortOrder
    serviceName?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceId?: SortOrder
  }

  export type ParkingTransactionAvgOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
  }

  export type ParkingTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    parkingServiceId?: SortOrder
    date?: SortOrder
    group?: SortOrder
    serviceName?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceId?: SortOrder
  }

  export type ParkingTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    parkingServiceId?: SortOrder
    date?: SortOrder
    group?: SortOrder
    serviceName?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceId?: SortOrder
  }

  export type ParkingTransactionSumOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ParkingTransactionListRelationFilter = {
    every?: ParkingTransactionWhereInput
    some?: ParkingTransactionWhereInput
    none?: ParkingTransactionWhereInput
  }

  export type ParkingTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParkingServiceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    contactName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    additionalEmails?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalFileName?: SortOrder
    originalFilePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    lastImportDate?: SortOrder
    importedBy?: SortOrder
    importStatus?: SortOrder
    createdById?: SortOrder
  }

  export type ParkingServiceAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type ParkingServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    contactName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalFileName?: SortOrder
    originalFilePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    lastImportDate?: SortOrder
    importedBy?: SortOrder
    importStatus?: SortOrder
    createdById?: SortOrder
  }

  export type ParkingServiceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    contactName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalFileName?: SortOrder
    originalFilePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    lastImportDate?: SortOrder
    importedBy?: SortOrder
    importStatus?: SortOrder
    createdById?: SortOrder
  }

  export type ParkingServiceSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type EnumContractTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContractTypeFilter<$PrismaModel> | $Enums.ContractType
  }

  export type EnumContractStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusFilter<$PrismaModel> | $Enums.ContractStatus
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ProviderNullableScalarRelationFilter = {
    is?: ProviderWhereInput | null
    isNot?: ProviderWhereInput | null
  }

  export type OperatorNullableScalarRelationFilter = {
    is?: OperatorWhereInput | null
    isNot?: OperatorWhereInput | null
  }

  export type HumanitarianOrgNullableScalarRelationFilter = {
    is?: HumanitarianOrgWhereInput | null
    isNot?: HumanitarianOrgWhereInput | null
  }

  export type ParkingServiceNullableScalarRelationFilter = {
    is?: ParkingServiceWhereInput | null
    isNot?: ParkingServiceWhereInput | null
  }

  export type ServiceContractListRelationFilter = {
    every?: ServiceContractWhereInput
    some?: ServiceContractWhereInput
    none?: ServiceContractWhereInput
  }

  export type ServiceContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contractNumber?: SortOrder
    type?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    revenuePercentage?: SortOrder
    description?: SortOrder
    operatorRevenue?: SortOrder
    isRevenueSharing?: SortOrder
    operatorId?: SortOrder
    providerId?: SortOrder
    humanitarianOrgId?: SortOrder
    parkingServiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrder
  }

  export type ContractAvgOrderByAggregateInput = {
    revenuePercentage?: SortOrder
    operatorRevenue?: SortOrder
  }

  export type ContractMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contractNumber?: SortOrder
    type?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    revenuePercentage?: SortOrder
    description?: SortOrder
    operatorRevenue?: SortOrder
    isRevenueSharing?: SortOrder
    operatorId?: SortOrder
    providerId?: SortOrder
    humanitarianOrgId?: SortOrder
    parkingServiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrder
  }

  export type ContractMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contractNumber?: SortOrder
    type?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    revenuePercentage?: SortOrder
    description?: SortOrder
    operatorRevenue?: SortOrder
    isRevenueSharing?: SortOrder
    operatorId?: SortOrder
    providerId?: SortOrder
    humanitarianOrgId?: SortOrder
    parkingServiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrder
  }

  export type ContractSumOrderByAggregateInput = {
    revenuePercentage?: SortOrder
    operatorRevenue?: SortOrder
  }

  export type EnumContractTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContractTypeWithAggregatesFilter<$PrismaModel> | $Enums.ContractType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractTypeFilter<$PrismaModel>
    _max?: NestedEnumContractTypeFilter<$PrismaModel>
  }

  export type EnumContractStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContractStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractStatusFilter<$PrismaModel>
    _max?: NestedEnumContractStatusFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumContractRenewalSubStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractRenewalSubStatus | EnumContractRenewalSubStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractRenewalSubStatus[] | ListEnumContractRenewalSubStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractRenewalSubStatus[] | ListEnumContractRenewalSubStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractRenewalSubStatusFilter<$PrismaModel> | $Enums.ContractRenewalSubStatus
  }

  export type ContractScalarRelationFilter = {
    is?: ContractWhereInput
    isNot?: ContractWhereInput
  }

  export type ContractRenewalCountOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    subStatus?: SortOrder
    renewalStartDate?: SortOrder
    proposedStartDate?: SortOrder
    proposedEndDate?: SortOrder
    proposedRevenue?: SortOrder
    documentsReceived?: SortOrder
    legalApproved?: SortOrder
    financialApproved?: SortOrder
    technicalApproved?: SortOrder
    managementApproved?: SortOrder
    signatureReceived?: SortOrder
    comments?: SortOrder
    internalNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrder
  }

  export type ContractRenewalAvgOrderByAggregateInput = {
    proposedRevenue?: SortOrder
  }

  export type ContractRenewalMaxOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    subStatus?: SortOrder
    renewalStartDate?: SortOrder
    proposedStartDate?: SortOrder
    proposedEndDate?: SortOrder
    proposedRevenue?: SortOrder
    documentsReceived?: SortOrder
    legalApproved?: SortOrder
    financialApproved?: SortOrder
    technicalApproved?: SortOrder
    managementApproved?: SortOrder
    signatureReceived?: SortOrder
    comments?: SortOrder
    internalNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrder
  }

  export type ContractRenewalMinOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    subStatus?: SortOrder
    renewalStartDate?: SortOrder
    proposedStartDate?: SortOrder
    proposedEndDate?: SortOrder
    proposedRevenue?: SortOrder
    documentsReceived?: SortOrder
    legalApproved?: SortOrder
    financialApproved?: SortOrder
    technicalApproved?: SortOrder
    managementApproved?: SortOrder
    signatureReceived?: SortOrder
    comments?: SortOrder
    internalNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrder
  }

  export type ContractRenewalSumOrderByAggregateInput = {
    proposedRevenue?: SortOrder
  }

  export type EnumContractRenewalSubStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractRenewalSubStatus | EnumContractRenewalSubStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractRenewalSubStatus[] | ListEnumContractRenewalSubStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractRenewalSubStatus[] | ListEnumContractRenewalSubStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractRenewalSubStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContractRenewalSubStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractRenewalSubStatusFilter<$PrismaModel>
    _max?: NestedEnumContractRenewalSubStatusFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ContractRenewalScalarRelationFilter = {
    is?: ContractRenewalWhereInput
    isNot?: ContractRenewalWhereInput
  }

  export type ContractRenewalAttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    renewalId?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    fileType?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    uploadedById?: SortOrder
    description?: SortOrder
  }

  export type ContractRenewalAttachmentAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type ContractRenewalAttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    renewalId?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    fileType?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    uploadedById?: SortOrder
    description?: SortOrder
  }

  export type ContractRenewalAttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    renewalId?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    fileType?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    uploadedById?: SortOrder
    description?: SortOrder
  }

  export type ContractRenewalAttachmentSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumHumanitarianRenewalSubStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HumanitarianRenewalSubStatus | EnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HumanitarianRenewalSubStatus[] | ListEnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HumanitarianRenewalSubStatus[] | ListEnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHumanitarianRenewalSubStatusFilter<$PrismaModel> | $Enums.HumanitarianRenewalSubStatus
  }

  export type HumanitarianOrgScalarRelationFilter = {
    is?: HumanitarianOrgWhereInput
    isNot?: HumanitarianOrgWhereInput
  }

  export type HumanitarianContractRenewalCountOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    humanitarianOrgId?: SortOrder
    subStatus?: SortOrder
    renewalStartDate?: SortOrder
    proposedStartDate?: SortOrder
    proposedEndDate?: SortOrder
    proposedRevenue?: SortOrder
    documentsReceived?: SortOrder
    legalApproved?: SortOrder
    financialApproved?: SortOrder
    signatureReceived?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrder
  }

  export type HumanitarianContractRenewalAvgOrderByAggregateInput = {
    proposedRevenue?: SortOrder
  }

  export type HumanitarianContractRenewalMaxOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    humanitarianOrgId?: SortOrder
    subStatus?: SortOrder
    renewalStartDate?: SortOrder
    proposedStartDate?: SortOrder
    proposedEndDate?: SortOrder
    proposedRevenue?: SortOrder
    documentsReceived?: SortOrder
    legalApproved?: SortOrder
    financialApproved?: SortOrder
    signatureReceived?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrder
  }

  export type HumanitarianContractRenewalMinOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    humanitarianOrgId?: SortOrder
    subStatus?: SortOrder
    renewalStartDate?: SortOrder
    proposedStartDate?: SortOrder
    proposedEndDate?: SortOrder
    proposedRevenue?: SortOrder
    documentsReceived?: SortOrder
    legalApproved?: SortOrder
    financialApproved?: SortOrder
    signatureReceived?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    lastModifiedById?: SortOrder
  }

  export type HumanitarianContractRenewalSumOrderByAggregateInput = {
    proposedRevenue?: SortOrder
  }

  export type EnumHumanitarianRenewalSubStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HumanitarianRenewalSubStatus | EnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HumanitarianRenewalSubStatus[] | ListEnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HumanitarianRenewalSubStatus[] | ListEnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHumanitarianRenewalSubStatusWithAggregatesFilter<$PrismaModel> | $Enums.HumanitarianRenewalSubStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHumanitarianRenewalSubStatusFilter<$PrismaModel>
    _max?: NestedEnumHumanitarianRenewalSubStatusFilter<$PrismaModel>
  }

  export type SenderBlacklistCountOrderByAggregateInput = {
    id?: SortOrder
    senderName?: SortOrder
    effectiveDate?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    matchCount?: SortOrder
    lastMatchDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
  }

  export type SenderBlacklistAvgOrderByAggregateInput = {
    matchCount?: SortOrder
  }

  export type SenderBlacklistMaxOrderByAggregateInput = {
    id?: SortOrder
    senderName?: SortOrder
    effectiveDate?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    matchCount?: SortOrder
    lastMatchDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
  }

  export type SenderBlacklistMinOrderByAggregateInput = {
    id?: SortOrder
    senderName?: SortOrder
    effectiveDate?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    matchCount?: SortOrder
    lastMatchDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
  }

  export type SenderBlacklistSumOrderByAggregateInput = {
    matchCount?: SortOrder
  }

  export type EnumLogBlackTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LogBlackType | EnumLogBlackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogBlackType[] | ListEnumLogBlackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogBlackType[] | ListEnumLogBlackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogBlackTypeFilter<$PrismaModel> | $Enums.LogBlackType
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SenderBlacklistNullableScalarRelationFilter = {
    is?: SenderBlacklistWhereInput | null
    isNot?: SenderBlacklistWhereInput | null
  }

  export type BlacklistLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
  }

  export type BlacklistLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
  }

  export type BlacklistLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
  }

  export type EnumLogBlackTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogBlackType | EnumLogBlackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogBlackType[] | ListEnumLogBlackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogBlackType[] | ListEnumLogBlackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogBlackTypeWithAggregatesFilter<$PrismaModel> | $Enums.LogBlackType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogBlackTypeFilter<$PrismaModel>
    _max?: NestedEnumLogBlackTypeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type OperatorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    logoUrl?: SortOrder
    website?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OperatorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    logoUrl?: SortOrder
    website?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OperatorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    logoUrl?: SortOrder
    website?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceContractContractIdServiceIdCompoundUniqueInput = {
    contractId: string
    serviceId: string
  }

  export type ServiceContractCountOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    serviceId?: SortOrder
    specificTerms?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceContractMaxOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    serviceId?: SortOrder
    specificTerms?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceContractMinOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    serviceId?: SortOrder
    specificTerms?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractAttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    name?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    uploadedAt?: SortOrder
    uploadedById?: SortOrder
  }

  export type ContractAttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    name?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    uploadedAt?: SortOrder
    uploadedById?: SortOrder
  }

  export type ContractAttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    name?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    uploadedAt?: SortOrder
    uploadedById?: SortOrder
  }

  export type ContractReminderCountOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    reminderDate?: SortOrder
    reminderType?: SortOrder
    isAcknowledged?: SortOrder
    acknowledgedById?: SortOrder
    createdAt?: SortOrder
  }

  export type ContractReminderMaxOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    reminderDate?: SortOrder
    reminderType?: SortOrder
    isAcknowledged?: SortOrder
    acknowledgedById?: SortOrder
    createdAt?: SortOrder
  }

  export type ContractReminderMinOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    reminderDate?: SortOrder
    reminderType?: SortOrder
    isAcknowledged?: SortOrder
    acknowledgedById?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumServiceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceTypeFilter<$PrismaModel> | $Enums.ServiceType
  }

  export type EnumBillingTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingType | EnumBillingTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBillingTypeNullableFilter<$PrismaModel> | $Enums.BillingType | null
  }

  export type ServiceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    billingType?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    billingType?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    billingType?: SortOrder
  }

  export type EnumServiceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceTypeWithAggregatesFilter<$PrismaModel> | $Enums.ServiceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServiceTypeFilter<$PrismaModel>
    _max?: NestedEnumServiceTypeFilter<$PrismaModel>
  }

  export type EnumBillingTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingType | EnumBillingTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBillingTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BillingType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBillingTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumBillingTypeNullableFilter<$PrismaModel>
  }

  export type VasServiceProizvodMesec_pruzanja_uslugeProvajderIdCompoundUniqueInput = {
    proizvod: string
    mesec_pruzanja_usluge: Date | string
    provajderId: string
  }

  export type VasServiceCountOrderByAggregateInput = {
    id?: SortOrder
    proizvod?: SortOrder
    mesec_pruzanja_usluge?: SortOrder
    jedinicna_cena?: SortOrder
    broj_transakcija?: SortOrder
    fakturisan_iznos?: SortOrder
    fakturisan_korigovan_iznos?: SortOrder
    naplacen_iznos?: SortOrder
    kumulativ_naplacenih_iznosa?: SortOrder
    nenaplacen_iznos?: SortOrder
    nenaplacen_korigovan_iznos?: SortOrder
    storniran_iznos?: SortOrder
    otkazan_iznos?: SortOrder
    kumulativ_otkazanih_iznosa?: SortOrder
    iznos_za_prenos_sredstava?: SortOrder
    serviceId?: SortOrder
    provajderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VasServiceAvgOrderByAggregateInput = {
    jedinicna_cena?: SortOrder
    broj_transakcija?: SortOrder
    fakturisan_iznos?: SortOrder
    fakturisan_korigovan_iznos?: SortOrder
    naplacen_iznos?: SortOrder
    kumulativ_naplacenih_iznosa?: SortOrder
    nenaplacen_iznos?: SortOrder
    nenaplacen_korigovan_iznos?: SortOrder
    storniran_iznos?: SortOrder
    otkazan_iznos?: SortOrder
    kumulativ_otkazanih_iznosa?: SortOrder
    iznos_za_prenos_sredstava?: SortOrder
  }

  export type VasServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    proizvod?: SortOrder
    mesec_pruzanja_usluge?: SortOrder
    jedinicna_cena?: SortOrder
    broj_transakcija?: SortOrder
    fakturisan_iznos?: SortOrder
    fakturisan_korigovan_iznos?: SortOrder
    naplacen_iznos?: SortOrder
    kumulativ_naplacenih_iznosa?: SortOrder
    nenaplacen_iznos?: SortOrder
    nenaplacen_korigovan_iznos?: SortOrder
    storniran_iznos?: SortOrder
    otkazan_iznos?: SortOrder
    kumulativ_otkazanih_iznosa?: SortOrder
    iznos_za_prenos_sredstava?: SortOrder
    serviceId?: SortOrder
    provajderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VasServiceMinOrderByAggregateInput = {
    id?: SortOrder
    proizvod?: SortOrder
    mesec_pruzanja_usluge?: SortOrder
    jedinicna_cena?: SortOrder
    broj_transakcija?: SortOrder
    fakturisan_iznos?: SortOrder
    fakturisan_korigovan_iznos?: SortOrder
    naplacen_iznos?: SortOrder
    kumulativ_naplacenih_iznosa?: SortOrder
    nenaplacen_iznos?: SortOrder
    nenaplacen_korigovan_iznos?: SortOrder
    storniran_iznos?: SortOrder
    otkazan_iznos?: SortOrder
    kumulativ_otkazanih_iznosa?: SortOrder
    iznos_za_prenos_sredstava?: SortOrder
    serviceId?: SortOrder
    provajderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VasServiceSumOrderByAggregateInput = {
    jedinicna_cena?: SortOrder
    broj_transakcija?: SortOrder
    fakturisan_iznos?: SortOrder
    fakturisan_korigovan_iznos?: SortOrder
    naplacen_iznos?: SortOrder
    kumulativ_naplacenih_iznosa?: SortOrder
    nenaplacen_iznos?: SortOrder
    nenaplacen_korigovan_iznos?: SortOrder
    storniran_iznos?: SortOrder
    otkazan_iznos?: SortOrder
    kumulativ_otkazanih_iznosa?: SortOrder
    iznos_za_prenos_sredstava?: SortOrder
  }

  export type BulkServiceProvider_nameAgreement_nameService_nameSender_nameDatumNaplateCompoundUniqueInput = {
    provider_name: string
    agreement_name: string
    service_name: string
    sender_name: string
    datumNaplate: Date | string
  }

  export type BulkServiceCountOrderByAggregateInput = {
    id?: SortOrder
    provider_name?: SortOrder
    agreement_name?: SortOrder
    service_name?: SortOrder
    step_name?: SortOrder
    sender_name?: SortOrder
    requests?: SortOrder
    message_parts?: SortOrder
    datumNaplate?: SortOrder
    serviceId?: SortOrder
    providerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BulkServiceAvgOrderByAggregateInput = {
    requests?: SortOrder
    message_parts?: SortOrder
  }

  export type BulkServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    provider_name?: SortOrder
    agreement_name?: SortOrder
    service_name?: SortOrder
    step_name?: SortOrder
    sender_name?: SortOrder
    requests?: SortOrder
    message_parts?: SortOrder
    datumNaplate?: SortOrder
    serviceId?: SortOrder
    providerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BulkServiceMinOrderByAggregateInput = {
    id?: SortOrder
    provider_name?: SortOrder
    agreement_name?: SortOrder
    service_name?: SortOrder
    step_name?: SortOrder
    sender_name?: SortOrder
    requests?: SortOrder
    message_parts?: SortOrder
    datumNaplate?: SortOrder
    serviceId?: SortOrder
    providerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BulkServiceSumOrderByAggregateInput = {
    requests?: SortOrder
    message_parts?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumComplaintStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintStatusFilter<$PrismaModel> | $Enums.ComplaintStatus
  }

  export type ServiceNullableScalarRelationFilter = {
    is?: ServiceWhereInput | null
    isNot?: ServiceWhereInput | null
  }

  export type ProductNullableScalarRelationFilter = {
    is?: ProductWhereInput | null
    isNot?: ProductWhereInput | null
  }

  export type AttachmentListRelationFilter = {
    every?: AttachmentWhereInput
    some?: AttachmentWhereInput
    none?: AttachmentWhereInput
  }

  export type ComplaintStatusHistoryListRelationFilter = {
    every?: ComplaintStatusHistoryWhereInput
    some?: ComplaintStatusHistoryWhereInput
    none?: ComplaintStatusHistoryWhereInput
  }

  export type AttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComplaintStatusHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComplaintCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    financialImpact?: SortOrder
    serviceId?: SortOrder
    productId?: SortOrder
    providerId?: SortOrder
    submittedById?: SortOrder
    assignedAgentId?: SortOrder
    assignedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
    closedAt?: SortOrder
    humanitarianOrgId?: SortOrder
    parkingServiceId?: SortOrder
  }

  export type ComplaintAvgOrderByAggregateInput = {
    priority?: SortOrder
    financialImpact?: SortOrder
  }

  export type ComplaintMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    financialImpact?: SortOrder
    serviceId?: SortOrder
    productId?: SortOrder
    providerId?: SortOrder
    submittedById?: SortOrder
    assignedAgentId?: SortOrder
    assignedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
    closedAt?: SortOrder
    humanitarianOrgId?: SortOrder
    parkingServiceId?: SortOrder
  }

  export type ComplaintMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    financialImpact?: SortOrder
    serviceId?: SortOrder
    productId?: SortOrder
    providerId?: SortOrder
    submittedById?: SortOrder
    assignedAgentId?: SortOrder
    assignedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
    closedAt?: SortOrder
    humanitarianOrgId?: SortOrder
    parkingServiceId?: SortOrder
  }

  export type ComplaintSumOrderByAggregateInput = {
    priority?: SortOrder
    financialImpact?: SortOrder
  }

  export type EnumComplaintStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplaintStatusFilter<$PrismaModel>
    _max?: NestedEnumComplaintStatusFilter<$PrismaModel>
  }

  export type EnumComplaintStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumComplaintStatusNullableFilter<$PrismaModel> | $Enums.ComplaintStatus | null
  }

  export type ComplaintScalarRelationFilter = {
    is?: ComplaintWhereInput
    isNot?: ComplaintWhereInput
  }

  export type ComplaintStatusHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    complaintId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    changedById?: SortOrder
    changedAt?: SortOrder
    notes?: SortOrder
  }

  export type ComplaintStatusHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    complaintId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    changedById?: SortOrder
    changedAt?: SortOrder
    notes?: SortOrder
  }

  export type ComplaintStatusHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    complaintId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    changedById?: SortOrder
    changedAt?: SortOrder
    notes?: SortOrder
  }

  export type EnumComplaintStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumComplaintStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumComplaintStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumComplaintStatusNullableFilter<$PrismaModel>
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    complaintId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isInternal?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    complaintId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isInternal?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    complaintId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isInternal?: SortOrder
  }

  export type AttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    complaintId?: SortOrder
    uploadedAt?: SortOrder
  }

  export type AttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    complaintId?: SortOrder
    uploadedAt?: SortOrder
  }

  export type AttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    complaintId?: SortOrder
    uploadedAt?: SortOrder
  }

  export type EnumLogEntityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LogEntityType | EnumLogEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogEntityType[] | ListEnumLogEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogEntityType[] | ListEnumLogEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogEntityTypeFilter<$PrismaModel> | $Enums.LogEntityType
  }

  export type EnumLogActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LogActionType | EnumLogActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogActionType[] | ListEnumLogActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogActionType[] | ListEnumLogActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogActionTypeFilter<$PrismaModel> | $Enums.LogActionType
  }

  export type EnumLogStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LogStatus | EnumLogStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LogStatus[] | ListEnumLogStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogStatus[] | ListEnumLogStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLogStatusFilter<$PrismaModel> | $Enums.LogStatus
  }

  export type BulkServiceNullableScalarRelationFilter = {
    is?: BulkServiceWhereInput | null
    isNot?: BulkServiceWhereInput | null
  }

  export type LogEntryCountOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    status?: SortOrder
    sendEmail?: SortOrder
    providerId?: SortOrder
    parkingServiceId?: SortOrder
    bulkServiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type LogEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    status?: SortOrder
    sendEmail?: SortOrder
    providerId?: SortOrder
    parkingServiceId?: SortOrder
    bulkServiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type LogEntryMinOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    status?: SortOrder
    sendEmail?: SortOrder
    providerId?: SortOrder
    parkingServiceId?: SortOrder
    bulkServiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type EnumLogEntityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogEntityType | EnumLogEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogEntityType[] | ListEnumLogEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogEntityType[] | ListEnumLogEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogEntityTypeWithAggregatesFilter<$PrismaModel> | $Enums.LogEntityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogEntityTypeFilter<$PrismaModel>
    _max?: NestedEnumLogEntityTypeFilter<$PrismaModel>
  }

  export type EnumLogActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogActionType | EnumLogActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogActionType[] | ListEnumLogActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogActionType[] | ListEnumLogActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.LogActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogActionTypeFilter<$PrismaModel>
    _max?: NestedEnumLogActionTypeFilter<$PrismaModel>
  }

  export type EnumLogStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogStatus | EnumLogStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LogStatus[] | ListEnumLogStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogStatus[] | ListEnumLogStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLogStatusWithAggregatesFilter<$PrismaModel> | $Enums.LogStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogStatusFilter<$PrismaModel>
    _max?: NestedEnumLogStatusFilter<$PrismaModel>
  }

  export type EnumLogSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.LogSeverity | EnumLogSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.LogSeverity[] | ListEnumLogSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogSeverity[] | ListEnumLogSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumLogSeverityFilter<$PrismaModel> | $Enums.LogSeverity
  }

  export type ActivityLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    severity?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    severity?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    severity?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumLogSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogSeverity | EnumLogSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.LogSeverity[] | ListEnumLogSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogSeverity[] | ListEnumLogSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumLogSeverityWithAggregatesFilter<$PrismaModel> | $Enums.LogSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogSeverityFilter<$PrismaModel>
    _max?: NestedEnumLogSeverityFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumReportFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportFrequency | EnumReportFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.ReportFrequency[] | ListEnumReportFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportFrequency[] | ListEnumReportFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumReportFrequencyFilter<$PrismaModel> | $Enums.ReportFrequency
  }

  export type ScheduledReportCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    reportType?: SortOrder
    frequency?: SortOrder
    lastRun?: SortOrder
    nextRun?: SortOrder
    parameters?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduledReportMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    reportType?: SortOrder
    frequency?: SortOrder
    lastRun?: SortOrder
    nextRun?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduledReportMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    reportType?: SortOrder
    frequency?: SortOrder
    lastRun?: SortOrder
    nextRun?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumReportFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportFrequency | EnumReportFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.ReportFrequency[] | ListEnumReportFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportFrequency[] | ListEnumReportFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumReportFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.ReportFrequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportFrequencyFilter<$PrismaModel>
    _max?: NestedEnumReportFrequencyFilter<$PrismaModel>
  }

  export type GeneratedReportCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    reportType?: SortOrder
    fileUrl?: SortOrder
    generatedAt?: SortOrder
    scheduledReportId?: SortOrder
  }

  export type GeneratedReportMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    reportType?: SortOrder
    fileUrl?: SortOrder
    generatedAt?: SortOrder
    scheduledReportId?: SortOrder
  }

  export type GeneratedReportMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    reportType?: SortOrder
    fileUrl?: SortOrder
    generatedAt?: SortOrder
    scheduledReportId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NotificationPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ReportFileCountOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    organizationId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
  }

  export type ReportFileAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type ReportFileMaxOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    organizationId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
  }

  export type ReportFileMinOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    organizationId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
  }

  export type ReportFileSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutTwoFactorConfirmationInput = {
    create?: XOR<UserCreateWithoutTwoFactorConfirmationInput, UserUncheckedCreateWithoutTwoFactorConfirmationInput>
    connectOrCreate?: UserCreateOrConnectWithoutTwoFactorConfirmationInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTwoFactorConfirmationNestedInput = {
    create?: XOR<UserCreateWithoutTwoFactorConfirmationInput, UserUncheckedCreateWithoutTwoFactorConfirmationInput>
    connectOrCreate?: UserCreateOrConnectWithoutTwoFactorConfirmationInput
    upsert?: UserUpsertWithoutTwoFactorConfirmationInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTwoFactorConfirmationInput, UserUpdateWithoutTwoFactorConfirmationInput>, UserUncheckedUpdateWithoutTwoFactorConfirmationInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type TwoFactorConfirmationCreateNestedOneWithoutUserInput = {
    create?: XOR<TwoFactorConfirmationCreateWithoutUserInput, TwoFactorConfirmationUncheckedCreateWithoutUserInput>
    connectOrCreate?: TwoFactorConfirmationCreateOrConnectWithoutUserInput
    connect?: TwoFactorConfirmationWhereUniqueInput
  }

  export type ContractCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ContractCreateWithoutCreatedByInput, ContractUncheckedCreateWithoutCreatedByInput> | ContractCreateWithoutCreatedByInput[] | ContractUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutCreatedByInput | ContractCreateOrConnectWithoutCreatedByInput[]
    createMany?: ContractCreateManyCreatedByInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type ContractCreateNestedManyWithoutLastModifiedByInput = {
    create?: XOR<ContractCreateWithoutLastModifiedByInput, ContractUncheckedCreateWithoutLastModifiedByInput> | ContractCreateWithoutLastModifiedByInput[] | ContractUncheckedCreateWithoutLastModifiedByInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutLastModifiedByInput | ContractCreateOrConnectWithoutLastModifiedByInput[]
    createMany?: ContractCreateManyLastModifiedByInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type ContractAttachmentCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<ContractAttachmentCreateWithoutUploadedByInput, ContractAttachmentUncheckedCreateWithoutUploadedByInput> | ContractAttachmentCreateWithoutUploadedByInput[] | ContractAttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: ContractAttachmentCreateOrConnectWithoutUploadedByInput | ContractAttachmentCreateOrConnectWithoutUploadedByInput[]
    createMany?: ContractAttachmentCreateManyUploadedByInputEnvelope
    connect?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
  }

  export type ContractReminderCreateNestedManyWithoutAcknowledgedByInput = {
    create?: XOR<ContractReminderCreateWithoutAcknowledgedByInput, ContractReminderUncheckedCreateWithoutAcknowledgedByInput> | ContractReminderCreateWithoutAcknowledgedByInput[] | ContractReminderUncheckedCreateWithoutAcknowledgedByInput[]
    connectOrCreate?: ContractReminderCreateOrConnectWithoutAcknowledgedByInput | ContractReminderCreateOrConnectWithoutAcknowledgedByInput[]
    createMany?: ContractReminderCreateManyAcknowledgedByInputEnvelope
    connect?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutSubmittedByInput = {
    create?: XOR<ComplaintCreateWithoutSubmittedByInput, ComplaintUncheckedCreateWithoutSubmittedByInput> | ComplaintCreateWithoutSubmittedByInput[] | ComplaintUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutSubmittedByInput | ComplaintCreateOrConnectWithoutSubmittedByInput[]
    createMany?: ComplaintCreateManySubmittedByInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutAssignedAgentInput = {
    create?: XOR<ComplaintCreateWithoutAssignedAgentInput, ComplaintUncheckedCreateWithoutAssignedAgentInput> | ComplaintCreateWithoutAssignedAgentInput[] | ComplaintUncheckedCreateWithoutAssignedAgentInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutAssignedAgentInput | ComplaintCreateOrConnectWithoutAssignedAgentInput[]
    createMany?: ComplaintCreateManyAssignedAgentInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ActivityLogCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationPreferenceCreateNestedOneWithoutUserInput = {
    create?: XOR<NotificationPreferenceCreateWithoutUserInput, NotificationPreferenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationPreferenceCreateOrConnectWithoutUserInput
    connect?: NotificationPreferenceWhereUniqueInput
  }

  export type HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutCreatedByInput, HumanitarianContractRenewalUncheckedCreateWithoutCreatedByInput> | HumanitarianContractRenewalCreateWithoutCreatedByInput[] | HumanitarianContractRenewalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutCreatedByInput | HumanitarianContractRenewalCreateOrConnectWithoutCreatedByInput[]
    createMany?: HumanitarianContractRenewalCreateManyCreatedByInputEnvelope
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
  }

  export type HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutLastModifiedByInput, HumanitarianContractRenewalUncheckedCreateWithoutLastModifiedByInput> | HumanitarianContractRenewalCreateWithoutLastModifiedByInput[] | HumanitarianContractRenewalUncheckedCreateWithoutLastModifiedByInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutLastModifiedByInput | HumanitarianContractRenewalCreateOrConnectWithoutLastModifiedByInput[]
    createMany?: HumanitarianContractRenewalCreateManyLastModifiedByInputEnvelope
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
  }

  export type SenderBlacklistCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SenderBlacklistCreateWithoutCreatedByInput, SenderBlacklistUncheckedCreateWithoutCreatedByInput> | SenderBlacklistCreateWithoutCreatedByInput[] | SenderBlacklistUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SenderBlacklistCreateOrConnectWithoutCreatedByInput | SenderBlacklistCreateOrConnectWithoutCreatedByInput[]
    createMany?: SenderBlacklistCreateManyCreatedByInputEnvelope
    connect?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
  }

  export type SenderBlacklistCreateNestedManyWithoutModifiedByInput = {
    create?: XOR<SenderBlacklistCreateWithoutModifiedByInput, SenderBlacklistUncheckedCreateWithoutModifiedByInput> | SenderBlacklistCreateWithoutModifiedByInput[] | SenderBlacklistUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: SenderBlacklistCreateOrConnectWithoutModifiedByInput | SenderBlacklistCreateOrConnectWithoutModifiedByInput[]
    createMany?: SenderBlacklistCreateManyModifiedByInputEnvelope
    connect?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
  }

  export type BlacklistLogCreateNestedManyWithoutUserInput = {
    create?: XOR<BlacklistLogCreateWithoutUserInput, BlacklistLogUncheckedCreateWithoutUserInput> | BlacklistLogCreateWithoutUserInput[] | BlacklistLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BlacklistLogCreateOrConnectWithoutUserInput | BlacklistLogCreateOrConnectWithoutUserInput[]
    createMany?: BlacklistLogCreateManyUserInputEnvelope
    connect?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
  }

  export type ContractRenewalCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ContractRenewalCreateWithoutCreatedByInput, ContractRenewalUncheckedCreateWithoutCreatedByInput> | ContractRenewalCreateWithoutCreatedByInput[] | ContractRenewalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutCreatedByInput | ContractRenewalCreateOrConnectWithoutCreatedByInput[]
    createMany?: ContractRenewalCreateManyCreatedByInputEnvelope
    connect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
  }

  export type ContractRenewalCreateNestedManyWithoutLastModifiedByInput = {
    create?: XOR<ContractRenewalCreateWithoutLastModifiedByInput, ContractRenewalUncheckedCreateWithoutLastModifiedByInput> | ContractRenewalCreateWithoutLastModifiedByInput[] | ContractRenewalUncheckedCreateWithoutLastModifiedByInput[]
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutLastModifiedByInput | ContractRenewalCreateOrConnectWithoutLastModifiedByInput[]
    createMany?: ContractRenewalCreateManyLastModifiedByInputEnvelope
    connect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
  }

  export type ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<ContractRenewalAttachmentCreateWithoutUploadedByInput, ContractRenewalAttachmentUncheckedCreateWithoutUploadedByInput> | ContractRenewalAttachmentCreateWithoutUploadedByInput[] | ContractRenewalAttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: ContractRenewalAttachmentCreateOrConnectWithoutUploadedByInput | ContractRenewalAttachmentCreateOrConnectWithoutUploadedByInput[]
    createMany?: ContractRenewalAttachmentCreateManyUploadedByInputEnvelope
    connect?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
  }

  export type ParkingServiceCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ParkingServiceCreateWithoutCreatedByInput, ParkingServiceUncheckedCreateWithoutCreatedByInput> | ParkingServiceCreateWithoutCreatedByInput[] | ParkingServiceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ParkingServiceCreateOrConnectWithoutCreatedByInput | ParkingServiceCreateOrConnectWithoutCreatedByInput[]
    createMany?: ParkingServiceCreateManyCreatedByInputEnvelope
    connect?: ParkingServiceWhereUniqueInput | ParkingServiceWhereUniqueInput[]
  }

  export type LogEntryCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<LogEntryCreateWithoutCreatedByInput, LogEntryUncheckedCreateWithoutCreatedByInput> | LogEntryCreateWithoutCreatedByInput[] | LogEntryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutCreatedByInput | LogEntryCreateOrConnectWithoutCreatedByInput[]
    createMany?: LogEntryCreateManyCreatedByInputEnvelope
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
  }

  export type LogEntryCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<LogEntryCreateWithoutUpdatedByInput, LogEntryUncheckedCreateWithoutUpdatedByInput> | LogEntryCreateWithoutUpdatedByInput[] | LogEntryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutUpdatedByInput | LogEntryCreateOrConnectWithoutUpdatedByInput[]
    createMany?: LogEntryCreateManyUpdatedByInputEnvelope
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<TwoFactorConfirmationCreateWithoutUserInput, TwoFactorConfirmationUncheckedCreateWithoutUserInput>
    connectOrCreate?: TwoFactorConfirmationCreateOrConnectWithoutUserInput
    connect?: TwoFactorConfirmationWhereUniqueInput
  }

  export type ContractUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ContractCreateWithoutCreatedByInput, ContractUncheckedCreateWithoutCreatedByInput> | ContractCreateWithoutCreatedByInput[] | ContractUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutCreatedByInput | ContractCreateOrConnectWithoutCreatedByInput[]
    createMany?: ContractCreateManyCreatedByInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutLastModifiedByInput = {
    create?: XOR<ContractCreateWithoutLastModifiedByInput, ContractUncheckedCreateWithoutLastModifiedByInput> | ContractCreateWithoutLastModifiedByInput[] | ContractUncheckedCreateWithoutLastModifiedByInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutLastModifiedByInput | ContractCreateOrConnectWithoutLastModifiedByInput[]
    createMany?: ContractCreateManyLastModifiedByInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<ContractAttachmentCreateWithoutUploadedByInput, ContractAttachmentUncheckedCreateWithoutUploadedByInput> | ContractAttachmentCreateWithoutUploadedByInput[] | ContractAttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: ContractAttachmentCreateOrConnectWithoutUploadedByInput | ContractAttachmentCreateOrConnectWithoutUploadedByInput[]
    createMany?: ContractAttachmentCreateManyUploadedByInputEnvelope
    connect?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
  }

  export type ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput = {
    create?: XOR<ContractReminderCreateWithoutAcknowledgedByInput, ContractReminderUncheckedCreateWithoutAcknowledgedByInput> | ContractReminderCreateWithoutAcknowledgedByInput[] | ContractReminderUncheckedCreateWithoutAcknowledgedByInput[]
    connectOrCreate?: ContractReminderCreateOrConnectWithoutAcknowledgedByInput | ContractReminderCreateOrConnectWithoutAcknowledgedByInput[]
    createMany?: ContractReminderCreateManyAcknowledgedByInputEnvelope
    connect?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput = {
    create?: XOR<ComplaintCreateWithoutSubmittedByInput, ComplaintUncheckedCreateWithoutSubmittedByInput> | ComplaintCreateWithoutSubmittedByInput[] | ComplaintUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutSubmittedByInput | ComplaintCreateOrConnectWithoutSubmittedByInput[]
    createMany?: ComplaintCreateManySubmittedByInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput = {
    create?: XOR<ComplaintCreateWithoutAssignedAgentInput, ComplaintUncheckedCreateWithoutAssignedAgentInput> | ComplaintCreateWithoutAssignedAgentInput[] | ComplaintUncheckedCreateWithoutAssignedAgentInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutAssignedAgentInput | ComplaintCreateOrConnectWithoutAssignedAgentInput[]
    createMany?: ComplaintCreateManyAssignedAgentInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ActivityLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<NotificationPreferenceCreateWithoutUserInput, NotificationPreferenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationPreferenceCreateOrConnectWithoutUserInput
    connect?: NotificationPreferenceWhereUniqueInput
  }

  export type HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutCreatedByInput, HumanitarianContractRenewalUncheckedCreateWithoutCreatedByInput> | HumanitarianContractRenewalCreateWithoutCreatedByInput[] | HumanitarianContractRenewalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutCreatedByInput | HumanitarianContractRenewalCreateOrConnectWithoutCreatedByInput[]
    createMany?: HumanitarianContractRenewalCreateManyCreatedByInputEnvelope
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
  }

  export type HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutLastModifiedByInput, HumanitarianContractRenewalUncheckedCreateWithoutLastModifiedByInput> | HumanitarianContractRenewalCreateWithoutLastModifiedByInput[] | HumanitarianContractRenewalUncheckedCreateWithoutLastModifiedByInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutLastModifiedByInput | HumanitarianContractRenewalCreateOrConnectWithoutLastModifiedByInput[]
    createMany?: HumanitarianContractRenewalCreateManyLastModifiedByInputEnvelope
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
  }

  export type SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SenderBlacklistCreateWithoutCreatedByInput, SenderBlacklistUncheckedCreateWithoutCreatedByInput> | SenderBlacklistCreateWithoutCreatedByInput[] | SenderBlacklistUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SenderBlacklistCreateOrConnectWithoutCreatedByInput | SenderBlacklistCreateOrConnectWithoutCreatedByInput[]
    createMany?: SenderBlacklistCreateManyCreatedByInputEnvelope
    connect?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
  }

  export type SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput = {
    create?: XOR<SenderBlacklistCreateWithoutModifiedByInput, SenderBlacklistUncheckedCreateWithoutModifiedByInput> | SenderBlacklistCreateWithoutModifiedByInput[] | SenderBlacklistUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: SenderBlacklistCreateOrConnectWithoutModifiedByInput | SenderBlacklistCreateOrConnectWithoutModifiedByInput[]
    createMany?: SenderBlacklistCreateManyModifiedByInputEnvelope
    connect?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
  }

  export type BlacklistLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BlacklistLogCreateWithoutUserInput, BlacklistLogUncheckedCreateWithoutUserInput> | BlacklistLogCreateWithoutUserInput[] | BlacklistLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BlacklistLogCreateOrConnectWithoutUserInput | BlacklistLogCreateOrConnectWithoutUserInput[]
    createMany?: BlacklistLogCreateManyUserInputEnvelope
    connect?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
  }

  export type ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ContractRenewalCreateWithoutCreatedByInput, ContractRenewalUncheckedCreateWithoutCreatedByInput> | ContractRenewalCreateWithoutCreatedByInput[] | ContractRenewalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutCreatedByInput | ContractRenewalCreateOrConnectWithoutCreatedByInput[]
    createMany?: ContractRenewalCreateManyCreatedByInputEnvelope
    connect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
  }

  export type ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput = {
    create?: XOR<ContractRenewalCreateWithoutLastModifiedByInput, ContractRenewalUncheckedCreateWithoutLastModifiedByInput> | ContractRenewalCreateWithoutLastModifiedByInput[] | ContractRenewalUncheckedCreateWithoutLastModifiedByInput[]
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutLastModifiedByInput | ContractRenewalCreateOrConnectWithoutLastModifiedByInput[]
    createMany?: ContractRenewalCreateManyLastModifiedByInputEnvelope
    connect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
  }

  export type ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<ContractRenewalAttachmentCreateWithoutUploadedByInput, ContractRenewalAttachmentUncheckedCreateWithoutUploadedByInput> | ContractRenewalAttachmentCreateWithoutUploadedByInput[] | ContractRenewalAttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: ContractRenewalAttachmentCreateOrConnectWithoutUploadedByInput | ContractRenewalAttachmentCreateOrConnectWithoutUploadedByInput[]
    createMany?: ContractRenewalAttachmentCreateManyUploadedByInputEnvelope
    connect?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
  }

  export type ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ParkingServiceCreateWithoutCreatedByInput, ParkingServiceUncheckedCreateWithoutCreatedByInput> | ParkingServiceCreateWithoutCreatedByInput[] | ParkingServiceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ParkingServiceCreateOrConnectWithoutCreatedByInput | ParkingServiceCreateOrConnectWithoutCreatedByInput[]
    createMany?: ParkingServiceCreateManyCreatedByInputEnvelope
    connect?: ParkingServiceWhereUniqueInput | ParkingServiceWhereUniqueInput[]
  }

  export type LogEntryUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<LogEntryCreateWithoutCreatedByInput, LogEntryUncheckedCreateWithoutCreatedByInput> | LogEntryCreateWithoutCreatedByInput[] | LogEntryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutCreatedByInput | LogEntryCreateOrConnectWithoutCreatedByInput[]
    createMany?: LogEntryCreateManyCreatedByInputEnvelope
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
  }

  export type LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<LogEntryCreateWithoutUpdatedByInput, LogEntryUncheckedCreateWithoutUpdatedByInput> | LogEntryCreateWithoutUpdatedByInput[] | LogEntryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutUpdatedByInput | LogEntryCreateOrConnectWithoutUpdatedByInput[]
    createMany?: LogEntryCreateManyUpdatedByInputEnvelope
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type TwoFactorConfirmationUpdateOneWithoutUserNestedInput = {
    create?: XOR<TwoFactorConfirmationCreateWithoutUserInput, TwoFactorConfirmationUncheckedCreateWithoutUserInput>
    connectOrCreate?: TwoFactorConfirmationCreateOrConnectWithoutUserInput
    upsert?: TwoFactorConfirmationUpsertWithoutUserInput
    disconnect?: TwoFactorConfirmationWhereInput | boolean
    delete?: TwoFactorConfirmationWhereInput | boolean
    connect?: TwoFactorConfirmationWhereUniqueInput
    update?: XOR<XOR<TwoFactorConfirmationUpdateToOneWithWhereWithoutUserInput, TwoFactorConfirmationUpdateWithoutUserInput>, TwoFactorConfirmationUncheckedUpdateWithoutUserInput>
  }

  export type ContractUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ContractCreateWithoutCreatedByInput, ContractUncheckedCreateWithoutCreatedByInput> | ContractCreateWithoutCreatedByInput[] | ContractUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutCreatedByInput | ContractCreateOrConnectWithoutCreatedByInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutCreatedByInput | ContractUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ContractCreateManyCreatedByInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutCreatedByInput | ContractUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutCreatedByInput | ContractUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type ContractUpdateManyWithoutLastModifiedByNestedInput = {
    create?: XOR<ContractCreateWithoutLastModifiedByInput, ContractUncheckedCreateWithoutLastModifiedByInput> | ContractCreateWithoutLastModifiedByInput[] | ContractUncheckedCreateWithoutLastModifiedByInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutLastModifiedByInput | ContractCreateOrConnectWithoutLastModifiedByInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutLastModifiedByInput | ContractUpsertWithWhereUniqueWithoutLastModifiedByInput[]
    createMany?: ContractCreateManyLastModifiedByInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutLastModifiedByInput | ContractUpdateWithWhereUniqueWithoutLastModifiedByInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutLastModifiedByInput | ContractUpdateManyWithWhereWithoutLastModifiedByInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type ContractAttachmentUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<ContractAttachmentCreateWithoutUploadedByInput, ContractAttachmentUncheckedCreateWithoutUploadedByInput> | ContractAttachmentCreateWithoutUploadedByInput[] | ContractAttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: ContractAttachmentCreateOrConnectWithoutUploadedByInput | ContractAttachmentCreateOrConnectWithoutUploadedByInput[]
    upsert?: ContractAttachmentUpsertWithWhereUniqueWithoutUploadedByInput | ContractAttachmentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: ContractAttachmentCreateManyUploadedByInputEnvelope
    set?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    disconnect?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    delete?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    connect?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    update?: ContractAttachmentUpdateWithWhereUniqueWithoutUploadedByInput | ContractAttachmentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: ContractAttachmentUpdateManyWithWhereWithoutUploadedByInput | ContractAttachmentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: ContractAttachmentScalarWhereInput | ContractAttachmentScalarWhereInput[]
  }

  export type ContractReminderUpdateManyWithoutAcknowledgedByNestedInput = {
    create?: XOR<ContractReminderCreateWithoutAcknowledgedByInput, ContractReminderUncheckedCreateWithoutAcknowledgedByInput> | ContractReminderCreateWithoutAcknowledgedByInput[] | ContractReminderUncheckedCreateWithoutAcknowledgedByInput[]
    connectOrCreate?: ContractReminderCreateOrConnectWithoutAcknowledgedByInput | ContractReminderCreateOrConnectWithoutAcknowledgedByInput[]
    upsert?: ContractReminderUpsertWithWhereUniqueWithoutAcknowledgedByInput | ContractReminderUpsertWithWhereUniqueWithoutAcknowledgedByInput[]
    createMany?: ContractReminderCreateManyAcknowledgedByInputEnvelope
    set?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    disconnect?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    delete?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    connect?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    update?: ContractReminderUpdateWithWhereUniqueWithoutAcknowledgedByInput | ContractReminderUpdateWithWhereUniqueWithoutAcknowledgedByInput[]
    updateMany?: ContractReminderUpdateManyWithWhereWithoutAcknowledgedByInput | ContractReminderUpdateManyWithWhereWithoutAcknowledgedByInput[]
    deleteMany?: ContractReminderScalarWhereInput | ContractReminderScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutSubmittedByNestedInput = {
    create?: XOR<ComplaintCreateWithoutSubmittedByInput, ComplaintUncheckedCreateWithoutSubmittedByInput> | ComplaintCreateWithoutSubmittedByInput[] | ComplaintUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutSubmittedByInput | ComplaintCreateOrConnectWithoutSubmittedByInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutSubmittedByInput | ComplaintUpsertWithWhereUniqueWithoutSubmittedByInput[]
    createMany?: ComplaintCreateManySubmittedByInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutSubmittedByInput | ComplaintUpdateWithWhereUniqueWithoutSubmittedByInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutSubmittedByInput | ComplaintUpdateManyWithWhereWithoutSubmittedByInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutAssignedAgentNestedInput = {
    create?: XOR<ComplaintCreateWithoutAssignedAgentInput, ComplaintUncheckedCreateWithoutAssignedAgentInput> | ComplaintCreateWithoutAssignedAgentInput[] | ComplaintUncheckedCreateWithoutAssignedAgentInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutAssignedAgentInput | ComplaintCreateOrConnectWithoutAssignedAgentInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutAssignedAgentInput | ComplaintUpsertWithWhereUniqueWithoutAssignedAgentInput[]
    createMany?: ComplaintCreateManyAssignedAgentInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutAssignedAgentInput | ComplaintUpdateWithWhereUniqueWithoutAssignedAgentInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutAssignedAgentInput | ComplaintUpdateManyWithWhereWithoutAssignedAgentInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ActivityLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutUserInput | ActivityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutUserInput | ActivityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutUserInput | ActivityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationPreferenceUpdateOneWithoutUserNestedInput = {
    create?: XOR<NotificationPreferenceCreateWithoutUserInput, NotificationPreferenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationPreferenceCreateOrConnectWithoutUserInput
    upsert?: NotificationPreferenceUpsertWithoutUserInput
    disconnect?: NotificationPreferenceWhereInput | boolean
    delete?: NotificationPreferenceWhereInput | boolean
    connect?: NotificationPreferenceWhereUniqueInput
    update?: XOR<XOR<NotificationPreferenceUpdateToOneWithWhereWithoutUserInput, NotificationPreferenceUpdateWithoutUserInput>, NotificationPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutCreatedByInput, HumanitarianContractRenewalUncheckedCreateWithoutCreatedByInput> | HumanitarianContractRenewalCreateWithoutCreatedByInput[] | HumanitarianContractRenewalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutCreatedByInput | HumanitarianContractRenewalCreateOrConnectWithoutCreatedByInput[]
    upsert?: HumanitarianContractRenewalUpsertWithWhereUniqueWithoutCreatedByInput | HumanitarianContractRenewalUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: HumanitarianContractRenewalCreateManyCreatedByInputEnvelope
    set?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    disconnect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    delete?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    update?: HumanitarianContractRenewalUpdateWithWhereUniqueWithoutCreatedByInput | HumanitarianContractRenewalUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: HumanitarianContractRenewalUpdateManyWithWhereWithoutCreatedByInput | HumanitarianContractRenewalUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: HumanitarianContractRenewalScalarWhereInput | HumanitarianContractRenewalScalarWhereInput[]
  }

  export type HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutLastModifiedByInput, HumanitarianContractRenewalUncheckedCreateWithoutLastModifiedByInput> | HumanitarianContractRenewalCreateWithoutLastModifiedByInput[] | HumanitarianContractRenewalUncheckedCreateWithoutLastModifiedByInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutLastModifiedByInput | HumanitarianContractRenewalCreateOrConnectWithoutLastModifiedByInput[]
    upsert?: HumanitarianContractRenewalUpsertWithWhereUniqueWithoutLastModifiedByInput | HumanitarianContractRenewalUpsertWithWhereUniqueWithoutLastModifiedByInput[]
    createMany?: HumanitarianContractRenewalCreateManyLastModifiedByInputEnvelope
    set?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    disconnect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    delete?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    update?: HumanitarianContractRenewalUpdateWithWhereUniqueWithoutLastModifiedByInput | HumanitarianContractRenewalUpdateWithWhereUniqueWithoutLastModifiedByInput[]
    updateMany?: HumanitarianContractRenewalUpdateManyWithWhereWithoutLastModifiedByInput | HumanitarianContractRenewalUpdateManyWithWhereWithoutLastModifiedByInput[]
    deleteMany?: HumanitarianContractRenewalScalarWhereInput | HumanitarianContractRenewalScalarWhereInput[]
  }

  export type SenderBlacklistUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SenderBlacklistCreateWithoutCreatedByInput, SenderBlacklistUncheckedCreateWithoutCreatedByInput> | SenderBlacklistCreateWithoutCreatedByInput[] | SenderBlacklistUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SenderBlacklistCreateOrConnectWithoutCreatedByInput | SenderBlacklistCreateOrConnectWithoutCreatedByInput[]
    upsert?: SenderBlacklistUpsertWithWhereUniqueWithoutCreatedByInput | SenderBlacklistUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SenderBlacklistCreateManyCreatedByInputEnvelope
    set?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    disconnect?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    delete?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    connect?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    update?: SenderBlacklistUpdateWithWhereUniqueWithoutCreatedByInput | SenderBlacklistUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SenderBlacklistUpdateManyWithWhereWithoutCreatedByInput | SenderBlacklistUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SenderBlacklistScalarWhereInput | SenderBlacklistScalarWhereInput[]
  }

  export type SenderBlacklistUpdateManyWithoutModifiedByNestedInput = {
    create?: XOR<SenderBlacklistCreateWithoutModifiedByInput, SenderBlacklistUncheckedCreateWithoutModifiedByInput> | SenderBlacklistCreateWithoutModifiedByInput[] | SenderBlacklistUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: SenderBlacklistCreateOrConnectWithoutModifiedByInput | SenderBlacklistCreateOrConnectWithoutModifiedByInput[]
    upsert?: SenderBlacklistUpsertWithWhereUniqueWithoutModifiedByInput | SenderBlacklistUpsertWithWhereUniqueWithoutModifiedByInput[]
    createMany?: SenderBlacklistCreateManyModifiedByInputEnvelope
    set?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    disconnect?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    delete?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    connect?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    update?: SenderBlacklistUpdateWithWhereUniqueWithoutModifiedByInput | SenderBlacklistUpdateWithWhereUniqueWithoutModifiedByInput[]
    updateMany?: SenderBlacklistUpdateManyWithWhereWithoutModifiedByInput | SenderBlacklistUpdateManyWithWhereWithoutModifiedByInput[]
    deleteMany?: SenderBlacklistScalarWhereInput | SenderBlacklistScalarWhereInput[]
  }

  export type BlacklistLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<BlacklistLogCreateWithoutUserInput, BlacklistLogUncheckedCreateWithoutUserInput> | BlacklistLogCreateWithoutUserInput[] | BlacklistLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BlacklistLogCreateOrConnectWithoutUserInput | BlacklistLogCreateOrConnectWithoutUserInput[]
    upsert?: BlacklistLogUpsertWithWhereUniqueWithoutUserInput | BlacklistLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BlacklistLogCreateManyUserInputEnvelope
    set?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    disconnect?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    delete?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    connect?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    update?: BlacklistLogUpdateWithWhereUniqueWithoutUserInput | BlacklistLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BlacklistLogUpdateManyWithWhereWithoutUserInput | BlacklistLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BlacklistLogScalarWhereInput | BlacklistLogScalarWhereInput[]
  }

  export type ContractRenewalUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ContractRenewalCreateWithoutCreatedByInput, ContractRenewalUncheckedCreateWithoutCreatedByInput> | ContractRenewalCreateWithoutCreatedByInput[] | ContractRenewalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutCreatedByInput | ContractRenewalCreateOrConnectWithoutCreatedByInput[]
    upsert?: ContractRenewalUpsertWithWhereUniqueWithoutCreatedByInput | ContractRenewalUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ContractRenewalCreateManyCreatedByInputEnvelope
    set?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    disconnect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    delete?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    connect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    update?: ContractRenewalUpdateWithWhereUniqueWithoutCreatedByInput | ContractRenewalUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ContractRenewalUpdateManyWithWhereWithoutCreatedByInput | ContractRenewalUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ContractRenewalScalarWhereInput | ContractRenewalScalarWhereInput[]
  }

  export type ContractRenewalUpdateManyWithoutLastModifiedByNestedInput = {
    create?: XOR<ContractRenewalCreateWithoutLastModifiedByInput, ContractRenewalUncheckedCreateWithoutLastModifiedByInput> | ContractRenewalCreateWithoutLastModifiedByInput[] | ContractRenewalUncheckedCreateWithoutLastModifiedByInput[]
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutLastModifiedByInput | ContractRenewalCreateOrConnectWithoutLastModifiedByInput[]
    upsert?: ContractRenewalUpsertWithWhereUniqueWithoutLastModifiedByInput | ContractRenewalUpsertWithWhereUniqueWithoutLastModifiedByInput[]
    createMany?: ContractRenewalCreateManyLastModifiedByInputEnvelope
    set?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    disconnect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    delete?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    connect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    update?: ContractRenewalUpdateWithWhereUniqueWithoutLastModifiedByInput | ContractRenewalUpdateWithWhereUniqueWithoutLastModifiedByInput[]
    updateMany?: ContractRenewalUpdateManyWithWhereWithoutLastModifiedByInput | ContractRenewalUpdateManyWithWhereWithoutLastModifiedByInput[]
    deleteMany?: ContractRenewalScalarWhereInput | ContractRenewalScalarWhereInput[]
  }

  export type ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<ContractRenewalAttachmentCreateWithoutUploadedByInput, ContractRenewalAttachmentUncheckedCreateWithoutUploadedByInput> | ContractRenewalAttachmentCreateWithoutUploadedByInput[] | ContractRenewalAttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: ContractRenewalAttachmentCreateOrConnectWithoutUploadedByInput | ContractRenewalAttachmentCreateOrConnectWithoutUploadedByInput[]
    upsert?: ContractRenewalAttachmentUpsertWithWhereUniqueWithoutUploadedByInput | ContractRenewalAttachmentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: ContractRenewalAttachmentCreateManyUploadedByInputEnvelope
    set?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    disconnect?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    delete?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    connect?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    update?: ContractRenewalAttachmentUpdateWithWhereUniqueWithoutUploadedByInput | ContractRenewalAttachmentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: ContractRenewalAttachmentUpdateManyWithWhereWithoutUploadedByInput | ContractRenewalAttachmentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: ContractRenewalAttachmentScalarWhereInput | ContractRenewalAttachmentScalarWhereInput[]
  }

  export type ParkingServiceUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ParkingServiceCreateWithoutCreatedByInput, ParkingServiceUncheckedCreateWithoutCreatedByInput> | ParkingServiceCreateWithoutCreatedByInput[] | ParkingServiceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ParkingServiceCreateOrConnectWithoutCreatedByInput | ParkingServiceCreateOrConnectWithoutCreatedByInput[]
    upsert?: ParkingServiceUpsertWithWhereUniqueWithoutCreatedByInput | ParkingServiceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ParkingServiceCreateManyCreatedByInputEnvelope
    set?: ParkingServiceWhereUniqueInput | ParkingServiceWhereUniqueInput[]
    disconnect?: ParkingServiceWhereUniqueInput | ParkingServiceWhereUniqueInput[]
    delete?: ParkingServiceWhereUniqueInput | ParkingServiceWhereUniqueInput[]
    connect?: ParkingServiceWhereUniqueInput | ParkingServiceWhereUniqueInput[]
    update?: ParkingServiceUpdateWithWhereUniqueWithoutCreatedByInput | ParkingServiceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ParkingServiceUpdateManyWithWhereWithoutCreatedByInput | ParkingServiceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ParkingServiceScalarWhereInput | ParkingServiceScalarWhereInput[]
  }

  export type LogEntryUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<LogEntryCreateWithoutCreatedByInput, LogEntryUncheckedCreateWithoutCreatedByInput> | LogEntryCreateWithoutCreatedByInput[] | LogEntryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutCreatedByInput | LogEntryCreateOrConnectWithoutCreatedByInput[]
    upsert?: LogEntryUpsertWithWhereUniqueWithoutCreatedByInput | LogEntryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: LogEntryCreateManyCreatedByInputEnvelope
    set?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    disconnect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    delete?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    update?: LogEntryUpdateWithWhereUniqueWithoutCreatedByInput | LogEntryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: LogEntryUpdateManyWithWhereWithoutCreatedByInput | LogEntryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: LogEntryScalarWhereInput | LogEntryScalarWhereInput[]
  }

  export type LogEntryUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<LogEntryCreateWithoutUpdatedByInput, LogEntryUncheckedCreateWithoutUpdatedByInput> | LogEntryCreateWithoutUpdatedByInput[] | LogEntryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutUpdatedByInput | LogEntryCreateOrConnectWithoutUpdatedByInput[]
    upsert?: LogEntryUpsertWithWhereUniqueWithoutUpdatedByInput | LogEntryUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: LogEntryCreateManyUpdatedByInputEnvelope
    set?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    disconnect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    delete?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    update?: LogEntryUpdateWithWhereUniqueWithoutUpdatedByInput | LogEntryUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: LogEntryUpdateManyWithWhereWithoutUpdatedByInput | LogEntryUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: LogEntryScalarWhereInput | LogEntryScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<TwoFactorConfirmationCreateWithoutUserInput, TwoFactorConfirmationUncheckedCreateWithoutUserInput>
    connectOrCreate?: TwoFactorConfirmationCreateOrConnectWithoutUserInput
    upsert?: TwoFactorConfirmationUpsertWithoutUserInput
    disconnect?: TwoFactorConfirmationWhereInput | boolean
    delete?: TwoFactorConfirmationWhereInput | boolean
    connect?: TwoFactorConfirmationWhereUniqueInput
    update?: XOR<XOR<TwoFactorConfirmationUpdateToOneWithWhereWithoutUserInput, TwoFactorConfirmationUpdateWithoutUserInput>, TwoFactorConfirmationUncheckedUpdateWithoutUserInput>
  }

  export type ContractUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ContractCreateWithoutCreatedByInput, ContractUncheckedCreateWithoutCreatedByInput> | ContractCreateWithoutCreatedByInput[] | ContractUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutCreatedByInput | ContractCreateOrConnectWithoutCreatedByInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutCreatedByInput | ContractUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ContractCreateManyCreatedByInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutCreatedByInput | ContractUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutCreatedByInput | ContractUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput = {
    create?: XOR<ContractCreateWithoutLastModifiedByInput, ContractUncheckedCreateWithoutLastModifiedByInput> | ContractCreateWithoutLastModifiedByInput[] | ContractUncheckedCreateWithoutLastModifiedByInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutLastModifiedByInput | ContractCreateOrConnectWithoutLastModifiedByInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutLastModifiedByInput | ContractUpsertWithWhereUniqueWithoutLastModifiedByInput[]
    createMany?: ContractCreateManyLastModifiedByInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutLastModifiedByInput | ContractUpdateWithWhereUniqueWithoutLastModifiedByInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutLastModifiedByInput | ContractUpdateManyWithWhereWithoutLastModifiedByInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<ContractAttachmentCreateWithoutUploadedByInput, ContractAttachmentUncheckedCreateWithoutUploadedByInput> | ContractAttachmentCreateWithoutUploadedByInput[] | ContractAttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: ContractAttachmentCreateOrConnectWithoutUploadedByInput | ContractAttachmentCreateOrConnectWithoutUploadedByInput[]
    upsert?: ContractAttachmentUpsertWithWhereUniqueWithoutUploadedByInput | ContractAttachmentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: ContractAttachmentCreateManyUploadedByInputEnvelope
    set?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    disconnect?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    delete?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    connect?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    update?: ContractAttachmentUpdateWithWhereUniqueWithoutUploadedByInput | ContractAttachmentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: ContractAttachmentUpdateManyWithWhereWithoutUploadedByInput | ContractAttachmentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: ContractAttachmentScalarWhereInput | ContractAttachmentScalarWhereInput[]
  }

  export type ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput = {
    create?: XOR<ContractReminderCreateWithoutAcknowledgedByInput, ContractReminderUncheckedCreateWithoutAcknowledgedByInput> | ContractReminderCreateWithoutAcknowledgedByInput[] | ContractReminderUncheckedCreateWithoutAcknowledgedByInput[]
    connectOrCreate?: ContractReminderCreateOrConnectWithoutAcknowledgedByInput | ContractReminderCreateOrConnectWithoutAcknowledgedByInput[]
    upsert?: ContractReminderUpsertWithWhereUniqueWithoutAcknowledgedByInput | ContractReminderUpsertWithWhereUniqueWithoutAcknowledgedByInput[]
    createMany?: ContractReminderCreateManyAcknowledgedByInputEnvelope
    set?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    disconnect?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    delete?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    connect?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    update?: ContractReminderUpdateWithWhereUniqueWithoutAcknowledgedByInput | ContractReminderUpdateWithWhereUniqueWithoutAcknowledgedByInput[]
    updateMany?: ContractReminderUpdateManyWithWhereWithoutAcknowledgedByInput | ContractReminderUpdateManyWithWhereWithoutAcknowledgedByInput[]
    deleteMany?: ContractReminderScalarWhereInput | ContractReminderScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput = {
    create?: XOR<ComplaintCreateWithoutSubmittedByInput, ComplaintUncheckedCreateWithoutSubmittedByInput> | ComplaintCreateWithoutSubmittedByInput[] | ComplaintUncheckedCreateWithoutSubmittedByInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutSubmittedByInput | ComplaintCreateOrConnectWithoutSubmittedByInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutSubmittedByInput | ComplaintUpsertWithWhereUniqueWithoutSubmittedByInput[]
    createMany?: ComplaintCreateManySubmittedByInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutSubmittedByInput | ComplaintUpdateWithWhereUniqueWithoutSubmittedByInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutSubmittedByInput | ComplaintUpdateManyWithWhereWithoutSubmittedByInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput = {
    create?: XOR<ComplaintCreateWithoutAssignedAgentInput, ComplaintUncheckedCreateWithoutAssignedAgentInput> | ComplaintCreateWithoutAssignedAgentInput[] | ComplaintUncheckedCreateWithoutAssignedAgentInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutAssignedAgentInput | ComplaintCreateOrConnectWithoutAssignedAgentInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutAssignedAgentInput | ComplaintUpsertWithWhereUniqueWithoutAssignedAgentInput[]
    createMany?: ComplaintCreateManyAssignedAgentInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutAssignedAgentInput | ComplaintUpdateWithWhereUniqueWithoutAssignedAgentInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutAssignedAgentInput | ComplaintUpdateManyWithWhereWithoutAssignedAgentInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ActivityLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutUserInput | ActivityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutUserInput | ActivityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutUserInput | ActivityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<NotificationPreferenceCreateWithoutUserInput, NotificationPreferenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationPreferenceCreateOrConnectWithoutUserInput
    upsert?: NotificationPreferenceUpsertWithoutUserInput
    disconnect?: NotificationPreferenceWhereInput | boolean
    delete?: NotificationPreferenceWhereInput | boolean
    connect?: NotificationPreferenceWhereUniqueInput
    update?: XOR<XOR<NotificationPreferenceUpdateToOneWithWhereWithoutUserInput, NotificationPreferenceUpdateWithoutUserInput>, NotificationPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutCreatedByInput, HumanitarianContractRenewalUncheckedCreateWithoutCreatedByInput> | HumanitarianContractRenewalCreateWithoutCreatedByInput[] | HumanitarianContractRenewalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutCreatedByInput | HumanitarianContractRenewalCreateOrConnectWithoutCreatedByInput[]
    upsert?: HumanitarianContractRenewalUpsertWithWhereUniqueWithoutCreatedByInput | HumanitarianContractRenewalUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: HumanitarianContractRenewalCreateManyCreatedByInputEnvelope
    set?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    disconnect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    delete?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    update?: HumanitarianContractRenewalUpdateWithWhereUniqueWithoutCreatedByInput | HumanitarianContractRenewalUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: HumanitarianContractRenewalUpdateManyWithWhereWithoutCreatedByInput | HumanitarianContractRenewalUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: HumanitarianContractRenewalScalarWhereInput | HumanitarianContractRenewalScalarWhereInput[]
  }

  export type HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutLastModifiedByInput, HumanitarianContractRenewalUncheckedCreateWithoutLastModifiedByInput> | HumanitarianContractRenewalCreateWithoutLastModifiedByInput[] | HumanitarianContractRenewalUncheckedCreateWithoutLastModifiedByInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutLastModifiedByInput | HumanitarianContractRenewalCreateOrConnectWithoutLastModifiedByInput[]
    upsert?: HumanitarianContractRenewalUpsertWithWhereUniqueWithoutLastModifiedByInput | HumanitarianContractRenewalUpsertWithWhereUniqueWithoutLastModifiedByInput[]
    createMany?: HumanitarianContractRenewalCreateManyLastModifiedByInputEnvelope
    set?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    disconnect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    delete?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    update?: HumanitarianContractRenewalUpdateWithWhereUniqueWithoutLastModifiedByInput | HumanitarianContractRenewalUpdateWithWhereUniqueWithoutLastModifiedByInput[]
    updateMany?: HumanitarianContractRenewalUpdateManyWithWhereWithoutLastModifiedByInput | HumanitarianContractRenewalUpdateManyWithWhereWithoutLastModifiedByInput[]
    deleteMany?: HumanitarianContractRenewalScalarWhereInput | HumanitarianContractRenewalScalarWhereInput[]
  }

  export type SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SenderBlacklistCreateWithoutCreatedByInput, SenderBlacklistUncheckedCreateWithoutCreatedByInput> | SenderBlacklistCreateWithoutCreatedByInput[] | SenderBlacklistUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SenderBlacklistCreateOrConnectWithoutCreatedByInput | SenderBlacklistCreateOrConnectWithoutCreatedByInput[]
    upsert?: SenderBlacklistUpsertWithWhereUniqueWithoutCreatedByInput | SenderBlacklistUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SenderBlacklistCreateManyCreatedByInputEnvelope
    set?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    disconnect?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    delete?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    connect?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    update?: SenderBlacklistUpdateWithWhereUniqueWithoutCreatedByInput | SenderBlacklistUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SenderBlacklistUpdateManyWithWhereWithoutCreatedByInput | SenderBlacklistUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SenderBlacklistScalarWhereInput | SenderBlacklistScalarWhereInput[]
  }

  export type SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput = {
    create?: XOR<SenderBlacklistCreateWithoutModifiedByInput, SenderBlacklistUncheckedCreateWithoutModifiedByInput> | SenderBlacklistCreateWithoutModifiedByInput[] | SenderBlacklistUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: SenderBlacklistCreateOrConnectWithoutModifiedByInput | SenderBlacklistCreateOrConnectWithoutModifiedByInput[]
    upsert?: SenderBlacklistUpsertWithWhereUniqueWithoutModifiedByInput | SenderBlacklistUpsertWithWhereUniqueWithoutModifiedByInput[]
    createMany?: SenderBlacklistCreateManyModifiedByInputEnvelope
    set?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    disconnect?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    delete?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    connect?: SenderBlacklistWhereUniqueInput | SenderBlacklistWhereUniqueInput[]
    update?: SenderBlacklistUpdateWithWhereUniqueWithoutModifiedByInput | SenderBlacklistUpdateWithWhereUniqueWithoutModifiedByInput[]
    updateMany?: SenderBlacklistUpdateManyWithWhereWithoutModifiedByInput | SenderBlacklistUpdateManyWithWhereWithoutModifiedByInput[]
    deleteMany?: SenderBlacklistScalarWhereInput | SenderBlacklistScalarWhereInput[]
  }

  export type BlacklistLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BlacklistLogCreateWithoutUserInput, BlacklistLogUncheckedCreateWithoutUserInput> | BlacklistLogCreateWithoutUserInput[] | BlacklistLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BlacklistLogCreateOrConnectWithoutUserInput | BlacklistLogCreateOrConnectWithoutUserInput[]
    upsert?: BlacklistLogUpsertWithWhereUniqueWithoutUserInput | BlacklistLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BlacklistLogCreateManyUserInputEnvelope
    set?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    disconnect?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    delete?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    connect?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    update?: BlacklistLogUpdateWithWhereUniqueWithoutUserInput | BlacklistLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BlacklistLogUpdateManyWithWhereWithoutUserInput | BlacklistLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BlacklistLogScalarWhereInput | BlacklistLogScalarWhereInput[]
  }

  export type ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ContractRenewalCreateWithoutCreatedByInput, ContractRenewalUncheckedCreateWithoutCreatedByInput> | ContractRenewalCreateWithoutCreatedByInput[] | ContractRenewalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutCreatedByInput | ContractRenewalCreateOrConnectWithoutCreatedByInput[]
    upsert?: ContractRenewalUpsertWithWhereUniqueWithoutCreatedByInput | ContractRenewalUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ContractRenewalCreateManyCreatedByInputEnvelope
    set?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    disconnect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    delete?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    connect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    update?: ContractRenewalUpdateWithWhereUniqueWithoutCreatedByInput | ContractRenewalUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ContractRenewalUpdateManyWithWhereWithoutCreatedByInput | ContractRenewalUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ContractRenewalScalarWhereInput | ContractRenewalScalarWhereInput[]
  }

  export type ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput = {
    create?: XOR<ContractRenewalCreateWithoutLastModifiedByInput, ContractRenewalUncheckedCreateWithoutLastModifiedByInput> | ContractRenewalCreateWithoutLastModifiedByInput[] | ContractRenewalUncheckedCreateWithoutLastModifiedByInput[]
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutLastModifiedByInput | ContractRenewalCreateOrConnectWithoutLastModifiedByInput[]
    upsert?: ContractRenewalUpsertWithWhereUniqueWithoutLastModifiedByInput | ContractRenewalUpsertWithWhereUniqueWithoutLastModifiedByInput[]
    createMany?: ContractRenewalCreateManyLastModifiedByInputEnvelope
    set?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    disconnect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    delete?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    connect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    update?: ContractRenewalUpdateWithWhereUniqueWithoutLastModifiedByInput | ContractRenewalUpdateWithWhereUniqueWithoutLastModifiedByInput[]
    updateMany?: ContractRenewalUpdateManyWithWhereWithoutLastModifiedByInput | ContractRenewalUpdateManyWithWhereWithoutLastModifiedByInput[]
    deleteMany?: ContractRenewalScalarWhereInput | ContractRenewalScalarWhereInput[]
  }

  export type ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<ContractRenewalAttachmentCreateWithoutUploadedByInput, ContractRenewalAttachmentUncheckedCreateWithoutUploadedByInput> | ContractRenewalAttachmentCreateWithoutUploadedByInput[] | ContractRenewalAttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: ContractRenewalAttachmentCreateOrConnectWithoutUploadedByInput | ContractRenewalAttachmentCreateOrConnectWithoutUploadedByInput[]
    upsert?: ContractRenewalAttachmentUpsertWithWhereUniqueWithoutUploadedByInput | ContractRenewalAttachmentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: ContractRenewalAttachmentCreateManyUploadedByInputEnvelope
    set?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    disconnect?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    delete?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    connect?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    update?: ContractRenewalAttachmentUpdateWithWhereUniqueWithoutUploadedByInput | ContractRenewalAttachmentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: ContractRenewalAttachmentUpdateManyWithWhereWithoutUploadedByInput | ContractRenewalAttachmentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: ContractRenewalAttachmentScalarWhereInput | ContractRenewalAttachmentScalarWhereInput[]
  }

  export type ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ParkingServiceCreateWithoutCreatedByInput, ParkingServiceUncheckedCreateWithoutCreatedByInput> | ParkingServiceCreateWithoutCreatedByInput[] | ParkingServiceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ParkingServiceCreateOrConnectWithoutCreatedByInput | ParkingServiceCreateOrConnectWithoutCreatedByInput[]
    upsert?: ParkingServiceUpsertWithWhereUniqueWithoutCreatedByInput | ParkingServiceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ParkingServiceCreateManyCreatedByInputEnvelope
    set?: ParkingServiceWhereUniqueInput | ParkingServiceWhereUniqueInput[]
    disconnect?: ParkingServiceWhereUniqueInput | ParkingServiceWhereUniqueInput[]
    delete?: ParkingServiceWhereUniqueInput | ParkingServiceWhereUniqueInput[]
    connect?: ParkingServiceWhereUniqueInput | ParkingServiceWhereUniqueInput[]
    update?: ParkingServiceUpdateWithWhereUniqueWithoutCreatedByInput | ParkingServiceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ParkingServiceUpdateManyWithWhereWithoutCreatedByInput | ParkingServiceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ParkingServiceScalarWhereInput | ParkingServiceScalarWhereInput[]
  }

  export type LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<LogEntryCreateWithoutCreatedByInput, LogEntryUncheckedCreateWithoutCreatedByInput> | LogEntryCreateWithoutCreatedByInput[] | LogEntryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutCreatedByInput | LogEntryCreateOrConnectWithoutCreatedByInput[]
    upsert?: LogEntryUpsertWithWhereUniqueWithoutCreatedByInput | LogEntryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: LogEntryCreateManyCreatedByInputEnvelope
    set?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    disconnect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    delete?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    update?: LogEntryUpdateWithWhereUniqueWithoutCreatedByInput | LogEntryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: LogEntryUpdateManyWithWhereWithoutCreatedByInput | LogEntryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: LogEntryScalarWhereInput | LogEntryScalarWhereInput[]
  }

  export type LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<LogEntryCreateWithoutUpdatedByInput, LogEntryUncheckedCreateWithoutUpdatedByInput> | LogEntryCreateWithoutUpdatedByInput[] | LogEntryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutUpdatedByInput | LogEntryCreateOrConnectWithoutUpdatedByInput[]
    upsert?: LogEntryUpsertWithWhereUniqueWithoutUpdatedByInput | LogEntryUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: LogEntryCreateManyUpdatedByInputEnvelope
    set?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    disconnect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    delete?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    update?: LogEntryUpdateWithWhereUniqueWithoutUpdatedByInput | LogEntryUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: LogEntryUpdateManyWithWhereWithoutUpdatedByInput | LogEntryUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: LogEntryScalarWhereInput | LogEntryScalarWhereInput[]
  }

  export type ContractCreateNestedManyWithoutProviderInput = {
    create?: XOR<ContractCreateWithoutProviderInput, ContractUncheckedCreateWithoutProviderInput> | ContractCreateWithoutProviderInput[] | ContractUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutProviderInput | ContractCreateOrConnectWithoutProviderInput[]
    createMany?: ContractCreateManyProviderInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type VasServiceCreateNestedManyWithoutProviderInput = {
    create?: XOR<VasServiceCreateWithoutProviderInput, VasServiceUncheckedCreateWithoutProviderInput> | VasServiceCreateWithoutProviderInput[] | VasServiceUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: VasServiceCreateOrConnectWithoutProviderInput | VasServiceCreateOrConnectWithoutProviderInput[]
    createMany?: VasServiceCreateManyProviderInputEnvelope
    connect?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
  }

  export type BulkServiceCreateNestedManyWithoutProviderInput = {
    create?: XOR<BulkServiceCreateWithoutProviderInput, BulkServiceUncheckedCreateWithoutProviderInput> | BulkServiceCreateWithoutProviderInput[] | BulkServiceUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: BulkServiceCreateOrConnectWithoutProviderInput | BulkServiceCreateOrConnectWithoutProviderInput[]
    createMany?: BulkServiceCreateManyProviderInputEnvelope
    connect?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutProviderInput = {
    create?: XOR<ComplaintCreateWithoutProviderInput, ComplaintUncheckedCreateWithoutProviderInput> | ComplaintCreateWithoutProviderInput[] | ComplaintUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutProviderInput | ComplaintCreateOrConnectWithoutProviderInput[]
    createMany?: ComplaintCreateManyProviderInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type VasTransactionCreateNestedManyWithoutProviderInput = {
    create?: XOR<VasTransactionCreateWithoutProviderInput, VasTransactionUncheckedCreateWithoutProviderInput> | VasTransactionCreateWithoutProviderInput[] | VasTransactionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: VasTransactionCreateOrConnectWithoutProviderInput | VasTransactionCreateOrConnectWithoutProviderInput[]
    createMany?: VasTransactionCreateManyProviderInputEnvelope
    connect?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
  }

  export type LogEntryCreateNestedManyWithoutProviderInput = {
    create?: XOR<LogEntryCreateWithoutProviderInput, LogEntryUncheckedCreateWithoutProviderInput> | LogEntryCreateWithoutProviderInput[] | LogEntryUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutProviderInput | LogEntryCreateOrConnectWithoutProviderInput[]
    createMany?: LogEntryCreateManyProviderInputEnvelope
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<ContractCreateWithoutProviderInput, ContractUncheckedCreateWithoutProviderInput> | ContractCreateWithoutProviderInput[] | ContractUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutProviderInput | ContractCreateOrConnectWithoutProviderInput[]
    createMany?: ContractCreateManyProviderInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type VasServiceUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<VasServiceCreateWithoutProviderInput, VasServiceUncheckedCreateWithoutProviderInput> | VasServiceCreateWithoutProviderInput[] | VasServiceUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: VasServiceCreateOrConnectWithoutProviderInput | VasServiceCreateOrConnectWithoutProviderInput[]
    createMany?: VasServiceCreateManyProviderInputEnvelope
    connect?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
  }

  export type BulkServiceUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<BulkServiceCreateWithoutProviderInput, BulkServiceUncheckedCreateWithoutProviderInput> | BulkServiceCreateWithoutProviderInput[] | BulkServiceUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: BulkServiceCreateOrConnectWithoutProviderInput | BulkServiceCreateOrConnectWithoutProviderInput[]
    createMany?: BulkServiceCreateManyProviderInputEnvelope
    connect?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<ComplaintCreateWithoutProviderInput, ComplaintUncheckedCreateWithoutProviderInput> | ComplaintCreateWithoutProviderInput[] | ComplaintUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutProviderInput | ComplaintCreateOrConnectWithoutProviderInput[]
    createMany?: ComplaintCreateManyProviderInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type VasTransactionUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<VasTransactionCreateWithoutProviderInput, VasTransactionUncheckedCreateWithoutProviderInput> | VasTransactionCreateWithoutProviderInput[] | VasTransactionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: VasTransactionCreateOrConnectWithoutProviderInput | VasTransactionCreateOrConnectWithoutProviderInput[]
    createMany?: VasTransactionCreateManyProviderInputEnvelope
    connect?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
  }

  export type LogEntryUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<LogEntryCreateWithoutProviderInput, LogEntryUncheckedCreateWithoutProviderInput> | LogEntryCreateWithoutProviderInput[] | LogEntryUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutProviderInput | LogEntryCreateOrConnectWithoutProviderInput[]
    createMany?: LogEntryCreateManyProviderInputEnvelope
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
  }

  export type ContractUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ContractCreateWithoutProviderInput, ContractUncheckedCreateWithoutProviderInput> | ContractCreateWithoutProviderInput[] | ContractUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutProviderInput | ContractCreateOrConnectWithoutProviderInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutProviderInput | ContractUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ContractCreateManyProviderInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutProviderInput | ContractUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutProviderInput | ContractUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type VasServiceUpdateManyWithoutProviderNestedInput = {
    create?: XOR<VasServiceCreateWithoutProviderInput, VasServiceUncheckedCreateWithoutProviderInput> | VasServiceCreateWithoutProviderInput[] | VasServiceUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: VasServiceCreateOrConnectWithoutProviderInput | VasServiceCreateOrConnectWithoutProviderInput[]
    upsert?: VasServiceUpsertWithWhereUniqueWithoutProviderInput | VasServiceUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: VasServiceCreateManyProviderInputEnvelope
    set?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    disconnect?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    delete?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    connect?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    update?: VasServiceUpdateWithWhereUniqueWithoutProviderInput | VasServiceUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: VasServiceUpdateManyWithWhereWithoutProviderInput | VasServiceUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: VasServiceScalarWhereInput | VasServiceScalarWhereInput[]
  }

  export type BulkServiceUpdateManyWithoutProviderNestedInput = {
    create?: XOR<BulkServiceCreateWithoutProviderInput, BulkServiceUncheckedCreateWithoutProviderInput> | BulkServiceCreateWithoutProviderInput[] | BulkServiceUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: BulkServiceCreateOrConnectWithoutProviderInput | BulkServiceCreateOrConnectWithoutProviderInput[]
    upsert?: BulkServiceUpsertWithWhereUniqueWithoutProviderInput | BulkServiceUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: BulkServiceCreateManyProviderInputEnvelope
    set?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    disconnect?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    delete?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    connect?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    update?: BulkServiceUpdateWithWhereUniqueWithoutProviderInput | BulkServiceUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: BulkServiceUpdateManyWithWhereWithoutProviderInput | BulkServiceUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: BulkServiceScalarWhereInput | BulkServiceScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ComplaintCreateWithoutProviderInput, ComplaintUncheckedCreateWithoutProviderInput> | ComplaintCreateWithoutProviderInput[] | ComplaintUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutProviderInput | ComplaintCreateOrConnectWithoutProviderInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutProviderInput | ComplaintUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ComplaintCreateManyProviderInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutProviderInput | ComplaintUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutProviderInput | ComplaintUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type VasTransactionUpdateManyWithoutProviderNestedInput = {
    create?: XOR<VasTransactionCreateWithoutProviderInput, VasTransactionUncheckedCreateWithoutProviderInput> | VasTransactionCreateWithoutProviderInput[] | VasTransactionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: VasTransactionCreateOrConnectWithoutProviderInput | VasTransactionCreateOrConnectWithoutProviderInput[]
    upsert?: VasTransactionUpsertWithWhereUniqueWithoutProviderInput | VasTransactionUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: VasTransactionCreateManyProviderInputEnvelope
    set?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    disconnect?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    delete?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    connect?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    update?: VasTransactionUpdateWithWhereUniqueWithoutProviderInput | VasTransactionUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: VasTransactionUpdateManyWithWhereWithoutProviderInput | VasTransactionUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: VasTransactionScalarWhereInput | VasTransactionScalarWhereInput[]
  }

  export type LogEntryUpdateManyWithoutProviderNestedInput = {
    create?: XOR<LogEntryCreateWithoutProviderInput, LogEntryUncheckedCreateWithoutProviderInput> | LogEntryCreateWithoutProviderInput[] | LogEntryUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutProviderInput | LogEntryCreateOrConnectWithoutProviderInput[]
    upsert?: LogEntryUpsertWithWhereUniqueWithoutProviderInput | LogEntryUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: LogEntryCreateManyProviderInputEnvelope
    set?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    disconnect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    delete?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    update?: LogEntryUpdateWithWhereUniqueWithoutProviderInput | LogEntryUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: LogEntryUpdateManyWithWhereWithoutProviderInput | LogEntryUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: LogEntryScalarWhereInput | LogEntryScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ContractCreateWithoutProviderInput, ContractUncheckedCreateWithoutProviderInput> | ContractCreateWithoutProviderInput[] | ContractUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutProviderInput | ContractCreateOrConnectWithoutProviderInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutProviderInput | ContractUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ContractCreateManyProviderInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutProviderInput | ContractUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutProviderInput | ContractUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type VasServiceUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<VasServiceCreateWithoutProviderInput, VasServiceUncheckedCreateWithoutProviderInput> | VasServiceCreateWithoutProviderInput[] | VasServiceUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: VasServiceCreateOrConnectWithoutProviderInput | VasServiceCreateOrConnectWithoutProviderInput[]
    upsert?: VasServiceUpsertWithWhereUniqueWithoutProviderInput | VasServiceUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: VasServiceCreateManyProviderInputEnvelope
    set?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    disconnect?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    delete?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    connect?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    update?: VasServiceUpdateWithWhereUniqueWithoutProviderInput | VasServiceUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: VasServiceUpdateManyWithWhereWithoutProviderInput | VasServiceUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: VasServiceScalarWhereInput | VasServiceScalarWhereInput[]
  }

  export type BulkServiceUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<BulkServiceCreateWithoutProviderInput, BulkServiceUncheckedCreateWithoutProviderInput> | BulkServiceCreateWithoutProviderInput[] | BulkServiceUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: BulkServiceCreateOrConnectWithoutProviderInput | BulkServiceCreateOrConnectWithoutProviderInput[]
    upsert?: BulkServiceUpsertWithWhereUniqueWithoutProviderInput | BulkServiceUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: BulkServiceCreateManyProviderInputEnvelope
    set?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    disconnect?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    delete?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    connect?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    update?: BulkServiceUpdateWithWhereUniqueWithoutProviderInput | BulkServiceUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: BulkServiceUpdateManyWithWhereWithoutProviderInput | BulkServiceUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: BulkServiceScalarWhereInput | BulkServiceScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ComplaintCreateWithoutProviderInput, ComplaintUncheckedCreateWithoutProviderInput> | ComplaintCreateWithoutProviderInput[] | ComplaintUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutProviderInput | ComplaintCreateOrConnectWithoutProviderInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutProviderInput | ComplaintUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ComplaintCreateManyProviderInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutProviderInput | ComplaintUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutProviderInput | ComplaintUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type VasTransactionUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<VasTransactionCreateWithoutProviderInput, VasTransactionUncheckedCreateWithoutProviderInput> | VasTransactionCreateWithoutProviderInput[] | VasTransactionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: VasTransactionCreateOrConnectWithoutProviderInput | VasTransactionCreateOrConnectWithoutProviderInput[]
    upsert?: VasTransactionUpsertWithWhereUniqueWithoutProviderInput | VasTransactionUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: VasTransactionCreateManyProviderInputEnvelope
    set?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    disconnect?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    delete?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    connect?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    update?: VasTransactionUpdateWithWhereUniqueWithoutProviderInput | VasTransactionUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: VasTransactionUpdateManyWithWhereWithoutProviderInput | VasTransactionUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: VasTransactionScalarWhereInput | VasTransactionScalarWhereInput[]
  }

  export type LogEntryUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<LogEntryCreateWithoutProviderInput, LogEntryUncheckedCreateWithoutProviderInput> | LogEntryCreateWithoutProviderInput[] | LogEntryUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutProviderInput | LogEntryCreateOrConnectWithoutProviderInput[]
    upsert?: LogEntryUpsertWithWhereUniqueWithoutProviderInput | LogEntryUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: LogEntryCreateManyProviderInputEnvelope
    set?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    disconnect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    delete?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    update?: LogEntryUpdateWithWhereUniqueWithoutProviderInput | LogEntryUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: LogEntryUpdateManyWithWhereWithoutProviderInput | LogEntryUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: LogEntryScalarWhereInput | LogEntryScalarWhereInput[]
  }

  export type ContractCreateNestedManyWithoutHumanitarianOrgInput = {
    create?: XOR<ContractCreateWithoutHumanitarianOrgInput, ContractUncheckedCreateWithoutHumanitarianOrgInput> | ContractCreateWithoutHumanitarianOrgInput[] | ContractUncheckedCreateWithoutHumanitarianOrgInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutHumanitarianOrgInput | ContractCreateOrConnectWithoutHumanitarianOrgInput[]
    createMany?: ContractCreateManyHumanitarianOrgInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type HumanitarianContractRenewalCreateNestedManyWithoutHumanitarianOrgInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutHumanitarianOrgInput, HumanitarianContractRenewalUncheckedCreateWithoutHumanitarianOrgInput> | HumanitarianContractRenewalCreateWithoutHumanitarianOrgInput[] | HumanitarianContractRenewalUncheckedCreateWithoutHumanitarianOrgInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutHumanitarianOrgInput | HumanitarianContractRenewalCreateOrConnectWithoutHumanitarianOrgInput[]
    createMany?: HumanitarianContractRenewalCreateManyHumanitarianOrgInputEnvelope
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutHumanitarianOrgInput = {
    create?: XOR<ComplaintCreateWithoutHumanitarianOrgInput, ComplaintUncheckedCreateWithoutHumanitarianOrgInput> | ComplaintCreateWithoutHumanitarianOrgInput[] | ComplaintUncheckedCreateWithoutHumanitarianOrgInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutHumanitarianOrgInput | ComplaintCreateOrConnectWithoutHumanitarianOrgInput[]
    createMany?: ComplaintCreateManyHumanitarianOrgInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ReportFileCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ReportFileCreateWithoutOrganizationInput, ReportFileUncheckedCreateWithoutOrganizationInput> | ReportFileCreateWithoutOrganizationInput[] | ReportFileUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ReportFileCreateOrConnectWithoutOrganizationInput | ReportFileCreateOrConnectWithoutOrganizationInput[]
    createMany?: ReportFileCreateManyOrganizationInputEnvelope
    connect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutHumanitarianOrgInput = {
    create?: XOR<ContractCreateWithoutHumanitarianOrgInput, ContractUncheckedCreateWithoutHumanitarianOrgInput> | ContractCreateWithoutHumanitarianOrgInput[] | ContractUncheckedCreateWithoutHumanitarianOrgInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutHumanitarianOrgInput | ContractCreateOrConnectWithoutHumanitarianOrgInput[]
    createMany?: ContractCreateManyHumanitarianOrgInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type HumanitarianContractRenewalUncheckedCreateNestedManyWithoutHumanitarianOrgInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutHumanitarianOrgInput, HumanitarianContractRenewalUncheckedCreateWithoutHumanitarianOrgInput> | HumanitarianContractRenewalCreateWithoutHumanitarianOrgInput[] | HumanitarianContractRenewalUncheckedCreateWithoutHumanitarianOrgInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutHumanitarianOrgInput | HumanitarianContractRenewalCreateOrConnectWithoutHumanitarianOrgInput[]
    createMany?: HumanitarianContractRenewalCreateManyHumanitarianOrgInputEnvelope
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutHumanitarianOrgInput = {
    create?: XOR<ComplaintCreateWithoutHumanitarianOrgInput, ComplaintUncheckedCreateWithoutHumanitarianOrgInput> | ComplaintCreateWithoutHumanitarianOrgInput[] | ComplaintUncheckedCreateWithoutHumanitarianOrgInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutHumanitarianOrgInput | ComplaintCreateOrConnectWithoutHumanitarianOrgInput[]
    createMany?: ComplaintCreateManyHumanitarianOrgInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ReportFileUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ReportFileCreateWithoutOrganizationInput, ReportFileUncheckedCreateWithoutOrganizationInput> | ReportFileCreateWithoutOrganizationInput[] | ReportFileUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ReportFileCreateOrConnectWithoutOrganizationInput | ReportFileCreateOrConnectWithoutOrganizationInput[]
    createMany?: ReportFileCreateManyOrganizationInputEnvelope
    connect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
  }

  export type ContractUpdateManyWithoutHumanitarianOrgNestedInput = {
    create?: XOR<ContractCreateWithoutHumanitarianOrgInput, ContractUncheckedCreateWithoutHumanitarianOrgInput> | ContractCreateWithoutHumanitarianOrgInput[] | ContractUncheckedCreateWithoutHumanitarianOrgInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutHumanitarianOrgInput | ContractCreateOrConnectWithoutHumanitarianOrgInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutHumanitarianOrgInput | ContractUpsertWithWhereUniqueWithoutHumanitarianOrgInput[]
    createMany?: ContractCreateManyHumanitarianOrgInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutHumanitarianOrgInput | ContractUpdateWithWhereUniqueWithoutHumanitarianOrgInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutHumanitarianOrgInput | ContractUpdateManyWithWhereWithoutHumanitarianOrgInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type HumanitarianContractRenewalUpdateManyWithoutHumanitarianOrgNestedInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutHumanitarianOrgInput, HumanitarianContractRenewalUncheckedCreateWithoutHumanitarianOrgInput> | HumanitarianContractRenewalCreateWithoutHumanitarianOrgInput[] | HumanitarianContractRenewalUncheckedCreateWithoutHumanitarianOrgInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutHumanitarianOrgInput | HumanitarianContractRenewalCreateOrConnectWithoutHumanitarianOrgInput[]
    upsert?: HumanitarianContractRenewalUpsertWithWhereUniqueWithoutHumanitarianOrgInput | HumanitarianContractRenewalUpsertWithWhereUniqueWithoutHumanitarianOrgInput[]
    createMany?: HumanitarianContractRenewalCreateManyHumanitarianOrgInputEnvelope
    set?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    disconnect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    delete?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    update?: HumanitarianContractRenewalUpdateWithWhereUniqueWithoutHumanitarianOrgInput | HumanitarianContractRenewalUpdateWithWhereUniqueWithoutHumanitarianOrgInput[]
    updateMany?: HumanitarianContractRenewalUpdateManyWithWhereWithoutHumanitarianOrgInput | HumanitarianContractRenewalUpdateManyWithWhereWithoutHumanitarianOrgInput[]
    deleteMany?: HumanitarianContractRenewalScalarWhereInput | HumanitarianContractRenewalScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutHumanitarianOrgNestedInput = {
    create?: XOR<ComplaintCreateWithoutHumanitarianOrgInput, ComplaintUncheckedCreateWithoutHumanitarianOrgInput> | ComplaintCreateWithoutHumanitarianOrgInput[] | ComplaintUncheckedCreateWithoutHumanitarianOrgInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutHumanitarianOrgInput | ComplaintCreateOrConnectWithoutHumanitarianOrgInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutHumanitarianOrgInput | ComplaintUpsertWithWhereUniqueWithoutHumanitarianOrgInput[]
    createMany?: ComplaintCreateManyHumanitarianOrgInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutHumanitarianOrgInput | ComplaintUpdateWithWhereUniqueWithoutHumanitarianOrgInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutHumanitarianOrgInput | ComplaintUpdateManyWithWhereWithoutHumanitarianOrgInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ReportFileUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ReportFileCreateWithoutOrganizationInput, ReportFileUncheckedCreateWithoutOrganizationInput> | ReportFileCreateWithoutOrganizationInput[] | ReportFileUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ReportFileCreateOrConnectWithoutOrganizationInput | ReportFileCreateOrConnectWithoutOrganizationInput[]
    upsert?: ReportFileUpsertWithWhereUniqueWithoutOrganizationInput | ReportFileUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ReportFileCreateManyOrganizationInputEnvelope
    set?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    disconnect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    delete?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    connect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    update?: ReportFileUpdateWithWhereUniqueWithoutOrganizationInput | ReportFileUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ReportFileUpdateManyWithWhereWithoutOrganizationInput | ReportFileUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ReportFileScalarWhereInput | ReportFileScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutHumanitarianOrgNestedInput = {
    create?: XOR<ContractCreateWithoutHumanitarianOrgInput, ContractUncheckedCreateWithoutHumanitarianOrgInput> | ContractCreateWithoutHumanitarianOrgInput[] | ContractUncheckedCreateWithoutHumanitarianOrgInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutHumanitarianOrgInput | ContractCreateOrConnectWithoutHumanitarianOrgInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutHumanitarianOrgInput | ContractUpsertWithWhereUniqueWithoutHumanitarianOrgInput[]
    createMany?: ContractCreateManyHumanitarianOrgInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutHumanitarianOrgInput | ContractUpdateWithWhereUniqueWithoutHumanitarianOrgInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutHumanitarianOrgInput | ContractUpdateManyWithWhereWithoutHumanitarianOrgInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type HumanitarianContractRenewalUncheckedUpdateManyWithoutHumanitarianOrgNestedInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutHumanitarianOrgInput, HumanitarianContractRenewalUncheckedCreateWithoutHumanitarianOrgInput> | HumanitarianContractRenewalCreateWithoutHumanitarianOrgInput[] | HumanitarianContractRenewalUncheckedCreateWithoutHumanitarianOrgInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutHumanitarianOrgInput | HumanitarianContractRenewalCreateOrConnectWithoutHumanitarianOrgInput[]
    upsert?: HumanitarianContractRenewalUpsertWithWhereUniqueWithoutHumanitarianOrgInput | HumanitarianContractRenewalUpsertWithWhereUniqueWithoutHumanitarianOrgInput[]
    createMany?: HumanitarianContractRenewalCreateManyHumanitarianOrgInputEnvelope
    set?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    disconnect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    delete?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    update?: HumanitarianContractRenewalUpdateWithWhereUniqueWithoutHumanitarianOrgInput | HumanitarianContractRenewalUpdateWithWhereUniqueWithoutHumanitarianOrgInput[]
    updateMany?: HumanitarianContractRenewalUpdateManyWithWhereWithoutHumanitarianOrgInput | HumanitarianContractRenewalUpdateManyWithWhereWithoutHumanitarianOrgInput[]
    deleteMany?: HumanitarianContractRenewalScalarWhereInput | HumanitarianContractRenewalScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutHumanitarianOrgNestedInput = {
    create?: XOR<ComplaintCreateWithoutHumanitarianOrgInput, ComplaintUncheckedCreateWithoutHumanitarianOrgInput> | ComplaintCreateWithoutHumanitarianOrgInput[] | ComplaintUncheckedCreateWithoutHumanitarianOrgInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutHumanitarianOrgInput | ComplaintCreateOrConnectWithoutHumanitarianOrgInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutHumanitarianOrgInput | ComplaintUpsertWithWhereUniqueWithoutHumanitarianOrgInput[]
    createMany?: ComplaintCreateManyHumanitarianOrgInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutHumanitarianOrgInput | ComplaintUpdateWithWhereUniqueWithoutHumanitarianOrgInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutHumanitarianOrgInput | ComplaintUpdateManyWithWhereWithoutHumanitarianOrgInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ReportFileUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ReportFileCreateWithoutOrganizationInput, ReportFileUncheckedCreateWithoutOrganizationInput> | ReportFileCreateWithoutOrganizationInput[] | ReportFileUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ReportFileCreateOrConnectWithoutOrganizationInput | ReportFileCreateOrConnectWithoutOrganizationInput[]
    upsert?: ReportFileUpsertWithWhereUniqueWithoutOrganizationInput | ReportFileUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ReportFileCreateManyOrganizationInputEnvelope
    set?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    disconnect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    delete?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    connect?: ReportFileWhereUniqueInput | ReportFileWhereUniqueInput[]
    update?: ReportFileUpdateWithWhereUniqueWithoutOrganizationInput | ReportFileUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ReportFileUpdateManyWithWhereWithoutOrganizationInput | ReportFileUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ReportFileScalarWhereInput | ReportFileScalarWhereInput[]
  }

  export type ProviderCreateNestedOneWithoutVasTransactionsInput = {
    create?: XOR<ProviderCreateWithoutVasTransactionsInput, ProviderUncheckedCreateWithoutVasTransactionsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutVasTransactionsInput
    connect?: ProviderWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutVasTransactionsInput = {
    create?: XOR<ServiceCreateWithoutVasTransactionsInput, ServiceUncheckedCreateWithoutVasTransactionsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutVasTransactionsInput
    connect?: ServiceWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProviderUpdateOneRequiredWithoutVasTransactionsNestedInput = {
    create?: XOR<ProviderCreateWithoutVasTransactionsInput, ProviderUncheckedCreateWithoutVasTransactionsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutVasTransactionsInput
    upsert?: ProviderUpsertWithoutVasTransactionsInput
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutVasTransactionsInput, ProviderUpdateWithoutVasTransactionsInput>, ProviderUncheckedUpdateWithoutVasTransactionsInput>
  }

  export type ServiceUpdateOneRequiredWithoutVasTransactionsNestedInput = {
    create?: XOR<ServiceCreateWithoutVasTransactionsInput, ServiceUncheckedCreateWithoutVasTransactionsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutVasTransactionsInput
    upsert?: ServiceUpsertWithoutVasTransactionsInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutVasTransactionsInput, ServiceUpdateWithoutVasTransactionsInput>, ServiceUncheckedUpdateWithoutVasTransactionsInput>
  }

  export type ParkingServiceCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<ParkingServiceCreateWithoutTransactionsInput, ParkingServiceUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ParkingServiceCreateOrConnectWithoutTransactionsInput
    connect?: ParkingServiceWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<ServiceCreateWithoutTransactionsInput, ServiceUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutTransactionsInput
    connect?: ServiceWhereUniqueInput
  }

  export type ParkingServiceUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<ParkingServiceCreateWithoutTransactionsInput, ParkingServiceUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ParkingServiceCreateOrConnectWithoutTransactionsInput
    upsert?: ParkingServiceUpsertWithoutTransactionsInput
    connect?: ParkingServiceWhereUniqueInput
    update?: XOR<XOR<ParkingServiceUpdateToOneWithWhereWithoutTransactionsInput, ParkingServiceUpdateWithoutTransactionsInput>, ParkingServiceUncheckedUpdateWithoutTransactionsInput>
  }

  export type ServiceUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<ServiceCreateWithoutTransactionsInput, ServiceUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutTransactionsInput
    upsert?: ServiceUpsertWithoutTransactionsInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutTransactionsInput, ServiceUpdateWithoutTransactionsInput>, ServiceUncheckedUpdateWithoutTransactionsInput>
  }

  export type ParkingServiceCreateadditionalEmailsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutCreatedParkingServicesInput = {
    create?: XOR<UserCreateWithoutCreatedParkingServicesInput, UserUncheckedCreateWithoutCreatedParkingServicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedParkingServicesInput
    connect?: UserWhereUniqueInput
  }

  export type ParkingTransactionCreateNestedManyWithoutParkingServiceInput = {
    create?: XOR<ParkingTransactionCreateWithoutParkingServiceInput, ParkingTransactionUncheckedCreateWithoutParkingServiceInput> | ParkingTransactionCreateWithoutParkingServiceInput[] | ParkingTransactionUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: ParkingTransactionCreateOrConnectWithoutParkingServiceInput | ParkingTransactionCreateOrConnectWithoutParkingServiceInput[]
    createMany?: ParkingTransactionCreateManyParkingServiceInputEnvelope
    connect?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
  }

  export type ContractCreateNestedManyWithoutParkingServiceInput = {
    create?: XOR<ContractCreateWithoutParkingServiceInput, ContractUncheckedCreateWithoutParkingServiceInput> | ContractCreateWithoutParkingServiceInput[] | ContractUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutParkingServiceInput | ContractCreateOrConnectWithoutParkingServiceInput[]
    createMany?: ContractCreateManyParkingServiceInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type LogEntryCreateNestedManyWithoutParkingServiceInput = {
    create?: XOR<LogEntryCreateWithoutParkingServiceInput, LogEntryUncheckedCreateWithoutParkingServiceInput> | LogEntryCreateWithoutParkingServiceInput[] | LogEntryUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutParkingServiceInput | LogEntryCreateOrConnectWithoutParkingServiceInput[]
    createMany?: LogEntryCreateManyParkingServiceInputEnvelope
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutParkingServiceInput = {
    create?: XOR<ComplaintCreateWithoutParkingServiceInput, ComplaintUncheckedCreateWithoutParkingServiceInput> | ComplaintCreateWithoutParkingServiceInput[] | ComplaintUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutParkingServiceInput | ComplaintCreateOrConnectWithoutParkingServiceInput[]
    createMany?: ComplaintCreateManyParkingServiceInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ParkingTransactionUncheckedCreateNestedManyWithoutParkingServiceInput = {
    create?: XOR<ParkingTransactionCreateWithoutParkingServiceInput, ParkingTransactionUncheckedCreateWithoutParkingServiceInput> | ParkingTransactionCreateWithoutParkingServiceInput[] | ParkingTransactionUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: ParkingTransactionCreateOrConnectWithoutParkingServiceInput | ParkingTransactionCreateOrConnectWithoutParkingServiceInput[]
    createMany?: ParkingTransactionCreateManyParkingServiceInputEnvelope
    connect?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutParkingServiceInput = {
    create?: XOR<ContractCreateWithoutParkingServiceInput, ContractUncheckedCreateWithoutParkingServiceInput> | ContractCreateWithoutParkingServiceInput[] | ContractUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutParkingServiceInput | ContractCreateOrConnectWithoutParkingServiceInput[]
    createMany?: ContractCreateManyParkingServiceInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type LogEntryUncheckedCreateNestedManyWithoutParkingServiceInput = {
    create?: XOR<LogEntryCreateWithoutParkingServiceInput, LogEntryUncheckedCreateWithoutParkingServiceInput> | LogEntryCreateWithoutParkingServiceInput[] | LogEntryUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutParkingServiceInput | LogEntryCreateOrConnectWithoutParkingServiceInput[]
    createMany?: LogEntryCreateManyParkingServiceInputEnvelope
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutParkingServiceInput = {
    create?: XOR<ComplaintCreateWithoutParkingServiceInput, ComplaintUncheckedCreateWithoutParkingServiceInput> | ComplaintCreateWithoutParkingServiceInput[] | ComplaintUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutParkingServiceInput | ComplaintCreateOrConnectWithoutParkingServiceInput[]
    createMany?: ComplaintCreateManyParkingServiceInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ParkingServiceUpdateadditionalEmailsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneWithoutCreatedParkingServicesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedParkingServicesInput, UserUncheckedCreateWithoutCreatedParkingServicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedParkingServicesInput
    upsert?: UserUpsertWithoutCreatedParkingServicesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedParkingServicesInput, UserUpdateWithoutCreatedParkingServicesInput>, UserUncheckedUpdateWithoutCreatedParkingServicesInput>
  }

  export type ParkingTransactionUpdateManyWithoutParkingServiceNestedInput = {
    create?: XOR<ParkingTransactionCreateWithoutParkingServiceInput, ParkingTransactionUncheckedCreateWithoutParkingServiceInput> | ParkingTransactionCreateWithoutParkingServiceInput[] | ParkingTransactionUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: ParkingTransactionCreateOrConnectWithoutParkingServiceInput | ParkingTransactionCreateOrConnectWithoutParkingServiceInput[]
    upsert?: ParkingTransactionUpsertWithWhereUniqueWithoutParkingServiceInput | ParkingTransactionUpsertWithWhereUniqueWithoutParkingServiceInput[]
    createMany?: ParkingTransactionCreateManyParkingServiceInputEnvelope
    set?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    disconnect?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    delete?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    connect?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    update?: ParkingTransactionUpdateWithWhereUniqueWithoutParkingServiceInput | ParkingTransactionUpdateWithWhereUniqueWithoutParkingServiceInput[]
    updateMany?: ParkingTransactionUpdateManyWithWhereWithoutParkingServiceInput | ParkingTransactionUpdateManyWithWhereWithoutParkingServiceInput[]
    deleteMany?: ParkingTransactionScalarWhereInput | ParkingTransactionScalarWhereInput[]
  }

  export type ContractUpdateManyWithoutParkingServiceNestedInput = {
    create?: XOR<ContractCreateWithoutParkingServiceInput, ContractUncheckedCreateWithoutParkingServiceInput> | ContractCreateWithoutParkingServiceInput[] | ContractUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutParkingServiceInput | ContractCreateOrConnectWithoutParkingServiceInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutParkingServiceInput | ContractUpsertWithWhereUniqueWithoutParkingServiceInput[]
    createMany?: ContractCreateManyParkingServiceInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutParkingServiceInput | ContractUpdateWithWhereUniqueWithoutParkingServiceInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutParkingServiceInput | ContractUpdateManyWithWhereWithoutParkingServiceInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type LogEntryUpdateManyWithoutParkingServiceNestedInput = {
    create?: XOR<LogEntryCreateWithoutParkingServiceInput, LogEntryUncheckedCreateWithoutParkingServiceInput> | LogEntryCreateWithoutParkingServiceInput[] | LogEntryUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutParkingServiceInput | LogEntryCreateOrConnectWithoutParkingServiceInput[]
    upsert?: LogEntryUpsertWithWhereUniqueWithoutParkingServiceInput | LogEntryUpsertWithWhereUniqueWithoutParkingServiceInput[]
    createMany?: LogEntryCreateManyParkingServiceInputEnvelope
    set?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    disconnect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    delete?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    update?: LogEntryUpdateWithWhereUniqueWithoutParkingServiceInput | LogEntryUpdateWithWhereUniqueWithoutParkingServiceInput[]
    updateMany?: LogEntryUpdateManyWithWhereWithoutParkingServiceInput | LogEntryUpdateManyWithWhereWithoutParkingServiceInput[]
    deleteMany?: LogEntryScalarWhereInput | LogEntryScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutParkingServiceNestedInput = {
    create?: XOR<ComplaintCreateWithoutParkingServiceInput, ComplaintUncheckedCreateWithoutParkingServiceInput> | ComplaintCreateWithoutParkingServiceInput[] | ComplaintUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutParkingServiceInput | ComplaintCreateOrConnectWithoutParkingServiceInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutParkingServiceInput | ComplaintUpsertWithWhereUniqueWithoutParkingServiceInput[]
    createMany?: ComplaintCreateManyParkingServiceInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutParkingServiceInput | ComplaintUpdateWithWhereUniqueWithoutParkingServiceInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutParkingServiceInput | ComplaintUpdateManyWithWhereWithoutParkingServiceInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ParkingTransactionUncheckedUpdateManyWithoutParkingServiceNestedInput = {
    create?: XOR<ParkingTransactionCreateWithoutParkingServiceInput, ParkingTransactionUncheckedCreateWithoutParkingServiceInput> | ParkingTransactionCreateWithoutParkingServiceInput[] | ParkingTransactionUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: ParkingTransactionCreateOrConnectWithoutParkingServiceInput | ParkingTransactionCreateOrConnectWithoutParkingServiceInput[]
    upsert?: ParkingTransactionUpsertWithWhereUniqueWithoutParkingServiceInput | ParkingTransactionUpsertWithWhereUniqueWithoutParkingServiceInput[]
    createMany?: ParkingTransactionCreateManyParkingServiceInputEnvelope
    set?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    disconnect?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    delete?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    connect?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    update?: ParkingTransactionUpdateWithWhereUniqueWithoutParkingServiceInput | ParkingTransactionUpdateWithWhereUniqueWithoutParkingServiceInput[]
    updateMany?: ParkingTransactionUpdateManyWithWhereWithoutParkingServiceInput | ParkingTransactionUpdateManyWithWhereWithoutParkingServiceInput[]
    deleteMany?: ParkingTransactionScalarWhereInput | ParkingTransactionScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutParkingServiceNestedInput = {
    create?: XOR<ContractCreateWithoutParkingServiceInput, ContractUncheckedCreateWithoutParkingServiceInput> | ContractCreateWithoutParkingServiceInput[] | ContractUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutParkingServiceInput | ContractCreateOrConnectWithoutParkingServiceInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutParkingServiceInput | ContractUpsertWithWhereUniqueWithoutParkingServiceInput[]
    createMany?: ContractCreateManyParkingServiceInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutParkingServiceInput | ContractUpdateWithWhereUniqueWithoutParkingServiceInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutParkingServiceInput | ContractUpdateManyWithWhereWithoutParkingServiceInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type LogEntryUncheckedUpdateManyWithoutParkingServiceNestedInput = {
    create?: XOR<LogEntryCreateWithoutParkingServiceInput, LogEntryUncheckedCreateWithoutParkingServiceInput> | LogEntryCreateWithoutParkingServiceInput[] | LogEntryUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutParkingServiceInput | LogEntryCreateOrConnectWithoutParkingServiceInput[]
    upsert?: LogEntryUpsertWithWhereUniqueWithoutParkingServiceInput | LogEntryUpsertWithWhereUniqueWithoutParkingServiceInput[]
    createMany?: LogEntryCreateManyParkingServiceInputEnvelope
    set?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    disconnect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    delete?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    update?: LogEntryUpdateWithWhereUniqueWithoutParkingServiceInput | LogEntryUpdateWithWhereUniqueWithoutParkingServiceInput[]
    updateMany?: LogEntryUpdateManyWithWhereWithoutParkingServiceInput | LogEntryUpdateManyWithWhereWithoutParkingServiceInput[]
    deleteMany?: LogEntryScalarWhereInput | LogEntryScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutParkingServiceNestedInput = {
    create?: XOR<ComplaintCreateWithoutParkingServiceInput, ComplaintUncheckedCreateWithoutParkingServiceInput> | ComplaintCreateWithoutParkingServiceInput[] | ComplaintUncheckedCreateWithoutParkingServiceInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutParkingServiceInput | ComplaintCreateOrConnectWithoutParkingServiceInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutParkingServiceInput | ComplaintUpsertWithWhereUniqueWithoutParkingServiceInput[]
    createMany?: ComplaintCreateManyParkingServiceInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutParkingServiceInput | ComplaintUpdateWithWhereUniqueWithoutParkingServiceInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutParkingServiceInput | ComplaintUpdateManyWithWhereWithoutParkingServiceInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ProviderCreateNestedOneWithoutContractsInput = {
    create?: XOR<ProviderCreateWithoutContractsInput, ProviderUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutContractsInput
    connect?: ProviderWhereUniqueInput
  }

  export type OperatorCreateNestedOneWithoutContractsInput = {
    create?: XOR<OperatorCreateWithoutContractsInput, OperatorUncheckedCreateWithoutContractsInput>
    connectOrCreate?: OperatorCreateOrConnectWithoutContractsInput
    connect?: OperatorWhereUniqueInput
  }

  export type HumanitarianOrgCreateNestedOneWithoutContractsInput = {
    create?: XOR<HumanitarianOrgCreateWithoutContractsInput, HumanitarianOrgUncheckedCreateWithoutContractsInput>
    connectOrCreate?: HumanitarianOrgCreateOrConnectWithoutContractsInput
    connect?: HumanitarianOrgWhereUniqueInput
  }

  export type ParkingServiceCreateNestedOneWithoutContractsInput = {
    create?: XOR<ParkingServiceCreateWithoutContractsInput, ParkingServiceUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ParkingServiceCreateOrConnectWithoutContractsInput
    connect?: ParkingServiceWhereUniqueInput
  }

  export type ServiceContractCreateNestedManyWithoutContractInput = {
    create?: XOR<ServiceContractCreateWithoutContractInput, ServiceContractUncheckedCreateWithoutContractInput> | ServiceContractCreateWithoutContractInput[] | ServiceContractUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ServiceContractCreateOrConnectWithoutContractInput | ServiceContractCreateOrConnectWithoutContractInput[]
    createMany?: ServiceContractCreateManyContractInputEnvelope
    connect?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
  }

  export type ContractAttachmentCreateNestedManyWithoutContractInput = {
    create?: XOR<ContractAttachmentCreateWithoutContractInput, ContractAttachmentUncheckedCreateWithoutContractInput> | ContractAttachmentCreateWithoutContractInput[] | ContractAttachmentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractAttachmentCreateOrConnectWithoutContractInput | ContractAttachmentCreateOrConnectWithoutContractInput[]
    createMany?: ContractAttachmentCreateManyContractInputEnvelope
    connect?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
  }

  export type HumanitarianContractRenewalCreateNestedManyWithoutContractInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutContractInput, HumanitarianContractRenewalUncheckedCreateWithoutContractInput> | HumanitarianContractRenewalCreateWithoutContractInput[] | HumanitarianContractRenewalUncheckedCreateWithoutContractInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutContractInput | HumanitarianContractRenewalCreateOrConnectWithoutContractInput[]
    createMany?: HumanitarianContractRenewalCreateManyContractInputEnvelope
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
  }

  export type ContractRenewalCreateNestedManyWithoutContractInput = {
    create?: XOR<ContractRenewalCreateWithoutContractInput, ContractRenewalUncheckedCreateWithoutContractInput> | ContractRenewalCreateWithoutContractInput[] | ContractRenewalUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutContractInput | ContractRenewalCreateOrConnectWithoutContractInput[]
    createMany?: ContractRenewalCreateManyContractInputEnvelope
    connect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedContractsInput = {
    create?: XOR<UserCreateWithoutCreatedContractsInput, UserUncheckedCreateWithoutCreatedContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedContractsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutModifiedContractsInput = {
    create?: XOR<UserCreateWithoutModifiedContractsInput, UserUncheckedCreateWithoutModifiedContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutModifiedContractsInput
    connect?: UserWhereUniqueInput
  }

  export type ContractReminderCreateNestedManyWithoutContractInput = {
    create?: XOR<ContractReminderCreateWithoutContractInput, ContractReminderUncheckedCreateWithoutContractInput> | ContractReminderCreateWithoutContractInput[] | ContractReminderUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractReminderCreateOrConnectWithoutContractInput | ContractReminderCreateOrConnectWithoutContractInput[]
    createMany?: ContractReminderCreateManyContractInputEnvelope
    connect?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
  }

  export type ServiceContractUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<ServiceContractCreateWithoutContractInput, ServiceContractUncheckedCreateWithoutContractInput> | ServiceContractCreateWithoutContractInput[] | ServiceContractUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ServiceContractCreateOrConnectWithoutContractInput | ServiceContractCreateOrConnectWithoutContractInput[]
    createMany?: ServiceContractCreateManyContractInputEnvelope
    connect?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
  }

  export type ContractAttachmentUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<ContractAttachmentCreateWithoutContractInput, ContractAttachmentUncheckedCreateWithoutContractInput> | ContractAttachmentCreateWithoutContractInput[] | ContractAttachmentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractAttachmentCreateOrConnectWithoutContractInput | ContractAttachmentCreateOrConnectWithoutContractInput[]
    createMany?: ContractAttachmentCreateManyContractInputEnvelope
    connect?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
  }

  export type HumanitarianContractRenewalUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutContractInput, HumanitarianContractRenewalUncheckedCreateWithoutContractInput> | HumanitarianContractRenewalCreateWithoutContractInput[] | HumanitarianContractRenewalUncheckedCreateWithoutContractInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutContractInput | HumanitarianContractRenewalCreateOrConnectWithoutContractInput[]
    createMany?: HumanitarianContractRenewalCreateManyContractInputEnvelope
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
  }

  export type ContractRenewalUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<ContractRenewalCreateWithoutContractInput, ContractRenewalUncheckedCreateWithoutContractInput> | ContractRenewalCreateWithoutContractInput[] | ContractRenewalUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutContractInput | ContractRenewalCreateOrConnectWithoutContractInput[]
    createMany?: ContractRenewalCreateManyContractInputEnvelope
    connect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
  }

  export type ContractReminderUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<ContractReminderCreateWithoutContractInput, ContractReminderUncheckedCreateWithoutContractInput> | ContractReminderCreateWithoutContractInput[] | ContractReminderUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractReminderCreateOrConnectWithoutContractInput | ContractReminderCreateOrConnectWithoutContractInput[]
    createMany?: ContractReminderCreateManyContractInputEnvelope
    connect?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
  }

  export type EnumContractTypeFieldUpdateOperationsInput = {
    set?: $Enums.ContractType
  }

  export type EnumContractStatusFieldUpdateOperationsInput = {
    set?: $Enums.ContractStatus
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProviderUpdateOneWithoutContractsNestedInput = {
    create?: XOR<ProviderCreateWithoutContractsInput, ProviderUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutContractsInput
    upsert?: ProviderUpsertWithoutContractsInput
    disconnect?: ProviderWhereInput | boolean
    delete?: ProviderWhereInput | boolean
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutContractsInput, ProviderUpdateWithoutContractsInput>, ProviderUncheckedUpdateWithoutContractsInput>
  }

  export type OperatorUpdateOneWithoutContractsNestedInput = {
    create?: XOR<OperatorCreateWithoutContractsInput, OperatorUncheckedCreateWithoutContractsInput>
    connectOrCreate?: OperatorCreateOrConnectWithoutContractsInput
    upsert?: OperatorUpsertWithoutContractsInput
    disconnect?: OperatorWhereInput | boolean
    delete?: OperatorWhereInput | boolean
    connect?: OperatorWhereUniqueInput
    update?: XOR<XOR<OperatorUpdateToOneWithWhereWithoutContractsInput, OperatorUpdateWithoutContractsInput>, OperatorUncheckedUpdateWithoutContractsInput>
  }

  export type HumanitarianOrgUpdateOneWithoutContractsNestedInput = {
    create?: XOR<HumanitarianOrgCreateWithoutContractsInput, HumanitarianOrgUncheckedCreateWithoutContractsInput>
    connectOrCreate?: HumanitarianOrgCreateOrConnectWithoutContractsInput
    upsert?: HumanitarianOrgUpsertWithoutContractsInput
    disconnect?: HumanitarianOrgWhereInput | boolean
    delete?: HumanitarianOrgWhereInput | boolean
    connect?: HumanitarianOrgWhereUniqueInput
    update?: XOR<XOR<HumanitarianOrgUpdateToOneWithWhereWithoutContractsInput, HumanitarianOrgUpdateWithoutContractsInput>, HumanitarianOrgUncheckedUpdateWithoutContractsInput>
  }

  export type ParkingServiceUpdateOneWithoutContractsNestedInput = {
    create?: XOR<ParkingServiceCreateWithoutContractsInput, ParkingServiceUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ParkingServiceCreateOrConnectWithoutContractsInput
    upsert?: ParkingServiceUpsertWithoutContractsInput
    disconnect?: ParkingServiceWhereInput | boolean
    delete?: ParkingServiceWhereInput | boolean
    connect?: ParkingServiceWhereUniqueInput
    update?: XOR<XOR<ParkingServiceUpdateToOneWithWhereWithoutContractsInput, ParkingServiceUpdateWithoutContractsInput>, ParkingServiceUncheckedUpdateWithoutContractsInput>
  }

  export type ServiceContractUpdateManyWithoutContractNestedInput = {
    create?: XOR<ServiceContractCreateWithoutContractInput, ServiceContractUncheckedCreateWithoutContractInput> | ServiceContractCreateWithoutContractInput[] | ServiceContractUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ServiceContractCreateOrConnectWithoutContractInput | ServiceContractCreateOrConnectWithoutContractInput[]
    upsert?: ServiceContractUpsertWithWhereUniqueWithoutContractInput | ServiceContractUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ServiceContractCreateManyContractInputEnvelope
    set?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    disconnect?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    delete?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    connect?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    update?: ServiceContractUpdateWithWhereUniqueWithoutContractInput | ServiceContractUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ServiceContractUpdateManyWithWhereWithoutContractInput | ServiceContractUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ServiceContractScalarWhereInput | ServiceContractScalarWhereInput[]
  }

  export type ContractAttachmentUpdateManyWithoutContractNestedInput = {
    create?: XOR<ContractAttachmentCreateWithoutContractInput, ContractAttachmentUncheckedCreateWithoutContractInput> | ContractAttachmentCreateWithoutContractInput[] | ContractAttachmentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractAttachmentCreateOrConnectWithoutContractInput | ContractAttachmentCreateOrConnectWithoutContractInput[]
    upsert?: ContractAttachmentUpsertWithWhereUniqueWithoutContractInput | ContractAttachmentUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ContractAttachmentCreateManyContractInputEnvelope
    set?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    disconnect?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    delete?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    connect?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    update?: ContractAttachmentUpdateWithWhereUniqueWithoutContractInput | ContractAttachmentUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ContractAttachmentUpdateManyWithWhereWithoutContractInput | ContractAttachmentUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ContractAttachmentScalarWhereInput | ContractAttachmentScalarWhereInput[]
  }

  export type HumanitarianContractRenewalUpdateManyWithoutContractNestedInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutContractInput, HumanitarianContractRenewalUncheckedCreateWithoutContractInput> | HumanitarianContractRenewalCreateWithoutContractInput[] | HumanitarianContractRenewalUncheckedCreateWithoutContractInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutContractInput | HumanitarianContractRenewalCreateOrConnectWithoutContractInput[]
    upsert?: HumanitarianContractRenewalUpsertWithWhereUniqueWithoutContractInput | HumanitarianContractRenewalUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: HumanitarianContractRenewalCreateManyContractInputEnvelope
    set?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    disconnect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    delete?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    update?: HumanitarianContractRenewalUpdateWithWhereUniqueWithoutContractInput | HumanitarianContractRenewalUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: HumanitarianContractRenewalUpdateManyWithWhereWithoutContractInput | HumanitarianContractRenewalUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: HumanitarianContractRenewalScalarWhereInput | HumanitarianContractRenewalScalarWhereInput[]
  }

  export type ContractRenewalUpdateManyWithoutContractNestedInput = {
    create?: XOR<ContractRenewalCreateWithoutContractInput, ContractRenewalUncheckedCreateWithoutContractInput> | ContractRenewalCreateWithoutContractInput[] | ContractRenewalUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutContractInput | ContractRenewalCreateOrConnectWithoutContractInput[]
    upsert?: ContractRenewalUpsertWithWhereUniqueWithoutContractInput | ContractRenewalUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ContractRenewalCreateManyContractInputEnvelope
    set?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    disconnect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    delete?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    connect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    update?: ContractRenewalUpdateWithWhereUniqueWithoutContractInput | ContractRenewalUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ContractRenewalUpdateManyWithWhereWithoutContractInput | ContractRenewalUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ContractRenewalScalarWhereInput | ContractRenewalScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedContractsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedContractsInput, UserUncheckedCreateWithoutCreatedContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedContractsInput
    upsert?: UserUpsertWithoutCreatedContractsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedContractsInput, UserUpdateWithoutCreatedContractsInput>, UserUncheckedUpdateWithoutCreatedContractsInput>
  }

  export type UserUpdateOneWithoutModifiedContractsNestedInput = {
    create?: XOR<UserCreateWithoutModifiedContractsInput, UserUncheckedCreateWithoutModifiedContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutModifiedContractsInput
    upsert?: UserUpsertWithoutModifiedContractsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutModifiedContractsInput, UserUpdateWithoutModifiedContractsInput>, UserUncheckedUpdateWithoutModifiedContractsInput>
  }

  export type ContractReminderUpdateManyWithoutContractNestedInput = {
    create?: XOR<ContractReminderCreateWithoutContractInput, ContractReminderUncheckedCreateWithoutContractInput> | ContractReminderCreateWithoutContractInput[] | ContractReminderUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractReminderCreateOrConnectWithoutContractInput | ContractReminderCreateOrConnectWithoutContractInput[]
    upsert?: ContractReminderUpsertWithWhereUniqueWithoutContractInput | ContractReminderUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ContractReminderCreateManyContractInputEnvelope
    set?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    disconnect?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    delete?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    connect?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    update?: ContractReminderUpdateWithWhereUniqueWithoutContractInput | ContractReminderUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ContractReminderUpdateManyWithWhereWithoutContractInput | ContractReminderUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ContractReminderScalarWhereInput | ContractReminderScalarWhereInput[]
  }

  export type ServiceContractUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<ServiceContractCreateWithoutContractInput, ServiceContractUncheckedCreateWithoutContractInput> | ServiceContractCreateWithoutContractInput[] | ServiceContractUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ServiceContractCreateOrConnectWithoutContractInput | ServiceContractCreateOrConnectWithoutContractInput[]
    upsert?: ServiceContractUpsertWithWhereUniqueWithoutContractInput | ServiceContractUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ServiceContractCreateManyContractInputEnvelope
    set?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    disconnect?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    delete?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    connect?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    update?: ServiceContractUpdateWithWhereUniqueWithoutContractInput | ServiceContractUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ServiceContractUpdateManyWithWhereWithoutContractInput | ServiceContractUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ServiceContractScalarWhereInput | ServiceContractScalarWhereInput[]
  }

  export type ContractAttachmentUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<ContractAttachmentCreateWithoutContractInput, ContractAttachmentUncheckedCreateWithoutContractInput> | ContractAttachmentCreateWithoutContractInput[] | ContractAttachmentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractAttachmentCreateOrConnectWithoutContractInput | ContractAttachmentCreateOrConnectWithoutContractInput[]
    upsert?: ContractAttachmentUpsertWithWhereUniqueWithoutContractInput | ContractAttachmentUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ContractAttachmentCreateManyContractInputEnvelope
    set?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    disconnect?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    delete?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    connect?: ContractAttachmentWhereUniqueInput | ContractAttachmentWhereUniqueInput[]
    update?: ContractAttachmentUpdateWithWhereUniqueWithoutContractInput | ContractAttachmentUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ContractAttachmentUpdateManyWithWhereWithoutContractInput | ContractAttachmentUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ContractAttachmentScalarWhereInput | ContractAttachmentScalarWhereInput[]
  }

  export type HumanitarianContractRenewalUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<HumanitarianContractRenewalCreateWithoutContractInput, HumanitarianContractRenewalUncheckedCreateWithoutContractInput> | HumanitarianContractRenewalCreateWithoutContractInput[] | HumanitarianContractRenewalUncheckedCreateWithoutContractInput[]
    connectOrCreate?: HumanitarianContractRenewalCreateOrConnectWithoutContractInput | HumanitarianContractRenewalCreateOrConnectWithoutContractInput[]
    upsert?: HumanitarianContractRenewalUpsertWithWhereUniqueWithoutContractInput | HumanitarianContractRenewalUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: HumanitarianContractRenewalCreateManyContractInputEnvelope
    set?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    disconnect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    delete?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    connect?: HumanitarianContractRenewalWhereUniqueInput | HumanitarianContractRenewalWhereUniqueInput[]
    update?: HumanitarianContractRenewalUpdateWithWhereUniqueWithoutContractInput | HumanitarianContractRenewalUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: HumanitarianContractRenewalUpdateManyWithWhereWithoutContractInput | HumanitarianContractRenewalUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: HumanitarianContractRenewalScalarWhereInput | HumanitarianContractRenewalScalarWhereInput[]
  }

  export type ContractRenewalUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<ContractRenewalCreateWithoutContractInput, ContractRenewalUncheckedCreateWithoutContractInput> | ContractRenewalCreateWithoutContractInput[] | ContractRenewalUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutContractInput | ContractRenewalCreateOrConnectWithoutContractInput[]
    upsert?: ContractRenewalUpsertWithWhereUniqueWithoutContractInput | ContractRenewalUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ContractRenewalCreateManyContractInputEnvelope
    set?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    disconnect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    delete?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    connect?: ContractRenewalWhereUniqueInput | ContractRenewalWhereUniqueInput[]
    update?: ContractRenewalUpdateWithWhereUniqueWithoutContractInput | ContractRenewalUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ContractRenewalUpdateManyWithWhereWithoutContractInput | ContractRenewalUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ContractRenewalScalarWhereInput | ContractRenewalScalarWhereInput[]
  }

  export type ContractReminderUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<ContractReminderCreateWithoutContractInput, ContractReminderUncheckedCreateWithoutContractInput> | ContractReminderCreateWithoutContractInput[] | ContractReminderUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractReminderCreateOrConnectWithoutContractInput | ContractReminderCreateOrConnectWithoutContractInput[]
    upsert?: ContractReminderUpsertWithWhereUniqueWithoutContractInput | ContractReminderUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ContractReminderCreateManyContractInputEnvelope
    set?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    disconnect?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    delete?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    connect?: ContractReminderWhereUniqueInput | ContractReminderWhereUniqueInput[]
    update?: ContractReminderUpdateWithWhereUniqueWithoutContractInput | ContractReminderUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ContractReminderUpdateManyWithWhereWithoutContractInput | ContractReminderUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ContractReminderScalarWhereInput | ContractReminderScalarWhereInput[]
  }

  export type ContractCreateNestedOneWithoutRenewalsInput = {
    create?: XOR<ContractCreateWithoutRenewalsInput, ContractUncheckedCreateWithoutRenewalsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutRenewalsInput
    connect?: ContractWhereUniqueInput
  }

  export type ContractRenewalAttachmentCreateNestedManyWithoutRenewalInput = {
    create?: XOR<ContractRenewalAttachmentCreateWithoutRenewalInput, ContractRenewalAttachmentUncheckedCreateWithoutRenewalInput> | ContractRenewalAttachmentCreateWithoutRenewalInput[] | ContractRenewalAttachmentUncheckedCreateWithoutRenewalInput[]
    connectOrCreate?: ContractRenewalAttachmentCreateOrConnectWithoutRenewalInput | ContractRenewalAttachmentCreateOrConnectWithoutRenewalInput[]
    createMany?: ContractRenewalAttachmentCreateManyRenewalInputEnvelope
    connect?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedRenewalsInput = {
    create?: XOR<UserCreateWithoutCreatedRenewalsInput, UserUncheckedCreateWithoutCreatedRenewalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRenewalsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutModifiedRenewalsInput = {
    create?: XOR<UserCreateWithoutModifiedRenewalsInput, UserUncheckedCreateWithoutModifiedRenewalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutModifiedRenewalsInput
    connect?: UserWhereUniqueInput
  }

  export type ContractRenewalAttachmentUncheckedCreateNestedManyWithoutRenewalInput = {
    create?: XOR<ContractRenewalAttachmentCreateWithoutRenewalInput, ContractRenewalAttachmentUncheckedCreateWithoutRenewalInput> | ContractRenewalAttachmentCreateWithoutRenewalInput[] | ContractRenewalAttachmentUncheckedCreateWithoutRenewalInput[]
    connectOrCreate?: ContractRenewalAttachmentCreateOrConnectWithoutRenewalInput | ContractRenewalAttachmentCreateOrConnectWithoutRenewalInput[]
    createMany?: ContractRenewalAttachmentCreateManyRenewalInputEnvelope
    connect?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
  }

  export type EnumContractRenewalSubStatusFieldUpdateOperationsInput = {
    set?: $Enums.ContractRenewalSubStatus
  }

  export type ContractUpdateOneRequiredWithoutRenewalsNestedInput = {
    create?: XOR<ContractCreateWithoutRenewalsInput, ContractUncheckedCreateWithoutRenewalsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutRenewalsInput
    upsert?: ContractUpsertWithoutRenewalsInput
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutRenewalsInput, ContractUpdateWithoutRenewalsInput>, ContractUncheckedUpdateWithoutRenewalsInput>
  }

  export type ContractRenewalAttachmentUpdateManyWithoutRenewalNestedInput = {
    create?: XOR<ContractRenewalAttachmentCreateWithoutRenewalInput, ContractRenewalAttachmentUncheckedCreateWithoutRenewalInput> | ContractRenewalAttachmentCreateWithoutRenewalInput[] | ContractRenewalAttachmentUncheckedCreateWithoutRenewalInput[]
    connectOrCreate?: ContractRenewalAttachmentCreateOrConnectWithoutRenewalInput | ContractRenewalAttachmentCreateOrConnectWithoutRenewalInput[]
    upsert?: ContractRenewalAttachmentUpsertWithWhereUniqueWithoutRenewalInput | ContractRenewalAttachmentUpsertWithWhereUniqueWithoutRenewalInput[]
    createMany?: ContractRenewalAttachmentCreateManyRenewalInputEnvelope
    set?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    disconnect?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    delete?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    connect?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    update?: ContractRenewalAttachmentUpdateWithWhereUniqueWithoutRenewalInput | ContractRenewalAttachmentUpdateWithWhereUniqueWithoutRenewalInput[]
    updateMany?: ContractRenewalAttachmentUpdateManyWithWhereWithoutRenewalInput | ContractRenewalAttachmentUpdateManyWithWhereWithoutRenewalInput[]
    deleteMany?: ContractRenewalAttachmentScalarWhereInput | ContractRenewalAttachmentScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedRenewalsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedRenewalsInput, UserUncheckedCreateWithoutCreatedRenewalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRenewalsInput
    upsert?: UserUpsertWithoutCreatedRenewalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedRenewalsInput, UserUpdateWithoutCreatedRenewalsInput>, UserUncheckedUpdateWithoutCreatedRenewalsInput>
  }

  export type UserUpdateOneWithoutModifiedRenewalsNestedInput = {
    create?: XOR<UserCreateWithoutModifiedRenewalsInput, UserUncheckedCreateWithoutModifiedRenewalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutModifiedRenewalsInput
    upsert?: UserUpsertWithoutModifiedRenewalsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutModifiedRenewalsInput, UserUpdateWithoutModifiedRenewalsInput>, UserUncheckedUpdateWithoutModifiedRenewalsInput>
  }

  export type ContractRenewalAttachmentUncheckedUpdateManyWithoutRenewalNestedInput = {
    create?: XOR<ContractRenewalAttachmentCreateWithoutRenewalInput, ContractRenewalAttachmentUncheckedCreateWithoutRenewalInput> | ContractRenewalAttachmentCreateWithoutRenewalInput[] | ContractRenewalAttachmentUncheckedCreateWithoutRenewalInput[]
    connectOrCreate?: ContractRenewalAttachmentCreateOrConnectWithoutRenewalInput | ContractRenewalAttachmentCreateOrConnectWithoutRenewalInput[]
    upsert?: ContractRenewalAttachmentUpsertWithWhereUniqueWithoutRenewalInput | ContractRenewalAttachmentUpsertWithWhereUniqueWithoutRenewalInput[]
    createMany?: ContractRenewalAttachmentCreateManyRenewalInputEnvelope
    set?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    disconnect?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    delete?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    connect?: ContractRenewalAttachmentWhereUniqueInput | ContractRenewalAttachmentWhereUniqueInput[]
    update?: ContractRenewalAttachmentUpdateWithWhereUniqueWithoutRenewalInput | ContractRenewalAttachmentUpdateWithWhereUniqueWithoutRenewalInput[]
    updateMany?: ContractRenewalAttachmentUpdateManyWithWhereWithoutRenewalInput | ContractRenewalAttachmentUpdateManyWithWhereWithoutRenewalInput[]
    deleteMany?: ContractRenewalAttachmentScalarWhereInput | ContractRenewalAttachmentScalarWhereInput[]
  }

  export type ContractRenewalCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<ContractRenewalCreateWithoutAttachmentsInput, ContractRenewalUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutAttachmentsInput
    connect?: ContractRenewalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUploadedRenewalFilesInput = {
    create?: XOR<UserCreateWithoutUploadedRenewalFilesInput, UserUncheckedCreateWithoutUploadedRenewalFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedRenewalFilesInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ContractRenewalUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<ContractRenewalCreateWithoutAttachmentsInput, ContractRenewalUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: ContractRenewalCreateOrConnectWithoutAttachmentsInput
    upsert?: ContractRenewalUpsertWithoutAttachmentsInput
    connect?: ContractRenewalWhereUniqueInput
    update?: XOR<XOR<ContractRenewalUpdateToOneWithWhereWithoutAttachmentsInput, ContractRenewalUpdateWithoutAttachmentsInput>, ContractRenewalUncheckedUpdateWithoutAttachmentsInput>
  }

  export type UserUpdateOneRequiredWithoutUploadedRenewalFilesNestedInput = {
    create?: XOR<UserCreateWithoutUploadedRenewalFilesInput, UserUncheckedCreateWithoutUploadedRenewalFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedRenewalFilesInput
    upsert?: UserUpsertWithoutUploadedRenewalFilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadedRenewalFilesInput, UserUpdateWithoutUploadedRenewalFilesInput>, UserUncheckedUpdateWithoutUploadedRenewalFilesInput>
  }

  export type ContractCreateNestedOneWithoutHumanitarianRenewalsInput = {
    create?: XOR<ContractCreateWithoutHumanitarianRenewalsInput, ContractUncheckedCreateWithoutHumanitarianRenewalsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutHumanitarianRenewalsInput
    connect?: ContractWhereUniqueInput
  }

  export type HumanitarianOrgCreateNestedOneWithoutRenewalsInput = {
    create?: XOR<HumanitarianOrgCreateWithoutRenewalsInput, HumanitarianOrgUncheckedCreateWithoutRenewalsInput>
    connectOrCreate?: HumanitarianOrgCreateOrConnectWithoutRenewalsInput
    connect?: HumanitarianOrgWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedHumanitarianRenewalsInput = {
    create?: XOR<UserCreateWithoutCreatedHumanitarianRenewalsInput, UserUncheckedCreateWithoutCreatedHumanitarianRenewalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedHumanitarianRenewalsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutModifiedHumanitarianRenewalsInput = {
    create?: XOR<UserCreateWithoutModifiedHumanitarianRenewalsInput, UserUncheckedCreateWithoutModifiedHumanitarianRenewalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutModifiedHumanitarianRenewalsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput = {
    set?: $Enums.HumanitarianRenewalSubStatus
  }

  export type ContractUpdateOneRequiredWithoutHumanitarianRenewalsNestedInput = {
    create?: XOR<ContractCreateWithoutHumanitarianRenewalsInput, ContractUncheckedCreateWithoutHumanitarianRenewalsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutHumanitarianRenewalsInput
    upsert?: ContractUpsertWithoutHumanitarianRenewalsInput
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutHumanitarianRenewalsInput, ContractUpdateWithoutHumanitarianRenewalsInput>, ContractUncheckedUpdateWithoutHumanitarianRenewalsInput>
  }

  export type HumanitarianOrgUpdateOneRequiredWithoutRenewalsNestedInput = {
    create?: XOR<HumanitarianOrgCreateWithoutRenewalsInput, HumanitarianOrgUncheckedCreateWithoutRenewalsInput>
    connectOrCreate?: HumanitarianOrgCreateOrConnectWithoutRenewalsInput
    upsert?: HumanitarianOrgUpsertWithoutRenewalsInput
    connect?: HumanitarianOrgWhereUniqueInput
    update?: XOR<XOR<HumanitarianOrgUpdateToOneWithWhereWithoutRenewalsInput, HumanitarianOrgUpdateWithoutRenewalsInput>, HumanitarianOrgUncheckedUpdateWithoutRenewalsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedHumanitarianRenewalsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedHumanitarianRenewalsInput, UserUncheckedCreateWithoutCreatedHumanitarianRenewalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedHumanitarianRenewalsInput
    upsert?: UserUpsertWithoutCreatedHumanitarianRenewalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedHumanitarianRenewalsInput, UserUpdateWithoutCreatedHumanitarianRenewalsInput>, UserUncheckedUpdateWithoutCreatedHumanitarianRenewalsInput>
  }

  export type UserUpdateOneWithoutModifiedHumanitarianRenewalsNestedInput = {
    create?: XOR<UserCreateWithoutModifiedHumanitarianRenewalsInput, UserUncheckedCreateWithoutModifiedHumanitarianRenewalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutModifiedHumanitarianRenewalsInput
    upsert?: UserUpsertWithoutModifiedHumanitarianRenewalsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutModifiedHumanitarianRenewalsInput, UserUpdateWithoutModifiedHumanitarianRenewalsInput>, UserUncheckedUpdateWithoutModifiedHumanitarianRenewalsInput>
  }

  export type UserCreateNestedOneWithoutSenderBlacklistsInput = {
    create?: XOR<UserCreateWithoutSenderBlacklistsInput, UserUncheckedCreateWithoutSenderBlacklistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSenderBlacklistsInput
    connect?: UserWhereUniqueInput
  }

  export type BlacklistLogCreateNestedManyWithoutBlacklistEntryInput = {
    create?: XOR<BlacklistLogCreateWithoutBlacklistEntryInput, BlacklistLogUncheckedCreateWithoutBlacklistEntryInput> | BlacklistLogCreateWithoutBlacklistEntryInput[] | BlacklistLogUncheckedCreateWithoutBlacklistEntryInput[]
    connectOrCreate?: BlacklistLogCreateOrConnectWithoutBlacklistEntryInput | BlacklistLogCreateOrConnectWithoutBlacklistEntryInput[]
    createMany?: BlacklistLogCreateManyBlacklistEntryInputEnvelope
    connect?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutModifiedBlacklistsInput = {
    create?: XOR<UserCreateWithoutModifiedBlacklistsInput, UserUncheckedCreateWithoutModifiedBlacklistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutModifiedBlacklistsInput
    connect?: UserWhereUniqueInput
  }

  export type BlacklistLogUncheckedCreateNestedManyWithoutBlacklistEntryInput = {
    create?: XOR<BlacklistLogCreateWithoutBlacklistEntryInput, BlacklistLogUncheckedCreateWithoutBlacklistEntryInput> | BlacklistLogCreateWithoutBlacklistEntryInput[] | BlacklistLogUncheckedCreateWithoutBlacklistEntryInput[]
    connectOrCreate?: BlacklistLogCreateOrConnectWithoutBlacklistEntryInput | BlacklistLogCreateOrConnectWithoutBlacklistEntryInput[]
    createMany?: BlacklistLogCreateManyBlacklistEntryInputEnvelope
    connect?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSenderBlacklistsNestedInput = {
    create?: XOR<UserCreateWithoutSenderBlacklistsInput, UserUncheckedCreateWithoutSenderBlacklistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSenderBlacklistsInput
    upsert?: UserUpsertWithoutSenderBlacklistsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSenderBlacklistsInput, UserUpdateWithoutSenderBlacklistsInput>, UserUncheckedUpdateWithoutSenderBlacklistsInput>
  }

  export type BlacklistLogUpdateManyWithoutBlacklistEntryNestedInput = {
    create?: XOR<BlacklistLogCreateWithoutBlacklistEntryInput, BlacklistLogUncheckedCreateWithoutBlacklistEntryInput> | BlacklistLogCreateWithoutBlacklistEntryInput[] | BlacklistLogUncheckedCreateWithoutBlacklistEntryInput[]
    connectOrCreate?: BlacklistLogCreateOrConnectWithoutBlacklistEntryInput | BlacklistLogCreateOrConnectWithoutBlacklistEntryInput[]
    upsert?: BlacklistLogUpsertWithWhereUniqueWithoutBlacklistEntryInput | BlacklistLogUpsertWithWhereUniqueWithoutBlacklistEntryInput[]
    createMany?: BlacklistLogCreateManyBlacklistEntryInputEnvelope
    set?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    disconnect?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    delete?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    connect?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    update?: BlacklistLogUpdateWithWhereUniqueWithoutBlacklistEntryInput | BlacklistLogUpdateWithWhereUniqueWithoutBlacklistEntryInput[]
    updateMany?: BlacklistLogUpdateManyWithWhereWithoutBlacklistEntryInput | BlacklistLogUpdateManyWithWhereWithoutBlacklistEntryInput[]
    deleteMany?: BlacklistLogScalarWhereInput | BlacklistLogScalarWhereInput[]
  }

  export type UserUpdateOneWithoutModifiedBlacklistsNestedInput = {
    create?: XOR<UserCreateWithoutModifiedBlacklistsInput, UserUncheckedCreateWithoutModifiedBlacklistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutModifiedBlacklistsInput
    upsert?: UserUpsertWithoutModifiedBlacklistsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutModifiedBlacklistsInput, UserUpdateWithoutModifiedBlacklistsInput>, UserUncheckedUpdateWithoutModifiedBlacklistsInput>
  }

  export type BlacklistLogUncheckedUpdateManyWithoutBlacklistEntryNestedInput = {
    create?: XOR<BlacklistLogCreateWithoutBlacklistEntryInput, BlacklistLogUncheckedCreateWithoutBlacklistEntryInput> | BlacklistLogCreateWithoutBlacklistEntryInput[] | BlacklistLogUncheckedCreateWithoutBlacklistEntryInput[]
    connectOrCreate?: BlacklistLogCreateOrConnectWithoutBlacklistEntryInput | BlacklistLogCreateOrConnectWithoutBlacklistEntryInput[]
    upsert?: BlacklistLogUpsertWithWhereUniqueWithoutBlacklistEntryInput | BlacklistLogUpsertWithWhereUniqueWithoutBlacklistEntryInput[]
    createMany?: BlacklistLogCreateManyBlacklistEntryInputEnvelope
    set?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    disconnect?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    delete?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    connect?: BlacklistLogWhereUniqueInput | BlacklistLogWhereUniqueInput[]
    update?: BlacklistLogUpdateWithWhereUniqueWithoutBlacklistEntryInput | BlacklistLogUpdateWithWhereUniqueWithoutBlacklistEntryInput[]
    updateMany?: BlacklistLogUpdateManyWithWhereWithoutBlacklistEntryInput | BlacklistLogUpdateManyWithWhereWithoutBlacklistEntryInput[]
    deleteMany?: BlacklistLogScalarWhereInput | BlacklistLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type SenderBlacklistCreateNestedOneWithoutLogsInput = {
    create?: XOR<SenderBlacklistCreateWithoutLogsInput, SenderBlacklistUncheckedCreateWithoutLogsInput>
    connectOrCreate?: SenderBlacklistCreateOrConnectWithoutLogsInput
    connect?: SenderBlacklistWhereUniqueInput
  }

  export type EnumLogBlackTypeFieldUpdateOperationsInput = {
    set?: $Enums.LogBlackType
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type SenderBlacklistUpdateOneWithoutLogsNestedInput = {
    create?: XOR<SenderBlacklistCreateWithoutLogsInput, SenderBlacklistUncheckedCreateWithoutLogsInput>
    connectOrCreate?: SenderBlacklistCreateOrConnectWithoutLogsInput
    upsert?: SenderBlacklistUpsertWithoutLogsInput
    disconnect?: SenderBlacklistWhereInput | boolean
    delete?: SenderBlacklistWhereInput | boolean
    connect?: SenderBlacklistWhereUniqueInput
    update?: XOR<XOR<SenderBlacklistUpdateToOneWithWhereWithoutLogsInput, SenderBlacklistUpdateWithoutLogsInput>, SenderBlacklistUncheckedUpdateWithoutLogsInput>
  }

  export type ContractCreateNestedManyWithoutOperatorInput = {
    create?: XOR<ContractCreateWithoutOperatorInput, ContractUncheckedCreateWithoutOperatorInput> | ContractCreateWithoutOperatorInput[] | ContractUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutOperatorInput | ContractCreateOrConnectWithoutOperatorInput[]
    createMany?: ContractCreateManyOperatorInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutOperatorInput = {
    create?: XOR<ContractCreateWithoutOperatorInput, ContractUncheckedCreateWithoutOperatorInput> | ContractCreateWithoutOperatorInput[] | ContractUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutOperatorInput | ContractCreateOrConnectWithoutOperatorInput[]
    createMany?: ContractCreateManyOperatorInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type ContractUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<ContractCreateWithoutOperatorInput, ContractUncheckedCreateWithoutOperatorInput> | ContractCreateWithoutOperatorInput[] | ContractUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutOperatorInput | ContractCreateOrConnectWithoutOperatorInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutOperatorInput | ContractUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: ContractCreateManyOperatorInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutOperatorInput | ContractUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutOperatorInput | ContractUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<ContractCreateWithoutOperatorInput, ContractUncheckedCreateWithoutOperatorInput> | ContractCreateWithoutOperatorInput[] | ContractUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutOperatorInput | ContractCreateOrConnectWithoutOperatorInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutOperatorInput | ContractUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: ContractCreateManyOperatorInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutOperatorInput | ContractUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutOperatorInput | ContractUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type ContractCreateNestedOneWithoutServicesInput = {
    create?: XOR<ContractCreateWithoutServicesInput, ContractUncheckedCreateWithoutServicesInput>
    connectOrCreate?: ContractCreateOrConnectWithoutServicesInput
    connect?: ContractWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutContractsInput = {
    create?: XOR<ServiceCreateWithoutContractsInput, ServiceUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutContractsInput
    connect?: ServiceWhereUniqueInput
  }

  export type ContractUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<ContractCreateWithoutServicesInput, ContractUncheckedCreateWithoutServicesInput>
    connectOrCreate?: ContractCreateOrConnectWithoutServicesInput
    upsert?: ContractUpsertWithoutServicesInput
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutServicesInput, ContractUpdateWithoutServicesInput>, ContractUncheckedUpdateWithoutServicesInput>
  }

  export type ServiceUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<ServiceCreateWithoutContractsInput, ServiceUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutContractsInput
    upsert?: ServiceUpsertWithoutContractsInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutContractsInput, ServiceUpdateWithoutContractsInput>, ServiceUncheckedUpdateWithoutContractsInput>
  }

  export type ContractCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<ContractCreateWithoutAttachmentsInput, ContractUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutAttachmentsInput
    connect?: ContractWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUploadedAttachmentsInput = {
    create?: XOR<UserCreateWithoutUploadedAttachmentsInput, UserUncheckedCreateWithoutUploadedAttachmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedAttachmentsInput
    connect?: UserWhereUniqueInput
  }

  export type ContractUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<ContractCreateWithoutAttachmentsInput, ContractUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutAttachmentsInput
    upsert?: ContractUpsertWithoutAttachmentsInput
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutAttachmentsInput, ContractUpdateWithoutAttachmentsInput>, ContractUncheckedUpdateWithoutAttachmentsInput>
  }

  export type UserUpdateOneRequiredWithoutUploadedAttachmentsNestedInput = {
    create?: XOR<UserCreateWithoutUploadedAttachmentsInput, UserUncheckedCreateWithoutUploadedAttachmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedAttachmentsInput
    upsert?: UserUpsertWithoutUploadedAttachmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadedAttachmentsInput, UserUpdateWithoutUploadedAttachmentsInput>, UserUncheckedUpdateWithoutUploadedAttachmentsInput>
  }

  export type ContractCreateNestedOneWithoutRemindersInput = {
    create?: XOR<ContractCreateWithoutRemindersInput, ContractUncheckedCreateWithoutRemindersInput>
    connectOrCreate?: ContractCreateOrConnectWithoutRemindersInput
    connect?: ContractWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAcknowledgedRemindersInput = {
    create?: XOR<UserCreateWithoutAcknowledgedRemindersInput, UserUncheckedCreateWithoutAcknowledgedRemindersInput>
    connectOrCreate?: UserCreateOrConnectWithoutAcknowledgedRemindersInput
    connect?: UserWhereUniqueInput
  }

  export type ContractUpdateOneRequiredWithoutRemindersNestedInput = {
    create?: XOR<ContractCreateWithoutRemindersInput, ContractUncheckedCreateWithoutRemindersInput>
    connectOrCreate?: ContractCreateOrConnectWithoutRemindersInput
    upsert?: ContractUpsertWithoutRemindersInput
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutRemindersInput, ContractUpdateWithoutRemindersInput>, ContractUncheckedUpdateWithoutRemindersInput>
  }

  export type UserUpdateOneWithoutAcknowledgedRemindersNestedInput = {
    create?: XOR<UserCreateWithoutAcknowledgedRemindersInput, UserUncheckedCreateWithoutAcknowledgedRemindersInput>
    connectOrCreate?: UserCreateOrConnectWithoutAcknowledgedRemindersInput
    upsert?: UserUpsertWithoutAcknowledgedRemindersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAcknowledgedRemindersInput, UserUpdateWithoutAcknowledgedRemindersInput>, UserUncheckedUpdateWithoutAcknowledgedRemindersInput>
  }

  export type ServiceContractCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceContractCreateWithoutServiceInput, ServiceContractUncheckedCreateWithoutServiceInput> | ServiceContractCreateWithoutServiceInput[] | ServiceContractUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceContractCreateOrConnectWithoutServiceInput | ServiceContractCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceContractCreateManyServiceInputEnvelope
    connect?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
  }

  export type VasServiceCreateNestedManyWithoutServiceInput = {
    create?: XOR<VasServiceCreateWithoutServiceInput, VasServiceUncheckedCreateWithoutServiceInput> | VasServiceCreateWithoutServiceInput[] | VasServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: VasServiceCreateOrConnectWithoutServiceInput | VasServiceCreateOrConnectWithoutServiceInput[]
    createMany?: VasServiceCreateManyServiceInputEnvelope
    connect?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
  }

  export type BulkServiceCreateNestedManyWithoutServiceInput = {
    create?: XOR<BulkServiceCreateWithoutServiceInput, BulkServiceUncheckedCreateWithoutServiceInput> | BulkServiceCreateWithoutServiceInput[] | BulkServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: BulkServiceCreateOrConnectWithoutServiceInput | BulkServiceCreateOrConnectWithoutServiceInput[]
    createMany?: BulkServiceCreateManyServiceInputEnvelope
    connect?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutServiceInput = {
    create?: XOR<ComplaintCreateWithoutServiceInput, ComplaintUncheckedCreateWithoutServiceInput> | ComplaintCreateWithoutServiceInput[] | ComplaintUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutServiceInput | ComplaintCreateOrConnectWithoutServiceInput[]
    createMany?: ComplaintCreateManyServiceInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ParkingTransactionCreateNestedManyWithoutServiceInput = {
    create?: XOR<ParkingTransactionCreateWithoutServiceInput, ParkingTransactionUncheckedCreateWithoutServiceInput> | ParkingTransactionCreateWithoutServiceInput[] | ParkingTransactionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ParkingTransactionCreateOrConnectWithoutServiceInput | ParkingTransactionCreateOrConnectWithoutServiceInput[]
    createMany?: ParkingTransactionCreateManyServiceInputEnvelope
    connect?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
  }

  export type VasTransactionCreateNestedManyWithoutServiceInput = {
    create?: XOR<VasTransactionCreateWithoutServiceInput, VasTransactionUncheckedCreateWithoutServiceInput> | VasTransactionCreateWithoutServiceInput[] | VasTransactionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: VasTransactionCreateOrConnectWithoutServiceInput | VasTransactionCreateOrConnectWithoutServiceInput[]
    createMany?: VasTransactionCreateManyServiceInputEnvelope
    connect?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
  }

  export type ServiceContractUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceContractCreateWithoutServiceInput, ServiceContractUncheckedCreateWithoutServiceInput> | ServiceContractCreateWithoutServiceInput[] | ServiceContractUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceContractCreateOrConnectWithoutServiceInput | ServiceContractCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceContractCreateManyServiceInputEnvelope
    connect?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
  }

  export type VasServiceUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<VasServiceCreateWithoutServiceInput, VasServiceUncheckedCreateWithoutServiceInput> | VasServiceCreateWithoutServiceInput[] | VasServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: VasServiceCreateOrConnectWithoutServiceInput | VasServiceCreateOrConnectWithoutServiceInput[]
    createMany?: VasServiceCreateManyServiceInputEnvelope
    connect?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
  }

  export type BulkServiceUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<BulkServiceCreateWithoutServiceInput, BulkServiceUncheckedCreateWithoutServiceInput> | BulkServiceCreateWithoutServiceInput[] | BulkServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: BulkServiceCreateOrConnectWithoutServiceInput | BulkServiceCreateOrConnectWithoutServiceInput[]
    createMany?: BulkServiceCreateManyServiceInputEnvelope
    connect?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<ComplaintCreateWithoutServiceInput, ComplaintUncheckedCreateWithoutServiceInput> | ComplaintCreateWithoutServiceInput[] | ComplaintUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutServiceInput | ComplaintCreateOrConnectWithoutServiceInput[]
    createMany?: ComplaintCreateManyServiceInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ParkingTransactionUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<ParkingTransactionCreateWithoutServiceInput, ParkingTransactionUncheckedCreateWithoutServiceInput> | ParkingTransactionCreateWithoutServiceInput[] | ParkingTransactionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ParkingTransactionCreateOrConnectWithoutServiceInput | ParkingTransactionCreateOrConnectWithoutServiceInput[]
    createMany?: ParkingTransactionCreateManyServiceInputEnvelope
    connect?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
  }

  export type VasTransactionUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<VasTransactionCreateWithoutServiceInput, VasTransactionUncheckedCreateWithoutServiceInput> | VasTransactionCreateWithoutServiceInput[] | VasTransactionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: VasTransactionCreateOrConnectWithoutServiceInput | VasTransactionCreateOrConnectWithoutServiceInput[]
    createMany?: VasTransactionCreateManyServiceInputEnvelope
    connect?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
  }

  export type EnumServiceTypeFieldUpdateOperationsInput = {
    set?: $Enums.ServiceType
  }

  export type NullableEnumBillingTypeFieldUpdateOperationsInput = {
    set?: $Enums.BillingType | null
  }

  export type ServiceContractUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceContractCreateWithoutServiceInput, ServiceContractUncheckedCreateWithoutServiceInput> | ServiceContractCreateWithoutServiceInput[] | ServiceContractUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceContractCreateOrConnectWithoutServiceInput | ServiceContractCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceContractUpsertWithWhereUniqueWithoutServiceInput | ServiceContractUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceContractCreateManyServiceInputEnvelope
    set?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    disconnect?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    delete?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    connect?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    update?: ServiceContractUpdateWithWhereUniqueWithoutServiceInput | ServiceContractUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceContractUpdateManyWithWhereWithoutServiceInput | ServiceContractUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceContractScalarWhereInput | ServiceContractScalarWhereInput[]
  }

  export type VasServiceUpdateManyWithoutServiceNestedInput = {
    create?: XOR<VasServiceCreateWithoutServiceInput, VasServiceUncheckedCreateWithoutServiceInput> | VasServiceCreateWithoutServiceInput[] | VasServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: VasServiceCreateOrConnectWithoutServiceInput | VasServiceCreateOrConnectWithoutServiceInput[]
    upsert?: VasServiceUpsertWithWhereUniqueWithoutServiceInput | VasServiceUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: VasServiceCreateManyServiceInputEnvelope
    set?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    disconnect?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    delete?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    connect?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    update?: VasServiceUpdateWithWhereUniqueWithoutServiceInput | VasServiceUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: VasServiceUpdateManyWithWhereWithoutServiceInput | VasServiceUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: VasServiceScalarWhereInput | VasServiceScalarWhereInput[]
  }

  export type BulkServiceUpdateManyWithoutServiceNestedInput = {
    create?: XOR<BulkServiceCreateWithoutServiceInput, BulkServiceUncheckedCreateWithoutServiceInput> | BulkServiceCreateWithoutServiceInput[] | BulkServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: BulkServiceCreateOrConnectWithoutServiceInput | BulkServiceCreateOrConnectWithoutServiceInput[]
    upsert?: BulkServiceUpsertWithWhereUniqueWithoutServiceInput | BulkServiceUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: BulkServiceCreateManyServiceInputEnvelope
    set?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    disconnect?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    delete?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    connect?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    update?: BulkServiceUpdateWithWhereUniqueWithoutServiceInput | BulkServiceUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: BulkServiceUpdateManyWithWhereWithoutServiceInput | BulkServiceUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: BulkServiceScalarWhereInput | BulkServiceScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ComplaintCreateWithoutServiceInput, ComplaintUncheckedCreateWithoutServiceInput> | ComplaintCreateWithoutServiceInput[] | ComplaintUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutServiceInput | ComplaintCreateOrConnectWithoutServiceInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutServiceInput | ComplaintUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ComplaintCreateManyServiceInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutServiceInput | ComplaintUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutServiceInput | ComplaintUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ParkingTransactionUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ParkingTransactionCreateWithoutServiceInput, ParkingTransactionUncheckedCreateWithoutServiceInput> | ParkingTransactionCreateWithoutServiceInput[] | ParkingTransactionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ParkingTransactionCreateOrConnectWithoutServiceInput | ParkingTransactionCreateOrConnectWithoutServiceInput[]
    upsert?: ParkingTransactionUpsertWithWhereUniqueWithoutServiceInput | ParkingTransactionUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ParkingTransactionCreateManyServiceInputEnvelope
    set?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    disconnect?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    delete?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    connect?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    update?: ParkingTransactionUpdateWithWhereUniqueWithoutServiceInput | ParkingTransactionUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ParkingTransactionUpdateManyWithWhereWithoutServiceInput | ParkingTransactionUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ParkingTransactionScalarWhereInput | ParkingTransactionScalarWhereInput[]
  }

  export type VasTransactionUpdateManyWithoutServiceNestedInput = {
    create?: XOR<VasTransactionCreateWithoutServiceInput, VasTransactionUncheckedCreateWithoutServiceInput> | VasTransactionCreateWithoutServiceInput[] | VasTransactionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: VasTransactionCreateOrConnectWithoutServiceInput | VasTransactionCreateOrConnectWithoutServiceInput[]
    upsert?: VasTransactionUpsertWithWhereUniqueWithoutServiceInput | VasTransactionUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: VasTransactionCreateManyServiceInputEnvelope
    set?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    disconnect?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    delete?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    connect?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    update?: VasTransactionUpdateWithWhereUniqueWithoutServiceInput | VasTransactionUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: VasTransactionUpdateManyWithWhereWithoutServiceInput | VasTransactionUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: VasTransactionScalarWhereInput | VasTransactionScalarWhereInput[]
  }

  export type ServiceContractUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceContractCreateWithoutServiceInput, ServiceContractUncheckedCreateWithoutServiceInput> | ServiceContractCreateWithoutServiceInput[] | ServiceContractUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceContractCreateOrConnectWithoutServiceInput | ServiceContractCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceContractUpsertWithWhereUniqueWithoutServiceInput | ServiceContractUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceContractCreateManyServiceInputEnvelope
    set?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    disconnect?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    delete?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    connect?: ServiceContractWhereUniqueInput | ServiceContractWhereUniqueInput[]
    update?: ServiceContractUpdateWithWhereUniqueWithoutServiceInput | ServiceContractUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceContractUpdateManyWithWhereWithoutServiceInput | ServiceContractUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceContractScalarWhereInput | ServiceContractScalarWhereInput[]
  }

  export type VasServiceUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<VasServiceCreateWithoutServiceInput, VasServiceUncheckedCreateWithoutServiceInput> | VasServiceCreateWithoutServiceInput[] | VasServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: VasServiceCreateOrConnectWithoutServiceInput | VasServiceCreateOrConnectWithoutServiceInput[]
    upsert?: VasServiceUpsertWithWhereUniqueWithoutServiceInput | VasServiceUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: VasServiceCreateManyServiceInputEnvelope
    set?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    disconnect?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    delete?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    connect?: VasServiceWhereUniqueInput | VasServiceWhereUniqueInput[]
    update?: VasServiceUpdateWithWhereUniqueWithoutServiceInput | VasServiceUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: VasServiceUpdateManyWithWhereWithoutServiceInput | VasServiceUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: VasServiceScalarWhereInput | VasServiceScalarWhereInput[]
  }

  export type BulkServiceUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<BulkServiceCreateWithoutServiceInput, BulkServiceUncheckedCreateWithoutServiceInput> | BulkServiceCreateWithoutServiceInput[] | BulkServiceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: BulkServiceCreateOrConnectWithoutServiceInput | BulkServiceCreateOrConnectWithoutServiceInput[]
    upsert?: BulkServiceUpsertWithWhereUniqueWithoutServiceInput | BulkServiceUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: BulkServiceCreateManyServiceInputEnvelope
    set?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    disconnect?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    delete?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    connect?: BulkServiceWhereUniqueInput | BulkServiceWhereUniqueInput[]
    update?: BulkServiceUpdateWithWhereUniqueWithoutServiceInput | BulkServiceUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: BulkServiceUpdateManyWithWhereWithoutServiceInput | BulkServiceUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: BulkServiceScalarWhereInput | BulkServiceScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ComplaintCreateWithoutServiceInput, ComplaintUncheckedCreateWithoutServiceInput> | ComplaintCreateWithoutServiceInput[] | ComplaintUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutServiceInput | ComplaintCreateOrConnectWithoutServiceInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutServiceInput | ComplaintUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ComplaintCreateManyServiceInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutServiceInput | ComplaintUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutServiceInput | ComplaintUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ParkingTransactionUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ParkingTransactionCreateWithoutServiceInput, ParkingTransactionUncheckedCreateWithoutServiceInput> | ParkingTransactionCreateWithoutServiceInput[] | ParkingTransactionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ParkingTransactionCreateOrConnectWithoutServiceInput | ParkingTransactionCreateOrConnectWithoutServiceInput[]
    upsert?: ParkingTransactionUpsertWithWhereUniqueWithoutServiceInput | ParkingTransactionUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ParkingTransactionCreateManyServiceInputEnvelope
    set?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    disconnect?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    delete?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    connect?: ParkingTransactionWhereUniqueInput | ParkingTransactionWhereUniqueInput[]
    update?: ParkingTransactionUpdateWithWhereUniqueWithoutServiceInput | ParkingTransactionUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ParkingTransactionUpdateManyWithWhereWithoutServiceInput | ParkingTransactionUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ParkingTransactionScalarWhereInput | ParkingTransactionScalarWhereInput[]
  }

  export type VasTransactionUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<VasTransactionCreateWithoutServiceInput, VasTransactionUncheckedCreateWithoutServiceInput> | VasTransactionCreateWithoutServiceInput[] | VasTransactionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: VasTransactionCreateOrConnectWithoutServiceInput | VasTransactionCreateOrConnectWithoutServiceInput[]
    upsert?: VasTransactionUpsertWithWhereUniqueWithoutServiceInput | VasTransactionUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: VasTransactionCreateManyServiceInputEnvelope
    set?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    disconnect?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    delete?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    connect?: VasTransactionWhereUniqueInput | VasTransactionWhereUniqueInput[]
    update?: VasTransactionUpdateWithWhereUniqueWithoutServiceInput | VasTransactionUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: VasTransactionUpdateManyWithWhereWithoutServiceInput | VasTransactionUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: VasTransactionScalarWhereInput | VasTransactionScalarWhereInput[]
  }

  export type ServiceCreateNestedOneWithoutVasServicesInput = {
    create?: XOR<ServiceCreateWithoutVasServicesInput, ServiceUncheckedCreateWithoutVasServicesInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutVasServicesInput
    connect?: ServiceWhereUniqueInput
  }

  export type ProviderCreateNestedOneWithoutVasServicesInput = {
    create?: XOR<ProviderCreateWithoutVasServicesInput, ProviderUncheckedCreateWithoutVasServicesInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutVasServicesInput
    connect?: ProviderWhereUniqueInput
  }

  export type ServiceUpdateOneRequiredWithoutVasServicesNestedInput = {
    create?: XOR<ServiceCreateWithoutVasServicesInput, ServiceUncheckedCreateWithoutVasServicesInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutVasServicesInput
    upsert?: ServiceUpsertWithoutVasServicesInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutVasServicesInput, ServiceUpdateWithoutVasServicesInput>, ServiceUncheckedUpdateWithoutVasServicesInput>
  }

  export type ProviderUpdateOneRequiredWithoutVasServicesNestedInput = {
    create?: XOR<ProviderCreateWithoutVasServicesInput, ProviderUncheckedCreateWithoutVasServicesInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutVasServicesInput
    upsert?: ProviderUpsertWithoutVasServicesInput
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutVasServicesInput, ProviderUpdateWithoutVasServicesInput>, ProviderUncheckedUpdateWithoutVasServicesInput>
  }

  export type ServiceCreateNestedOneWithoutBulkServicesInput = {
    create?: XOR<ServiceCreateWithoutBulkServicesInput, ServiceUncheckedCreateWithoutBulkServicesInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutBulkServicesInput
    connect?: ServiceWhereUniqueInput
  }

  export type ProviderCreateNestedOneWithoutBulkServicesInput = {
    create?: XOR<ProviderCreateWithoutBulkServicesInput, ProviderUncheckedCreateWithoutBulkServicesInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutBulkServicesInput
    connect?: ProviderWhereUniqueInput
  }

  export type LogEntryCreateNestedManyWithoutBulkServiceInput = {
    create?: XOR<LogEntryCreateWithoutBulkServiceInput, LogEntryUncheckedCreateWithoutBulkServiceInput> | LogEntryCreateWithoutBulkServiceInput[] | LogEntryUncheckedCreateWithoutBulkServiceInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutBulkServiceInput | LogEntryCreateOrConnectWithoutBulkServiceInput[]
    createMany?: LogEntryCreateManyBulkServiceInputEnvelope
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
  }

  export type LogEntryUncheckedCreateNestedManyWithoutBulkServiceInput = {
    create?: XOR<LogEntryCreateWithoutBulkServiceInput, LogEntryUncheckedCreateWithoutBulkServiceInput> | LogEntryCreateWithoutBulkServiceInput[] | LogEntryUncheckedCreateWithoutBulkServiceInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutBulkServiceInput | LogEntryCreateOrConnectWithoutBulkServiceInput[]
    createMany?: LogEntryCreateManyBulkServiceInputEnvelope
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
  }

  export type ServiceUpdateOneRequiredWithoutBulkServicesNestedInput = {
    create?: XOR<ServiceCreateWithoutBulkServicesInput, ServiceUncheckedCreateWithoutBulkServicesInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutBulkServicesInput
    upsert?: ServiceUpsertWithoutBulkServicesInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutBulkServicesInput, ServiceUpdateWithoutBulkServicesInput>, ServiceUncheckedUpdateWithoutBulkServicesInput>
  }

  export type ProviderUpdateOneRequiredWithoutBulkServicesNestedInput = {
    create?: XOR<ProviderCreateWithoutBulkServicesInput, ProviderUncheckedCreateWithoutBulkServicesInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutBulkServicesInput
    upsert?: ProviderUpsertWithoutBulkServicesInput
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutBulkServicesInput, ProviderUpdateWithoutBulkServicesInput>, ProviderUncheckedUpdateWithoutBulkServicesInput>
  }

  export type LogEntryUpdateManyWithoutBulkServiceNestedInput = {
    create?: XOR<LogEntryCreateWithoutBulkServiceInput, LogEntryUncheckedCreateWithoutBulkServiceInput> | LogEntryCreateWithoutBulkServiceInput[] | LogEntryUncheckedCreateWithoutBulkServiceInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutBulkServiceInput | LogEntryCreateOrConnectWithoutBulkServiceInput[]
    upsert?: LogEntryUpsertWithWhereUniqueWithoutBulkServiceInput | LogEntryUpsertWithWhereUniqueWithoutBulkServiceInput[]
    createMany?: LogEntryCreateManyBulkServiceInputEnvelope
    set?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    disconnect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    delete?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    update?: LogEntryUpdateWithWhereUniqueWithoutBulkServiceInput | LogEntryUpdateWithWhereUniqueWithoutBulkServiceInput[]
    updateMany?: LogEntryUpdateManyWithWhereWithoutBulkServiceInput | LogEntryUpdateManyWithWhereWithoutBulkServiceInput[]
    deleteMany?: LogEntryScalarWhereInput | LogEntryScalarWhereInput[]
  }

  export type LogEntryUncheckedUpdateManyWithoutBulkServiceNestedInput = {
    create?: XOR<LogEntryCreateWithoutBulkServiceInput, LogEntryUncheckedCreateWithoutBulkServiceInput> | LogEntryCreateWithoutBulkServiceInput[] | LogEntryUncheckedCreateWithoutBulkServiceInput[]
    connectOrCreate?: LogEntryCreateOrConnectWithoutBulkServiceInput | LogEntryCreateOrConnectWithoutBulkServiceInput[]
    upsert?: LogEntryUpsertWithWhereUniqueWithoutBulkServiceInput | LogEntryUpsertWithWhereUniqueWithoutBulkServiceInput[]
    createMany?: LogEntryCreateManyBulkServiceInputEnvelope
    set?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    disconnect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    delete?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    connect?: LogEntryWhereUniqueInput | LogEntryWhereUniqueInput[]
    update?: LogEntryUpdateWithWhereUniqueWithoutBulkServiceInput | LogEntryUpdateWithWhereUniqueWithoutBulkServiceInput[]
    updateMany?: LogEntryUpdateManyWithWhereWithoutBulkServiceInput | LogEntryUpdateManyWithWhereWithoutBulkServiceInput[]
    deleteMany?: LogEntryScalarWhereInput | LogEntryScalarWhereInput[]
  }

  export type ComplaintCreateNestedManyWithoutProductInput = {
    create?: XOR<ComplaintCreateWithoutProductInput, ComplaintUncheckedCreateWithoutProductInput> | ComplaintCreateWithoutProductInput[] | ComplaintUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutProductInput | ComplaintCreateOrConnectWithoutProductInput[]
    createMany?: ComplaintCreateManyProductInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ComplaintCreateWithoutProductInput, ComplaintUncheckedCreateWithoutProductInput> | ComplaintCreateWithoutProductInput[] | ComplaintUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutProductInput | ComplaintCreateOrConnectWithoutProductInput[]
    createMany?: ComplaintCreateManyProductInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ComplaintUpdateManyWithoutProductNestedInput = {
    create?: XOR<ComplaintCreateWithoutProductInput, ComplaintUncheckedCreateWithoutProductInput> | ComplaintCreateWithoutProductInput[] | ComplaintUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutProductInput | ComplaintCreateOrConnectWithoutProductInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutProductInput | ComplaintUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ComplaintCreateManyProductInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutProductInput | ComplaintUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutProductInput | ComplaintUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ComplaintCreateWithoutProductInput, ComplaintUncheckedCreateWithoutProductInput> | ComplaintCreateWithoutProductInput[] | ComplaintUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutProductInput | ComplaintCreateOrConnectWithoutProductInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutProductInput | ComplaintUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ComplaintCreateManyProductInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutProductInput | ComplaintUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutProductInput | ComplaintUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ServiceCreateNestedOneWithoutComplaintsInput = {
    create?: XOR<ServiceCreateWithoutComplaintsInput, ServiceUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutComplaintsInput
    connect?: ServiceWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutComplaintsInput = {
    create?: XOR<ProductCreateWithoutComplaintsInput, ProductUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutComplaintsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProviderCreateNestedOneWithoutComplaintsInput = {
    create?: XOR<ProviderCreateWithoutComplaintsInput, ProviderUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutComplaintsInput
    connect?: ProviderWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubmittedComplaintsInput = {
    create?: XOR<UserCreateWithoutSubmittedComplaintsInput, UserUncheckedCreateWithoutSubmittedComplaintsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmittedComplaintsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedComplaintsInput = {
    create?: XOR<UserCreateWithoutAssignedComplaintsInput, UserUncheckedCreateWithoutAssignedComplaintsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedComplaintsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutComplaintInput = {
    create?: XOR<CommentCreateWithoutComplaintInput, CommentUncheckedCreateWithoutComplaintInput> | CommentCreateWithoutComplaintInput[] | CommentUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutComplaintInput | CommentCreateOrConnectWithoutComplaintInput[]
    createMany?: CommentCreateManyComplaintInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type AttachmentCreateNestedManyWithoutComplaintInput = {
    create?: XOR<AttachmentCreateWithoutComplaintInput, AttachmentUncheckedCreateWithoutComplaintInput> | AttachmentCreateWithoutComplaintInput[] | AttachmentUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutComplaintInput | AttachmentCreateOrConnectWithoutComplaintInput[]
    createMany?: AttachmentCreateManyComplaintInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type HumanitarianOrgCreateNestedOneWithoutComplaintsInput = {
    create?: XOR<HumanitarianOrgCreateWithoutComplaintsInput, HumanitarianOrgUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: HumanitarianOrgCreateOrConnectWithoutComplaintsInput
    connect?: HumanitarianOrgWhereUniqueInput
  }

  export type ParkingServiceCreateNestedOneWithoutComplaintsInput = {
    create?: XOR<ParkingServiceCreateWithoutComplaintsInput, ParkingServiceUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: ParkingServiceCreateOrConnectWithoutComplaintsInput
    connect?: ParkingServiceWhereUniqueInput
  }

  export type ComplaintStatusHistoryCreateNestedManyWithoutComplaintInput = {
    create?: XOR<ComplaintStatusHistoryCreateWithoutComplaintInput, ComplaintStatusHistoryUncheckedCreateWithoutComplaintInput> | ComplaintStatusHistoryCreateWithoutComplaintInput[] | ComplaintStatusHistoryUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: ComplaintStatusHistoryCreateOrConnectWithoutComplaintInput | ComplaintStatusHistoryCreateOrConnectWithoutComplaintInput[]
    createMany?: ComplaintStatusHistoryCreateManyComplaintInputEnvelope
    connect?: ComplaintStatusHistoryWhereUniqueInput | ComplaintStatusHistoryWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutComplaintInput = {
    create?: XOR<CommentCreateWithoutComplaintInput, CommentUncheckedCreateWithoutComplaintInput> | CommentCreateWithoutComplaintInput[] | CommentUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutComplaintInput | CommentCreateOrConnectWithoutComplaintInput[]
    createMany?: CommentCreateManyComplaintInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type AttachmentUncheckedCreateNestedManyWithoutComplaintInput = {
    create?: XOR<AttachmentCreateWithoutComplaintInput, AttachmentUncheckedCreateWithoutComplaintInput> | AttachmentCreateWithoutComplaintInput[] | AttachmentUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutComplaintInput | AttachmentCreateOrConnectWithoutComplaintInput[]
    createMany?: AttachmentCreateManyComplaintInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type ComplaintStatusHistoryUncheckedCreateNestedManyWithoutComplaintInput = {
    create?: XOR<ComplaintStatusHistoryCreateWithoutComplaintInput, ComplaintStatusHistoryUncheckedCreateWithoutComplaintInput> | ComplaintStatusHistoryCreateWithoutComplaintInput[] | ComplaintStatusHistoryUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: ComplaintStatusHistoryCreateOrConnectWithoutComplaintInput | ComplaintStatusHistoryCreateOrConnectWithoutComplaintInput[]
    createMany?: ComplaintStatusHistoryCreateManyComplaintInputEnvelope
    connect?: ComplaintStatusHistoryWhereUniqueInput | ComplaintStatusHistoryWhereUniqueInput[]
  }

  export type EnumComplaintStatusFieldUpdateOperationsInput = {
    set?: $Enums.ComplaintStatus
  }

  export type ServiceUpdateOneWithoutComplaintsNestedInput = {
    create?: XOR<ServiceCreateWithoutComplaintsInput, ServiceUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutComplaintsInput
    upsert?: ServiceUpsertWithoutComplaintsInput
    disconnect?: ServiceWhereInput | boolean
    delete?: ServiceWhereInput | boolean
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutComplaintsInput, ServiceUpdateWithoutComplaintsInput>, ServiceUncheckedUpdateWithoutComplaintsInput>
  }

  export type ProductUpdateOneWithoutComplaintsNestedInput = {
    create?: XOR<ProductCreateWithoutComplaintsInput, ProductUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutComplaintsInput
    upsert?: ProductUpsertWithoutComplaintsInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutComplaintsInput, ProductUpdateWithoutComplaintsInput>, ProductUncheckedUpdateWithoutComplaintsInput>
  }

  export type ProviderUpdateOneWithoutComplaintsNestedInput = {
    create?: XOR<ProviderCreateWithoutComplaintsInput, ProviderUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutComplaintsInput
    upsert?: ProviderUpsertWithoutComplaintsInput
    disconnect?: ProviderWhereInput | boolean
    delete?: ProviderWhereInput | boolean
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutComplaintsInput, ProviderUpdateWithoutComplaintsInput>, ProviderUncheckedUpdateWithoutComplaintsInput>
  }

  export type UserUpdateOneRequiredWithoutSubmittedComplaintsNestedInput = {
    create?: XOR<UserCreateWithoutSubmittedComplaintsInput, UserUncheckedCreateWithoutSubmittedComplaintsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmittedComplaintsInput
    upsert?: UserUpsertWithoutSubmittedComplaintsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmittedComplaintsInput, UserUpdateWithoutSubmittedComplaintsInput>, UserUncheckedUpdateWithoutSubmittedComplaintsInput>
  }

  export type UserUpdateOneWithoutAssignedComplaintsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedComplaintsInput, UserUncheckedCreateWithoutAssignedComplaintsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedComplaintsInput
    upsert?: UserUpsertWithoutAssignedComplaintsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedComplaintsInput, UserUpdateWithoutAssignedComplaintsInput>, UserUncheckedUpdateWithoutAssignedComplaintsInput>
  }

  export type CommentUpdateManyWithoutComplaintNestedInput = {
    create?: XOR<CommentCreateWithoutComplaintInput, CommentUncheckedCreateWithoutComplaintInput> | CommentCreateWithoutComplaintInput[] | CommentUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutComplaintInput | CommentCreateOrConnectWithoutComplaintInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutComplaintInput | CommentUpsertWithWhereUniqueWithoutComplaintInput[]
    createMany?: CommentCreateManyComplaintInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutComplaintInput | CommentUpdateWithWhereUniqueWithoutComplaintInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutComplaintInput | CommentUpdateManyWithWhereWithoutComplaintInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type AttachmentUpdateManyWithoutComplaintNestedInput = {
    create?: XOR<AttachmentCreateWithoutComplaintInput, AttachmentUncheckedCreateWithoutComplaintInput> | AttachmentCreateWithoutComplaintInput[] | AttachmentUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutComplaintInput | AttachmentCreateOrConnectWithoutComplaintInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutComplaintInput | AttachmentUpsertWithWhereUniqueWithoutComplaintInput[]
    createMany?: AttachmentCreateManyComplaintInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutComplaintInput | AttachmentUpdateWithWhereUniqueWithoutComplaintInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutComplaintInput | AttachmentUpdateManyWithWhereWithoutComplaintInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type HumanitarianOrgUpdateOneWithoutComplaintsNestedInput = {
    create?: XOR<HumanitarianOrgCreateWithoutComplaintsInput, HumanitarianOrgUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: HumanitarianOrgCreateOrConnectWithoutComplaintsInput
    upsert?: HumanitarianOrgUpsertWithoutComplaintsInput
    disconnect?: HumanitarianOrgWhereInput | boolean
    delete?: HumanitarianOrgWhereInput | boolean
    connect?: HumanitarianOrgWhereUniqueInput
    update?: XOR<XOR<HumanitarianOrgUpdateToOneWithWhereWithoutComplaintsInput, HumanitarianOrgUpdateWithoutComplaintsInput>, HumanitarianOrgUncheckedUpdateWithoutComplaintsInput>
  }

  export type ParkingServiceUpdateOneWithoutComplaintsNestedInput = {
    create?: XOR<ParkingServiceCreateWithoutComplaintsInput, ParkingServiceUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: ParkingServiceCreateOrConnectWithoutComplaintsInput
    upsert?: ParkingServiceUpsertWithoutComplaintsInput
    disconnect?: ParkingServiceWhereInput | boolean
    delete?: ParkingServiceWhereInput | boolean
    connect?: ParkingServiceWhereUniqueInput
    update?: XOR<XOR<ParkingServiceUpdateToOneWithWhereWithoutComplaintsInput, ParkingServiceUpdateWithoutComplaintsInput>, ParkingServiceUncheckedUpdateWithoutComplaintsInput>
  }

  export type ComplaintStatusHistoryUpdateManyWithoutComplaintNestedInput = {
    create?: XOR<ComplaintStatusHistoryCreateWithoutComplaintInput, ComplaintStatusHistoryUncheckedCreateWithoutComplaintInput> | ComplaintStatusHistoryCreateWithoutComplaintInput[] | ComplaintStatusHistoryUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: ComplaintStatusHistoryCreateOrConnectWithoutComplaintInput | ComplaintStatusHistoryCreateOrConnectWithoutComplaintInput[]
    upsert?: ComplaintStatusHistoryUpsertWithWhereUniqueWithoutComplaintInput | ComplaintStatusHistoryUpsertWithWhereUniqueWithoutComplaintInput[]
    createMany?: ComplaintStatusHistoryCreateManyComplaintInputEnvelope
    set?: ComplaintStatusHistoryWhereUniqueInput | ComplaintStatusHistoryWhereUniqueInput[]
    disconnect?: ComplaintStatusHistoryWhereUniqueInput | ComplaintStatusHistoryWhereUniqueInput[]
    delete?: ComplaintStatusHistoryWhereUniqueInput | ComplaintStatusHistoryWhereUniqueInput[]
    connect?: ComplaintStatusHistoryWhereUniqueInput | ComplaintStatusHistoryWhereUniqueInput[]
    update?: ComplaintStatusHistoryUpdateWithWhereUniqueWithoutComplaintInput | ComplaintStatusHistoryUpdateWithWhereUniqueWithoutComplaintInput[]
    updateMany?: ComplaintStatusHistoryUpdateManyWithWhereWithoutComplaintInput | ComplaintStatusHistoryUpdateManyWithWhereWithoutComplaintInput[]
    deleteMany?: ComplaintStatusHistoryScalarWhereInput | ComplaintStatusHistoryScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutComplaintNestedInput = {
    create?: XOR<CommentCreateWithoutComplaintInput, CommentUncheckedCreateWithoutComplaintInput> | CommentCreateWithoutComplaintInput[] | CommentUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutComplaintInput | CommentCreateOrConnectWithoutComplaintInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutComplaintInput | CommentUpsertWithWhereUniqueWithoutComplaintInput[]
    createMany?: CommentCreateManyComplaintInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutComplaintInput | CommentUpdateWithWhereUniqueWithoutComplaintInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutComplaintInput | CommentUpdateManyWithWhereWithoutComplaintInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type AttachmentUncheckedUpdateManyWithoutComplaintNestedInput = {
    create?: XOR<AttachmentCreateWithoutComplaintInput, AttachmentUncheckedCreateWithoutComplaintInput> | AttachmentCreateWithoutComplaintInput[] | AttachmentUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutComplaintInput | AttachmentCreateOrConnectWithoutComplaintInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutComplaintInput | AttachmentUpsertWithWhereUniqueWithoutComplaintInput[]
    createMany?: AttachmentCreateManyComplaintInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutComplaintInput | AttachmentUpdateWithWhereUniqueWithoutComplaintInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutComplaintInput | AttachmentUpdateManyWithWhereWithoutComplaintInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintNestedInput = {
    create?: XOR<ComplaintStatusHistoryCreateWithoutComplaintInput, ComplaintStatusHistoryUncheckedCreateWithoutComplaintInput> | ComplaintStatusHistoryCreateWithoutComplaintInput[] | ComplaintStatusHistoryUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: ComplaintStatusHistoryCreateOrConnectWithoutComplaintInput | ComplaintStatusHistoryCreateOrConnectWithoutComplaintInput[]
    upsert?: ComplaintStatusHistoryUpsertWithWhereUniqueWithoutComplaintInput | ComplaintStatusHistoryUpsertWithWhereUniqueWithoutComplaintInput[]
    createMany?: ComplaintStatusHistoryCreateManyComplaintInputEnvelope
    set?: ComplaintStatusHistoryWhereUniqueInput | ComplaintStatusHistoryWhereUniqueInput[]
    disconnect?: ComplaintStatusHistoryWhereUniqueInput | ComplaintStatusHistoryWhereUniqueInput[]
    delete?: ComplaintStatusHistoryWhereUniqueInput | ComplaintStatusHistoryWhereUniqueInput[]
    connect?: ComplaintStatusHistoryWhereUniqueInput | ComplaintStatusHistoryWhereUniqueInput[]
    update?: ComplaintStatusHistoryUpdateWithWhereUniqueWithoutComplaintInput | ComplaintStatusHistoryUpdateWithWhereUniqueWithoutComplaintInput[]
    updateMany?: ComplaintStatusHistoryUpdateManyWithWhereWithoutComplaintInput | ComplaintStatusHistoryUpdateManyWithWhereWithoutComplaintInput[]
    deleteMany?: ComplaintStatusHistoryScalarWhereInput | ComplaintStatusHistoryScalarWhereInput[]
  }

  export type ComplaintCreateNestedOneWithoutStatusHistoryInput = {
    create?: XOR<ComplaintCreateWithoutStatusHistoryInput, ComplaintUncheckedCreateWithoutStatusHistoryInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutStatusHistoryInput
    connect?: ComplaintWhereUniqueInput
  }

  export type NullableEnumComplaintStatusFieldUpdateOperationsInput = {
    set?: $Enums.ComplaintStatus | null
  }

  export type ComplaintUpdateOneRequiredWithoutStatusHistoryNestedInput = {
    create?: XOR<ComplaintCreateWithoutStatusHistoryInput, ComplaintUncheckedCreateWithoutStatusHistoryInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutStatusHistoryInput
    upsert?: ComplaintUpsertWithoutStatusHistoryInput
    connect?: ComplaintWhereUniqueInput
    update?: XOR<XOR<ComplaintUpdateToOneWithWhereWithoutStatusHistoryInput, ComplaintUpdateWithoutStatusHistoryInput>, ComplaintUncheckedUpdateWithoutStatusHistoryInput>
  }

  export type ComplaintCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ComplaintCreateWithoutCommentsInput, ComplaintUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutCommentsInput
    connect?: ComplaintWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type ComplaintUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<ComplaintCreateWithoutCommentsInput, ComplaintUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutCommentsInput
    upsert?: ComplaintUpsertWithoutCommentsInput
    connect?: ComplaintWhereUniqueInput
    update?: XOR<XOR<ComplaintUpdateToOneWithWhereWithoutCommentsInput, ComplaintUpdateWithoutCommentsInput>, ComplaintUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type ComplaintCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<ComplaintCreateWithoutAttachmentsInput, ComplaintUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutAttachmentsInput
    connect?: ComplaintWhereUniqueInput
  }

  export type ComplaintUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<ComplaintCreateWithoutAttachmentsInput, ComplaintUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutAttachmentsInput
    upsert?: ComplaintUpsertWithoutAttachmentsInput
    connect?: ComplaintWhereUniqueInput
    update?: XOR<XOR<ComplaintUpdateToOneWithWhereWithoutAttachmentsInput, ComplaintUpdateWithoutAttachmentsInput>, ComplaintUncheckedUpdateWithoutAttachmentsInput>
  }

  export type ProviderCreateNestedOneWithoutLogEntriesInput = {
    create?: XOR<ProviderCreateWithoutLogEntriesInput, ProviderUncheckedCreateWithoutLogEntriesInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutLogEntriesInput
    connect?: ProviderWhereUniqueInput
  }

  export type ParkingServiceCreateNestedOneWithoutLogEntriesInput = {
    create?: XOR<ParkingServiceCreateWithoutLogEntriesInput, ParkingServiceUncheckedCreateWithoutLogEntriesInput>
    connectOrCreate?: ParkingServiceCreateOrConnectWithoutLogEntriesInput
    connect?: ParkingServiceWhereUniqueInput
  }

  export type BulkServiceCreateNestedOneWithoutLogEntriesInput = {
    create?: XOR<BulkServiceCreateWithoutLogEntriesInput, BulkServiceUncheckedCreateWithoutLogEntriesInput>
    connectOrCreate?: BulkServiceCreateOrConnectWithoutLogEntriesInput
    connect?: BulkServiceWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLogEntriesInput = {
    create?: XOR<UserCreateWithoutLogEntriesInput, UserUncheckedCreateWithoutLogEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogEntriesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedLogsInput = {
    create?: XOR<UserCreateWithoutUpdatedLogsInput, UserUncheckedCreateWithoutUpdatedLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedLogsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumLogEntityTypeFieldUpdateOperationsInput = {
    set?: $Enums.LogEntityType
  }

  export type EnumLogActionTypeFieldUpdateOperationsInput = {
    set?: $Enums.LogActionType
  }

  export type EnumLogStatusFieldUpdateOperationsInput = {
    set?: $Enums.LogStatus
  }

  export type ProviderUpdateOneWithoutLogEntriesNestedInput = {
    create?: XOR<ProviderCreateWithoutLogEntriesInput, ProviderUncheckedCreateWithoutLogEntriesInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutLogEntriesInput
    upsert?: ProviderUpsertWithoutLogEntriesInput
    disconnect?: ProviderWhereInput | boolean
    delete?: ProviderWhereInput | boolean
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutLogEntriesInput, ProviderUpdateWithoutLogEntriesInput>, ProviderUncheckedUpdateWithoutLogEntriesInput>
  }

  export type ParkingServiceUpdateOneWithoutLogEntriesNestedInput = {
    create?: XOR<ParkingServiceCreateWithoutLogEntriesInput, ParkingServiceUncheckedCreateWithoutLogEntriesInput>
    connectOrCreate?: ParkingServiceCreateOrConnectWithoutLogEntriesInput
    upsert?: ParkingServiceUpsertWithoutLogEntriesInput
    disconnect?: ParkingServiceWhereInput | boolean
    delete?: ParkingServiceWhereInput | boolean
    connect?: ParkingServiceWhereUniqueInput
    update?: XOR<XOR<ParkingServiceUpdateToOneWithWhereWithoutLogEntriesInput, ParkingServiceUpdateWithoutLogEntriesInput>, ParkingServiceUncheckedUpdateWithoutLogEntriesInput>
  }

  export type BulkServiceUpdateOneWithoutLogEntriesNestedInput = {
    create?: XOR<BulkServiceCreateWithoutLogEntriesInput, BulkServiceUncheckedCreateWithoutLogEntriesInput>
    connectOrCreate?: BulkServiceCreateOrConnectWithoutLogEntriesInput
    upsert?: BulkServiceUpsertWithoutLogEntriesInput
    disconnect?: BulkServiceWhereInput | boolean
    delete?: BulkServiceWhereInput | boolean
    connect?: BulkServiceWhereUniqueInput
    update?: XOR<XOR<BulkServiceUpdateToOneWithWhereWithoutLogEntriesInput, BulkServiceUpdateWithoutLogEntriesInput>, BulkServiceUncheckedUpdateWithoutLogEntriesInput>
  }

  export type UserUpdateOneRequiredWithoutLogEntriesNestedInput = {
    create?: XOR<UserCreateWithoutLogEntriesInput, UserUncheckedCreateWithoutLogEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogEntriesInput
    upsert?: UserUpsertWithoutLogEntriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLogEntriesInput, UserUpdateWithoutLogEntriesInput>, UserUncheckedUpdateWithoutLogEntriesInput>
  }

  export type UserUpdateOneWithoutUpdatedLogsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedLogsInput, UserUncheckedCreateWithoutUpdatedLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedLogsInput
    upsert?: UserUpsertWithoutUpdatedLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedLogsInput, UserUpdateWithoutUpdatedLogsInput>, UserUncheckedUpdateWithoutUpdatedLogsInput>
  }

  export type UserCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumLogSeverityFieldUpdateOperationsInput = {
    set?: $Enums.LogSeverity
  }

  export type UserUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    upsert?: UserUpsertWithoutActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivitiesInput, UserUpdateWithoutActivitiesInput>, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type EnumReportFrequencyFieldUpdateOperationsInput = {
    set?: $Enums.ReportFrequency
  }

  export type UserCreateNestedOneWithoutNotificationPreferencesInput = {
    create?: XOR<UserCreateWithoutNotificationPreferencesInput, UserUncheckedCreateWithoutNotificationPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutNotificationPreferencesInput, UserUncheckedCreateWithoutNotificationPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationPreferencesInput
    upsert?: UserUpsertWithoutNotificationPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationPreferencesInput, UserUpdateWithoutNotificationPreferencesInput>, UserUncheckedUpdateWithoutNotificationPreferencesInput>
  }

  export type HumanitarianOrgCreateNestedOneWithoutReportFilesInput = {
    create?: XOR<HumanitarianOrgCreateWithoutReportFilesInput, HumanitarianOrgUncheckedCreateWithoutReportFilesInput>
    connectOrCreate?: HumanitarianOrgCreateOrConnectWithoutReportFilesInput
    connect?: HumanitarianOrgWhereUniqueInput
  }

  export type HumanitarianOrgUpdateOneRequiredWithoutReportFilesNestedInput = {
    create?: XOR<HumanitarianOrgCreateWithoutReportFilesInput, HumanitarianOrgUncheckedCreateWithoutReportFilesInput>
    connectOrCreate?: HumanitarianOrgCreateOrConnectWithoutReportFilesInput
    upsert?: HumanitarianOrgUpsertWithoutReportFilesInput
    connect?: HumanitarianOrgWhereUniqueInput
    update?: XOR<XOR<HumanitarianOrgUpdateToOneWithWhereWithoutReportFilesInput, HumanitarianOrgUpdateWithoutReportFilesInput>, HumanitarianOrgUncheckedUpdateWithoutReportFilesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumContractTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContractTypeFilter<$PrismaModel> | $Enums.ContractType
  }

  export type NestedEnumContractStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusFilter<$PrismaModel> | $Enums.ContractStatus
  }

  export type NestedEnumContractTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContractTypeWithAggregatesFilter<$PrismaModel> | $Enums.ContractType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractTypeFilter<$PrismaModel>
    _max?: NestedEnumContractTypeFilter<$PrismaModel>
  }

  export type NestedEnumContractStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContractStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractStatusFilter<$PrismaModel>
    _max?: NestedEnumContractStatusFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumContractRenewalSubStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractRenewalSubStatus | EnumContractRenewalSubStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractRenewalSubStatus[] | ListEnumContractRenewalSubStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractRenewalSubStatus[] | ListEnumContractRenewalSubStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractRenewalSubStatusFilter<$PrismaModel> | $Enums.ContractRenewalSubStatus
  }

  export type NestedEnumContractRenewalSubStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractRenewalSubStatus | EnumContractRenewalSubStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractRenewalSubStatus[] | ListEnumContractRenewalSubStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractRenewalSubStatus[] | ListEnumContractRenewalSubStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractRenewalSubStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContractRenewalSubStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractRenewalSubStatusFilter<$PrismaModel>
    _max?: NestedEnumContractRenewalSubStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumHumanitarianRenewalSubStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HumanitarianRenewalSubStatus | EnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HumanitarianRenewalSubStatus[] | ListEnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HumanitarianRenewalSubStatus[] | ListEnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHumanitarianRenewalSubStatusFilter<$PrismaModel> | $Enums.HumanitarianRenewalSubStatus
  }

  export type NestedEnumHumanitarianRenewalSubStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HumanitarianRenewalSubStatus | EnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HumanitarianRenewalSubStatus[] | ListEnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HumanitarianRenewalSubStatus[] | ListEnumHumanitarianRenewalSubStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHumanitarianRenewalSubStatusWithAggregatesFilter<$PrismaModel> | $Enums.HumanitarianRenewalSubStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHumanitarianRenewalSubStatusFilter<$PrismaModel>
    _max?: NestedEnumHumanitarianRenewalSubStatusFilter<$PrismaModel>
  }

  export type NestedEnumLogBlackTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LogBlackType | EnumLogBlackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogBlackType[] | ListEnumLogBlackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogBlackType[] | ListEnumLogBlackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogBlackTypeFilter<$PrismaModel> | $Enums.LogBlackType
  }

  export type NestedEnumLogBlackTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogBlackType | EnumLogBlackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogBlackType[] | ListEnumLogBlackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogBlackType[] | ListEnumLogBlackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogBlackTypeWithAggregatesFilter<$PrismaModel> | $Enums.LogBlackType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogBlackTypeFilter<$PrismaModel>
    _max?: NestedEnumLogBlackTypeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumServiceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceTypeFilter<$PrismaModel> | $Enums.ServiceType
  }

  export type NestedEnumBillingTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingType | EnumBillingTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBillingTypeNullableFilter<$PrismaModel> | $Enums.BillingType | null
  }

  export type NestedEnumServiceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceTypeWithAggregatesFilter<$PrismaModel> | $Enums.ServiceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServiceTypeFilter<$PrismaModel>
    _max?: NestedEnumServiceTypeFilter<$PrismaModel>
  }

  export type NestedEnumBillingTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingType | EnumBillingTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BillingType[] | ListEnumBillingTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBillingTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BillingType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBillingTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumBillingTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumComplaintStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintStatusFilter<$PrismaModel> | $Enums.ComplaintStatus
  }

  export type NestedEnumComplaintStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplaintStatusFilter<$PrismaModel>
    _max?: NestedEnumComplaintStatusFilter<$PrismaModel>
  }

  export type NestedEnumComplaintStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumComplaintStatusNullableFilter<$PrismaModel> | $Enums.ComplaintStatus | null
  }

  export type NestedEnumComplaintStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumComplaintStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumComplaintStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumComplaintStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumLogEntityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LogEntityType | EnumLogEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogEntityType[] | ListEnumLogEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogEntityType[] | ListEnumLogEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogEntityTypeFilter<$PrismaModel> | $Enums.LogEntityType
  }

  export type NestedEnumLogActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LogActionType | EnumLogActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogActionType[] | ListEnumLogActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogActionType[] | ListEnumLogActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogActionTypeFilter<$PrismaModel> | $Enums.LogActionType
  }

  export type NestedEnumLogStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LogStatus | EnumLogStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LogStatus[] | ListEnumLogStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogStatus[] | ListEnumLogStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLogStatusFilter<$PrismaModel> | $Enums.LogStatus
  }

  export type NestedEnumLogEntityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogEntityType | EnumLogEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogEntityType[] | ListEnumLogEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogEntityType[] | ListEnumLogEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogEntityTypeWithAggregatesFilter<$PrismaModel> | $Enums.LogEntityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogEntityTypeFilter<$PrismaModel>
    _max?: NestedEnumLogEntityTypeFilter<$PrismaModel>
  }

  export type NestedEnumLogActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogActionType | EnumLogActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogActionType[] | ListEnumLogActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogActionType[] | ListEnumLogActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.LogActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogActionTypeFilter<$PrismaModel>
    _max?: NestedEnumLogActionTypeFilter<$PrismaModel>
  }

  export type NestedEnumLogStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogStatus | EnumLogStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LogStatus[] | ListEnumLogStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogStatus[] | ListEnumLogStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLogStatusWithAggregatesFilter<$PrismaModel> | $Enums.LogStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogStatusFilter<$PrismaModel>
    _max?: NestedEnumLogStatusFilter<$PrismaModel>
  }

  export type NestedEnumLogSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.LogSeverity | EnumLogSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.LogSeverity[] | ListEnumLogSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogSeverity[] | ListEnumLogSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumLogSeverityFilter<$PrismaModel> | $Enums.LogSeverity
  }

  export type NestedEnumLogSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogSeverity | EnumLogSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.LogSeverity[] | ListEnumLogSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogSeverity[] | ListEnumLogSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumLogSeverityWithAggregatesFilter<$PrismaModel> | $Enums.LogSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogSeverityFilter<$PrismaModel>
    _max?: NestedEnumLogSeverityFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumReportFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportFrequency | EnumReportFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.ReportFrequency[] | ListEnumReportFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportFrequency[] | ListEnumReportFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumReportFrequencyFilter<$PrismaModel> | $Enums.ReportFrequency
  }

  export type NestedEnumReportFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportFrequency | EnumReportFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.ReportFrequency[] | ListEnumReportFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportFrequency[] | ListEnumReportFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumReportFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.ReportFrequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportFrequencyFilter<$PrismaModel>
    _max?: NestedEnumReportFrequencyFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserCreateWithoutTwoFactorConfirmationInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutTwoFactorConfirmationInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutTwoFactorConfirmationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTwoFactorConfirmationInput, UserUncheckedCreateWithoutTwoFactorConfirmationInput>
  }

  export type UserUpsertWithoutTwoFactorConfirmationInput = {
    update: XOR<UserUpdateWithoutTwoFactorConfirmationInput, UserUncheckedUpdateWithoutTwoFactorConfirmationInput>
    create: XOR<UserCreateWithoutTwoFactorConfirmationInput, UserUncheckedCreateWithoutTwoFactorConfirmationInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTwoFactorConfirmationInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTwoFactorConfirmationInput, UserUncheckedUpdateWithoutTwoFactorConfirmationInput>
  }

  export type UserUpdateWithoutTwoFactorConfirmationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTwoFactorConfirmationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TwoFactorConfirmationCreateWithoutUserInput = {
    id?: string
  }

  export type TwoFactorConfirmationUncheckedCreateWithoutUserInput = {
    id?: string
  }

  export type TwoFactorConfirmationCreateOrConnectWithoutUserInput = {
    where: TwoFactorConfirmationWhereUniqueInput
    create: XOR<TwoFactorConfirmationCreateWithoutUserInput, TwoFactorConfirmationUncheckedCreateWithoutUserInput>
  }

  export type ContractCreateWithoutCreatedByInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutContractsInput
    operator?: OperatorCreateNestedOneWithoutContractsInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutContractsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutContractsInput
    services?: ServiceContractCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalCreateNestedManyWithoutContractInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedContractsInput
    reminders?: ContractReminderCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastModifiedById?: string | null
    services?: ServiceContractUncheckedCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentUncheckedCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalUncheckedCreateNestedManyWithoutContractInput
    reminders?: ContractReminderUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutCreatedByInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutCreatedByInput, ContractUncheckedCreateWithoutCreatedByInput>
  }

  export type ContractCreateManyCreatedByInputEnvelope = {
    data: ContractCreateManyCreatedByInput | ContractCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ContractCreateWithoutLastModifiedByInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutContractsInput
    operator?: OperatorCreateNestedOneWithoutContractsInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutContractsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutContractsInput
    services?: ServiceContractCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalCreateNestedManyWithoutContractInput
    createdBy: UserCreateNestedOneWithoutCreatedContractsInput
    reminders?: ContractReminderCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutLastModifiedByInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    services?: ServiceContractUncheckedCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentUncheckedCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalUncheckedCreateNestedManyWithoutContractInput
    reminders?: ContractReminderUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutLastModifiedByInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutLastModifiedByInput, ContractUncheckedCreateWithoutLastModifiedByInput>
  }

  export type ContractCreateManyLastModifiedByInputEnvelope = {
    data: ContractCreateManyLastModifiedByInput | ContractCreateManyLastModifiedByInput[]
    skipDuplicates?: boolean
  }

  export type ContractAttachmentCreateWithoutUploadedByInput = {
    id?: string
    name: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
    contract: ContractCreateNestedOneWithoutAttachmentsInput
  }

  export type ContractAttachmentUncheckedCreateWithoutUploadedByInput = {
    id?: string
    contractId: string
    name: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
  }

  export type ContractAttachmentCreateOrConnectWithoutUploadedByInput = {
    where: ContractAttachmentWhereUniqueInput
    create: XOR<ContractAttachmentCreateWithoutUploadedByInput, ContractAttachmentUncheckedCreateWithoutUploadedByInput>
  }

  export type ContractAttachmentCreateManyUploadedByInputEnvelope = {
    data: ContractAttachmentCreateManyUploadedByInput | ContractAttachmentCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type ContractReminderCreateWithoutAcknowledgedByInput = {
    id?: string
    reminderDate: Date | string
    reminderType: string
    isAcknowledged?: boolean
    createdAt?: Date | string
    contract: ContractCreateNestedOneWithoutRemindersInput
  }

  export type ContractReminderUncheckedCreateWithoutAcknowledgedByInput = {
    id?: string
    contractId: string
    reminderDate: Date | string
    reminderType: string
    isAcknowledged?: boolean
    createdAt?: Date | string
  }

  export type ContractReminderCreateOrConnectWithoutAcknowledgedByInput = {
    where: ContractReminderWhereUniqueInput
    create: XOR<ContractReminderCreateWithoutAcknowledgedByInput, ContractReminderUncheckedCreateWithoutAcknowledgedByInput>
  }

  export type ContractReminderCreateManyAcknowledgedByInputEnvelope = {
    data: ContractReminderCreateManyAcknowledgedByInput | ContractReminderCreateManyAcknowledgedByInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutSubmittedByInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    service?: ServiceCreateNestedOneWithoutComplaintsInput
    product?: ProductCreateNestedOneWithoutComplaintsInput
    provider?: ProviderCreateNestedOneWithoutComplaintsInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedComplaintsInput
    comments?: CommentCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentCreateNestedManyWithoutComplaintInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutComplaintsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutComplaintsInput
    statusHistory?: ComplaintStatusHistoryCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutSubmittedByInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutComplaintInput
    statusHistory?: ComplaintStatusHistoryUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutSubmittedByInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutSubmittedByInput, ComplaintUncheckedCreateWithoutSubmittedByInput>
  }

  export type ComplaintCreateManySubmittedByInputEnvelope = {
    data: ComplaintCreateManySubmittedByInput | ComplaintCreateManySubmittedByInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutAssignedAgentInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    service?: ServiceCreateNestedOneWithoutComplaintsInput
    product?: ProductCreateNestedOneWithoutComplaintsInput
    provider?: ProviderCreateNestedOneWithoutComplaintsInput
    submittedBy: UserCreateNestedOneWithoutSubmittedComplaintsInput
    comments?: CommentCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentCreateNestedManyWithoutComplaintInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutComplaintsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutComplaintsInput
    statusHistory?: ComplaintStatusHistoryCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutAssignedAgentInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutComplaintInput
    statusHistory?: ComplaintStatusHistoryUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutAssignedAgentInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutAssignedAgentInput, ComplaintUncheckedCreateWithoutAssignedAgentInput>
  }

  export type ComplaintCreateManyAssignedAgentInputEnvelope = {
    data: ComplaintCreateManyAssignedAgentInput | ComplaintCreateManyAssignedAgentInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isInternal?: boolean
    complaint: ComplaintCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: string
    text: string
    complaintId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isInternal?: boolean
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ActivityLogCreateWithoutUserInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    details?: string | null
    severity?: $Enums.LogSeverity
    createdAt?: Date | string
  }

  export type ActivityLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    details?: string | null
    severity?: $Enums.LogSeverity
    createdAt?: Date | string
  }

  export type ActivityLogCreateOrConnectWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    create: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput>
  }

  export type ActivityLogCreateManyUserInputEnvelope = {
    data: ActivityLogCreateManyUserInput | ActivityLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    entityType?: string | null
    entityId?: string | null
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    entityType?: string | null
    entityId?: string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationPreferenceCreateWithoutUserInput = {
    id?: string
    preferences: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationPreferenceUncheckedCreateWithoutUserInput = {
    id?: string
    preferences: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationPreferenceCreateOrConnectWithoutUserInput = {
    where: NotificationPreferenceWhereUniqueInput
    create: XOR<NotificationPreferenceCreateWithoutUserInput, NotificationPreferenceUncheckedCreateWithoutUserInput>
  }

  export type HumanitarianContractRenewalCreateWithoutCreatedByInput = {
    id?: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: ContractCreateNestedOneWithoutHumanitarianRenewalsInput
    humanitarianOrg: HumanitarianOrgCreateNestedOneWithoutRenewalsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedHumanitarianRenewalsInput
  }

  export type HumanitarianContractRenewalUncheckedCreateWithoutCreatedByInput = {
    id?: string
    contractId: string
    humanitarianOrgId: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastModifiedById?: string | null
  }

  export type HumanitarianContractRenewalCreateOrConnectWithoutCreatedByInput = {
    where: HumanitarianContractRenewalWhereUniqueInput
    create: XOR<HumanitarianContractRenewalCreateWithoutCreatedByInput, HumanitarianContractRenewalUncheckedCreateWithoutCreatedByInput>
  }

  export type HumanitarianContractRenewalCreateManyCreatedByInputEnvelope = {
    data: HumanitarianContractRenewalCreateManyCreatedByInput | HumanitarianContractRenewalCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type HumanitarianContractRenewalCreateWithoutLastModifiedByInput = {
    id?: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: ContractCreateNestedOneWithoutHumanitarianRenewalsInput
    humanitarianOrg: HumanitarianOrgCreateNestedOneWithoutRenewalsInput
    createdBy: UserCreateNestedOneWithoutCreatedHumanitarianRenewalsInput
  }

  export type HumanitarianContractRenewalUncheckedCreateWithoutLastModifiedByInput = {
    id?: string
    contractId: string
    humanitarianOrgId: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type HumanitarianContractRenewalCreateOrConnectWithoutLastModifiedByInput = {
    where: HumanitarianContractRenewalWhereUniqueInput
    create: XOR<HumanitarianContractRenewalCreateWithoutLastModifiedByInput, HumanitarianContractRenewalUncheckedCreateWithoutLastModifiedByInput>
  }

  export type HumanitarianContractRenewalCreateManyLastModifiedByInputEnvelope = {
    data: HumanitarianContractRenewalCreateManyLastModifiedByInput | HumanitarianContractRenewalCreateManyLastModifiedByInput[]
    skipDuplicates?: boolean
  }

  export type SenderBlacklistCreateWithoutCreatedByInput = {
    id?: string
    senderName: string
    effectiveDate: Date | string
    description?: string | null
    isActive?: boolean
    matchCount?: number
    lastMatchDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logs?: BlacklistLogCreateNestedManyWithoutBlacklistEntryInput
    modifiedBy?: UserCreateNestedOneWithoutModifiedBlacklistsInput
  }

  export type SenderBlacklistUncheckedCreateWithoutCreatedByInput = {
    id?: string
    senderName: string
    effectiveDate: Date | string
    description?: string | null
    isActive?: boolean
    matchCount?: number
    lastMatchDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    modifiedById?: string | null
    logs?: BlacklistLogUncheckedCreateNestedManyWithoutBlacklistEntryInput
  }

  export type SenderBlacklistCreateOrConnectWithoutCreatedByInput = {
    where: SenderBlacklistWhereUniqueInput
    create: XOR<SenderBlacklistCreateWithoutCreatedByInput, SenderBlacklistUncheckedCreateWithoutCreatedByInput>
  }

  export type SenderBlacklistCreateManyCreatedByInputEnvelope = {
    data: SenderBlacklistCreateManyCreatedByInput | SenderBlacklistCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type SenderBlacklistCreateWithoutModifiedByInput = {
    id?: string
    senderName: string
    effectiveDate: Date | string
    description?: string | null
    isActive?: boolean
    matchCount?: number
    lastMatchDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutSenderBlacklistsInput
    logs?: BlacklistLogCreateNestedManyWithoutBlacklistEntryInput
  }

  export type SenderBlacklistUncheckedCreateWithoutModifiedByInput = {
    id?: string
    senderName: string
    effectiveDate: Date | string
    description?: string | null
    isActive?: boolean
    matchCount?: number
    lastMatchDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    logs?: BlacklistLogUncheckedCreateNestedManyWithoutBlacklistEntryInput
  }

  export type SenderBlacklistCreateOrConnectWithoutModifiedByInput = {
    where: SenderBlacklistWhereUniqueInput
    create: XOR<SenderBlacklistCreateWithoutModifiedByInput, SenderBlacklistUncheckedCreateWithoutModifiedByInput>
  }

  export type SenderBlacklistCreateManyModifiedByInputEnvelope = {
    data: SenderBlacklistCreateManyModifiedByInput | SenderBlacklistCreateManyModifiedByInput[]
    skipDuplicates?: boolean
  }

  export type BlacklistLogCreateWithoutUserInput = {
    id?: string
    action: $Enums.LogBlackType
    entityType?: string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    blacklistEntry?: SenderBlacklistCreateNestedOneWithoutLogsInput
  }

  export type BlacklistLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: $Enums.LogBlackType
    entityId?: string | null
    entityType?: string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type BlacklistLogCreateOrConnectWithoutUserInput = {
    where: BlacklistLogWhereUniqueInput
    create: XOR<BlacklistLogCreateWithoutUserInput, BlacklistLogUncheckedCreateWithoutUserInput>
  }

  export type BlacklistLogCreateManyUserInputEnvelope = {
    data: BlacklistLogCreateManyUserInput | BlacklistLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ContractRenewalCreateWithoutCreatedByInput = {
    id?: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: ContractCreateNestedOneWithoutRenewalsInput
    attachments?: ContractRenewalAttachmentCreateNestedManyWithoutRenewalInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedRenewalsInput
  }

  export type ContractRenewalUncheckedCreateWithoutCreatedByInput = {
    id?: string
    contractId: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastModifiedById?: string | null
    attachments?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutRenewalInput
  }

  export type ContractRenewalCreateOrConnectWithoutCreatedByInput = {
    where: ContractRenewalWhereUniqueInput
    create: XOR<ContractRenewalCreateWithoutCreatedByInput, ContractRenewalUncheckedCreateWithoutCreatedByInput>
  }

  export type ContractRenewalCreateManyCreatedByInputEnvelope = {
    data: ContractRenewalCreateManyCreatedByInput | ContractRenewalCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ContractRenewalCreateWithoutLastModifiedByInput = {
    id?: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: ContractCreateNestedOneWithoutRenewalsInput
    attachments?: ContractRenewalAttachmentCreateNestedManyWithoutRenewalInput
    createdBy: UserCreateNestedOneWithoutCreatedRenewalsInput
  }

  export type ContractRenewalUncheckedCreateWithoutLastModifiedByInput = {
    id?: string
    contractId: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    attachments?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutRenewalInput
  }

  export type ContractRenewalCreateOrConnectWithoutLastModifiedByInput = {
    where: ContractRenewalWhereUniqueInput
    create: XOR<ContractRenewalCreateWithoutLastModifiedByInput, ContractRenewalUncheckedCreateWithoutLastModifiedByInput>
  }

  export type ContractRenewalCreateManyLastModifiedByInputEnvelope = {
    data: ContractRenewalCreateManyLastModifiedByInput | ContractRenewalCreateManyLastModifiedByInput[]
    skipDuplicates?: boolean
  }

  export type ContractRenewalAttachmentCreateWithoutUploadedByInput = {
    id?: string
    fileName: string
    fileSize: number
    fileType: string
    filePath: string
    uploadedAt?: Date | string
    description?: string | null
    renewal: ContractRenewalCreateNestedOneWithoutAttachmentsInput
  }

  export type ContractRenewalAttachmentUncheckedCreateWithoutUploadedByInput = {
    id?: string
    renewalId: string
    fileName: string
    fileSize: number
    fileType: string
    filePath: string
    uploadedAt?: Date | string
    description?: string | null
  }

  export type ContractRenewalAttachmentCreateOrConnectWithoutUploadedByInput = {
    where: ContractRenewalAttachmentWhereUniqueInput
    create: XOR<ContractRenewalAttachmentCreateWithoutUploadedByInput, ContractRenewalAttachmentUncheckedCreateWithoutUploadedByInput>
  }

  export type ContractRenewalAttachmentCreateManyUploadedByInputEnvelope = {
    data: ContractRenewalAttachmentCreateManyUploadedByInput | ContractRenewalAttachmentCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type ParkingServiceCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    transactions?: ParkingTransactionCreateNestedManyWithoutParkingServiceInput
    contracts?: ContractCreateNestedManyWithoutParkingServiceInput
    logEntries?: LogEntryCreateNestedManyWithoutParkingServiceInput
    complaints?: ComplaintCreateNestedManyWithoutParkingServiceInput
  }

  export type ParkingServiceUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    transactions?: ParkingTransactionUncheckedCreateNestedManyWithoutParkingServiceInput
    contracts?: ContractUncheckedCreateNestedManyWithoutParkingServiceInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutParkingServiceInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutParkingServiceInput
  }

  export type ParkingServiceCreateOrConnectWithoutCreatedByInput = {
    where: ParkingServiceWhereUniqueInput
    create: XOR<ParkingServiceCreateWithoutCreatedByInput, ParkingServiceUncheckedCreateWithoutCreatedByInput>
  }

  export type ParkingServiceCreateManyCreatedByInputEnvelope = {
    data: ParkingServiceCreateManyCreatedByInput | ParkingServiceCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type LogEntryCreateWithoutCreatedByInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutLogEntriesInput
    parkingService?: ParkingServiceCreateNestedOneWithoutLogEntriesInput
    bulkService?: BulkServiceCreateNestedOneWithoutLogEntriesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedLogsInput
  }

  export type LogEntryUncheckedCreateWithoutCreatedByInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    providerId?: string | null
    parkingServiceId?: string | null
    bulkServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
  }

  export type LogEntryCreateOrConnectWithoutCreatedByInput = {
    where: LogEntryWhereUniqueInput
    create: XOR<LogEntryCreateWithoutCreatedByInput, LogEntryUncheckedCreateWithoutCreatedByInput>
  }

  export type LogEntryCreateManyCreatedByInputEnvelope = {
    data: LogEntryCreateManyCreatedByInput | LogEntryCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type LogEntryCreateWithoutUpdatedByInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutLogEntriesInput
    parkingService?: ParkingServiceCreateNestedOneWithoutLogEntriesInput
    bulkService?: BulkServiceCreateNestedOneWithoutLogEntriesInput
    createdBy: UserCreateNestedOneWithoutLogEntriesInput
  }

  export type LogEntryUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    providerId?: string | null
    parkingServiceId?: string | null
    bulkServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type LogEntryCreateOrConnectWithoutUpdatedByInput = {
    where: LogEntryWhereUniqueInput
    create: XOR<LogEntryCreateWithoutUpdatedByInput, LogEntryUncheckedCreateWithoutUpdatedByInput>
  }

  export type LogEntryCreateManyUpdatedByInputEnvelope = {
    data: LogEntryCreateManyUpdatedByInput | LogEntryCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type TwoFactorConfirmationUpsertWithoutUserInput = {
    update: XOR<TwoFactorConfirmationUpdateWithoutUserInput, TwoFactorConfirmationUncheckedUpdateWithoutUserInput>
    create: XOR<TwoFactorConfirmationCreateWithoutUserInput, TwoFactorConfirmationUncheckedCreateWithoutUserInput>
    where?: TwoFactorConfirmationWhereInput
  }

  export type TwoFactorConfirmationUpdateToOneWithWhereWithoutUserInput = {
    where?: TwoFactorConfirmationWhereInput
    data: XOR<TwoFactorConfirmationUpdateWithoutUserInput, TwoFactorConfirmationUncheckedUpdateWithoutUserInput>
  }

  export type TwoFactorConfirmationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type TwoFactorConfirmationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ContractUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutCreatedByInput, ContractUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ContractCreateWithoutCreatedByInput, ContractUncheckedCreateWithoutCreatedByInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutCreatedByInput, ContractUncheckedUpdateWithoutCreatedByInput>
  }

  export type ContractUpdateManyWithWhereWithoutCreatedByInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ContractScalarWhereInput = {
    AND?: ContractScalarWhereInput | ContractScalarWhereInput[]
    OR?: ContractScalarWhereInput[]
    NOT?: ContractScalarWhereInput | ContractScalarWhereInput[]
    id?: StringFilter<"Contract"> | string
    name?: StringFilter<"Contract"> | string
    contractNumber?: StringFilter<"Contract"> | string
    type?: EnumContractTypeFilter<"Contract"> | $Enums.ContractType
    status?: EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    revenuePercentage?: FloatFilter<"Contract"> | number
    description?: StringNullableFilter<"Contract"> | string | null
    operatorRevenue?: FloatNullableFilter<"Contract"> | number | null
    isRevenueSharing?: BoolFilter<"Contract"> | boolean
    operatorId?: StringNullableFilter<"Contract"> | string | null
    providerId?: StringNullableFilter<"Contract"> | string | null
    humanitarianOrgId?: StringNullableFilter<"Contract"> | string | null
    parkingServiceId?: StringNullableFilter<"Contract"> | string | null
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    createdById?: StringFilter<"Contract"> | string
    lastModifiedById?: StringNullableFilter<"Contract"> | string | null
  }

  export type ContractUpsertWithWhereUniqueWithoutLastModifiedByInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutLastModifiedByInput, ContractUncheckedUpdateWithoutLastModifiedByInput>
    create: XOR<ContractCreateWithoutLastModifiedByInput, ContractUncheckedCreateWithoutLastModifiedByInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutLastModifiedByInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutLastModifiedByInput, ContractUncheckedUpdateWithoutLastModifiedByInput>
  }

  export type ContractUpdateManyWithWhereWithoutLastModifiedByInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutLastModifiedByInput>
  }

  export type ContractAttachmentUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: ContractAttachmentWhereUniqueInput
    update: XOR<ContractAttachmentUpdateWithoutUploadedByInput, ContractAttachmentUncheckedUpdateWithoutUploadedByInput>
    create: XOR<ContractAttachmentCreateWithoutUploadedByInput, ContractAttachmentUncheckedCreateWithoutUploadedByInput>
  }

  export type ContractAttachmentUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: ContractAttachmentWhereUniqueInput
    data: XOR<ContractAttachmentUpdateWithoutUploadedByInput, ContractAttachmentUncheckedUpdateWithoutUploadedByInput>
  }

  export type ContractAttachmentUpdateManyWithWhereWithoutUploadedByInput = {
    where: ContractAttachmentScalarWhereInput
    data: XOR<ContractAttachmentUpdateManyMutationInput, ContractAttachmentUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type ContractAttachmentScalarWhereInput = {
    AND?: ContractAttachmentScalarWhereInput | ContractAttachmentScalarWhereInput[]
    OR?: ContractAttachmentScalarWhereInput[]
    NOT?: ContractAttachmentScalarWhereInput | ContractAttachmentScalarWhereInput[]
    id?: StringFilter<"ContractAttachment"> | string
    contractId?: StringFilter<"ContractAttachment"> | string
    name?: StringFilter<"ContractAttachment"> | string
    fileUrl?: StringFilter<"ContractAttachment"> | string
    fileType?: StringFilter<"ContractAttachment"> | string
    uploadedAt?: DateTimeFilter<"ContractAttachment"> | Date | string
    uploadedById?: StringFilter<"ContractAttachment"> | string
  }

  export type ContractReminderUpsertWithWhereUniqueWithoutAcknowledgedByInput = {
    where: ContractReminderWhereUniqueInput
    update: XOR<ContractReminderUpdateWithoutAcknowledgedByInput, ContractReminderUncheckedUpdateWithoutAcknowledgedByInput>
    create: XOR<ContractReminderCreateWithoutAcknowledgedByInput, ContractReminderUncheckedCreateWithoutAcknowledgedByInput>
  }

  export type ContractReminderUpdateWithWhereUniqueWithoutAcknowledgedByInput = {
    where: ContractReminderWhereUniqueInput
    data: XOR<ContractReminderUpdateWithoutAcknowledgedByInput, ContractReminderUncheckedUpdateWithoutAcknowledgedByInput>
  }

  export type ContractReminderUpdateManyWithWhereWithoutAcknowledgedByInput = {
    where: ContractReminderScalarWhereInput
    data: XOR<ContractReminderUpdateManyMutationInput, ContractReminderUncheckedUpdateManyWithoutAcknowledgedByInput>
  }

  export type ContractReminderScalarWhereInput = {
    AND?: ContractReminderScalarWhereInput | ContractReminderScalarWhereInput[]
    OR?: ContractReminderScalarWhereInput[]
    NOT?: ContractReminderScalarWhereInput | ContractReminderScalarWhereInput[]
    id?: StringFilter<"ContractReminder"> | string
    contractId?: StringFilter<"ContractReminder"> | string
    reminderDate?: DateTimeFilter<"ContractReminder"> | Date | string
    reminderType?: StringFilter<"ContractReminder"> | string
    isAcknowledged?: BoolFilter<"ContractReminder"> | boolean
    acknowledgedById?: StringNullableFilter<"ContractReminder"> | string | null
    createdAt?: DateTimeFilter<"ContractReminder"> | Date | string
  }

  export type ComplaintUpsertWithWhereUniqueWithoutSubmittedByInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutSubmittedByInput, ComplaintUncheckedUpdateWithoutSubmittedByInput>
    create: XOR<ComplaintCreateWithoutSubmittedByInput, ComplaintUncheckedCreateWithoutSubmittedByInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutSubmittedByInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutSubmittedByInput, ComplaintUncheckedUpdateWithoutSubmittedByInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutSubmittedByInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutSubmittedByInput>
  }

  export type ComplaintScalarWhereInput = {
    AND?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
    OR?: ComplaintScalarWhereInput[]
    NOT?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
    id?: StringFilter<"Complaint"> | string
    title?: StringFilter<"Complaint"> | string
    description?: StringFilter<"Complaint"> | string
    status?: EnumComplaintStatusFilter<"Complaint"> | $Enums.ComplaintStatus
    priority?: IntFilter<"Complaint"> | number
    financialImpact?: FloatNullableFilter<"Complaint"> | number | null
    serviceId?: StringNullableFilter<"Complaint"> | string | null
    productId?: StringNullableFilter<"Complaint"> | string | null
    providerId?: StringNullableFilter<"Complaint"> | string | null
    submittedById?: StringFilter<"Complaint"> | string
    assignedAgentId?: StringNullableFilter<"Complaint"> | string | null
    assignedAt?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    createdAt?: DateTimeFilter<"Complaint"> | Date | string
    updatedAt?: DateTimeFilter<"Complaint"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    closedAt?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    humanitarianOrgId?: StringNullableFilter<"Complaint"> | string | null
    parkingServiceId?: StringNullableFilter<"Complaint"> | string | null
  }

  export type ComplaintUpsertWithWhereUniqueWithoutAssignedAgentInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutAssignedAgentInput, ComplaintUncheckedUpdateWithoutAssignedAgentInput>
    create: XOR<ComplaintCreateWithoutAssignedAgentInput, ComplaintUncheckedCreateWithoutAssignedAgentInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutAssignedAgentInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutAssignedAgentInput, ComplaintUncheckedUpdateWithoutAssignedAgentInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutAssignedAgentInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutAssignedAgentInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    text?: StringFilter<"Comment"> | string
    complaintId?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    isInternal?: BoolFilter<"Comment"> | boolean
  }

  export type ActivityLogUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    update: XOR<ActivityLogUpdateWithoutUserInput, ActivityLogUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput>
  }

  export type ActivityLogUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    data: XOR<ActivityLogUpdateWithoutUserInput, ActivityLogUncheckedUpdateWithoutUserInput>
  }

  export type ActivityLogUpdateManyWithWhereWithoutUserInput = {
    where: ActivityLogScalarWhereInput
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyWithoutUserInput>
  }

  export type ActivityLogScalarWhereInput = {
    AND?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
    OR?: ActivityLogScalarWhereInput[]
    NOT?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
    id?: StringFilter<"ActivityLog"> | string
    action?: StringFilter<"ActivityLog"> | string
    entityType?: StringFilter<"ActivityLog"> | string
    entityId?: StringNullableFilter<"ActivityLog"> | string | null
    details?: StringNullableFilter<"ActivityLog"> | string | null
    severity?: EnumLogSeverityFilter<"ActivityLog"> | $Enums.LogSeverity
    userId?: StringFilter<"ActivityLog"> | string
    createdAt?: DateTimeFilter<"ActivityLog"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    entityType?: StringNullableFilter<"Notification"> | string | null
    entityId?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type NotificationPreferenceUpsertWithoutUserInput = {
    update: XOR<NotificationPreferenceUpdateWithoutUserInput, NotificationPreferenceUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationPreferenceCreateWithoutUserInput, NotificationPreferenceUncheckedCreateWithoutUserInput>
    where?: NotificationPreferenceWhereInput
  }

  export type NotificationPreferenceUpdateToOneWithWhereWithoutUserInput = {
    where?: NotificationPreferenceWhereInput
    data: XOR<NotificationPreferenceUpdateWithoutUserInput, NotificationPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type NotificationPreferenceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferenceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HumanitarianContractRenewalUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: HumanitarianContractRenewalWhereUniqueInput
    update: XOR<HumanitarianContractRenewalUpdateWithoutCreatedByInput, HumanitarianContractRenewalUncheckedUpdateWithoutCreatedByInput>
    create: XOR<HumanitarianContractRenewalCreateWithoutCreatedByInput, HumanitarianContractRenewalUncheckedCreateWithoutCreatedByInput>
  }

  export type HumanitarianContractRenewalUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: HumanitarianContractRenewalWhereUniqueInput
    data: XOR<HumanitarianContractRenewalUpdateWithoutCreatedByInput, HumanitarianContractRenewalUncheckedUpdateWithoutCreatedByInput>
  }

  export type HumanitarianContractRenewalUpdateManyWithWhereWithoutCreatedByInput = {
    where: HumanitarianContractRenewalScalarWhereInput
    data: XOR<HumanitarianContractRenewalUpdateManyMutationInput, HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type HumanitarianContractRenewalScalarWhereInput = {
    AND?: HumanitarianContractRenewalScalarWhereInput | HumanitarianContractRenewalScalarWhereInput[]
    OR?: HumanitarianContractRenewalScalarWhereInput[]
    NOT?: HumanitarianContractRenewalScalarWhereInput | HumanitarianContractRenewalScalarWhereInput[]
    id?: StringFilter<"HumanitarianContractRenewal"> | string
    contractId?: StringFilter<"HumanitarianContractRenewal"> | string
    humanitarianOrgId?: StringFilter<"HumanitarianContractRenewal"> | string
    subStatus?: EnumHumanitarianRenewalSubStatusFilter<"HumanitarianContractRenewal"> | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    proposedStartDate?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    proposedEndDate?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    proposedRevenue?: FloatFilter<"HumanitarianContractRenewal"> | number
    documentsReceived?: BoolFilter<"HumanitarianContractRenewal"> | boolean
    legalApproved?: BoolFilter<"HumanitarianContractRenewal"> | boolean
    financialApproved?: BoolFilter<"HumanitarianContractRenewal"> | boolean
    signatureReceived?: BoolFilter<"HumanitarianContractRenewal"> | boolean
    notes?: StringNullableFilter<"HumanitarianContractRenewal"> | string | null
    createdAt?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    updatedAt?: DateTimeFilter<"HumanitarianContractRenewal"> | Date | string
    createdById?: StringFilter<"HumanitarianContractRenewal"> | string
    lastModifiedById?: StringNullableFilter<"HumanitarianContractRenewal"> | string | null
  }

  export type HumanitarianContractRenewalUpsertWithWhereUniqueWithoutLastModifiedByInput = {
    where: HumanitarianContractRenewalWhereUniqueInput
    update: XOR<HumanitarianContractRenewalUpdateWithoutLastModifiedByInput, HumanitarianContractRenewalUncheckedUpdateWithoutLastModifiedByInput>
    create: XOR<HumanitarianContractRenewalCreateWithoutLastModifiedByInput, HumanitarianContractRenewalUncheckedCreateWithoutLastModifiedByInput>
  }

  export type HumanitarianContractRenewalUpdateWithWhereUniqueWithoutLastModifiedByInput = {
    where: HumanitarianContractRenewalWhereUniqueInput
    data: XOR<HumanitarianContractRenewalUpdateWithoutLastModifiedByInput, HumanitarianContractRenewalUncheckedUpdateWithoutLastModifiedByInput>
  }

  export type HumanitarianContractRenewalUpdateManyWithWhereWithoutLastModifiedByInput = {
    where: HumanitarianContractRenewalScalarWhereInput
    data: XOR<HumanitarianContractRenewalUpdateManyMutationInput, HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByInput>
  }

  export type SenderBlacklistUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: SenderBlacklistWhereUniqueInput
    update: XOR<SenderBlacklistUpdateWithoutCreatedByInput, SenderBlacklistUncheckedUpdateWithoutCreatedByInput>
    create: XOR<SenderBlacklistCreateWithoutCreatedByInput, SenderBlacklistUncheckedCreateWithoutCreatedByInput>
  }

  export type SenderBlacklistUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: SenderBlacklistWhereUniqueInput
    data: XOR<SenderBlacklistUpdateWithoutCreatedByInput, SenderBlacklistUncheckedUpdateWithoutCreatedByInput>
  }

  export type SenderBlacklistUpdateManyWithWhereWithoutCreatedByInput = {
    where: SenderBlacklistScalarWhereInput
    data: XOR<SenderBlacklistUpdateManyMutationInput, SenderBlacklistUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type SenderBlacklistScalarWhereInput = {
    AND?: SenderBlacklistScalarWhereInput | SenderBlacklistScalarWhereInput[]
    OR?: SenderBlacklistScalarWhereInput[]
    NOT?: SenderBlacklistScalarWhereInput | SenderBlacklistScalarWhereInput[]
    id?: StringFilter<"SenderBlacklist"> | string
    senderName?: StringFilter<"SenderBlacklist"> | string
    effectiveDate?: DateTimeFilter<"SenderBlacklist"> | Date | string
    description?: StringNullableFilter<"SenderBlacklist"> | string | null
    isActive?: BoolFilter<"SenderBlacklist"> | boolean
    matchCount?: IntFilter<"SenderBlacklist"> | number
    lastMatchDate?: DateTimeNullableFilter<"SenderBlacklist"> | Date | string | null
    createdAt?: DateTimeFilter<"SenderBlacklist"> | Date | string
    updatedAt?: DateTimeFilter<"SenderBlacklist"> | Date | string
    createdById?: StringFilter<"SenderBlacklist"> | string
    modifiedById?: StringNullableFilter<"SenderBlacklist"> | string | null
  }

  export type SenderBlacklistUpsertWithWhereUniqueWithoutModifiedByInput = {
    where: SenderBlacklistWhereUniqueInput
    update: XOR<SenderBlacklistUpdateWithoutModifiedByInput, SenderBlacklistUncheckedUpdateWithoutModifiedByInput>
    create: XOR<SenderBlacklistCreateWithoutModifiedByInput, SenderBlacklistUncheckedCreateWithoutModifiedByInput>
  }

  export type SenderBlacklistUpdateWithWhereUniqueWithoutModifiedByInput = {
    where: SenderBlacklistWhereUniqueInput
    data: XOR<SenderBlacklistUpdateWithoutModifiedByInput, SenderBlacklistUncheckedUpdateWithoutModifiedByInput>
  }

  export type SenderBlacklistUpdateManyWithWhereWithoutModifiedByInput = {
    where: SenderBlacklistScalarWhereInput
    data: XOR<SenderBlacklistUpdateManyMutationInput, SenderBlacklistUncheckedUpdateManyWithoutModifiedByInput>
  }

  export type BlacklistLogUpsertWithWhereUniqueWithoutUserInput = {
    where: BlacklistLogWhereUniqueInput
    update: XOR<BlacklistLogUpdateWithoutUserInput, BlacklistLogUncheckedUpdateWithoutUserInput>
    create: XOR<BlacklistLogCreateWithoutUserInput, BlacklistLogUncheckedCreateWithoutUserInput>
  }

  export type BlacklistLogUpdateWithWhereUniqueWithoutUserInput = {
    where: BlacklistLogWhereUniqueInput
    data: XOR<BlacklistLogUpdateWithoutUserInput, BlacklistLogUncheckedUpdateWithoutUserInput>
  }

  export type BlacklistLogUpdateManyWithWhereWithoutUserInput = {
    where: BlacklistLogScalarWhereInput
    data: XOR<BlacklistLogUpdateManyMutationInput, BlacklistLogUncheckedUpdateManyWithoutUserInput>
  }

  export type BlacklistLogScalarWhereInput = {
    AND?: BlacklistLogScalarWhereInput | BlacklistLogScalarWhereInput[]
    OR?: BlacklistLogScalarWhereInput[]
    NOT?: BlacklistLogScalarWhereInput | BlacklistLogScalarWhereInput[]
    id?: StringFilter<"BlacklistLog"> | string
    action?: EnumLogBlackTypeFilter<"BlacklistLog"> | $Enums.LogBlackType
    entityId?: StringNullableFilter<"BlacklistLog"> | string | null
    entityType?: StringFilter<"BlacklistLog"> | string
    oldData?: JsonNullableFilter<"BlacklistLog">
    newData?: JsonNullableFilter<"BlacklistLog">
    userId?: StringFilter<"BlacklistLog"> | string
    timestamp?: DateTimeFilter<"BlacklistLog"> | Date | string
  }

  export type ContractRenewalUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ContractRenewalWhereUniqueInput
    update: XOR<ContractRenewalUpdateWithoutCreatedByInput, ContractRenewalUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ContractRenewalCreateWithoutCreatedByInput, ContractRenewalUncheckedCreateWithoutCreatedByInput>
  }

  export type ContractRenewalUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ContractRenewalWhereUniqueInput
    data: XOR<ContractRenewalUpdateWithoutCreatedByInput, ContractRenewalUncheckedUpdateWithoutCreatedByInput>
  }

  export type ContractRenewalUpdateManyWithWhereWithoutCreatedByInput = {
    where: ContractRenewalScalarWhereInput
    data: XOR<ContractRenewalUpdateManyMutationInput, ContractRenewalUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ContractRenewalScalarWhereInput = {
    AND?: ContractRenewalScalarWhereInput | ContractRenewalScalarWhereInput[]
    OR?: ContractRenewalScalarWhereInput[]
    NOT?: ContractRenewalScalarWhereInput | ContractRenewalScalarWhereInput[]
    id?: StringFilter<"ContractRenewal"> | string
    contractId?: StringFilter<"ContractRenewal"> | string
    subStatus?: EnumContractRenewalSubStatusFilter<"ContractRenewal"> | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFilter<"ContractRenewal"> | Date | string
    proposedStartDate?: DateTimeFilter<"ContractRenewal"> | Date | string
    proposedEndDate?: DateTimeFilter<"ContractRenewal"> | Date | string
    proposedRevenue?: FloatNullableFilter<"ContractRenewal"> | number | null
    documentsReceived?: BoolFilter<"ContractRenewal"> | boolean
    legalApproved?: BoolFilter<"ContractRenewal"> | boolean
    financialApproved?: BoolFilter<"ContractRenewal"> | boolean
    technicalApproved?: BoolFilter<"ContractRenewal"> | boolean
    managementApproved?: BoolFilter<"ContractRenewal"> | boolean
    signatureReceived?: BoolFilter<"ContractRenewal"> | boolean
    comments?: StringNullableFilter<"ContractRenewal"> | string | null
    internalNotes?: StringNullableFilter<"ContractRenewal"> | string | null
    createdAt?: DateTimeFilter<"ContractRenewal"> | Date | string
    updatedAt?: DateTimeFilter<"ContractRenewal"> | Date | string
    createdById?: StringFilter<"ContractRenewal"> | string
    lastModifiedById?: StringNullableFilter<"ContractRenewal"> | string | null
  }

  export type ContractRenewalUpsertWithWhereUniqueWithoutLastModifiedByInput = {
    where: ContractRenewalWhereUniqueInput
    update: XOR<ContractRenewalUpdateWithoutLastModifiedByInput, ContractRenewalUncheckedUpdateWithoutLastModifiedByInput>
    create: XOR<ContractRenewalCreateWithoutLastModifiedByInput, ContractRenewalUncheckedCreateWithoutLastModifiedByInput>
  }

  export type ContractRenewalUpdateWithWhereUniqueWithoutLastModifiedByInput = {
    where: ContractRenewalWhereUniqueInput
    data: XOR<ContractRenewalUpdateWithoutLastModifiedByInput, ContractRenewalUncheckedUpdateWithoutLastModifiedByInput>
  }

  export type ContractRenewalUpdateManyWithWhereWithoutLastModifiedByInput = {
    where: ContractRenewalScalarWhereInput
    data: XOR<ContractRenewalUpdateManyMutationInput, ContractRenewalUncheckedUpdateManyWithoutLastModifiedByInput>
  }

  export type ContractRenewalAttachmentUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: ContractRenewalAttachmentWhereUniqueInput
    update: XOR<ContractRenewalAttachmentUpdateWithoutUploadedByInput, ContractRenewalAttachmentUncheckedUpdateWithoutUploadedByInput>
    create: XOR<ContractRenewalAttachmentCreateWithoutUploadedByInput, ContractRenewalAttachmentUncheckedCreateWithoutUploadedByInput>
  }

  export type ContractRenewalAttachmentUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: ContractRenewalAttachmentWhereUniqueInput
    data: XOR<ContractRenewalAttachmentUpdateWithoutUploadedByInput, ContractRenewalAttachmentUncheckedUpdateWithoutUploadedByInput>
  }

  export type ContractRenewalAttachmentUpdateManyWithWhereWithoutUploadedByInput = {
    where: ContractRenewalAttachmentScalarWhereInput
    data: XOR<ContractRenewalAttachmentUpdateManyMutationInput, ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type ContractRenewalAttachmentScalarWhereInput = {
    AND?: ContractRenewalAttachmentScalarWhereInput | ContractRenewalAttachmentScalarWhereInput[]
    OR?: ContractRenewalAttachmentScalarWhereInput[]
    NOT?: ContractRenewalAttachmentScalarWhereInput | ContractRenewalAttachmentScalarWhereInput[]
    id?: StringFilter<"ContractRenewalAttachment"> | string
    renewalId?: StringFilter<"ContractRenewalAttachment"> | string
    fileName?: StringFilter<"ContractRenewalAttachment"> | string
    fileSize?: IntFilter<"ContractRenewalAttachment"> | number
    fileType?: StringFilter<"ContractRenewalAttachment"> | string
    filePath?: StringFilter<"ContractRenewalAttachment"> | string
    uploadedAt?: DateTimeFilter<"ContractRenewalAttachment"> | Date | string
    uploadedById?: StringFilter<"ContractRenewalAttachment"> | string
    description?: StringNullableFilter<"ContractRenewalAttachment"> | string | null
  }

  export type ParkingServiceUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ParkingServiceWhereUniqueInput
    update: XOR<ParkingServiceUpdateWithoutCreatedByInput, ParkingServiceUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ParkingServiceCreateWithoutCreatedByInput, ParkingServiceUncheckedCreateWithoutCreatedByInput>
  }

  export type ParkingServiceUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ParkingServiceWhereUniqueInput
    data: XOR<ParkingServiceUpdateWithoutCreatedByInput, ParkingServiceUncheckedUpdateWithoutCreatedByInput>
  }

  export type ParkingServiceUpdateManyWithWhereWithoutCreatedByInput = {
    where: ParkingServiceScalarWhereInput
    data: XOR<ParkingServiceUpdateManyMutationInput, ParkingServiceUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ParkingServiceScalarWhereInput = {
    AND?: ParkingServiceScalarWhereInput | ParkingServiceScalarWhereInput[]
    OR?: ParkingServiceScalarWhereInput[]
    NOT?: ParkingServiceScalarWhereInput | ParkingServiceScalarWhereInput[]
    id?: StringFilter<"ParkingService"> | string
    name?: StringFilter<"ParkingService"> | string
    description?: StringNullableFilter<"ParkingService"> | string | null
    contactName?: StringNullableFilter<"ParkingService"> | string | null
    email?: StringNullableFilter<"ParkingService"> | string | null
    phone?: StringNullableFilter<"ParkingService"> | string | null
    address?: StringNullableFilter<"ParkingService"> | string | null
    additionalEmails?: StringNullableListFilter<"ParkingService">
    isActive?: BoolFilter<"ParkingService"> | boolean
    createdAt?: DateTimeFilter<"ParkingService"> | Date | string
    updatedAt?: DateTimeFilter<"ParkingService"> | Date | string
    originalFileName?: StringNullableFilter<"ParkingService"> | string | null
    originalFilePath?: StringNullableFilter<"ParkingService"> | string | null
    fileSize?: IntNullableFilter<"ParkingService"> | number | null
    mimeType?: StringNullableFilter<"ParkingService"> | string | null
    lastImportDate?: DateTimeNullableFilter<"ParkingService"> | Date | string | null
    importedBy?: StringNullableFilter<"ParkingService"> | string | null
    importStatus?: StringNullableFilter<"ParkingService"> | string | null
    createdById?: StringNullableFilter<"ParkingService"> | string | null
  }

  export type LogEntryUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: LogEntryWhereUniqueInput
    update: XOR<LogEntryUpdateWithoutCreatedByInput, LogEntryUncheckedUpdateWithoutCreatedByInput>
    create: XOR<LogEntryCreateWithoutCreatedByInput, LogEntryUncheckedCreateWithoutCreatedByInput>
  }

  export type LogEntryUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: LogEntryWhereUniqueInput
    data: XOR<LogEntryUpdateWithoutCreatedByInput, LogEntryUncheckedUpdateWithoutCreatedByInput>
  }

  export type LogEntryUpdateManyWithWhereWithoutCreatedByInput = {
    where: LogEntryScalarWhereInput
    data: XOR<LogEntryUpdateManyMutationInput, LogEntryUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type LogEntryScalarWhereInput = {
    AND?: LogEntryScalarWhereInput | LogEntryScalarWhereInput[]
    OR?: LogEntryScalarWhereInput[]
    NOT?: LogEntryScalarWhereInput | LogEntryScalarWhereInput[]
    id?: StringFilter<"LogEntry"> | string
    entityType?: EnumLogEntityTypeFilter<"LogEntry"> | $Enums.LogEntityType
    entityId?: StringFilter<"LogEntry"> | string
    action?: EnumLogActionTypeFilter<"LogEntry"> | $Enums.LogActionType
    subject?: StringFilter<"LogEntry"> | string
    description?: StringNullableFilter<"LogEntry"> | string | null
    status?: EnumLogStatusFilter<"LogEntry"> | $Enums.LogStatus
    sendEmail?: BoolFilter<"LogEntry"> | boolean
    providerId?: StringNullableFilter<"LogEntry"> | string | null
    parkingServiceId?: StringNullableFilter<"LogEntry"> | string | null
    bulkServiceId?: StringNullableFilter<"LogEntry"> | string | null
    createdAt?: DateTimeFilter<"LogEntry"> | Date | string
    updatedAt?: DateTimeFilter<"LogEntry"> | Date | string
    createdById?: StringFilter<"LogEntry"> | string
    updatedById?: StringNullableFilter<"LogEntry"> | string | null
  }

  export type LogEntryUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: LogEntryWhereUniqueInput
    update: XOR<LogEntryUpdateWithoutUpdatedByInput, LogEntryUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<LogEntryCreateWithoutUpdatedByInput, LogEntryUncheckedCreateWithoutUpdatedByInput>
  }

  export type LogEntryUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: LogEntryWhereUniqueInput
    data: XOR<LogEntryUpdateWithoutUpdatedByInput, LogEntryUncheckedUpdateWithoutUpdatedByInput>
  }

  export type LogEntryUpdateManyWithWhereWithoutUpdatedByInput = {
    where: LogEntryScalarWhereInput
    data: XOR<LogEntryUpdateManyMutationInput, LogEntryUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ContractCreateWithoutProviderInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    operator?: OperatorCreateNestedOneWithoutContractsInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutContractsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutContractsInput
    services?: ServiceContractCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalCreateNestedManyWithoutContractInput
    createdBy: UserCreateNestedOneWithoutCreatedContractsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedContractsInput
    reminders?: ContractReminderCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutProviderInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
    services?: ServiceContractUncheckedCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentUncheckedCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalUncheckedCreateNestedManyWithoutContractInput
    reminders?: ContractReminderUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutProviderInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutProviderInput, ContractUncheckedCreateWithoutProviderInput>
  }

  export type ContractCreateManyProviderInputEnvelope = {
    data: ContractCreateManyProviderInput | ContractCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type VasServiceCreateWithoutProviderInput = {
    id?: string
    proizvod: string
    mesec_pruzanja_usluge: Date | string
    jedinicna_cena: number
    broj_transakcija: number
    fakturisan_iznos: number
    fakturisan_korigovan_iznos: number
    naplacen_iznos: number
    kumulativ_naplacenih_iznosa: number
    nenaplacen_iznos: number
    nenaplacen_korigovan_iznos: number
    storniran_iznos: number
    otkazan_iznos: number
    kumulativ_otkazanih_iznosa: number
    iznos_za_prenos_sredstava: number
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutVasServicesInput
  }

  export type VasServiceUncheckedCreateWithoutProviderInput = {
    id?: string
    proizvod: string
    mesec_pruzanja_usluge: Date | string
    jedinicna_cena: number
    broj_transakcija: number
    fakturisan_iznos: number
    fakturisan_korigovan_iznos: number
    naplacen_iznos: number
    kumulativ_naplacenih_iznosa: number
    nenaplacen_iznos: number
    nenaplacen_korigovan_iznos: number
    storniran_iznos: number
    otkazan_iznos: number
    kumulativ_otkazanih_iznosa: number
    iznos_za_prenos_sredstava: number
    serviceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VasServiceCreateOrConnectWithoutProviderInput = {
    where: VasServiceWhereUniqueInput
    create: XOR<VasServiceCreateWithoutProviderInput, VasServiceUncheckedCreateWithoutProviderInput>
  }

  export type VasServiceCreateManyProviderInputEnvelope = {
    data: VasServiceCreateManyProviderInput | VasServiceCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type BulkServiceCreateWithoutProviderInput = {
    id?: string
    provider_name: string
    agreement_name: string
    service_name: string
    step_name: string
    sender_name: string
    requests: number
    message_parts: number
    datumNaplate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutBulkServicesInput
    logEntries?: LogEntryCreateNestedManyWithoutBulkServiceInput
  }

  export type BulkServiceUncheckedCreateWithoutProviderInput = {
    id?: string
    provider_name: string
    agreement_name: string
    service_name: string
    step_name: string
    sender_name: string
    requests: number
    message_parts: number
    datumNaplate: Date | string
    serviceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutBulkServiceInput
  }

  export type BulkServiceCreateOrConnectWithoutProviderInput = {
    where: BulkServiceWhereUniqueInput
    create: XOR<BulkServiceCreateWithoutProviderInput, BulkServiceUncheckedCreateWithoutProviderInput>
  }

  export type BulkServiceCreateManyProviderInputEnvelope = {
    data: BulkServiceCreateManyProviderInput | BulkServiceCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutProviderInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    service?: ServiceCreateNestedOneWithoutComplaintsInput
    product?: ProductCreateNestedOneWithoutComplaintsInput
    submittedBy: UserCreateNestedOneWithoutSubmittedComplaintsInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedComplaintsInput
    comments?: CommentCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentCreateNestedManyWithoutComplaintInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutComplaintsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutComplaintsInput
    statusHistory?: ComplaintStatusHistoryCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutProviderInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutComplaintInput
    statusHistory?: ComplaintStatusHistoryUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutProviderInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutProviderInput, ComplaintUncheckedCreateWithoutProviderInput>
  }

  export type ComplaintCreateManyProviderInputEnvelope = {
    data: ComplaintCreateManyProviderInput | ComplaintCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type VasTransactionCreateWithoutProviderInput = {
    id?: string
    date: Date | string
    group: string
    serviceName: string
    serviceCode: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutVasTransactionsInput
  }

  export type VasTransactionUncheckedCreateWithoutProviderInput = {
    id?: string
    serviceId: string
    date: Date | string
    group: string
    serviceName: string
    serviceCode: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VasTransactionCreateOrConnectWithoutProviderInput = {
    where: VasTransactionWhereUniqueInput
    create: XOR<VasTransactionCreateWithoutProviderInput, VasTransactionUncheckedCreateWithoutProviderInput>
  }

  export type VasTransactionCreateManyProviderInputEnvelope = {
    data: VasTransactionCreateManyProviderInput | VasTransactionCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type LogEntryCreateWithoutProviderInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parkingService?: ParkingServiceCreateNestedOneWithoutLogEntriesInput
    bulkService?: BulkServiceCreateNestedOneWithoutLogEntriesInput
    createdBy: UserCreateNestedOneWithoutLogEntriesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedLogsInput
  }

  export type LogEntryUncheckedCreateWithoutProviderInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    parkingServiceId?: string | null
    bulkServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById?: string | null
  }

  export type LogEntryCreateOrConnectWithoutProviderInput = {
    where: LogEntryWhereUniqueInput
    create: XOR<LogEntryCreateWithoutProviderInput, LogEntryUncheckedCreateWithoutProviderInput>
  }

  export type LogEntryCreateManyProviderInputEnvelope = {
    data: LogEntryCreateManyProviderInput | LogEntryCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type ContractUpsertWithWhereUniqueWithoutProviderInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutProviderInput, ContractUncheckedUpdateWithoutProviderInput>
    create: XOR<ContractCreateWithoutProviderInput, ContractUncheckedCreateWithoutProviderInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutProviderInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutProviderInput, ContractUncheckedUpdateWithoutProviderInput>
  }

  export type ContractUpdateManyWithWhereWithoutProviderInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutProviderInput>
  }

  export type VasServiceUpsertWithWhereUniqueWithoutProviderInput = {
    where: VasServiceWhereUniqueInput
    update: XOR<VasServiceUpdateWithoutProviderInput, VasServiceUncheckedUpdateWithoutProviderInput>
    create: XOR<VasServiceCreateWithoutProviderInput, VasServiceUncheckedCreateWithoutProviderInput>
  }

  export type VasServiceUpdateWithWhereUniqueWithoutProviderInput = {
    where: VasServiceWhereUniqueInput
    data: XOR<VasServiceUpdateWithoutProviderInput, VasServiceUncheckedUpdateWithoutProviderInput>
  }

  export type VasServiceUpdateManyWithWhereWithoutProviderInput = {
    where: VasServiceScalarWhereInput
    data: XOR<VasServiceUpdateManyMutationInput, VasServiceUncheckedUpdateManyWithoutProviderInput>
  }

  export type VasServiceScalarWhereInput = {
    AND?: VasServiceScalarWhereInput | VasServiceScalarWhereInput[]
    OR?: VasServiceScalarWhereInput[]
    NOT?: VasServiceScalarWhereInput | VasServiceScalarWhereInput[]
    id?: StringFilter<"VasService"> | string
    proizvod?: StringFilter<"VasService"> | string
    mesec_pruzanja_usluge?: DateTimeFilter<"VasService"> | Date | string
    jedinicna_cena?: FloatFilter<"VasService"> | number
    broj_transakcija?: IntFilter<"VasService"> | number
    fakturisan_iznos?: FloatFilter<"VasService"> | number
    fakturisan_korigovan_iznos?: FloatFilter<"VasService"> | number
    naplacen_iznos?: FloatFilter<"VasService"> | number
    kumulativ_naplacenih_iznosa?: FloatFilter<"VasService"> | number
    nenaplacen_iznos?: FloatFilter<"VasService"> | number
    nenaplacen_korigovan_iznos?: FloatFilter<"VasService"> | number
    storniran_iznos?: FloatFilter<"VasService"> | number
    otkazan_iznos?: FloatFilter<"VasService"> | number
    kumulativ_otkazanih_iznosa?: FloatFilter<"VasService"> | number
    iznos_za_prenos_sredstava?: FloatFilter<"VasService"> | number
    serviceId?: StringFilter<"VasService"> | string
    provajderId?: StringFilter<"VasService"> | string
    createdAt?: DateTimeFilter<"VasService"> | Date | string
    updatedAt?: DateTimeFilter<"VasService"> | Date | string
  }

  export type BulkServiceUpsertWithWhereUniqueWithoutProviderInput = {
    where: BulkServiceWhereUniqueInput
    update: XOR<BulkServiceUpdateWithoutProviderInput, BulkServiceUncheckedUpdateWithoutProviderInput>
    create: XOR<BulkServiceCreateWithoutProviderInput, BulkServiceUncheckedCreateWithoutProviderInput>
  }

  export type BulkServiceUpdateWithWhereUniqueWithoutProviderInput = {
    where: BulkServiceWhereUniqueInput
    data: XOR<BulkServiceUpdateWithoutProviderInput, BulkServiceUncheckedUpdateWithoutProviderInput>
  }

  export type BulkServiceUpdateManyWithWhereWithoutProviderInput = {
    where: BulkServiceScalarWhereInput
    data: XOR<BulkServiceUpdateManyMutationInput, BulkServiceUncheckedUpdateManyWithoutProviderInput>
  }

  export type BulkServiceScalarWhereInput = {
    AND?: BulkServiceScalarWhereInput | BulkServiceScalarWhereInput[]
    OR?: BulkServiceScalarWhereInput[]
    NOT?: BulkServiceScalarWhereInput | BulkServiceScalarWhereInput[]
    id?: StringFilter<"BulkService"> | string
    provider_name?: StringFilter<"BulkService"> | string
    agreement_name?: StringFilter<"BulkService"> | string
    service_name?: StringFilter<"BulkService"> | string
    step_name?: StringFilter<"BulkService"> | string
    sender_name?: StringFilter<"BulkService"> | string
    requests?: IntFilter<"BulkService"> | number
    message_parts?: IntFilter<"BulkService"> | number
    datumNaplate?: DateTimeFilter<"BulkService"> | Date | string
    serviceId?: StringFilter<"BulkService"> | string
    providerId?: StringFilter<"BulkService"> | string
    createdAt?: DateTimeFilter<"BulkService"> | Date | string
    updatedAt?: DateTimeFilter<"BulkService"> | Date | string
  }

  export type ComplaintUpsertWithWhereUniqueWithoutProviderInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutProviderInput, ComplaintUncheckedUpdateWithoutProviderInput>
    create: XOR<ComplaintCreateWithoutProviderInput, ComplaintUncheckedCreateWithoutProviderInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutProviderInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutProviderInput, ComplaintUncheckedUpdateWithoutProviderInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutProviderInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutProviderInput>
  }

  export type VasTransactionUpsertWithWhereUniqueWithoutProviderInput = {
    where: VasTransactionWhereUniqueInput
    update: XOR<VasTransactionUpdateWithoutProviderInput, VasTransactionUncheckedUpdateWithoutProviderInput>
    create: XOR<VasTransactionCreateWithoutProviderInput, VasTransactionUncheckedCreateWithoutProviderInput>
  }

  export type VasTransactionUpdateWithWhereUniqueWithoutProviderInput = {
    where: VasTransactionWhereUniqueInput
    data: XOR<VasTransactionUpdateWithoutProviderInput, VasTransactionUncheckedUpdateWithoutProviderInput>
  }

  export type VasTransactionUpdateManyWithWhereWithoutProviderInput = {
    where: VasTransactionScalarWhereInput
    data: XOR<VasTransactionUpdateManyMutationInput, VasTransactionUncheckedUpdateManyWithoutProviderInput>
  }

  export type VasTransactionScalarWhereInput = {
    AND?: VasTransactionScalarWhereInput | VasTransactionScalarWhereInput[]
    OR?: VasTransactionScalarWhereInput[]
    NOT?: VasTransactionScalarWhereInput | VasTransactionScalarWhereInput[]
    id?: StringFilter<"VasTransaction"> | string
    providerId?: StringFilter<"VasTransaction"> | string
    serviceId?: StringFilter<"VasTransaction"> | string
    date?: DateTimeFilter<"VasTransaction"> | Date | string
    group?: StringFilter<"VasTransaction"> | string
    serviceName?: StringFilter<"VasTransaction"> | string
    serviceCode?: StringFilter<"VasTransaction"> | string
    price?: FloatFilter<"VasTransaction"> | number
    quantity?: FloatFilter<"VasTransaction"> | number
    amount?: FloatFilter<"VasTransaction"> | number
    createdAt?: DateTimeFilter<"VasTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"VasTransaction"> | Date | string
  }

  export type LogEntryUpsertWithWhereUniqueWithoutProviderInput = {
    where: LogEntryWhereUniqueInput
    update: XOR<LogEntryUpdateWithoutProviderInput, LogEntryUncheckedUpdateWithoutProviderInput>
    create: XOR<LogEntryCreateWithoutProviderInput, LogEntryUncheckedCreateWithoutProviderInput>
  }

  export type LogEntryUpdateWithWhereUniqueWithoutProviderInput = {
    where: LogEntryWhereUniqueInput
    data: XOR<LogEntryUpdateWithoutProviderInput, LogEntryUncheckedUpdateWithoutProviderInput>
  }

  export type LogEntryUpdateManyWithWhereWithoutProviderInput = {
    where: LogEntryScalarWhereInput
    data: XOR<LogEntryUpdateManyMutationInput, LogEntryUncheckedUpdateManyWithoutProviderInput>
  }

  export type ContractCreateWithoutHumanitarianOrgInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutContractsInput
    operator?: OperatorCreateNestedOneWithoutContractsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutContractsInput
    services?: ServiceContractCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalCreateNestedManyWithoutContractInput
    createdBy: UserCreateNestedOneWithoutCreatedContractsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedContractsInput
    reminders?: ContractReminderCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutHumanitarianOrgInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
    services?: ServiceContractUncheckedCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentUncheckedCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalUncheckedCreateNestedManyWithoutContractInput
    reminders?: ContractReminderUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutHumanitarianOrgInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutHumanitarianOrgInput, ContractUncheckedCreateWithoutHumanitarianOrgInput>
  }

  export type ContractCreateManyHumanitarianOrgInputEnvelope = {
    data: ContractCreateManyHumanitarianOrgInput | ContractCreateManyHumanitarianOrgInput[]
    skipDuplicates?: boolean
  }

  export type HumanitarianContractRenewalCreateWithoutHumanitarianOrgInput = {
    id?: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: ContractCreateNestedOneWithoutHumanitarianRenewalsInput
    createdBy: UserCreateNestedOneWithoutCreatedHumanitarianRenewalsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedHumanitarianRenewalsInput
  }

  export type HumanitarianContractRenewalUncheckedCreateWithoutHumanitarianOrgInput = {
    id?: string
    contractId: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type HumanitarianContractRenewalCreateOrConnectWithoutHumanitarianOrgInput = {
    where: HumanitarianContractRenewalWhereUniqueInput
    create: XOR<HumanitarianContractRenewalCreateWithoutHumanitarianOrgInput, HumanitarianContractRenewalUncheckedCreateWithoutHumanitarianOrgInput>
  }

  export type HumanitarianContractRenewalCreateManyHumanitarianOrgInputEnvelope = {
    data: HumanitarianContractRenewalCreateManyHumanitarianOrgInput | HumanitarianContractRenewalCreateManyHumanitarianOrgInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutHumanitarianOrgInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    service?: ServiceCreateNestedOneWithoutComplaintsInput
    product?: ProductCreateNestedOneWithoutComplaintsInput
    provider?: ProviderCreateNestedOneWithoutComplaintsInput
    submittedBy: UserCreateNestedOneWithoutSubmittedComplaintsInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedComplaintsInput
    comments?: CommentCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentCreateNestedManyWithoutComplaintInput
    parkingService?: ParkingServiceCreateNestedOneWithoutComplaintsInput
    statusHistory?: ComplaintStatusHistoryCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutHumanitarianOrgInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    parkingServiceId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutComplaintInput
    statusHistory?: ComplaintStatusHistoryUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutHumanitarianOrgInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutHumanitarianOrgInput, ComplaintUncheckedCreateWithoutHumanitarianOrgInput>
  }

  export type ComplaintCreateManyHumanitarianOrgInputEnvelope = {
    data: ComplaintCreateManyHumanitarianOrgInput | ComplaintCreateManyHumanitarianOrgInput[]
    skipDuplicates?: boolean
  }

  export type ReportFileCreateWithoutOrganizationInput = {
    id?: string
    fileName: string
    filePath: string
    startDate: Date | string
    endDate: Date | string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
  }

  export type ReportFileUncheckedCreateWithoutOrganizationInput = {
    id?: string
    fileName: string
    filePath: string
    startDate: Date | string
    endDate: Date | string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
  }

  export type ReportFileCreateOrConnectWithoutOrganizationInput = {
    where: ReportFileWhereUniqueInput
    create: XOR<ReportFileCreateWithoutOrganizationInput, ReportFileUncheckedCreateWithoutOrganizationInput>
  }

  export type ReportFileCreateManyOrganizationInputEnvelope = {
    data: ReportFileCreateManyOrganizationInput | ReportFileCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ContractUpsertWithWhereUniqueWithoutHumanitarianOrgInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutHumanitarianOrgInput, ContractUncheckedUpdateWithoutHumanitarianOrgInput>
    create: XOR<ContractCreateWithoutHumanitarianOrgInput, ContractUncheckedCreateWithoutHumanitarianOrgInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutHumanitarianOrgInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutHumanitarianOrgInput, ContractUncheckedUpdateWithoutHumanitarianOrgInput>
  }

  export type ContractUpdateManyWithWhereWithoutHumanitarianOrgInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutHumanitarianOrgInput>
  }

  export type HumanitarianContractRenewalUpsertWithWhereUniqueWithoutHumanitarianOrgInput = {
    where: HumanitarianContractRenewalWhereUniqueInput
    update: XOR<HumanitarianContractRenewalUpdateWithoutHumanitarianOrgInput, HumanitarianContractRenewalUncheckedUpdateWithoutHumanitarianOrgInput>
    create: XOR<HumanitarianContractRenewalCreateWithoutHumanitarianOrgInput, HumanitarianContractRenewalUncheckedCreateWithoutHumanitarianOrgInput>
  }

  export type HumanitarianContractRenewalUpdateWithWhereUniqueWithoutHumanitarianOrgInput = {
    where: HumanitarianContractRenewalWhereUniqueInput
    data: XOR<HumanitarianContractRenewalUpdateWithoutHumanitarianOrgInput, HumanitarianContractRenewalUncheckedUpdateWithoutHumanitarianOrgInput>
  }

  export type HumanitarianContractRenewalUpdateManyWithWhereWithoutHumanitarianOrgInput = {
    where: HumanitarianContractRenewalScalarWhereInput
    data: XOR<HumanitarianContractRenewalUpdateManyMutationInput, HumanitarianContractRenewalUncheckedUpdateManyWithoutHumanitarianOrgInput>
  }

  export type ComplaintUpsertWithWhereUniqueWithoutHumanitarianOrgInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutHumanitarianOrgInput, ComplaintUncheckedUpdateWithoutHumanitarianOrgInput>
    create: XOR<ComplaintCreateWithoutHumanitarianOrgInput, ComplaintUncheckedCreateWithoutHumanitarianOrgInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutHumanitarianOrgInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutHumanitarianOrgInput, ComplaintUncheckedUpdateWithoutHumanitarianOrgInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutHumanitarianOrgInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutHumanitarianOrgInput>
  }

  export type ReportFileUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ReportFileWhereUniqueInput
    update: XOR<ReportFileUpdateWithoutOrganizationInput, ReportFileUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ReportFileCreateWithoutOrganizationInput, ReportFileUncheckedCreateWithoutOrganizationInput>
  }

  export type ReportFileUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ReportFileWhereUniqueInput
    data: XOR<ReportFileUpdateWithoutOrganizationInput, ReportFileUncheckedUpdateWithoutOrganizationInput>
  }

  export type ReportFileUpdateManyWithWhereWithoutOrganizationInput = {
    where: ReportFileScalarWhereInput
    data: XOR<ReportFileUpdateManyMutationInput, ReportFileUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ReportFileScalarWhereInput = {
    AND?: ReportFileScalarWhereInput | ReportFileScalarWhereInput[]
    OR?: ReportFileScalarWhereInput[]
    NOT?: ReportFileScalarWhereInput | ReportFileScalarWhereInput[]
    id?: StringFilter<"ReportFile"> | string
    fileName?: StringFilter<"ReportFile"> | string
    filePath?: StringFilter<"ReportFile"> | string
    organizationId?: StringFilter<"ReportFile"> | string
    startDate?: DateTimeFilter<"ReportFile"> | Date | string
    endDate?: DateTimeFilter<"ReportFile"> | Date | string
    fileSize?: IntFilter<"ReportFile"> | number
    mimeType?: StringFilter<"ReportFile"> | string
    uploadedAt?: DateTimeFilter<"ReportFile"> | Date | string
  }

  export type ProviderCreateWithoutVasTransactionsInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    contracts?: ContractCreateNestedManyWithoutProviderInput
    vasServices?: VasServiceCreateNestedManyWithoutProviderInput
    bulkServices?: BulkServiceCreateNestedManyWithoutProviderInput
    complaints?: ComplaintCreateNestedManyWithoutProviderInput
    logEntries?: LogEntryCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutVasTransactionsInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutProviderInput
    vasServices?: VasServiceUncheckedCreateNestedManyWithoutProviderInput
    bulkServices?: BulkServiceUncheckedCreateNestedManyWithoutProviderInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutProviderInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutVasTransactionsInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutVasTransactionsInput, ProviderUncheckedCreateWithoutVasTransactionsInput>
  }

  export type ServiceCreateWithoutVasTransactionsInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    contracts?: ServiceContractCreateNestedManyWithoutServiceInput
    vasServices?: VasServiceCreateNestedManyWithoutServiceInput
    bulkServices?: BulkServiceCreateNestedManyWithoutServiceInput
    complaints?: ComplaintCreateNestedManyWithoutServiceInput
    transactions?: ParkingTransactionCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutVasTransactionsInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    contracts?: ServiceContractUncheckedCreateNestedManyWithoutServiceInput
    vasServices?: VasServiceUncheckedCreateNestedManyWithoutServiceInput
    bulkServices?: BulkServiceUncheckedCreateNestedManyWithoutServiceInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutServiceInput
    transactions?: ParkingTransactionUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutVasTransactionsInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutVasTransactionsInput, ServiceUncheckedCreateWithoutVasTransactionsInput>
  }

  export type ProviderUpsertWithoutVasTransactionsInput = {
    update: XOR<ProviderUpdateWithoutVasTransactionsInput, ProviderUncheckedUpdateWithoutVasTransactionsInput>
    create: XOR<ProviderCreateWithoutVasTransactionsInput, ProviderUncheckedCreateWithoutVasTransactionsInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutVasTransactionsInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutVasTransactionsInput, ProviderUncheckedUpdateWithoutVasTransactionsInput>
  }

  export type ProviderUpdateWithoutVasTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUpdateManyWithoutProviderNestedInput
    vasServices?: VasServiceUpdateManyWithoutProviderNestedInput
    bulkServices?: BulkServiceUpdateManyWithoutProviderNestedInput
    complaints?: ComplaintUpdateManyWithoutProviderNestedInput
    logEntries?: LogEntryUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutVasTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutProviderNestedInput
    vasServices?: VasServiceUncheckedUpdateManyWithoutProviderNestedInput
    bulkServices?: BulkServiceUncheckedUpdateManyWithoutProviderNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutProviderNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ServiceUpsertWithoutVasTransactionsInput = {
    update: XOR<ServiceUpdateWithoutVasTransactionsInput, ServiceUncheckedUpdateWithoutVasTransactionsInput>
    create: XOR<ServiceCreateWithoutVasTransactionsInput, ServiceUncheckedCreateWithoutVasTransactionsInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutVasTransactionsInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutVasTransactionsInput, ServiceUncheckedUpdateWithoutVasTransactionsInput>
  }

  export type ServiceUpdateWithoutVasTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    contracts?: ServiceContractUpdateManyWithoutServiceNestedInput
    vasServices?: VasServiceUpdateManyWithoutServiceNestedInput
    bulkServices?: BulkServiceUpdateManyWithoutServiceNestedInput
    complaints?: ComplaintUpdateManyWithoutServiceNestedInput
    transactions?: ParkingTransactionUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutVasTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    contracts?: ServiceContractUncheckedUpdateManyWithoutServiceNestedInput
    vasServices?: VasServiceUncheckedUpdateManyWithoutServiceNestedInput
    bulkServices?: BulkServiceUncheckedUpdateManyWithoutServiceNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutServiceNestedInput
    transactions?: ParkingTransactionUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ParkingServiceCreateWithoutTransactionsInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    createdBy?: UserCreateNestedOneWithoutCreatedParkingServicesInput
    contracts?: ContractCreateNestedManyWithoutParkingServiceInput
    logEntries?: LogEntryCreateNestedManyWithoutParkingServiceInput
    complaints?: ComplaintCreateNestedManyWithoutParkingServiceInput
  }

  export type ParkingServiceUncheckedCreateWithoutTransactionsInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    createdById?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutParkingServiceInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutParkingServiceInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutParkingServiceInput
  }

  export type ParkingServiceCreateOrConnectWithoutTransactionsInput = {
    where: ParkingServiceWhereUniqueInput
    create: XOR<ParkingServiceCreateWithoutTransactionsInput, ParkingServiceUncheckedCreateWithoutTransactionsInput>
  }

  export type ServiceCreateWithoutTransactionsInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    contracts?: ServiceContractCreateNestedManyWithoutServiceInput
    vasServices?: VasServiceCreateNestedManyWithoutServiceInput
    bulkServices?: BulkServiceCreateNestedManyWithoutServiceInput
    complaints?: ComplaintCreateNestedManyWithoutServiceInput
    vasTransactions?: VasTransactionCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutTransactionsInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    contracts?: ServiceContractUncheckedCreateNestedManyWithoutServiceInput
    vasServices?: VasServiceUncheckedCreateNestedManyWithoutServiceInput
    bulkServices?: BulkServiceUncheckedCreateNestedManyWithoutServiceInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutServiceInput
    vasTransactions?: VasTransactionUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutTransactionsInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutTransactionsInput, ServiceUncheckedCreateWithoutTransactionsInput>
  }

  export type ParkingServiceUpsertWithoutTransactionsInput = {
    update: XOR<ParkingServiceUpdateWithoutTransactionsInput, ParkingServiceUncheckedUpdateWithoutTransactionsInput>
    create: XOR<ParkingServiceCreateWithoutTransactionsInput, ParkingServiceUncheckedCreateWithoutTransactionsInput>
    where?: ParkingServiceWhereInput
  }

  export type ParkingServiceUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: ParkingServiceWhereInput
    data: XOR<ParkingServiceUpdateWithoutTransactionsInput, ParkingServiceUncheckedUpdateWithoutTransactionsInput>
  }

  export type ParkingServiceUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneWithoutCreatedParkingServicesNestedInput
    contracts?: ContractUpdateManyWithoutParkingServiceNestedInput
    logEntries?: LogEntryUpdateManyWithoutParkingServiceNestedInput
    complaints?: ComplaintUpdateManyWithoutParkingServiceNestedInput
  }

  export type ParkingServiceUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutParkingServiceNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutParkingServiceNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutParkingServiceNestedInput
  }

  export type ServiceUpsertWithoutTransactionsInput = {
    update: XOR<ServiceUpdateWithoutTransactionsInput, ServiceUncheckedUpdateWithoutTransactionsInput>
    create: XOR<ServiceCreateWithoutTransactionsInput, ServiceUncheckedCreateWithoutTransactionsInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutTransactionsInput, ServiceUncheckedUpdateWithoutTransactionsInput>
  }

  export type ServiceUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    contracts?: ServiceContractUpdateManyWithoutServiceNestedInput
    vasServices?: VasServiceUpdateManyWithoutServiceNestedInput
    bulkServices?: BulkServiceUpdateManyWithoutServiceNestedInput
    complaints?: ComplaintUpdateManyWithoutServiceNestedInput
    vasTransactions?: VasTransactionUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    contracts?: ServiceContractUncheckedUpdateManyWithoutServiceNestedInput
    vasServices?: VasServiceUncheckedUpdateManyWithoutServiceNestedInput
    bulkServices?: BulkServiceUncheckedUpdateManyWithoutServiceNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutServiceNestedInput
    vasTransactions?: VasTransactionUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type UserCreateWithoutCreatedParkingServicesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedParkingServicesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedParkingServicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedParkingServicesInput, UserUncheckedCreateWithoutCreatedParkingServicesInput>
  }

  export type ParkingTransactionCreateWithoutParkingServiceInput = {
    id?: string
    date: Date | string
    group: string
    serviceName: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutTransactionsInput
  }

  export type ParkingTransactionUncheckedCreateWithoutParkingServiceInput = {
    id?: string
    date: Date | string
    group: string
    serviceName: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceId: string
  }

  export type ParkingTransactionCreateOrConnectWithoutParkingServiceInput = {
    where: ParkingTransactionWhereUniqueInput
    create: XOR<ParkingTransactionCreateWithoutParkingServiceInput, ParkingTransactionUncheckedCreateWithoutParkingServiceInput>
  }

  export type ParkingTransactionCreateManyParkingServiceInputEnvelope = {
    data: ParkingTransactionCreateManyParkingServiceInput | ParkingTransactionCreateManyParkingServiceInput[]
    skipDuplicates?: boolean
  }

  export type ContractCreateWithoutParkingServiceInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutContractsInput
    operator?: OperatorCreateNestedOneWithoutContractsInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutContractsInput
    services?: ServiceContractCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalCreateNestedManyWithoutContractInput
    createdBy: UserCreateNestedOneWithoutCreatedContractsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedContractsInput
    reminders?: ContractReminderCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutParkingServiceInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
    services?: ServiceContractUncheckedCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentUncheckedCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalUncheckedCreateNestedManyWithoutContractInput
    reminders?: ContractReminderUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutParkingServiceInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutParkingServiceInput, ContractUncheckedCreateWithoutParkingServiceInput>
  }

  export type ContractCreateManyParkingServiceInputEnvelope = {
    data: ContractCreateManyParkingServiceInput | ContractCreateManyParkingServiceInput[]
    skipDuplicates?: boolean
  }

  export type LogEntryCreateWithoutParkingServiceInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutLogEntriesInput
    bulkService?: BulkServiceCreateNestedOneWithoutLogEntriesInput
    createdBy: UserCreateNestedOneWithoutLogEntriesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedLogsInput
  }

  export type LogEntryUncheckedCreateWithoutParkingServiceInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    providerId?: string | null
    bulkServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById?: string | null
  }

  export type LogEntryCreateOrConnectWithoutParkingServiceInput = {
    where: LogEntryWhereUniqueInput
    create: XOR<LogEntryCreateWithoutParkingServiceInput, LogEntryUncheckedCreateWithoutParkingServiceInput>
  }

  export type LogEntryCreateManyParkingServiceInputEnvelope = {
    data: LogEntryCreateManyParkingServiceInput | LogEntryCreateManyParkingServiceInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutParkingServiceInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    service?: ServiceCreateNestedOneWithoutComplaintsInput
    product?: ProductCreateNestedOneWithoutComplaintsInput
    provider?: ProviderCreateNestedOneWithoutComplaintsInput
    submittedBy: UserCreateNestedOneWithoutSubmittedComplaintsInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedComplaintsInput
    comments?: CommentCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentCreateNestedManyWithoutComplaintInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutComplaintsInput
    statusHistory?: ComplaintStatusHistoryCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutParkingServiceInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutComplaintInput
    statusHistory?: ComplaintStatusHistoryUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutParkingServiceInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutParkingServiceInput, ComplaintUncheckedCreateWithoutParkingServiceInput>
  }

  export type ComplaintCreateManyParkingServiceInputEnvelope = {
    data: ComplaintCreateManyParkingServiceInput | ComplaintCreateManyParkingServiceInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedParkingServicesInput = {
    update: XOR<UserUpdateWithoutCreatedParkingServicesInput, UserUncheckedUpdateWithoutCreatedParkingServicesInput>
    create: XOR<UserCreateWithoutCreatedParkingServicesInput, UserUncheckedCreateWithoutCreatedParkingServicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedParkingServicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedParkingServicesInput, UserUncheckedUpdateWithoutCreatedParkingServicesInput>
  }

  export type UserUpdateWithoutCreatedParkingServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedParkingServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ParkingTransactionUpsertWithWhereUniqueWithoutParkingServiceInput = {
    where: ParkingTransactionWhereUniqueInput
    update: XOR<ParkingTransactionUpdateWithoutParkingServiceInput, ParkingTransactionUncheckedUpdateWithoutParkingServiceInput>
    create: XOR<ParkingTransactionCreateWithoutParkingServiceInput, ParkingTransactionUncheckedCreateWithoutParkingServiceInput>
  }

  export type ParkingTransactionUpdateWithWhereUniqueWithoutParkingServiceInput = {
    where: ParkingTransactionWhereUniqueInput
    data: XOR<ParkingTransactionUpdateWithoutParkingServiceInput, ParkingTransactionUncheckedUpdateWithoutParkingServiceInput>
  }

  export type ParkingTransactionUpdateManyWithWhereWithoutParkingServiceInput = {
    where: ParkingTransactionScalarWhereInput
    data: XOR<ParkingTransactionUpdateManyMutationInput, ParkingTransactionUncheckedUpdateManyWithoutParkingServiceInput>
  }

  export type ParkingTransactionScalarWhereInput = {
    AND?: ParkingTransactionScalarWhereInput | ParkingTransactionScalarWhereInput[]
    OR?: ParkingTransactionScalarWhereInput[]
    NOT?: ParkingTransactionScalarWhereInput | ParkingTransactionScalarWhereInput[]
    id?: StringFilter<"ParkingTransaction"> | string
    parkingServiceId?: StringFilter<"ParkingTransaction"> | string
    date?: DateTimeFilter<"ParkingTransaction"> | Date | string
    group?: StringFilter<"ParkingTransaction"> | string
    serviceName?: StringFilter<"ParkingTransaction"> | string
    price?: FloatFilter<"ParkingTransaction"> | number
    quantity?: FloatFilter<"ParkingTransaction"> | number
    amount?: FloatFilter<"ParkingTransaction"> | number
    createdAt?: DateTimeFilter<"ParkingTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"ParkingTransaction"> | Date | string
    serviceId?: StringFilter<"ParkingTransaction"> | string
  }

  export type ContractUpsertWithWhereUniqueWithoutParkingServiceInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutParkingServiceInput, ContractUncheckedUpdateWithoutParkingServiceInput>
    create: XOR<ContractCreateWithoutParkingServiceInput, ContractUncheckedCreateWithoutParkingServiceInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutParkingServiceInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutParkingServiceInput, ContractUncheckedUpdateWithoutParkingServiceInput>
  }

  export type ContractUpdateManyWithWhereWithoutParkingServiceInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutParkingServiceInput>
  }

  export type LogEntryUpsertWithWhereUniqueWithoutParkingServiceInput = {
    where: LogEntryWhereUniqueInput
    update: XOR<LogEntryUpdateWithoutParkingServiceInput, LogEntryUncheckedUpdateWithoutParkingServiceInput>
    create: XOR<LogEntryCreateWithoutParkingServiceInput, LogEntryUncheckedCreateWithoutParkingServiceInput>
  }

  export type LogEntryUpdateWithWhereUniqueWithoutParkingServiceInput = {
    where: LogEntryWhereUniqueInput
    data: XOR<LogEntryUpdateWithoutParkingServiceInput, LogEntryUncheckedUpdateWithoutParkingServiceInput>
  }

  export type LogEntryUpdateManyWithWhereWithoutParkingServiceInput = {
    where: LogEntryScalarWhereInput
    data: XOR<LogEntryUpdateManyMutationInput, LogEntryUncheckedUpdateManyWithoutParkingServiceInput>
  }

  export type ComplaintUpsertWithWhereUniqueWithoutParkingServiceInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutParkingServiceInput, ComplaintUncheckedUpdateWithoutParkingServiceInput>
    create: XOR<ComplaintCreateWithoutParkingServiceInput, ComplaintUncheckedCreateWithoutParkingServiceInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutParkingServiceInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutParkingServiceInput, ComplaintUncheckedUpdateWithoutParkingServiceInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutParkingServiceInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutParkingServiceInput>
  }

  export type ProviderCreateWithoutContractsInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    vasServices?: VasServiceCreateNestedManyWithoutProviderInput
    bulkServices?: BulkServiceCreateNestedManyWithoutProviderInput
    complaints?: ComplaintCreateNestedManyWithoutProviderInput
    vasTransactions?: VasTransactionCreateNestedManyWithoutProviderInput
    logEntries?: LogEntryCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutContractsInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    vasServices?: VasServiceUncheckedCreateNestedManyWithoutProviderInput
    bulkServices?: BulkServiceUncheckedCreateNestedManyWithoutProviderInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutProviderInput
    vasTransactions?: VasTransactionUncheckedCreateNestedManyWithoutProviderInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutContractsInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutContractsInput, ProviderUncheckedCreateWithoutContractsInput>
  }

  export type OperatorCreateWithoutContractsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    logoUrl?: string | null
    website?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperatorUncheckedCreateWithoutContractsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    logoUrl?: string | null
    website?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperatorCreateOrConnectWithoutContractsInput = {
    where: OperatorWhereUniqueInput
    create: XOR<OperatorCreateWithoutContractsInput, OperatorUncheckedCreateWithoutContractsInput>
  }

  export type HumanitarianOrgCreateWithoutContractsInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    mission?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pib?: string | null
    registrationNumber?: string | null
    bank?: string | null
    accountNumber?: string | null
    shortNumber?: string | null
    renewals?: HumanitarianContractRenewalCreateNestedManyWithoutHumanitarianOrgInput
    complaints?: ComplaintCreateNestedManyWithoutHumanitarianOrgInput
    reportFiles?: ReportFileCreateNestedManyWithoutOrganizationInput
  }

  export type HumanitarianOrgUncheckedCreateWithoutContractsInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    mission?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pib?: string | null
    registrationNumber?: string | null
    bank?: string | null
    accountNumber?: string | null
    shortNumber?: string | null
    renewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutHumanitarianOrgInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutHumanitarianOrgInput
    reportFiles?: ReportFileUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type HumanitarianOrgCreateOrConnectWithoutContractsInput = {
    where: HumanitarianOrgWhereUniqueInput
    create: XOR<HumanitarianOrgCreateWithoutContractsInput, HumanitarianOrgUncheckedCreateWithoutContractsInput>
  }

  export type ParkingServiceCreateWithoutContractsInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    createdBy?: UserCreateNestedOneWithoutCreatedParkingServicesInput
    transactions?: ParkingTransactionCreateNestedManyWithoutParkingServiceInput
    logEntries?: LogEntryCreateNestedManyWithoutParkingServiceInput
    complaints?: ComplaintCreateNestedManyWithoutParkingServiceInput
  }

  export type ParkingServiceUncheckedCreateWithoutContractsInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    createdById?: string | null
    transactions?: ParkingTransactionUncheckedCreateNestedManyWithoutParkingServiceInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutParkingServiceInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutParkingServiceInput
  }

  export type ParkingServiceCreateOrConnectWithoutContractsInput = {
    where: ParkingServiceWhereUniqueInput
    create: XOR<ParkingServiceCreateWithoutContractsInput, ParkingServiceUncheckedCreateWithoutContractsInput>
  }

  export type ServiceContractCreateWithoutContractInput = {
    id?: string
    specificTerms?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutContractsInput
  }

  export type ServiceContractUncheckedCreateWithoutContractInput = {
    id?: string
    serviceId: string
    specificTerms?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceContractCreateOrConnectWithoutContractInput = {
    where: ServiceContractWhereUniqueInput
    create: XOR<ServiceContractCreateWithoutContractInput, ServiceContractUncheckedCreateWithoutContractInput>
  }

  export type ServiceContractCreateManyContractInputEnvelope = {
    data: ServiceContractCreateManyContractInput | ServiceContractCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type ContractAttachmentCreateWithoutContractInput = {
    id?: string
    name: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
    uploadedBy: UserCreateNestedOneWithoutUploadedAttachmentsInput
  }

  export type ContractAttachmentUncheckedCreateWithoutContractInput = {
    id?: string
    name: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
    uploadedById: string
  }

  export type ContractAttachmentCreateOrConnectWithoutContractInput = {
    where: ContractAttachmentWhereUniqueInput
    create: XOR<ContractAttachmentCreateWithoutContractInput, ContractAttachmentUncheckedCreateWithoutContractInput>
  }

  export type ContractAttachmentCreateManyContractInputEnvelope = {
    data: ContractAttachmentCreateManyContractInput | ContractAttachmentCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type HumanitarianContractRenewalCreateWithoutContractInput = {
    id?: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    humanitarianOrg: HumanitarianOrgCreateNestedOneWithoutRenewalsInput
    createdBy: UserCreateNestedOneWithoutCreatedHumanitarianRenewalsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedHumanitarianRenewalsInput
  }

  export type HumanitarianContractRenewalUncheckedCreateWithoutContractInput = {
    id?: string
    humanitarianOrgId: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type HumanitarianContractRenewalCreateOrConnectWithoutContractInput = {
    where: HumanitarianContractRenewalWhereUniqueInput
    create: XOR<HumanitarianContractRenewalCreateWithoutContractInput, HumanitarianContractRenewalUncheckedCreateWithoutContractInput>
  }

  export type HumanitarianContractRenewalCreateManyContractInputEnvelope = {
    data: HumanitarianContractRenewalCreateManyContractInput | HumanitarianContractRenewalCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type ContractRenewalCreateWithoutContractInput = {
    id?: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: ContractRenewalAttachmentCreateNestedManyWithoutRenewalInput
    createdBy: UserCreateNestedOneWithoutCreatedRenewalsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedRenewalsInput
  }

  export type ContractRenewalUncheckedCreateWithoutContractInput = {
    id?: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
    attachments?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutRenewalInput
  }

  export type ContractRenewalCreateOrConnectWithoutContractInput = {
    where: ContractRenewalWhereUniqueInput
    create: XOR<ContractRenewalCreateWithoutContractInput, ContractRenewalUncheckedCreateWithoutContractInput>
  }

  export type ContractRenewalCreateManyContractInputEnvelope = {
    data: ContractRenewalCreateManyContractInput | ContractRenewalCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedContractsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedContractsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedContractsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedContractsInput, UserUncheckedCreateWithoutCreatedContractsInput>
  }

  export type UserCreateWithoutModifiedContractsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutModifiedContractsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutModifiedContractsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutModifiedContractsInput, UserUncheckedCreateWithoutModifiedContractsInput>
  }

  export type ContractReminderCreateWithoutContractInput = {
    id?: string
    reminderDate: Date | string
    reminderType: string
    isAcknowledged?: boolean
    createdAt?: Date | string
    acknowledgedBy?: UserCreateNestedOneWithoutAcknowledgedRemindersInput
  }

  export type ContractReminderUncheckedCreateWithoutContractInput = {
    id?: string
    reminderDate: Date | string
    reminderType: string
    isAcknowledged?: boolean
    acknowledgedById?: string | null
    createdAt?: Date | string
  }

  export type ContractReminderCreateOrConnectWithoutContractInput = {
    where: ContractReminderWhereUniqueInput
    create: XOR<ContractReminderCreateWithoutContractInput, ContractReminderUncheckedCreateWithoutContractInput>
  }

  export type ContractReminderCreateManyContractInputEnvelope = {
    data: ContractReminderCreateManyContractInput | ContractReminderCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type ProviderUpsertWithoutContractsInput = {
    update: XOR<ProviderUpdateWithoutContractsInput, ProviderUncheckedUpdateWithoutContractsInput>
    create: XOR<ProviderCreateWithoutContractsInput, ProviderUncheckedCreateWithoutContractsInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutContractsInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutContractsInput, ProviderUncheckedUpdateWithoutContractsInput>
  }

  export type ProviderUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vasServices?: VasServiceUpdateManyWithoutProviderNestedInput
    bulkServices?: BulkServiceUpdateManyWithoutProviderNestedInput
    complaints?: ComplaintUpdateManyWithoutProviderNestedInput
    vasTransactions?: VasTransactionUpdateManyWithoutProviderNestedInput
    logEntries?: LogEntryUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vasServices?: VasServiceUncheckedUpdateManyWithoutProviderNestedInput
    bulkServices?: BulkServiceUncheckedUpdateManyWithoutProviderNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutProviderNestedInput
    vasTransactions?: VasTransactionUncheckedUpdateManyWithoutProviderNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type OperatorUpsertWithoutContractsInput = {
    update: XOR<OperatorUpdateWithoutContractsInput, OperatorUncheckedUpdateWithoutContractsInput>
    create: XOR<OperatorCreateWithoutContractsInput, OperatorUncheckedCreateWithoutContractsInput>
    where?: OperatorWhereInput
  }

  export type OperatorUpdateToOneWithWhereWithoutContractsInput = {
    where?: OperatorWhereInput
    data: XOR<OperatorUpdateWithoutContractsInput, OperatorUncheckedUpdateWithoutContractsInput>
  }

  export type OperatorUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperatorUncheckedUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HumanitarianOrgUpsertWithoutContractsInput = {
    update: XOR<HumanitarianOrgUpdateWithoutContractsInput, HumanitarianOrgUncheckedUpdateWithoutContractsInput>
    create: XOR<HumanitarianOrgCreateWithoutContractsInput, HumanitarianOrgUncheckedCreateWithoutContractsInput>
    where?: HumanitarianOrgWhereInput
  }

  export type HumanitarianOrgUpdateToOneWithWhereWithoutContractsInput = {
    where?: HumanitarianOrgWhereInput
    data: XOR<HumanitarianOrgUpdateWithoutContractsInput, HumanitarianOrgUncheckedUpdateWithoutContractsInput>
  }

  export type HumanitarianOrgUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pib?: NullableStringFieldUpdateOperationsInput | string | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shortNumber?: NullableStringFieldUpdateOperationsInput | string | null
    renewals?: HumanitarianContractRenewalUpdateManyWithoutHumanitarianOrgNestedInput
    complaints?: ComplaintUpdateManyWithoutHumanitarianOrgNestedInput
    reportFiles?: ReportFileUpdateManyWithoutOrganizationNestedInput
  }

  export type HumanitarianOrgUncheckedUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pib?: NullableStringFieldUpdateOperationsInput | string | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shortNumber?: NullableStringFieldUpdateOperationsInput | string | null
    renewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutHumanitarianOrgNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutHumanitarianOrgNestedInput
    reportFiles?: ReportFileUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type ParkingServiceUpsertWithoutContractsInput = {
    update: XOR<ParkingServiceUpdateWithoutContractsInput, ParkingServiceUncheckedUpdateWithoutContractsInput>
    create: XOR<ParkingServiceCreateWithoutContractsInput, ParkingServiceUncheckedCreateWithoutContractsInput>
    where?: ParkingServiceWhereInput
  }

  export type ParkingServiceUpdateToOneWithWhereWithoutContractsInput = {
    where?: ParkingServiceWhereInput
    data: XOR<ParkingServiceUpdateWithoutContractsInput, ParkingServiceUncheckedUpdateWithoutContractsInput>
  }

  export type ParkingServiceUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneWithoutCreatedParkingServicesNestedInput
    transactions?: ParkingTransactionUpdateManyWithoutParkingServiceNestedInput
    logEntries?: LogEntryUpdateManyWithoutParkingServiceNestedInput
    complaints?: ComplaintUpdateManyWithoutParkingServiceNestedInput
  }

  export type ParkingServiceUncheckedUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    transactions?: ParkingTransactionUncheckedUpdateManyWithoutParkingServiceNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutParkingServiceNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutParkingServiceNestedInput
  }

  export type ServiceContractUpsertWithWhereUniqueWithoutContractInput = {
    where: ServiceContractWhereUniqueInput
    update: XOR<ServiceContractUpdateWithoutContractInput, ServiceContractUncheckedUpdateWithoutContractInput>
    create: XOR<ServiceContractCreateWithoutContractInput, ServiceContractUncheckedCreateWithoutContractInput>
  }

  export type ServiceContractUpdateWithWhereUniqueWithoutContractInput = {
    where: ServiceContractWhereUniqueInput
    data: XOR<ServiceContractUpdateWithoutContractInput, ServiceContractUncheckedUpdateWithoutContractInput>
  }

  export type ServiceContractUpdateManyWithWhereWithoutContractInput = {
    where: ServiceContractScalarWhereInput
    data: XOR<ServiceContractUpdateManyMutationInput, ServiceContractUncheckedUpdateManyWithoutContractInput>
  }

  export type ServiceContractScalarWhereInput = {
    AND?: ServiceContractScalarWhereInput | ServiceContractScalarWhereInput[]
    OR?: ServiceContractScalarWhereInput[]
    NOT?: ServiceContractScalarWhereInput | ServiceContractScalarWhereInput[]
    id?: StringFilter<"ServiceContract"> | string
    contractId?: StringFilter<"ServiceContract"> | string
    serviceId?: StringFilter<"ServiceContract"> | string
    specificTerms?: StringNullableFilter<"ServiceContract"> | string | null
    createdAt?: DateTimeFilter<"ServiceContract"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceContract"> | Date | string
  }

  export type ContractAttachmentUpsertWithWhereUniqueWithoutContractInput = {
    where: ContractAttachmentWhereUniqueInput
    update: XOR<ContractAttachmentUpdateWithoutContractInput, ContractAttachmentUncheckedUpdateWithoutContractInput>
    create: XOR<ContractAttachmentCreateWithoutContractInput, ContractAttachmentUncheckedCreateWithoutContractInput>
  }

  export type ContractAttachmentUpdateWithWhereUniqueWithoutContractInput = {
    where: ContractAttachmentWhereUniqueInput
    data: XOR<ContractAttachmentUpdateWithoutContractInput, ContractAttachmentUncheckedUpdateWithoutContractInput>
  }

  export type ContractAttachmentUpdateManyWithWhereWithoutContractInput = {
    where: ContractAttachmentScalarWhereInput
    data: XOR<ContractAttachmentUpdateManyMutationInput, ContractAttachmentUncheckedUpdateManyWithoutContractInput>
  }

  export type HumanitarianContractRenewalUpsertWithWhereUniqueWithoutContractInput = {
    where: HumanitarianContractRenewalWhereUniqueInput
    update: XOR<HumanitarianContractRenewalUpdateWithoutContractInput, HumanitarianContractRenewalUncheckedUpdateWithoutContractInput>
    create: XOR<HumanitarianContractRenewalCreateWithoutContractInput, HumanitarianContractRenewalUncheckedCreateWithoutContractInput>
  }

  export type HumanitarianContractRenewalUpdateWithWhereUniqueWithoutContractInput = {
    where: HumanitarianContractRenewalWhereUniqueInput
    data: XOR<HumanitarianContractRenewalUpdateWithoutContractInput, HumanitarianContractRenewalUncheckedUpdateWithoutContractInput>
  }

  export type HumanitarianContractRenewalUpdateManyWithWhereWithoutContractInput = {
    where: HumanitarianContractRenewalScalarWhereInput
    data: XOR<HumanitarianContractRenewalUpdateManyMutationInput, HumanitarianContractRenewalUncheckedUpdateManyWithoutContractInput>
  }

  export type ContractRenewalUpsertWithWhereUniqueWithoutContractInput = {
    where: ContractRenewalWhereUniqueInput
    update: XOR<ContractRenewalUpdateWithoutContractInput, ContractRenewalUncheckedUpdateWithoutContractInput>
    create: XOR<ContractRenewalCreateWithoutContractInput, ContractRenewalUncheckedCreateWithoutContractInput>
  }

  export type ContractRenewalUpdateWithWhereUniqueWithoutContractInput = {
    where: ContractRenewalWhereUniqueInput
    data: XOR<ContractRenewalUpdateWithoutContractInput, ContractRenewalUncheckedUpdateWithoutContractInput>
  }

  export type ContractRenewalUpdateManyWithWhereWithoutContractInput = {
    where: ContractRenewalScalarWhereInput
    data: XOR<ContractRenewalUpdateManyMutationInput, ContractRenewalUncheckedUpdateManyWithoutContractInput>
  }

  export type UserUpsertWithoutCreatedContractsInput = {
    update: XOR<UserUpdateWithoutCreatedContractsInput, UserUncheckedUpdateWithoutCreatedContractsInput>
    create: XOR<UserCreateWithoutCreatedContractsInput, UserUncheckedCreateWithoutCreatedContractsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedContractsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedContractsInput, UserUncheckedUpdateWithoutCreatedContractsInput>
  }

  export type UserUpdateWithoutCreatedContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutModifiedContractsInput = {
    update: XOR<UserUpdateWithoutModifiedContractsInput, UserUncheckedUpdateWithoutModifiedContractsInput>
    create: XOR<UserCreateWithoutModifiedContractsInput, UserUncheckedCreateWithoutModifiedContractsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutModifiedContractsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutModifiedContractsInput, UserUncheckedUpdateWithoutModifiedContractsInput>
  }

  export type UserUpdateWithoutModifiedContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutModifiedContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ContractReminderUpsertWithWhereUniqueWithoutContractInput = {
    where: ContractReminderWhereUniqueInput
    update: XOR<ContractReminderUpdateWithoutContractInput, ContractReminderUncheckedUpdateWithoutContractInput>
    create: XOR<ContractReminderCreateWithoutContractInput, ContractReminderUncheckedCreateWithoutContractInput>
  }

  export type ContractReminderUpdateWithWhereUniqueWithoutContractInput = {
    where: ContractReminderWhereUniqueInput
    data: XOR<ContractReminderUpdateWithoutContractInput, ContractReminderUncheckedUpdateWithoutContractInput>
  }

  export type ContractReminderUpdateManyWithWhereWithoutContractInput = {
    where: ContractReminderScalarWhereInput
    data: XOR<ContractReminderUpdateManyMutationInput, ContractReminderUncheckedUpdateManyWithoutContractInput>
  }

  export type ContractCreateWithoutRenewalsInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutContractsInput
    operator?: OperatorCreateNestedOneWithoutContractsInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutContractsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutContractsInput
    services?: ServiceContractCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutContractInput
    createdBy: UserCreateNestedOneWithoutCreatedContractsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedContractsInput
    reminders?: ContractReminderCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutRenewalsInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
    services?: ServiceContractUncheckedCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentUncheckedCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutContractInput
    reminders?: ContractReminderUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutRenewalsInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutRenewalsInput, ContractUncheckedCreateWithoutRenewalsInput>
  }

  export type ContractRenewalAttachmentCreateWithoutRenewalInput = {
    id?: string
    fileName: string
    fileSize: number
    fileType: string
    filePath: string
    uploadedAt?: Date | string
    description?: string | null
    uploadedBy: UserCreateNestedOneWithoutUploadedRenewalFilesInput
  }

  export type ContractRenewalAttachmentUncheckedCreateWithoutRenewalInput = {
    id?: string
    fileName: string
    fileSize: number
    fileType: string
    filePath: string
    uploadedAt?: Date | string
    uploadedById: string
    description?: string | null
  }

  export type ContractRenewalAttachmentCreateOrConnectWithoutRenewalInput = {
    where: ContractRenewalAttachmentWhereUniqueInput
    create: XOR<ContractRenewalAttachmentCreateWithoutRenewalInput, ContractRenewalAttachmentUncheckedCreateWithoutRenewalInput>
  }

  export type ContractRenewalAttachmentCreateManyRenewalInputEnvelope = {
    data: ContractRenewalAttachmentCreateManyRenewalInput | ContractRenewalAttachmentCreateManyRenewalInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedRenewalsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedRenewalsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedRenewalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedRenewalsInput, UserUncheckedCreateWithoutCreatedRenewalsInput>
  }

  export type UserCreateWithoutModifiedRenewalsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutModifiedRenewalsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutModifiedRenewalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutModifiedRenewalsInput, UserUncheckedCreateWithoutModifiedRenewalsInput>
  }

  export type ContractUpsertWithoutRenewalsInput = {
    update: XOR<ContractUpdateWithoutRenewalsInput, ContractUncheckedUpdateWithoutRenewalsInput>
    create: XOR<ContractCreateWithoutRenewalsInput, ContractUncheckedCreateWithoutRenewalsInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutRenewalsInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutRenewalsInput, ContractUncheckedUpdateWithoutRenewalsInput>
  }

  export type ContractUpdateWithoutRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutContractsNestedInput
    operator?: OperatorUpdateOneWithoutContractsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutContractsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutContractsNestedInput
    services?: ServiceContractUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutContractNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedContractsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedContractsNestedInput
    reminders?: ContractReminderUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceContractUncheckedUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUncheckedUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    reminders?: ContractReminderUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractRenewalAttachmentUpsertWithWhereUniqueWithoutRenewalInput = {
    where: ContractRenewalAttachmentWhereUniqueInput
    update: XOR<ContractRenewalAttachmentUpdateWithoutRenewalInput, ContractRenewalAttachmentUncheckedUpdateWithoutRenewalInput>
    create: XOR<ContractRenewalAttachmentCreateWithoutRenewalInput, ContractRenewalAttachmentUncheckedCreateWithoutRenewalInput>
  }

  export type ContractRenewalAttachmentUpdateWithWhereUniqueWithoutRenewalInput = {
    where: ContractRenewalAttachmentWhereUniqueInput
    data: XOR<ContractRenewalAttachmentUpdateWithoutRenewalInput, ContractRenewalAttachmentUncheckedUpdateWithoutRenewalInput>
  }

  export type ContractRenewalAttachmentUpdateManyWithWhereWithoutRenewalInput = {
    where: ContractRenewalAttachmentScalarWhereInput
    data: XOR<ContractRenewalAttachmentUpdateManyMutationInput, ContractRenewalAttachmentUncheckedUpdateManyWithoutRenewalInput>
  }

  export type UserUpsertWithoutCreatedRenewalsInput = {
    update: XOR<UserUpdateWithoutCreatedRenewalsInput, UserUncheckedUpdateWithoutCreatedRenewalsInput>
    create: XOR<UserCreateWithoutCreatedRenewalsInput, UserUncheckedCreateWithoutCreatedRenewalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedRenewalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedRenewalsInput, UserUncheckedUpdateWithoutCreatedRenewalsInput>
  }

  export type UserUpdateWithoutCreatedRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutModifiedRenewalsInput = {
    update: XOR<UserUpdateWithoutModifiedRenewalsInput, UserUncheckedUpdateWithoutModifiedRenewalsInput>
    create: XOR<UserCreateWithoutModifiedRenewalsInput, UserUncheckedCreateWithoutModifiedRenewalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutModifiedRenewalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutModifiedRenewalsInput, UserUncheckedUpdateWithoutModifiedRenewalsInput>
  }

  export type UserUpdateWithoutModifiedRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutModifiedRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ContractRenewalCreateWithoutAttachmentsInput = {
    id?: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: ContractCreateNestedOneWithoutRenewalsInput
    createdBy: UserCreateNestedOneWithoutCreatedRenewalsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedRenewalsInput
  }

  export type ContractRenewalUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    contractId: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type ContractRenewalCreateOrConnectWithoutAttachmentsInput = {
    where: ContractRenewalWhereUniqueInput
    create: XOR<ContractRenewalCreateWithoutAttachmentsInput, ContractRenewalUncheckedCreateWithoutAttachmentsInput>
  }

  export type UserCreateWithoutUploadedRenewalFilesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutUploadedRenewalFilesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutUploadedRenewalFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadedRenewalFilesInput, UserUncheckedCreateWithoutUploadedRenewalFilesInput>
  }

  export type ContractRenewalUpsertWithoutAttachmentsInput = {
    update: XOR<ContractRenewalUpdateWithoutAttachmentsInput, ContractRenewalUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<ContractRenewalCreateWithoutAttachmentsInput, ContractRenewalUncheckedCreateWithoutAttachmentsInput>
    where?: ContractRenewalWhereInput
  }

  export type ContractRenewalUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: ContractRenewalWhereInput
    data: XOR<ContractRenewalUpdateWithoutAttachmentsInput, ContractRenewalUncheckedUpdateWithoutAttachmentsInput>
  }

  export type ContractRenewalUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutRenewalsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedRenewalsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedRenewalsNestedInput
  }

  export type ContractRenewalUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutUploadedRenewalFilesInput = {
    update: XOR<UserUpdateWithoutUploadedRenewalFilesInput, UserUncheckedUpdateWithoutUploadedRenewalFilesInput>
    create: XOR<UserCreateWithoutUploadedRenewalFilesInput, UserUncheckedCreateWithoutUploadedRenewalFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadedRenewalFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadedRenewalFilesInput, UserUncheckedUpdateWithoutUploadedRenewalFilesInput>
  }

  export type UserUpdateWithoutUploadedRenewalFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadedRenewalFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ContractCreateWithoutHumanitarianRenewalsInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutContractsInput
    operator?: OperatorCreateNestedOneWithoutContractsInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutContractsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutContractsInput
    services?: ServiceContractCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalCreateNestedManyWithoutContractInput
    createdBy: UserCreateNestedOneWithoutCreatedContractsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedContractsInput
    reminders?: ContractReminderCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutHumanitarianRenewalsInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
    services?: ServiceContractUncheckedCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentUncheckedCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalUncheckedCreateNestedManyWithoutContractInput
    reminders?: ContractReminderUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutHumanitarianRenewalsInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutHumanitarianRenewalsInput, ContractUncheckedCreateWithoutHumanitarianRenewalsInput>
  }

  export type HumanitarianOrgCreateWithoutRenewalsInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    mission?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pib?: string | null
    registrationNumber?: string | null
    bank?: string | null
    accountNumber?: string | null
    shortNumber?: string | null
    contracts?: ContractCreateNestedManyWithoutHumanitarianOrgInput
    complaints?: ComplaintCreateNestedManyWithoutHumanitarianOrgInput
    reportFiles?: ReportFileCreateNestedManyWithoutOrganizationInput
  }

  export type HumanitarianOrgUncheckedCreateWithoutRenewalsInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    mission?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pib?: string | null
    registrationNumber?: string | null
    bank?: string | null
    accountNumber?: string | null
    shortNumber?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutHumanitarianOrgInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutHumanitarianOrgInput
    reportFiles?: ReportFileUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type HumanitarianOrgCreateOrConnectWithoutRenewalsInput = {
    where: HumanitarianOrgWhereUniqueInput
    create: XOR<HumanitarianOrgCreateWithoutRenewalsInput, HumanitarianOrgUncheckedCreateWithoutRenewalsInput>
  }

  export type UserCreateWithoutCreatedHumanitarianRenewalsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedHumanitarianRenewalsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedHumanitarianRenewalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedHumanitarianRenewalsInput, UserUncheckedCreateWithoutCreatedHumanitarianRenewalsInput>
  }

  export type UserCreateWithoutModifiedHumanitarianRenewalsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutModifiedHumanitarianRenewalsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutModifiedHumanitarianRenewalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutModifiedHumanitarianRenewalsInput, UserUncheckedCreateWithoutModifiedHumanitarianRenewalsInput>
  }

  export type ContractUpsertWithoutHumanitarianRenewalsInput = {
    update: XOR<ContractUpdateWithoutHumanitarianRenewalsInput, ContractUncheckedUpdateWithoutHumanitarianRenewalsInput>
    create: XOR<ContractCreateWithoutHumanitarianRenewalsInput, ContractUncheckedCreateWithoutHumanitarianRenewalsInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutHumanitarianRenewalsInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutHumanitarianRenewalsInput, ContractUncheckedUpdateWithoutHumanitarianRenewalsInput>
  }

  export type ContractUpdateWithoutHumanitarianRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutContractsNestedInput
    operator?: OperatorUpdateOneWithoutContractsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutContractsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutContractsNestedInput
    services?: ServiceContractUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUpdateManyWithoutContractNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedContractsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedContractsNestedInput
    reminders?: ContractReminderUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutHumanitarianRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceContractUncheckedUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUncheckedUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    reminders?: ContractReminderUncheckedUpdateManyWithoutContractNestedInput
  }

  export type HumanitarianOrgUpsertWithoutRenewalsInput = {
    update: XOR<HumanitarianOrgUpdateWithoutRenewalsInput, HumanitarianOrgUncheckedUpdateWithoutRenewalsInput>
    create: XOR<HumanitarianOrgCreateWithoutRenewalsInput, HumanitarianOrgUncheckedCreateWithoutRenewalsInput>
    where?: HumanitarianOrgWhereInput
  }

  export type HumanitarianOrgUpdateToOneWithWhereWithoutRenewalsInput = {
    where?: HumanitarianOrgWhereInput
    data: XOR<HumanitarianOrgUpdateWithoutRenewalsInput, HumanitarianOrgUncheckedUpdateWithoutRenewalsInput>
  }

  export type HumanitarianOrgUpdateWithoutRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pib?: NullableStringFieldUpdateOperationsInput | string | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shortNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUpdateManyWithoutHumanitarianOrgNestedInput
    complaints?: ComplaintUpdateManyWithoutHumanitarianOrgNestedInput
    reportFiles?: ReportFileUpdateManyWithoutOrganizationNestedInput
  }

  export type HumanitarianOrgUncheckedUpdateWithoutRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pib?: NullableStringFieldUpdateOperationsInput | string | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shortNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutHumanitarianOrgNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutHumanitarianOrgNestedInput
    reportFiles?: ReportFileUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutCreatedHumanitarianRenewalsInput = {
    update: XOR<UserUpdateWithoutCreatedHumanitarianRenewalsInput, UserUncheckedUpdateWithoutCreatedHumanitarianRenewalsInput>
    create: XOR<UserCreateWithoutCreatedHumanitarianRenewalsInput, UserUncheckedCreateWithoutCreatedHumanitarianRenewalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedHumanitarianRenewalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedHumanitarianRenewalsInput, UserUncheckedUpdateWithoutCreatedHumanitarianRenewalsInput>
  }

  export type UserUpdateWithoutCreatedHumanitarianRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedHumanitarianRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutModifiedHumanitarianRenewalsInput = {
    update: XOR<UserUpdateWithoutModifiedHumanitarianRenewalsInput, UserUncheckedUpdateWithoutModifiedHumanitarianRenewalsInput>
    create: XOR<UserCreateWithoutModifiedHumanitarianRenewalsInput, UserUncheckedCreateWithoutModifiedHumanitarianRenewalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutModifiedHumanitarianRenewalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutModifiedHumanitarianRenewalsInput, UserUncheckedUpdateWithoutModifiedHumanitarianRenewalsInput>
  }

  export type UserUpdateWithoutModifiedHumanitarianRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutModifiedHumanitarianRenewalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserCreateWithoutSenderBlacklistsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutSenderBlacklistsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutSenderBlacklistsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSenderBlacklistsInput, UserUncheckedCreateWithoutSenderBlacklistsInput>
  }

  export type BlacklistLogCreateWithoutBlacklistEntryInput = {
    id?: string
    action: $Enums.LogBlackType
    entityType?: string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type BlacklistLogUncheckedCreateWithoutBlacklistEntryInput = {
    id?: string
    action: $Enums.LogBlackType
    entityType?: string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type BlacklistLogCreateOrConnectWithoutBlacklistEntryInput = {
    where: BlacklistLogWhereUniqueInput
    create: XOR<BlacklistLogCreateWithoutBlacklistEntryInput, BlacklistLogUncheckedCreateWithoutBlacklistEntryInput>
  }

  export type BlacklistLogCreateManyBlacklistEntryInputEnvelope = {
    data: BlacklistLogCreateManyBlacklistEntryInput | BlacklistLogCreateManyBlacklistEntryInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutModifiedBlacklistsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutModifiedBlacklistsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutModifiedBlacklistsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutModifiedBlacklistsInput, UserUncheckedCreateWithoutModifiedBlacklistsInput>
  }

  export type UserUpsertWithoutSenderBlacklistsInput = {
    update: XOR<UserUpdateWithoutSenderBlacklistsInput, UserUncheckedUpdateWithoutSenderBlacklistsInput>
    create: XOR<UserCreateWithoutSenderBlacklistsInput, UserUncheckedCreateWithoutSenderBlacklistsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSenderBlacklistsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSenderBlacklistsInput, UserUncheckedUpdateWithoutSenderBlacklistsInput>
  }

  export type UserUpdateWithoutSenderBlacklistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSenderBlacklistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type BlacklistLogUpsertWithWhereUniqueWithoutBlacklistEntryInput = {
    where: BlacklistLogWhereUniqueInput
    update: XOR<BlacklistLogUpdateWithoutBlacklistEntryInput, BlacklistLogUncheckedUpdateWithoutBlacklistEntryInput>
    create: XOR<BlacklistLogCreateWithoutBlacklistEntryInput, BlacklistLogUncheckedCreateWithoutBlacklistEntryInput>
  }

  export type BlacklistLogUpdateWithWhereUniqueWithoutBlacklistEntryInput = {
    where: BlacklistLogWhereUniqueInput
    data: XOR<BlacklistLogUpdateWithoutBlacklistEntryInput, BlacklistLogUncheckedUpdateWithoutBlacklistEntryInput>
  }

  export type BlacklistLogUpdateManyWithWhereWithoutBlacklistEntryInput = {
    where: BlacklistLogScalarWhereInput
    data: XOR<BlacklistLogUpdateManyMutationInput, BlacklistLogUncheckedUpdateManyWithoutBlacklistEntryInput>
  }

  export type UserUpsertWithoutModifiedBlacklistsInput = {
    update: XOR<UserUpdateWithoutModifiedBlacklistsInput, UserUncheckedUpdateWithoutModifiedBlacklistsInput>
    create: XOR<UserCreateWithoutModifiedBlacklistsInput, UserUncheckedCreateWithoutModifiedBlacklistsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutModifiedBlacklistsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutModifiedBlacklistsInput, UserUncheckedUpdateWithoutModifiedBlacklistsInput>
  }

  export type UserUpdateWithoutModifiedBlacklistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutModifiedBlacklistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type SenderBlacklistCreateWithoutLogsInput = {
    id?: string
    senderName: string
    effectiveDate: Date | string
    description?: string | null
    isActive?: boolean
    matchCount?: number
    lastMatchDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutSenderBlacklistsInput
    modifiedBy?: UserCreateNestedOneWithoutModifiedBlacklistsInput
  }

  export type SenderBlacklistUncheckedCreateWithoutLogsInput = {
    id?: string
    senderName: string
    effectiveDate: Date | string
    description?: string | null
    isActive?: boolean
    matchCount?: number
    lastMatchDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    modifiedById?: string | null
  }

  export type SenderBlacklistCreateOrConnectWithoutLogsInput = {
    where: SenderBlacklistWhereUniqueInput
    create: XOR<SenderBlacklistCreateWithoutLogsInput, SenderBlacklistUncheckedCreateWithoutLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type SenderBlacklistUpsertWithoutLogsInput = {
    update: XOR<SenderBlacklistUpdateWithoutLogsInput, SenderBlacklistUncheckedUpdateWithoutLogsInput>
    create: XOR<SenderBlacklistCreateWithoutLogsInput, SenderBlacklistUncheckedCreateWithoutLogsInput>
    where?: SenderBlacklistWhereInput
  }

  export type SenderBlacklistUpdateToOneWithWhereWithoutLogsInput = {
    where?: SenderBlacklistWhereInput
    data: XOR<SenderBlacklistUpdateWithoutLogsInput, SenderBlacklistUncheckedUpdateWithoutLogsInput>
  }

  export type SenderBlacklistUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    matchCount?: IntFieldUpdateOperationsInput | number
    lastMatchDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutSenderBlacklistsNestedInput
    modifiedBy?: UserUpdateOneWithoutModifiedBlacklistsNestedInput
  }

  export type SenderBlacklistUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    matchCount?: IntFieldUpdateOperationsInput | number
    lastMatchDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractCreateWithoutOperatorInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutContractsInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutContractsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutContractsInput
    services?: ServiceContractCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalCreateNestedManyWithoutContractInput
    createdBy: UserCreateNestedOneWithoutCreatedContractsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedContractsInput
    reminders?: ContractReminderCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutOperatorInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
    services?: ServiceContractUncheckedCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentUncheckedCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalUncheckedCreateNestedManyWithoutContractInput
    reminders?: ContractReminderUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutOperatorInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutOperatorInput, ContractUncheckedCreateWithoutOperatorInput>
  }

  export type ContractCreateManyOperatorInputEnvelope = {
    data: ContractCreateManyOperatorInput | ContractCreateManyOperatorInput[]
    skipDuplicates?: boolean
  }

  export type ContractUpsertWithWhereUniqueWithoutOperatorInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutOperatorInput, ContractUncheckedUpdateWithoutOperatorInput>
    create: XOR<ContractCreateWithoutOperatorInput, ContractUncheckedCreateWithoutOperatorInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutOperatorInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutOperatorInput, ContractUncheckedUpdateWithoutOperatorInput>
  }

  export type ContractUpdateManyWithWhereWithoutOperatorInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutOperatorInput>
  }

  export type ContractCreateWithoutServicesInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutContractsInput
    operator?: OperatorCreateNestedOneWithoutContractsInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutContractsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutContractsInput
    attachments?: ContractAttachmentCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalCreateNestedManyWithoutContractInput
    createdBy: UserCreateNestedOneWithoutCreatedContractsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedContractsInput
    reminders?: ContractReminderCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutServicesInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
    attachments?: ContractAttachmentUncheckedCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalUncheckedCreateNestedManyWithoutContractInput
    reminders?: ContractReminderUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutServicesInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutServicesInput, ContractUncheckedCreateWithoutServicesInput>
  }

  export type ServiceCreateWithoutContractsInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    vasServices?: VasServiceCreateNestedManyWithoutServiceInput
    bulkServices?: BulkServiceCreateNestedManyWithoutServiceInput
    complaints?: ComplaintCreateNestedManyWithoutServiceInput
    transactions?: ParkingTransactionCreateNestedManyWithoutServiceInput
    vasTransactions?: VasTransactionCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutContractsInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    vasServices?: VasServiceUncheckedCreateNestedManyWithoutServiceInput
    bulkServices?: BulkServiceUncheckedCreateNestedManyWithoutServiceInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutServiceInput
    transactions?: ParkingTransactionUncheckedCreateNestedManyWithoutServiceInput
    vasTransactions?: VasTransactionUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutContractsInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutContractsInput, ServiceUncheckedCreateWithoutContractsInput>
  }

  export type ContractUpsertWithoutServicesInput = {
    update: XOR<ContractUpdateWithoutServicesInput, ContractUncheckedUpdateWithoutServicesInput>
    create: XOR<ContractCreateWithoutServicesInput, ContractUncheckedCreateWithoutServicesInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutServicesInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutServicesInput, ContractUncheckedUpdateWithoutServicesInput>
  }

  export type ContractUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutContractsNestedInput
    operator?: OperatorUpdateOneWithoutContractsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutContractsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutContractsNestedInput
    attachments?: ContractAttachmentUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUpdateManyWithoutContractNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedContractsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedContractsNestedInput
    reminders?: ContractReminderUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ContractAttachmentUncheckedUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    reminders?: ContractReminderUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ServiceUpsertWithoutContractsInput = {
    update: XOR<ServiceUpdateWithoutContractsInput, ServiceUncheckedUpdateWithoutContractsInput>
    create: XOR<ServiceCreateWithoutContractsInput, ServiceUncheckedCreateWithoutContractsInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutContractsInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutContractsInput, ServiceUncheckedUpdateWithoutContractsInput>
  }

  export type ServiceUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    vasServices?: VasServiceUpdateManyWithoutServiceNestedInput
    bulkServices?: BulkServiceUpdateManyWithoutServiceNestedInput
    complaints?: ComplaintUpdateManyWithoutServiceNestedInput
    transactions?: ParkingTransactionUpdateManyWithoutServiceNestedInput
    vasTransactions?: VasTransactionUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    vasServices?: VasServiceUncheckedUpdateManyWithoutServiceNestedInput
    bulkServices?: BulkServiceUncheckedUpdateManyWithoutServiceNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutServiceNestedInput
    transactions?: ParkingTransactionUncheckedUpdateManyWithoutServiceNestedInput
    vasTransactions?: VasTransactionUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ContractCreateWithoutAttachmentsInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutContractsInput
    operator?: OperatorCreateNestedOneWithoutContractsInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutContractsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutContractsInput
    services?: ServiceContractCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalCreateNestedManyWithoutContractInput
    createdBy: UserCreateNestedOneWithoutCreatedContractsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedContractsInput
    reminders?: ContractReminderCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
    services?: ServiceContractUncheckedCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalUncheckedCreateNestedManyWithoutContractInput
    reminders?: ContractReminderUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutAttachmentsInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutAttachmentsInput, ContractUncheckedCreateWithoutAttachmentsInput>
  }

  export type UserCreateWithoutUploadedAttachmentsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutUploadedAttachmentsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutUploadedAttachmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadedAttachmentsInput, UserUncheckedCreateWithoutUploadedAttachmentsInput>
  }

  export type ContractUpsertWithoutAttachmentsInput = {
    update: XOR<ContractUpdateWithoutAttachmentsInput, ContractUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<ContractCreateWithoutAttachmentsInput, ContractUncheckedCreateWithoutAttachmentsInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutAttachmentsInput, ContractUncheckedUpdateWithoutAttachmentsInput>
  }

  export type ContractUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutContractsNestedInput
    operator?: OperatorUpdateOneWithoutContractsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutContractsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutContractsNestedInput
    services?: ServiceContractUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUpdateManyWithoutContractNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedContractsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedContractsNestedInput
    reminders?: ContractReminderUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceContractUncheckedUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    reminders?: ContractReminderUncheckedUpdateManyWithoutContractNestedInput
  }

  export type UserUpsertWithoutUploadedAttachmentsInput = {
    update: XOR<UserUpdateWithoutUploadedAttachmentsInput, UserUncheckedUpdateWithoutUploadedAttachmentsInput>
    create: XOR<UserCreateWithoutUploadedAttachmentsInput, UserUncheckedCreateWithoutUploadedAttachmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadedAttachmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadedAttachmentsInput, UserUncheckedUpdateWithoutUploadedAttachmentsInput>
  }

  export type UserUpdateWithoutUploadedAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadedAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ContractCreateWithoutRemindersInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutContractsInput
    operator?: OperatorCreateNestedOneWithoutContractsInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutContractsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutContractsInput
    services?: ServiceContractCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalCreateNestedManyWithoutContractInput
    createdBy: UserCreateNestedOneWithoutCreatedContractsInput
    lastModifiedBy?: UserCreateNestedOneWithoutModifiedContractsInput
  }

  export type ContractUncheckedCreateWithoutRemindersInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
    services?: ServiceContractUncheckedCreateNestedManyWithoutContractInput
    attachments?: ContractAttachmentUncheckedCreateNestedManyWithoutContractInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutContractInput
    renewals?: ContractRenewalUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutRemindersInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutRemindersInput, ContractUncheckedCreateWithoutRemindersInput>
  }

  export type UserCreateWithoutAcknowledgedRemindersInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutAcknowledgedRemindersInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutAcknowledgedRemindersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAcknowledgedRemindersInput, UserUncheckedCreateWithoutAcknowledgedRemindersInput>
  }

  export type ContractUpsertWithoutRemindersInput = {
    update: XOR<ContractUpdateWithoutRemindersInput, ContractUncheckedUpdateWithoutRemindersInput>
    create: XOR<ContractCreateWithoutRemindersInput, ContractUncheckedCreateWithoutRemindersInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutRemindersInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutRemindersInput, ContractUncheckedUpdateWithoutRemindersInput>
  }

  export type ContractUpdateWithoutRemindersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutContractsNestedInput
    operator?: OperatorUpdateOneWithoutContractsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutContractsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutContractsNestedInput
    services?: ServiceContractUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUpdateManyWithoutContractNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedContractsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedContractsNestedInput
  }

  export type ContractUncheckedUpdateWithoutRemindersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceContractUncheckedUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUncheckedUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUncheckedUpdateManyWithoutContractNestedInput
  }

  export type UserUpsertWithoutAcknowledgedRemindersInput = {
    update: XOR<UserUpdateWithoutAcknowledgedRemindersInput, UserUncheckedUpdateWithoutAcknowledgedRemindersInput>
    create: XOR<UserCreateWithoutAcknowledgedRemindersInput, UserUncheckedCreateWithoutAcknowledgedRemindersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAcknowledgedRemindersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAcknowledgedRemindersInput, UserUncheckedUpdateWithoutAcknowledgedRemindersInput>
  }

  export type UserUpdateWithoutAcknowledgedRemindersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAcknowledgedRemindersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ServiceContractCreateWithoutServiceInput = {
    id?: string
    specificTerms?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: ContractCreateNestedOneWithoutServicesInput
  }

  export type ServiceContractUncheckedCreateWithoutServiceInput = {
    id?: string
    contractId: string
    specificTerms?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceContractCreateOrConnectWithoutServiceInput = {
    where: ServiceContractWhereUniqueInput
    create: XOR<ServiceContractCreateWithoutServiceInput, ServiceContractUncheckedCreateWithoutServiceInput>
  }

  export type ServiceContractCreateManyServiceInputEnvelope = {
    data: ServiceContractCreateManyServiceInput | ServiceContractCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type VasServiceCreateWithoutServiceInput = {
    id?: string
    proizvod: string
    mesec_pruzanja_usluge: Date | string
    jedinicna_cena: number
    broj_transakcija: number
    fakturisan_iznos: number
    fakturisan_korigovan_iznos: number
    naplacen_iznos: number
    kumulativ_naplacenih_iznosa: number
    nenaplacen_iznos: number
    nenaplacen_korigovan_iznos: number
    storniran_iznos: number
    otkazan_iznos: number
    kumulativ_otkazanih_iznosa: number
    iznos_za_prenos_sredstava: number
    createdAt?: Date | string
    updatedAt?: Date | string
    provider: ProviderCreateNestedOneWithoutVasServicesInput
  }

  export type VasServiceUncheckedCreateWithoutServiceInput = {
    id?: string
    proizvod: string
    mesec_pruzanja_usluge: Date | string
    jedinicna_cena: number
    broj_transakcija: number
    fakturisan_iznos: number
    fakturisan_korigovan_iznos: number
    naplacen_iznos: number
    kumulativ_naplacenih_iznosa: number
    nenaplacen_iznos: number
    nenaplacen_korigovan_iznos: number
    storniran_iznos: number
    otkazan_iznos: number
    kumulativ_otkazanih_iznosa: number
    iznos_za_prenos_sredstava: number
    provajderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VasServiceCreateOrConnectWithoutServiceInput = {
    where: VasServiceWhereUniqueInput
    create: XOR<VasServiceCreateWithoutServiceInput, VasServiceUncheckedCreateWithoutServiceInput>
  }

  export type VasServiceCreateManyServiceInputEnvelope = {
    data: VasServiceCreateManyServiceInput | VasServiceCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type BulkServiceCreateWithoutServiceInput = {
    id?: string
    provider_name: string
    agreement_name: string
    service_name: string
    step_name: string
    sender_name: string
    requests: number
    message_parts: number
    datumNaplate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    provider: ProviderCreateNestedOneWithoutBulkServicesInput
    logEntries?: LogEntryCreateNestedManyWithoutBulkServiceInput
  }

  export type BulkServiceUncheckedCreateWithoutServiceInput = {
    id?: string
    provider_name: string
    agreement_name: string
    service_name: string
    step_name: string
    sender_name: string
    requests: number
    message_parts: number
    datumNaplate: Date | string
    providerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutBulkServiceInput
  }

  export type BulkServiceCreateOrConnectWithoutServiceInput = {
    where: BulkServiceWhereUniqueInput
    create: XOR<BulkServiceCreateWithoutServiceInput, BulkServiceUncheckedCreateWithoutServiceInput>
  }

  export type BulkServiceCreateManyServiceInputEnvelope = {
    data: BulkServiceCreateManyServiceInput | BulkServiceCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutServiceInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    product?: ProductCreateNestedOneWithoutComplaintsInput
    provider?: ProviderCreateNestedOneWithoutComplaintsInput
    submittedBy: UserCreateNestedOneWithoutSubmittedComplaintsInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedComplaintsInput
    comments?: CommentCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentCreateNestedManyWithoutComplaintInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutComplaintsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutComplaintsInput
    statusHistory?: ComplaintStatusHistoryCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutServiceInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutComplaintInput
    statusHistory?: ComplaintStatusHistoryUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutServiceInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutServiceInput, ComplaintUncheckedCreateWithoutServiceInput>
  }

  export type ComplaintCreateManyServiceInputEnvelope = {
    data: ComplaintCreateManyServiceInput | ComplaintCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type ParkingTransactionCreateWithoutServiceInput = {
    id?: string
    date: Date | string
    group: string
    serviceName: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    parkingService: ParkingServiceCreateNestedOneWithoutTransactionsInput
  }

  export type ParkingTransactionUncheckedCreateWithoutServiceInput = {
    id?: string
    parkingServiceId: string
    date: Date | string
    group: string
    serviceName: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParkingTransactionCreateOrConnectWithoutServiceInput = {
    where: ParkingTransactionWhereUniqueInput
    create: XOR<ParkingTransactionCreateWithoutServiceInput, ParkingTransactionUncheckedCreateWithoutServiceInput>
  }

  export type ParkingTransactionCreateManyServiceInputEnvelope = {
    data: ParkingTransactionCreateManyServiceInput | ParkingTransactionCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type VasTransactionCreateWithoutServiceInput = {
    id?: string
    date: Date | string
    group: string
    serviceName: string
    serviceCode: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    provider: ProviderCreateNestedOneWithoutVasTransactionsInput
  }

  export type VasTransactionUncheckedCreateWithoutServiceInput = {
    id?: string
    providerId: string
    date: Date | string
    group: string
    serviceName: string
    serviceCode: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VasTransactionCreateOrConnectWithoutServiceInput = {
    where: VasTransactionWhereUniqueInput
    create: XOR<VasTransactionCreateWithoutServiceInput, VasTransactionUncheckedCreateWithoutServiceInput>
  }

  export type VasTransactionCreateManyServiceInputEnvelope = {
    data: VasTransactionCreateManyServiceInput | VasTransactionCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type ServiceContractUpsertWithWhereUniqueWithoutServiceInput = {
    where: ServiceContractWhereUniqueInput
    update: XOR<ServiceContractUpdateWithoutServiceInput, ServiceContractUncheckedUpdateWithoutServiceInput>
    create: XOR<ServiceContractCreateWithoutServiceInput, ServiceContractUncheckedCreateWithoutServiceInput>
  }

  export type ServiceContractUpdateWithWhereUniqueWithoutServiceInput = {
    where: ServiceContractWhereUniqueInput
    data: XOR<ServiceContractUpdateWithoutServiceInput, ServiceContractUncheckedUpdateWithoutServiceInput>
  }

  export type ServiceContractUpdateManyWithWhereWithoutServiceInput = {
    where: ServiceContractScalarWhereInput
    data: XOR<ServiceContractUpdateManyMutationInput, ServiceContractUncheckedUpdateManyWithoutServiceInput>
  }

  export type VasServiceUpsertWithWhereUniqueWithoutServiceInput = {
    where: VasServiceWhereUniqueInput
    update: XOR<VasServiceUpdateWithoutServiceInput, VasServiceUncheckedUpdateWithoutServiceInput>
    create: XOR<VasServiceCreateWithoutServiceInput, VasServiceUncheckedCreateWithoutServiceInput>
  }

  export type VasServiceUpdateWithWhereUniqueWithoutServiceInput = {
    where: VasServiceWhereUniqueInput
    data: XOR<VasServiceUpdateWithoutServiceInput, VasServiceUncheckedUpdateWithoutServiceInput>
  }

  export type VasServiceUpdateManyWithWhereWithoutServiceInput = {
    where: VasServiceScalarWhereInput
    data: XOR<VasServiceUpdateManyMutationInput, VasServiceUncheckedUpdateManyWithoutServiceInput>
  }

  export type BulkServiceUpsertWithWhereUniqueWithoutServiceInput = {
    where: BulkServiceWhereUniqueInput
    update: XOR<BulkServiceUpdateWithoutServiceInput, BulkServiceUncheckedUpdateWithoutServiceInput>
    create: XOR<BulkServiceCreateWithoutServiceInput, BulkServiceUncheckedCreateWithoutServiceInput>
  }

  export type BulkServiceUpdateWithWhereUniqueWithoutServiceInput = {
    where: BulkServiceWhereUniqueInput
    data: XOR<BulkServiceUpdateWithoutServiceInput, BulkServiceUncheckedUpdateWithoutServiceInput>
  }

  export type BulkServiceUpdateManyWithWhereWithoutServiceInput = {
    where: BulkServiceScalarWhereInput
    data: XOR<BulkServiceUpdateManyMutationInput, BulkServiceUncheckedUpdateManyWithoutServiceInput>
  }

  export type ComplaintUpsertWithWhereUniqueWithoutServiceInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutServiceInput, ComplaintUncheckedUpdateWithoutServiceInput>
    create: XOR<ComplaintCreateWithoutServiceInput, ComplaintUncheckedCreateWithoutServiceInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutServiceInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutServiceInput, ComplaintUncheckedUpdateWithoutServiceInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutServiceInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutServiceInput>
  }

  export type ParkingTransactionUpsertWithWhereUniqueWithoutServiceInput = {
    where: ParkingTransactionWhereUniqueInput
    update: XOR<ParkingTransactionUpdateWithoutServiceInput, ParkingTransactionUncheckedUpdateWithoutServiceInput>
    create: XOR<ParkingTransactionCreateWithoutServiceInput, ParkingTransactionUncheckedCreateWithoutServiceInput>
  }

  export type ParkingTransactionUpdateWithWhereUniqueWithoutServiceInput = {
    where: ParkingTransactionWhereUniqueInput
    data: XOR<ParkingTransactionUpdateWithoutServiceInput, ParkingTransactionUncheckedUpdateWithoutServiceInput>
  }

  export type ParkingTransactionUpdateManyWithWhereWithoutServiceInput = {
    where: ParkingTransactionScalarWhereInput
    data: XOR<ParkingTransactionUpdateManyMutationInput, ParkingTransactionUncheckedUpdateManyWithoutServiceInput>
  }

  export type VasTransactionUpsertWithWhereUniqueWithoutServiceInput = {
    where: VasTransactionWhereUniqueInput
    update: XOR<VasTransactionUpdateWithoutServiceInput, VasTransactionUncheckedUpdateWithoutServiceInput>
    create: XOR<VasTransactionCreateWithoutServiceInput, VasTransactionUncheckedCreateWithoutServiceInput>
  }

  export type VasTransactionUpdateWithWhereUniqueWithoutServiceInput = {
    where: VasTransactionWhereUniqueInput
    data: XOR<VasTransactionUpdateWithoutServiceInput, VasTransactionUncheckedUpdateWithoutServiceInput>
  }

  export type VasTransactionUpdateManyWithWhereWithoutServiceInput = {
    where: VasTransactionScalarWhereInput
    data: XOR<VasTransactionUpdateManyMutationInput, VasTransactionUncheckedUpdateManyWithoutServiceInput>
  }

  export type ServiceCreateWithoutVasServicesInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    contracts?: ServiceContractCreateNestedManyWithoutServiceInput
    bulkServices?: BulkServiceCreateNestedManyWithoutServiceInput
    complaints?: ComplaintCreateNestedManyWithoutServiceInput
    transactions?: ParkingTransactionCreateNestedManyWithoutServiceInput
    vasTransactions?: VasTransactionCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutVasServicesInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    contracts?: ServiceContractUncheckedCreateNestedManyWithoutServiceInput
    bulkServices?: BulkServiceUncheckedCreateNestedManyWithoutServiceInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutServiceInput
    transactions?: ParkingTransactionUncheckedCreateNestedManyWithoutServiceInput
    vasTransactions?: VasTransactionUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutVasServicesInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutVasServicesInput, ServiceUncheckedCreateWithoutVasServicesInput>
  }

  export type ProviderCreateWithoutVasServicesInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    contracts?: ContractCreateNestedManyWithoutProviderInput
    bulkServices?: BulkServiceCreateNestedManyWithoutProviderInput
    complaints?: ComplaintCreateNestedManyWithoutProviderInput
    vasTransactions?: VasTransactionCreateNestedManyWithoutProviderInput
    logEntries?: LogEntryCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutVasServicesInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutProviderInput
    bulkServices?: BulkServiceUncheckedCreateNestedManyWithoutProviderInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutProviderInput
    vasTransactions?: VasTransactionUncheckedCreateNestedManyWithoutProviderInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutVasServicesInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutVasServicesInput, ProviderUncheckedCreateWithoutVasServicesInput>
  }

  export type ServiceUpsertWithoutVasServicesInput = {
    update: XOR<ServiceUpdateWithoutVasServicesInput, ServiceUncheckedUpdateWithoutVasServicesInput>
    create: XOR<ServiceCreateWithoutVasServicesInput, ServiceUncheckedCreateWithoutVasServicesInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutVasServicesInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutVasServicesInput, ServiceUncheckedUpdateWithoutVasServicesInput>
  }

  export type ServiceUpdateWithoutVasServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    contracts?: ServiceContractUpdateManyWithoutServiceNestedInput
    bulkServices?: BulkServiceUpdateManyWithoutServiceNestedInput
    complaints?: ComplaintUpdateManyWithoutServiceNestedInput
    transactions?: ParkingTransactionUpdateManyWithoutServiceNestedInput
    vasTransactions?: VasTransactionUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutVasServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    contracts?: ServiceContractUncheckedUpdateManyWithoutServiceNestedInput
    bulkServices?: BulkServiceUncheckedUpdateManyWithoutServiceNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutServiceNestedInput
    transactions?: ParkingTransactionUncheckedUpdateManyWithoutServiceNestedInput
    vasTransactions?: VasTransactionUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ProviderUpsertWithoutVasServicesInput = {
    update: XOR<ProviderUpdateWithoutVasServicesInput, ProviderUncheckedUpdateWithoutVasServicesInput>
    create: XOR<ProviderCreateWithoutVasServicesInput, ProviderUncheckedCreateWithoutVasServicesInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutVasServicesInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutVasServicesInput, ProviderUncheckedUpdateWithoutVasServicesInput>
  }

  export type ProviderUpdateWithoutVasServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUpdateManyWithoutProviderNestedInput
    bulkServices?: BulkServiceUpdateManyWithoutProviderNestedInput
    complaints?: ComplaintUpdateManyWithoutProviderNestedInput
    vasTransactions?: VasTransactionUpdateManyWithoutProviderNestedInput
    logEntries?: LogEntryUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutVasServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutProviderNestedInput
    bulkServices?: BulkServiceUncheckedUpdateManyWithoutProviderNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutProviderNestedInput
    vasTransactions?: VasTransactionUncheckedUpdateManyWithoutProviderNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ServiceCreateWithoutBulkServicesInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    contracts?: ServiceContractCreateNestedManyWithoutServiceInput
    vasServices?: VasServiceCreateNestedManyWithoutServiceInput
    complaints?: ComplaintCreateNestedManyWithoutServiceInput
    transactions?: ParkingTransactionCreateNestedManyWithoutServiceInput
    vasTransactions?: VasTransactionCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutBulkServicesInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    contracts?: ServiceContractUncheckedCreateNestedManyWithoutServiceInput
    vasServices?: VasServiceUncheckedCreateNestedManyWithoutServiceInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutServiceInput
    transactions?: ParkingTransactionUncheckedCreateNestedManyWithoutServiceInput
    vasTransactions?: VasTransactionUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutBulkServicesInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutBulkServicesInput, ServiceUncheckedCreateWithoutBulkServicesInput>
  }

  export type ProviderCreateWithoutBulkServicesInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    contracts?: ContractCreateNestedManyWithoutProviderInput
    vasServices?: VasServiceCreateNestedManyWithoutProviderInput
    complaints?: ComplaintCreateNestedManyWithoutProviderInput
    vasTransactions?: VasTransactionCreateNestedManyWithoutProviderInput
    logEntries?: LogEntryCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutBulkServicesInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutProviderInput
    vasServices?: VasServiceUncheckedCreateNestedManyWithoutProviderInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutProviderInput
    vasTransactions?: VasTransactionUncheckedCreateNestedManyWithoutProviderInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutBulkServicesInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutBulkServicesInput, ProviderUncheckedCreateWithoutBulkServicesInput>
  }

  export type LogEntryCreateWithoutBulkServiceInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutLogEntriesInput
    parkingService?: ParkingServiceCreateNestedOneWithoutLogEntriesInput
    createdBy: UserCreateNestedOneWithoutLogEntriesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedLogsInput
  }

  export type LogEntryUncheckedCreateWithoutBulkServiceInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    providerId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById?: string | null
  }

  export type LogEntryCreateOrConnectWithoutBulkServiceInput = {
    where: LogEntryWhereUniqueInput
    create: XOR<LogEntryCreateWithoutBulkServiceInput, LogEntryUncheckedCreateWithoutBulkServiceInput>
  }

  export type LogEntryCreateManyBulkServiceInputEnvelope = {
    data: LogEntryCreateManyBulkServiceInput | LogEntryCreateManyBulkServiceInput[]
    skipDuplicates?: boolean
  }

  export type ServiceUpsertWithoutBulkServicesInput = {
    update: XOR<ServiceUpdateWithoutBulkServicesInput, ServiceUncheckedUpdateWithoutBulkServicesInput>
    create: XOR<ServiceCreateWithoutBulkServicesInput, ServiceUncheckedCreateWithoutBulkServicesInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutBulkServicesInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutBulkServicesInput, ServiceUncheckedUpdateWithoutBulkServicesInput>
  }

  export type ServiceUpdateWithoutBulkServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    contracts?: ServiceContractUpdateManyWithoutServiceNestedInput
    vasServices?: VasServiceUpdateManyWithoutServiceNestedInput
    complaints?: ComplaintUpdateManyWithoutServiceNestedInput
    transactions?: ParkingTransactionUpdateManyWithoutServiceNestedInput
    vasTransactions?: VasTransactionUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutBulkServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    contracts?: ServiceContractUncheckedUpdateManyWithoutServiceNestedInput
    vasServices?: VasServiceUncheckedUpdateManyWithoutServiceNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutServiceNestedInput
    transactions?: ParkingTransactionUncheckedUpdateManyWithoutServiceNestedInput
    vasTransactions?: VasTransactionUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ProviderUpsertWithoutBulkServicesInput = {
    update: XOR<ProviderUpdateWithoutBulkServicesInput, ProviderUncheckedUpdateWithoutBulkServicesInput>
    create: XOR<ProviderCreateWithoutBulkServicesInput, ProviderUncheckedCreateWithoutBulkServicesInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutBulkServicesInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutBulkServicesInput, ProviderUncheckedUpdateWithoutBulkServicesInput>
  }

  export type ProviderUpdateWithoutBulkServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUpdateManyWithoutProviderNestedInput
    vasServices?: VasServiceUpdateManyWithoutProviderNestedInput
    complaints?: ComplaintUpdateManyWithoutProviderNestedInput
    vasTransactions?: VasTransactionUpdateManyWithoutProviderNestedInput
    logEntries?: LogEntryUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutBulkServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutProviderNestedInput
    vasServices?: VasServiceUncheckedUpdateManyWithoutProviderNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutProviderNestedInput
    vasTransactions?: VasTransactionUncheckedUpdateManyWithoutProviderNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type LogEntryUpsertWithWhereUniqueWithoutBulkServiceInput = {
    where: LogEntryWhereUniqueInput
    update: XOR<LogEntryUpdateWithoutBulkServiceInput, LogEntryUncheckedUpdateWithoutBulkServiceInput>
    create: XOR<LogEntryCreateWithoutBulkServiceInput, LogEntryUncheckedCreateWithoutBulkServiceInput>
  }

  export type LogEntryUpdateWithWhereUniqueWithoutBulkServiceInput = {
    where: LogEntryWhereUniqueInput
    data: XOR<LogEntryUpdateWithoutBulkServiceInput, LogEntryUncheckedUpdateWithoutBulkServiceInput>
  }

  export type LogEntryUpdateManyWithWhereWithoutBulkServiceInput = {
    where: LogEntryScalarWhereInput
    data: XOR<LogEntryUpdateManyMutationInput, LogEntryUncheckedUpdateManyWithoutBulkServiceInput>
  }

  export type ComplaintCreateWithoutProductInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    service?: ServiceCreateNestedOneWithoutComplaintsInput
    provider?: ProviderCreateNestedOneWithoutComplaintsInput
    submittedBy: UserCreateNestedOneWithoutSubmittedComplaintsInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedComplaintsInput
    comments?: CommentCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentCreateNestedManyWithoutComplaintInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutComplaintsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutComplaintsInput
    statusHistory?: ComplaintStatusHistoryCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutProductInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutComplaintInput
    statusHistory?: ComplaintStatusHistoryUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutProductInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutProductInput, ComplaintUncheckedCreateWithoutProductInput>
  }

  export type ComplaintCreateManyProductInputEnvelope = {
    data: ComplaintCreateManyProductInput | ComplaintCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintUpsertWithWhereUniqueWithoutProductInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutProductInput, ComplaintUncheckedUpdateWithoutProductInput>
    create: XOR<ComplaintCreateWithoutProductInput, ComplaintUncheckedCreateWithoutProductInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutProductInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutProductInput, ComplaintUncheckedUpdateWithoutProductInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutProductInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutProductInput>
  }

  export type ServiceCreateWithoutComplaintsInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    contracts?: ServiceContractCreateNestedManyWithoutServiceInput
    vasServices?: VasServiceCreateNestedManyWithoutServiceInput
    bulkServices?: BulkServiceCreateNestedManyWithoutServiceInput
    transactions?: ParkingTransactionCreateNestedManyWithoutServiceInput
    vasTransactions?: VasTransactionCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutComplaintsInput = {
    id?: string
    name: string
    type: $Enums.ServiceType
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    billingType?: $Enums.BillingType | null
    contracts?: ServiceContractUncheckedCreateNestedManyWithoutServiceInput
    vasServices?: VasServiceUncheckedCreateNestedManyWithoutServiceInput
    bulkServices?: BulkServiceUncheckedCreateNestedManyWithoutServiceInput
    transactions?: ParkingTransactionUncheckedCreateNestedManyWithoutServiceInput
    vasTransactions?: VasTransactionUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutComplaintsInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutComplaintsInput, ServiceUncheckedCreateWithoutComplaintsInput>
  }

  export type ProductCreateWithoutComplaintsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUncheckedCreateWithoutComplaintsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateOrConnectWithoutComplaintsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutComplaintsInput, ProductUncheckedCreateWithoutComplaintsInput>
  }

  export type ProviderCreateWithoutComplaintsInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    contracts?: ContractCreateNestedManyWithoutProviderInput
    vasServices?: VasServiceCreateNestedManyWithoutProviderInput
    bulkServices?: BulkServiceCreateNestedManyWithoutProviderInput
    vasTransactions?: VasTransactionCreateNestedManyWithoutProviderInput
    logEntries?: LogEntryCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutComplaintsInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutProviderInput
    vasServices?: VasServiceUncheckedCreateNestedManyWithoutProviderInput
    bulkServices?: BulkServiceUncheckedCreateNestedManyWithoutProviderInput
    vasTransactions?: VasTransactionUncheckedCreateNestedManyWithoutProviderInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutComplaintsInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutComplaintsInput, ProviderUncheckedCreateWithoutComplaintsInput>
  }

  export type UserCreateWithoutSubmittedComplaintsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutSubmittedComplaintsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutSubmittedComplaintsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmittedComplaintsInput, UserUncheckedCreateWithoutSubmittedComplaintsInput>
  }

  export type UserCreateWithoutAssignedComplaintsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutAssignedComplaintsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutAssignedComplaintsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedComplaintsInput, UserUncheckedCreateWithoutAssignedComplaintsInput>
  }

  export type CommentCreateWithoutComplaintInput = {
    id?: string
    text: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isInternal?: boolean
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutComplaintInput = {
    id?: string
    text: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isInternal?: boolean
  }

  export type CommentCreateOrConnectWithoutComplaintInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutComplaintInput, CommentUncheckedCreateWithoutComplaintInput>
  }

  export type CommentCreateManyComplaintInputEnvelope = {
    data: CommentCreateManyComplaintInput | CommentCreateManyComplaintInput[]
    skipDuplicates?: boolean
  }

  export type AttachmentCreateWithoutComplaintInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
  }

  export type AttachmentUncheckedCreateWithoutComplaintInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
  }

  export type AttachmentCreateOrConnectWithoutComplaintInput = {
    where: AttachmentWhereUniqueInput
    create: XOR<AttachmentCreateWithoutComplaintInput, AttachmentUncheckedCreateWithoutComplaintInput>
  }

  export type AttachmentCreateManyComplaintInputEnvelope = {
    data: AttachmentCreateManyComplaintInput | AttachmentCreateManyComplaintInput[]
    skipDuplicates?: boolean
  }

  export type HumanitarianOrgCreateWithoutComplaintsInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    mission?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pib?: string | null
    registrationNumber?: string | null
    bank?: string | null
    accountNumber?: string | null
    shortNumber?: string | null
    contracts?: ContractCreateNestedManyWithoutHumanitarianOrgInput
    renewals?: HumanitarianContractRenewalCreateNestedManyWithoutHumanitarianOrgInput
    reportFiles?: ReportFileCreateNestedManyWithoutOrganizationInput
  }

  export type HumanitarianOrgUncheckedCreateWithoutComplaintsInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    mission?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pib?: string | null
    registrationNumber?: string | null
    bank?: string | null
    accountNumber?: string | null
    shortNumber?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutHumanitarianOrgInput
    renewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutHumanitarianOrgInput
    reportFiles?: ReportFileUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type HumanitarianOrgCreateOrConnectWithoutComplaintsInput = {
    where: HumanitarianOrgWhereUniqueInput
    create: XOR<HumanitarianOrgCreateWithoutComplaintsInput, HumanitarianOrgUncheckedCreateWithoutComplaintsInput>
  }

  export type ParkingServiceCreateWithoutComplaintsInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    createdBy?: UserCreateNestedOneWithoutCreatedParkingServicesInput
    transactions?: ParkingTransactionCreateNestedManyWithoutParkingServiceInput
    contracts?: ContractCreateNestedManyWithoutParkingServiceInput
    logEntries?: LogEntryCreateNestedManyWithoutParkingServiceInput
  }

  export type ParkingServiceUncheckedCreateWithoutComplaintsInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    createdById?: string | null
    transactions?: ParkingTransactionUncheckedCreateNestedManyWithoutParkingServiceInput
    contracts?: ContractUncheckedCreateNestedManyWithoutParkingServiceInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutParkingServiceInput
  }

  export type ParkingServiceCreateOrConnectWithoutComplaintsInput = {
    where: ParkingServiceWhereUniqueInput
    create: XOR<ParkingServiceCreateWithoutComplaintsInput, ParkingServiceUncheckedCreateWithoutComplaintsInput>
  }

  export type ComplaintStatusHistoryCreateWithoutComplaintInput = {
    id?: string
    previousStatus?: $Enums.ComplaintStatus | null
    newStatus: $Enums.ComplaintStatus
    changedById: string
    changedAt?: Date | string
    notes?: string | null
  }

  export type ComplaintStatusHistoryUncheckedCreateWithoutComplaintInput = {
    id?: string
    previousStatus?: $Enums.ComplaintStatus | null
    newStatus: $Enums.ComplaintStatus
    changedById: string
    changedAt?: Date | string
    notes?: string | null
  }

  export type ComplaintStatusHistoryCreateOrConnectWithoutComplaintInput = {
    where: ComplaintStatusHistoryWhereUniqueInput
    create: XOR<ComplaintStatusHistoryCreateWithoutComplaintInput, ComplaintStatusHistoryUncheckedCreateWithoutComplaintInput>
  }

  export type ComplaintStatusHistoryCreateManyComplaintInputEnvelope = {
    data: ComplaintStatusHistoryCreateManyComplaintInput | ComplaintStatusHistoryCreateManyComplaintInput[]
    skipDuplicates?: boolean
  }

  export type ServiceUpsertWithoutComplaintsInput = {
    update: XOR<ServiceUpdateWithoutComplaintsInput, ServiceUncheckedUpdateWithoutComplaintsInput>
    create: XOR<ServiceCreateWithoutComplaintsInput, ServiceUncheckedCreateWithoutComplaintsInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutComplaintsInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutComplaintsInput, ServiceUncheckedUpdateWithoutComplaintsInput>
  }

  export type ServiceUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    contracts?: ServiceContractUpdateManyWithoutServiceNestedInput
    vasServices?: VasServiceUpdateManyWithoutServiceNestedInput
    bulkServices?: BulkServiceUpdateManyWithoutServiceNestedInput
    transactions?: ParkingTransactionUpdateManyWithoutServiceNestedInput
    vasTransactions?: VasTransactionUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billingType?: NullableEnumBillingTypeFieldUpdateOperationsInput | $Enums.BillingType | null
    contracts?: ServiceContractUncheckedUpdateManyWithoutServiceNestedInput
    vasServices?: VasServiceUncheckedUpdateManyWithoutServiceNestedInput
    bulkServices?: BulkServiceUncheckedUpdateManyWithoutServiceNestedInput
    transactions?: ParkingTransactionUncheckedUpdateManyWithoutServiceNestedInput
    vasTransactions?: VasTransactionUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ProductUpsertWithoutComplaintsInput = {
    update: XOR<ProductUpdateWithoutComplaintsInput, ProductUncheckedUpdateWithoutComplaintsInput>
    create: XOR<ProductCreateWithoutComplaintsInput, ProductUncheckedCreateWithoutComplaintsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutComplaintsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutComplaintsInput, ProductUncheckedUpdateWithoutComplaintsInput>
  }

  export type ProductUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderUpsertWithoutComplaintsInput = {
    update: XOR<ProviderUpdateWithoutComplaintsInput, ProviderUncheckedUpdateWithoutComplaintsInput>
    create: XOR<ProviderCreateWithoutComplaintsInput, ProviderUncheckedCreateWithoutComplaintsInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutComplaintsInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutComplaintsInput, ProviderUncheckedUpdateWithoutComplaintsInput>
  }

  export type ProviderUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUpdateManyWithoutProviderNestedInput
    vasServices?: VasServiceUpdateManyWithoutProviderNestedInput
    bulkServices?: BulkServiceUpdateManyWithoutProviderNestedInput
    vasTransactions?: VasTransactionUpdateManyWithoutProviderNestedInput
    logEntries?: LogEntryUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutProviderNestedInput
    vasServices?: VasServiceUncheckedUpdateManyWithoutProviderNestedInput
    bulkServices?: BulkServiceUncheckedUpdateManyWithoutProviderNestedInput
    vasTransactions?: VasTransactionUncheckedUpdateManyWithoutProviderNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type UserUpsertWithoutSubmittedComplaintsInput = {
    update: XOR<UserUpdateWithoutSubmittedComplaintsInput, UserUncheckedUpdateWithoutSubmittedComplaintsInput>
    create: XOR<UserCreateWithoutSubmittedComplaintsInput, UserUncheckedCreateWithoutSubmittedComplaintsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmittedComplaintsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmittedComplaintsInput, UserUncheckedUpdateWithoutSubmittedComplaintsInput>
  }

  export type UserUpdateWithoutSubmittedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmittedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutAssignedComplaintsInput = {
    update: XOR<UserUpdateWithoutAssignedComplaintsInput, UserUncheckedUpdateWithoutAssignedComplaintsInput>
    create: XOR<UserCreateWithoutAssignedComplaintsInput, UserUncheckedCreateWithoutAssignedComplaintsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedComplaintsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedComplaintsInput, UserUncheckedUpdateWithoutAssignedComplaintsInput>
  }

  export type UserUpdateWithoutAssignedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutComplaintInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutComplaintInput, CommentUncheckedUpdateWithoutComplaintInput>
    create: XOR<CommentCreateWithoutComplaintInput, CommentUncheckedCreateWithoutComplaintInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutComplaintInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutComplaintInput, CommentUncheckedUpdateWithoutComplaintInput>
  }

  export type CommentUpdateManyWithWhereWithoutComplaintInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutComplaintInput>
  }

  export type AttachmentUpsertWithWhereUniqueWithoutComplaintInput = {
    where: AttachmentWhereUniqueInput
    update: XOR<AttachmentUpdateWithoutComplaintInput, AttachmentUncheckedUpdateWithoutComplaintInput>
    create: XOR<AttachmentCreateWithoutComplaintInput, AttachmentUncheckedCreateWithoutComplaintInput>
  }

  export type AttachmentUpdateWithWhereUniqueWithoutComplaintInput = {
    where: AttachmentWhereUniqueInput
    data: XOR<AttachmentUpdateWithoutComplaintInput, AttachmentUncheckedUpdateWithoutComplaintInput>
  }

  export type AttachmentUpdateManyWithWhereWithoutComplaintInput = {
    where: AttachmentScalarWhereInput
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyWithoutComplaintInput>
  }

  export type AttachmentScalarWhereInput = {
    AND?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
    OR?: AttachmentScalarWhereInput[]
    NOT?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
    id?: StringFilter<"Attachment"> | string
    fileName?: StringFilter<"Attachment"> | string
    fileUrl?: StringFilter<"Attachment"> | string
    fileType?: StringFilter<"Attachment"> | string
    complaintId?: StringFilter<"Attachment"> | string
    uploadedAt?: DateTimeFilter<"Attachment"> | Date | string
  }

  export type HumanitarianOrgUpsertWithoutComplaintsInput = {
    update: XOR<HumanitarianOrgUpdateWithoutComplaintsInput, HumanitarianOrgUncheckedUpdateWithoutComplaintsInput>
    create: XOR<HumanitarianOrgCreateWithoutComplaintsInput, HumanitarianOrgUncheckedCreateWithoutComplaintsInput>
    where?: HumanitarianOrgWhereInput
  }

  export type HumanitarianOrgUpdateToOneWithWhereWithoutComplaintsInput = {
    where?: HumanitarianOrgWhereInput
    data: XOR<HumanitarianOrgUpdateWithoutComplaintsInput, HumanitarianOrgUncheckedUpdateWithoutComplaintsInput>
  }

  export type HumanitarianOrgUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pib?: NullableStringFieldUpdateOperationsInput | string | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shortNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUpdateManyWithoutHumanitarianOrgNestedInput
    renewals?: HumanitarianContractRenewalUpdateManyWithoutHumanitarianOrgNestedInput
    reportFiles?: ReportFileUpdateManyWithoutOrganizationNestedInput
  }

  export type HumanitarianOrgUncheckedUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pib?: NullableStringFieldUpdateOperationsInput | string | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shortNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutHumanitarianOrgNestedInput
    renewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutHumanitarianOrgNestedInput
    reportFiles?: ReportFileUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type ParkingServiceUpsertWithoutComplaintsInput = {
    update: XOR<ParkingServiceUpdateWithoutComplaintsInput, ParkingServiceUncheckedUpdateWithoutComplaintsInput>
    create: XOR<ParkingServiceCreateWithoutComplaintsInput, ParkingServiceUncheckedCreateWithoutComplaintsInput>
    where?: ParkingServiceWhereInput
  }

  export type ParkingServiceUpdateToOneWithWhereWithoutComplaintsInput = {
    where?: ParkingServiceWhereInput
    data: XOR<ParkingServiceUpdateWithoutComplaintsInput, ParkingServiceUncheckedUpdateWithoutComplaintsInput>
  }

  export type ParkingServiceUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneWithoutCreatedParkingServicesNestedInput
    transactions?: ParkingTransactionUpdateManyWithoutParkingServiceNestedInput
    contracts?: ContractUpdateManyWithoutParkingServiceNestedInput
    logEntries?: LogEntryUpdateManyWithoutParkingServiceNestedInput
  }

  export type ParkingServiceUncheckedUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    transactions?: ParkingTransactionUncheckedUpdateManyWithoutParkingServiceNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutParkingServiceNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutParkingServiceNestedInput
  }

  export type ComplaintStatusHistoryUpsertWithWhereUniqueWithoutComplaintInput = {
    where: ComplaintStatusHistoryWhereUniqueInput
    update: XOR<ComplaintStatusHistoryUpdateWithoutComplaintInput, ComplaintStatusHistoryUncheckedUpdateWithoutComplaintInput>
    create: XOR<ComplaintStatusHistoryCreateWithoutComplaintInput, ComplaintStatusHistoryUncheckedCreateWithoutComplaintInput>
  }

  export type ComplaintStatusHistoryUpdateWithWhereUniqueWithoutComplaintInput = {
    where: ComplaintStatusHistoryWhereUniqueInput
    data: XOR<ComplaintStatusHistoryUpdateWithoutComplaintInput, ComplaintStatusHistoryUncheckedUpdateWithoutComplaintInput>
  }

  export type ComplaintStatusHistoryUpdateManyWithWhereWithoutComplaintInput = {
    where: ComplaintStatusHistoryScalarWhereInput
    data: XOR<ComplaintStatusHistoryUpdateManyMutationInput, ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintInput>
  }

  export type ComplaintStatusHistoryScalarWhereInput = {
    AND?: ComplaintStatusHistoryScalarWhereInput | ComplaintStatusHistoryScalarWhereInput[]
    OR?: ComplaintStatusHistoryScalarWhereInput[]
    NOT?: ComplaintStatusHistoryScalarWhereInput | ComplaintStatusHistoryScalarWhereInput[]
    id?: StringFilter<"ComplaintStatusHistory"> | string
    complaintId?: StringFilter<"ComplaintStatusHistory"> | string
    previousStatus?: EnumComplaintStatusNullableFilter<"ComplaintStatusHistory"> | $Enums.ComplaintStatus | null
    newStatus?: EnumComplaintStatusFilter<"ComplaintStatusHistory"> | $Enums.ComplaintStatus
    changedById?: StringFilter<"ComplaintStatusHistory"> | string
    changedAt?: DateTimeFilter<"ComplaintStatusHistory"> | Date | string
    notes?: StringNullableFilter<"ComplaintStatusHistory"> | string | null
  }

  export type ComplaintCreateWithoutStatusHistoryInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    service?: ServiceCreateNestedOneWithoutComplaintsInput
    product?: ProductCreateNestedOneWithoutComplaintsInput
    provider?: ProviderCreateNestedOneWithoutComplaintsInput
    submittedBy: UserCreateNestedOneWithoutSubmittedComplaintsInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedComplaintsInput
    comments?: CommentCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentCreateNestedManyWithoutComplaintInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutComplaintsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutComplaintsInput
  }

  export type ComplaintUncheckedCreateWithoutStatusHistoryInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutComplaintInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutStatusHistoryInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutStatusHistoryInput, ComplaintUncheckedCreateWithoutStatusHistoryInput>
  }

  export type ComplaintUpsertWithoutStatusHistoryInput = {
    update: XOR<ComplaintUpdateWithoutStatusHistoryInput, ComplaintUncheckedUpdateWithoutStatusHistoryInput>
    create: XOR<ComplaintCreateWithoutStatusHistoryInput, ComplaintUncheckedCreateWithoutStatusHistoryInput>
    where?: ComplaintWhereInput
  }

  export type ComplaintUpdateToOneWithWhereWithoutStatusHistoryInput = {
    where?: ComplaintWhereInput
    data: XOR<ComplaintUpdateWithoutStatusHistoryInput, ComplaintUncheckedUpdateWithoutStatusHistoryInput>
  }

  export type ComplaintUpdateWithoutStatusHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    service?: ServiceUpdateOneWithoutComplaintsNestedInput
    product?: ProductUpdateOneWithoutComplaintsNestedInput
    provider?: ProviderUpdateOneWithoutComplaintsNestedInput
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedComplaintsNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedComplaintsNestedInput
    comments?: CommentUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUpdateManyWithoutComplaintNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutComplaintsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutComplaintsNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutStatusHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    service?: ServiceCreateNestedOneWithoutComplaintsInput
    product?: ProductCreateNestedOneWithoutComplaintsInput
    provider?: ProviderCreateNestedOneWithoutComplaintsInput
    submittedBy: UserCreateNestedOneWithoutSubmittedComplaintsInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedComplaintsInput
    attachments?: AttachmentCreateNestedManyWithoutComplaintInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutComplaintsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutComplaintsInput
    statusHistory?: ComplaintStatusHistoryCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    attachments?: AttachmentUncheckedCreateNestedManyWithoutComplaintInput
    statusHistory?: ComplaintStatusHistoryUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutCommentsInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutCommentsInput, ComplaintUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type ComplaintUpsertWithoutCommentsInput = {
    update: XOR<ComplaintUpdateWithoutCommentsInput, ComplaintUncheckedUpdateWithoutCommentsInput>
    create: XOR<ComplaintCreateWithoutCommentsInput, ComplaintUncheckedCreateWithoutCommentsInput>
    where?: ComplaintWhereInput
  }

  export type ComplaintUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ComplaintWhereInput
    data: XOR<ComplaintUpdateWithoutCommentsInput, ComplaintUncheckedUpdateWithoutCommentsInput>
  }

  export type ComplaintUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    service?: ServiceUpdateOneWithoutComplaintsNestedInput
    product?: ProductUpdateOneWithoutComplaintsNestedInput
    provider?: ProviderUpdateOneWithoutComplaintsNestedInput
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedComplaintsNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedComplaintsNestedInput
    attachments?: AttachmentUpdateManyWithoutComplaintNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutComplaintsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutComplaintsNestedInput
    statusHistory?: ComplaintStatusHistoryUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: AttachmentUncheckedUpdateManyWithoutComplaintNestedInput
    statusHistory?: ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ComplaintCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    service?: ServiceCreateNestedOneWithoutComplaintsInput
    product?: ProductCreateNestedOneWithoutComplaintsInput
    provider?: ProviderCreateNestedOneWithoutComplaintsInput
    submittedBy: UserCreateNestedOneWithoutSubmittedComplaintsInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedComplaintsInput
    comments?: CommentCreateNestedManyWithoutComplaintInput
    humanitarianOrg?: HumanitarianOrgCreateNestedOneWithoutComplaintsInput
    parkingService?: ParkingServiceCreateNestedOneWithoutComplaintsInput
    statusHistory?: ComplaintStatusHistoryCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutComplaintInput
    statusHistory?: ComplaintStatusHistoryUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutAttachmentsInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutAttachmentsInput, ComplaintUncheckedCreateWithoutAttachmentsInput>
  }

  export type ComplaintUpsertWithoutAttachmentsInput = {
    update: XOR<ComplaintUpdateWithoutAttachmentsInput, ComplaintUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<ComplaintCreateWithoutAttachmentsInput, ComplaintUncheckedCreateWithoutAttachmentsInput>
    where?: ComplaintWhereInput
  }

  export type ComplaintUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: ComplaintWhereInput
    data: XOR<ComplaintUpdateWithoutAttachmentsInput, ComplaintUncheckedUpdateWithoutAttachmentsInput>
  }

  export type ComplaintUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    service?: ServiceUpdateOneWithoutComplaintsNestedInput
    product?: ProductUpdateOneWithoutComplaintsNestedInput
    provider?: ProviderUpdateOneWithoutComplaintsNestedInput
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedComplaintsNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedComplaintsNestedInput
    comments?: CommentUpdateManyWithoutComplaintNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutComplaintsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutComplaintsNestedInput
    statusHistory?: ComplaintStatusHistoryUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutComplaintNestedInput
    statusHistory?: ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ProviderCreateWithoutLogEntriesInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    contracts?: ContractCreateNestedManyWithoutProviderInput
    vasServices?: VasServiceCreateNestedManyWithoutProviderInput
    bulkServices?: BulkServiceCreateNestedManyWithoutProviderInput
    complaints?: ComplaintCreateNestedManyWithoutProviderInput
    vasTransactions?: VasTransactionCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutLogEntriesInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutProviderInput
    vasServices?: VasServiceUncheckedCreateNestedManyWithoutProviderInput
    bulkServices?: BulkServiceUncheckedCreateNestedManyWithoutProviderInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutProviderInput
    vasTransactions?: VasTransactionUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutLogEntriesInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutLogEntriesInput, ProviderUncheckedCreateWithoutLogEntriesInput>
  }

  export type ParkingServiceCreateWithoutLogEntriesInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    createdBy?: UserCreateNestedOneWithoutCreatedParkingServicesInput
    transactions?: ParkingTransactionCreateNestedManyWithoutParkingServiceInput
    contracts?: ContractCreateNestedManyWithoutParkingServiceInput
    complaints?: ComplaintCreateNestedManyWithoutParkingServiceInput
  }

  export type ParkingServiceUncheckedCreateWithoutLogEntriesInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
    createdById?: string | null
    transactions?: ParkingTransactionUncheckedCreateNestedManyWithoutParkingServiceInput
    contracts?: ContractUncheckedCreateNestedManyWithoutParkingServiceInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutParkingServiceInput
  }

  export type ParkingServiceCreateOrConnectWithoutLogEntriesInput = {
    where: ParkingServiceWhereUniqueInput
    create: XOR<ParkingServiceCreateWithoutLogEntriesInput, ParkingServiceUncheckedCreateWithoutLogEntriesInput>
  }

  export type BulkServiceCreateWithoutLogEntriesInput = {
    id?: string
    provider_name: string
    agreement_name: string
    service_name: string
    step_name: string
    sender_name: string
    requests: number
    message_parts: number
    datumNaplate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutBulkServicesInput
    provider: ProviderCreateNestedOneWithoutBulkServicesInput
  }

  export type BulkServiceUncheckedCreateWithoutLogEntriesInput = {
    id?: string
    provider_name: string
    agreement_name: string
    service_name: string
    step_name: string
    sender_name: string
    requests: number
    message_parts: number
    datumNaplate: Date | string
    serviceId: string
    providerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BulkServiceCreateOrConnectWithoutLogEntriesInput = {
    where: BulkServiceWhereUniqueInput
    create: XOR<BulkServiceCreateWithoutLogEntriesInput, BulkServiceUncheckedCreateWithoutLogEntriesInput>
  }

  export type UserCreateWithoutLogEntriesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutLogEntriesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutLogEntriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLogEntriesInput, UserUncheckedCreateWithoutLogEntriesInput>
  }

  export type UserCreateWithoutUpdatedLogsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedLogsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedLogsInput, UserUncheckedCreateWithoutUpdatedLogsInput>
  }

  export type ProviderUpsertWithoutLogEntriesInput = {
    update: XOR<ProviderUpdateWithoutLogEntriesInput, ProviderUncheckedUpdateWithoutLogEntriesInput>
    create: XOR<ProviderCreateWithoutLogEntriesInput, ProviderUncheckedCreateWithoutLogEntriesInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutLogEntriesInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutLogEntriesInput, ProviderUncheckedUpdateWithoutLogEntriesInput>
  }

  export type ProviderUpdateWithoutLogEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUpdateManyWithoutProviderNestedInput
    vasServices?: VasServiceUpdateManyWithoutProviderNestedInput
    bulkServices?: BulkServiceUpdateManyWithoutProviderNestedInput
    complaints?: ComplaintUpdateManyWithoutProviderNestedInput
    vasTransactions?: VasTransactionUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutLogEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutProviderNestedInput
    vasServices?: VasServiceUncheckedUpdateManyWithoutProviderNestedInput
    bulkServices?: BulkServiceUncheckedUpdateManyWithoutProviderNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutProviderNestedInput
    vasTransactions?: VasTransactionUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ParkingServiceUpsertWithoutLogEntriesInput = {
    update: XOR<ParkingServiceUpdateWithoutLogEntriesInput, ParkingServiceUncheckedUpdateWithoutLogEntriesInput>
    create: XOR<ParkingServiceCreateWithoutLogEntriesInput, ParkingServiceUncheckedCreateWithoutLogEntriesInput>
    where?: ParkingServiceWhereInput
  }

  export type ParkingServiceUpdateToOneWithWhereWithoutLogEntriesInput = {
    where?: ParkingServiceWhereInput
    data: XOR<ParkingServiceUpdateWithoutLogEntriesInput, ParkingServiceUncheckedUpdateWithoutLogEntriesInput>
  }

  export type ParkingServiceUpdateWithoutLogEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneWithoutCreatedParkingServicesNestedInput
    transactions?: ParkingTransactionUpdateManyWithoutParkingServiceNestedInput
    contracts?: ContractUpdateManyWithoutParkingServiceNestedInput
    complaints?: ComplaintUpdateManyWithoutParkingServiceNestedInput
  }

  export type ParkingServiceUncheckedUpdateWithoutLogEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    transactions?: ParkingTransactionUncheckedUpdateManyWithoutParkingServiceNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutParkingServiceNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutParkingServiceNestedInput
  }

  export type BulkServiceUpsertWithoutLogEntriesInput = {
    update: XOR<BulkServiceUpdateWithoutLogEntriesInput, BulkServiceUncheckedUpdateWithoutLogEntriesInput>
    create: XOR<BulkServiceCreateWithoutLogEntriesInput, BulkServiceUncheckedCreateWithoutLogEntriesInput>
    where?: BulkServiceWhereInput
  }

  export type BulkServiceUpdateToOneWithWhereWithoutLogEntriesInput = {
    where?: BulkServiceWhereInput
    data: XOR<BulkServiceUpdateWithoutLogEntriesInput, BulkServiceUncheckedUpdateWithoutLogEntriesInput>
  }

  export type BulkServiceUpdateWithoutLogEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider_name?: StringFieldUpdateOperationsInput | string
    agreement_name?: StringFieldUpdateOperationsInput | string
    service_name?: StringFieldUpdateOperationsInput | string
    step_name?: StringFieldUpdateOperationsInput | string
    sender_name?: StringFieldUpdateOperationsInput | string
    requests?: IntFieldUpdateOperationsInput | number
    message_parts?: IntFieldUpdateOperationsInput | number
    datumNaplate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutBulkServicesNestedInput
    provider?: ProviderUpdateOneRequiredWithoutBulkServicesNestedInput
  }

  export type BulkServiceUncheckedUpdateWithoutLogEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider_name?: StringFieldUpdateOperationsInput | string
    agreement_name?: StringFieldUpdateOperationsInput | string
    service_name?: StringFieldUpdateOperationsInput | string
    step_name?: StringFieldUpdateOperationsInput | string
    sender_name?: StringFieldUpdateOperationsInput | string
    requests?: IntFieldUpdateOperationsInput | number
    message_parts?: IntFieldUpdateOperationsInput | number
    datumNaplate?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutLogEntriesInput = {
    update: XOR<UserUpdateWithoutLogEntriesInput, UserUncheckedUpdateWithoutLogEntriesInput>
    create: XOR<UserCreateWithoutLogEntriesInput, UserUncheckedCreateWithoutLogEntriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLogEntriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLogEntriesInput, UserUncheckedUpdateWithoutLogEntriesInput>
  }

  export type UserUpdateWithoutLogEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutLogEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedLogsInput = {
    update: XOR<UserUpdateWithoutUpdatedLogsInput, UserUncheckedUpdateWithoutUpdatedLogsInput>
    create: XOR<UserCreateWithoutUpdatedLogsInput, UserUncheckedCreateWithoutUpdatedLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedLogsInput, UserUncheckedUpdateWithoutUpdatedLogsInput>
  }

  export type UserUpdateWithoutUpdatedLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutActivitiesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutActivitiesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
  }

  export type UserUpsertWithoutActivitiesInput = {
    update: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedOneWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateOneWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserCreateWithoutNotificationPreferencesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationCreateNestedOneWithoutUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    activities?: ActivityLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutNotificationPreferencesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedCreateNestedOneWithoutUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedContracts?: ContractUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedAttachments?: ContractAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    acknowledgedReminders?: ContractReminderUncheckedCreateNestedManyWithoutAcknowledgedByInput
    submittedComplaints?: ComplaintUncheckedCreateNestedManyWithoutSubmittedByInput
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    activities?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    senderBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedBlacklists?: SenderBlacklistUncheckedCreateNestedManyWithoutModifiedByInput
    auditLogs?: BlacklistLogUncheckedCreateNestedManyWithoutUserInput
    createdRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutCreatedByInput
    modifiedRenewals?: ContractRenewalUncheckedCreateNestedManyWithoutLastModifiedByInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    createdParkingServices?: ParkingServiceUncheckedCreateNestedManyWithoutCreatedByInput
    logEntries?: LogEntryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedLogs?: LogEntryUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutNotificationPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationPreferencesInput, UserUncheckedCreateWithoutNotificationPreferencesInput>
  }

  export type UserUpsertWithoutNotificationPreferencesInput = {
    update: XOR<UserUpdateWithoutNotificationPreferencesInput, UserUncheckedUpdateWithoutNotificationPreferencesInput>
    create: XOR<UserCreateWithoutNotificationPreferencesInput, UserUncheckedCreateWithoutNotificationPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationPreferencesInput, UserUncheckedUpdateWithoutNotificationPreferencesInput>
  }

  export type UserUpdateWithoutNotificationPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twoFactorConfirmation?: TwoFactorConfirmationUncheckedUpdateOneWithoutUserNestedInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedContracts?: ContractUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedAttachments?: ContractAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    acknowledgedReminders?: ContractReminderUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    submittedComplaints?: ComplaintUncheckedUpdateManyWithoutSubmittedByNestedInput
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    activities?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedHumanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    senderBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedBlacklists?: SenderBlacklistUncheckedUpdateManyWithoutModifiedByNestedInput
    auditLogs?: BlacklistLogUncheckedUpdateManyWithoutUserNestedInput
    createdRenewals?: ContractRenewalUncheckedUpdateManyWithoutCreatedByNestedInput
    modifiedRenewals?: ContractRenewalUncheckedUpdateManyWithoutLastModifiedByNestedInput
    uploadedRenewalFiles?: ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    createdParkingServices?: ParkingServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedLogs?: LogEntryUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type HumanitarianOrgCreateWithoutReportFilesInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    mission?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pib?: string | null
    registrationNumber?: string | null
    bank?: string | null
    accountNumber?: string | null
    shortNumber?: string | null
    contracts?: ContractCreateNestedManyWithoutHumanitarianOrgInput
    renewals?: HumanitarianContractRenewalCreateNestedManyWithoutHumanitarianOrgInput
    complaints?: ComplaintCreateNestedManyWithoutHumanitarianOrgInput
  }

  export type HumanitarianOrgUncheckedCreateWithoutReportFilesInput = {
    id?: string
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    website?: string | null
    mission?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pib?: string | null
    registrationNumber?: string | null
    bank?: string | null
    accountNumber?: string | null
    shortNumber?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutHumanitarianOrgInput
    renewals?: HumanitarianContractRenewalUncheckedCreateNestedManyWithoutHumanitarianOrgInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutHumanitarianOrgInput
  }

  export type HumanitarianOrgCreateOrConnectWithoutReportFilesInput = {
    where: HumanitarianOrgWhereUniqueInput
    create: XOR<HumanitarianOrgCreateWithoutReportFilesInput, HumanitarianOrgUncheckedCreateWithoutReportFilesInput>
  }

  export type HumanitarianOrgUpsertWithoutReportFilesInput = {
    update: XOR<HumanitarianOrgUpdateWithoutReportFilesInput, HumanitarianOrgUncheckedUpdateWithoutReportFilesInput>
    create: XOR<HumanitarianOrgCreateWithoutReportFilesInput, HumanitarianOrgUncheckedCreateWithoutReportFilesInput>
    where?: HumanitarianOrgWhereInput
  }

  export type HumanitarianOrgUpdateToOneWithWhereWithoutReportFilesInput = {
    where?: HumanitarianOrgWhereInput
    data: XOR<HumanitarianOrgUpdateWithoutReportFilesInput, HumanitarianOrgUncheckedUpdateWithoutReportFilesInput>
  }

  export type HumanitarianOrgUpdateWithoutReportFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pib?: NullableStringFieldUpdateOperationsInput | string | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shortNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUpdateManyWithoutHumanitarianOrgNestedInput
    renewals?: HumanitarianContractRenewalUpdateManyWithoutHumanitarianOrgNestedInput
    complaints?: ComplaintUpdateManyWithoutHumanitarianOrgNestedInput
  }

  export type HumanitarianOrgUncheckedUpdateWithoutReportFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pib?: NullableStringFieldUpdateOperationsInput | string | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    shortNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutHumanitarianOrgNestedInput
    renewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutHumanitarianOrgNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutHumanitarianOrgNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type ContractCreateManyCreatedByInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastModifiedById?: string | null
  }

  export type ContractCreateManyLastModifiedByInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type ContractAttachmentCreateManyUploadedByInput = {
    id?: string
    contractId: string
    name: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
  }

  export type ContractReminderCreateManyAcknowledgedByInput = {
    id?: string
    contractId: string
    reminderDate: Date | string
    reminderType: string
    isAcknowledged?: boolean
    createdAt?: Date | string
  }

  export type ComplaintCreateManySubmittedByInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
  }

  export type ComplaintCreateManyAssignedAgentInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
  }

  export type CommentCreateManyUserInput = {
    id?: string
    text: string
    complaintId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isInternal?: boolean
  }

  export type ActivityLogCreateManyUserInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    details?: string | null
    severity?: $Enums.LogSeverity
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    entityType?: string | null
    entityId?: string | null
    createdAt?: Date | string
  }

  export type HumanitarianContractRenewalCreateManyCreatedByInput = {
    id?: string
    contractId: string
    humanitarianOrgId: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastModifiedById?: string | null
  }

  export type HumanitarianContractRenewalCreateManyLastModifiedByInput = {
    id?: string
    contractId: string
    humanitarianOrgId: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type SenderBlacklistCreateManyCreatedByInput = {
    id?: string
    senderName: string
    effectiveDate: Date | string
    description?: string | null
    isActive?: boolean
    matchCount?: number
    lastMatchDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    modifiedById?: string | null
  }

  export type SenderBlacklistCreateManyModifiedByInput = {
    id?: string
    senderName: string
    effectiveDate: Date | string
    description?: string | null
    isActive?: boolean
    matchCount?: number
    lastMatchDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type BlacklistLogCreateManyUserInput = {
    id?: string
    action: $Enums.LogBlackType
    entityId?: string | null
    entityType?: string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type ContractRenewalCreateManyCreatedByInput = {
    id?: string
    contractId: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastModifiedById?: string | null
  }

  export type ContractRenewalCreateManyLastModifiedByInput = {
    id?: string
    contractId: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type ContractRenewalAttachmentCreateManyUploadedByInput = {
    id?: string
    renewalId: string
    fileName: string
    fileSize: number
    fileType: string
    filePath: string
    uploadedAt?: Date | string
    description?: string | null
  }

  export type ParkingServiceCreateManyCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    additionalEmails?: ParkingServiceCreateadditionalEmailsInput | string[]
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    originalFileName?: string | null
    originalFilePath?: string | null
    fileSize?: number | null
    mimeType?: string | null
    lastImportDate?: Date | string | null
    importedBy?: string | null
    importStatus?: string | null
  }

  export type LogEntryCreateManyCreatedByInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    providerId?: string | null
    parkingServiceId?: string | null
    bulkServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
  }

  export type LogEntryCreateManyUpdatedByInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    providerId?: string | null
    parkingServiceId?: string | null
    bulkServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutContractsNestedInput
    operator?: OperatorUpdateOneWithoutContractsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutContractsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutContractsNestedInput
    services?: ServiceContractUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUpdateManyWithoutContractNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedContractsNestedInput
    reminders?: ContractReminderUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceContractUncheckedUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUncheckedUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    reminders?: ContractReminderUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractUpdateWithoutLastModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutContractsNestedInput
    operator?: OperatorUpdateOneWithoutContractsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutContractsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutContractsNestedInput
    services?: ServiceContractUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUpdateManyWithoutContractNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedContractsNestedInput
    reminders?: ContractReminderUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutLastModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    services?: ServiceContractUncheckedUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUncheckedUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    reminders?: ContractReminderUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutLastModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ContractAttachmentUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type ContractAttachmentUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractAttachmentUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractReminderUpdateWithoutAcknowledgedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderType?: StringFieldUpdateOperationsInput | string
    isAcknowledged?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutRemindersNestedInput
  }

  export type ContractReminderUncheckedUpdateWithoutAcknowledgedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderType?: StringFieldUpdateOperationsInput | string
    isAcknowledged?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractReminderUncheckedUpdateManyWithoutAcknowledgedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderType?: StringFieldUpdateOperationsInput | string
    isAcknowledged?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintUpdateWithoutSubmittedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    service?: ServiceUpdateOneWithoutComplaintsNestedInput
    product?: ProductUpdateOneWithoutComplaintsNestedInput
    provider?: ProviderUpdateOneWithoutComplaintsNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedComplaintsNestedInput
    comments?: CommentUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUpdateManyWithoutComplaintNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutComplaintsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutComplaintsNestedInput
    statusHistory?: ComplaintStatusHistoryUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutSubmittedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutComplaintNestedInput
    statusHistory?: ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutSubmittedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintUpdateWithoutAssignedAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    service?: ServiceUpdateOneWithoutComplaintsNestedInput
    product?: ProductUpdateOneWithoutComplaintsNestedInput
    provider?: ProviderUpdateOneWithoutComplaintsNestedInput
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedComplaintsNestedInput
    comments?: CommentUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUpdateManyWithoutComplaintNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutComplaintsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutComplaintsNestedInput
    statusHistory?: ComplaintStatusHistoryUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutAssignedAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutComplaintNestedInput
    statusHistory?: ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutAssignedAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    complaint?: ComplaintUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: EnumLogSeverityFieldUpdateOperationsInput | $Enums.LogSeverity
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: EnumLogSeverityFieldUpdateOperationsInput | $Enums.LogSeverity
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: EnumLogSeverityFieldUpdateOperationsInput | $Enums.LogSeverity
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HumanitarianContractRenewalUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutHumanitarianRenewalsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneRequiredWithoutRenewalsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedHumanitarianRenewalsNestedInput
  }

  export type HumanitarianContractRenewalUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    humanitarianOrgId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HumanitarianContractRenewalUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    humanitarianOrgId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HumanitarianContractRenewalUpdateWithoutLastModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutHumanitarianRenewalsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneRequiredWithoutRenewalsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedHumanitarianRenewalsNestedInput
  }

  export type HumanitarianContractRenewalUncheckedUpdateWithoutLastModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    humanitarianOrgId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type HumanitarianContractRenewalUncheckedUpdateManyWithoutLastModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    humanitarianOrgId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type SenderBlacklistUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    matchCount?: IntFieldUpdateOperationsInput | number
    lastMatchDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: BlacklistLogUpdateManyWithoutBlacklistEntryNestedInput
    modifiedBy?: UserUpdateOneWithoutModifiedBlacklistsNestedInput
  }

  export type SenderBlacklistUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    matchCount?: IntFieldUpdateOperationsInput | number
    lastMatchDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: BlacklistLogUncheckedUpdateManyWithoutBlacklistEntryNestedInput
  }

  export type SenderBlacklistUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    matchCount?: IntFieldUpdateOperationsInput | number
    lastMatchDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SenderBlacklistUpdateWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    matchCount?: IntFieldUpdateOperationsInput | number
    lastMatchDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutSenderBlacklistsNestedInput
    logs?: BlacklistLogUpdateManyWithoutBlacklistEntryNestedInput
  }

  export type SenderBlacklistUncheckedUpdateWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    matchCount?: IntFieldUpdateOperationsInput | number
    lastMatchDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    logs?: BlacklistLogUncheckedUpdateManyWithoutBlacklistEntryNestedInput
  }

  export type SenderBlacklistUncheckedUpdateManyWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    matchCount?: IntFieldUpdateOperationsInput | number
    lastMatchDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type BlacklistLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumLogBlackTypeFieldUpdateOperationsInput | $Enums.LogBlackType
    entityType?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklistEntry?: SenderBlacklistUpdateOneWithoutLogsNestedInput
  }

  export type BlacklistLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumLogBlackTypeFieldUpdateOperationsInput | $Enums.LogBlackType
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlacklistLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumLogBlackTypeFieldUpdateOperationsInput | $Enums.LogBlackType
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractRenewalUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutRenewalsNestedInput
    attachments?: ContractRenewalAttachmentUpdateManyWithoutRenewalNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedRenewalsNestedInput
  }

  export type ContractRenewalUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ContractRenewalAttachmentUncheckedUpdateManyWithoutRenewalNestedInput
  }

  export type ContractRenewalUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractRenewalUpdateWithoutLastModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutRenewalsNestedInput
    attachments?: ContractRenewalAttachmentUpdateManyWithoutRenewalNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedRenewalsNestedInput
  }

  export type ContractRenewalUncheckedUpdateWithoutLastModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    attachments?: ContractRenewalAttachmentUncheckedUpdateManyWithoutRenewalNestedInput
  }

  export type ContractRenewalUncheckedUpdateManyWithoutLastModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ContractRenewalAttachmentUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    fileType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    renewal?: ContractRenewalUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type ContractRenewalAttachmentUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    renewalId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    fileType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractRenewalAttachmentUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    renewalId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    fileType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ParkingServiceUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    transactions?: ParkingTransactionUpdateManyWithoutParkingServiceNestedInput
    contracts?: ContractUpdateManyWithoutParkingServiceNestedInput
    logEntries?: LogEntryUpdateManyWithoutParkingServiceNestedInput
    complaints?: ComplaintUpdateManyWithoutParkingServiceNestedInput
  }

  export type ParkingServiceUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
    transactions?: ParkingTransactionUncheckedUpdateManyWithoutParkingServiceNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutParkingServiceNestedInput
    logEntries?: LogEntryUncheckedUpdateManyWithoutParkingServiceNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutParkingServiceNestedInput
  }

  export type ParkingServiceUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    additionalEmails?: ParkingServiceUpdateadditionalEmailsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFileName?: NullableStringFieldUpdateOperationsInput | string | null
    originalFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    lastImportDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    importedBy?: NullableStringFieldUpdateOperationsInput | string | null
    importStatus?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogEntryUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutLogEntriesNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutLogEntriesNestedInput
    bulkService?: BulkServiceUpdateOneWithoutLogEntriesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedLogsNestedInput
  }

  export type LogEntryUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    bulkServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogEntryUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    bulkServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogEntryUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutLogEntriesNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutLogEntriesNestedInput
    bulkService?: BulkServiceUpdateOneWithoutLogEntriesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutLogEntriesNestedInput
  }

  export type LogEntryUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    bulkServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type LogEntryUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    bulkServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ContractCreateManyProviderInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type VasServiceCreateManyProviderInput = {
    id?: string
    proizvod: string
    mesec_pruzanja_usluge: Date | string
    jedinicna_cena: number
    broj_transakcija: number
    fakturisan_iznos: number
    fakturisan_korigovan_iznos: number
    naplacen_iznos: number
    kumulativ_naplacenih_iznosa: number
    nenaplacen_iznos: number
    nenaplacen_korigovan_iznos: number
    storniran_iznos: number
    otkazan_iznos: number
    kumulativ_otkazanih_iznosa: number
    iznos_za_prenos_sredstava: number
    serviceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BulkServiceCreateManyProviderInput = {
    id?: string
    provider_name: string
    agreement_name: string
    service_name: string
    step_name: string
    sender_name: string
    requests: number
    message_parts: number
    datumNaplate: Date | string
    serviceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComplaintCreateManyProviderInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
  }

  export type VasTransactionCreateManyProviderInput = {
    id?: string
    serviceId: string
    date: Date | string
    group: string
    serviceName: string
    serviceCode: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LogEntryCreateManyProviderInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    parkingServiceId?: string | null
    bulkServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById?: string | null
  }

  export type ContractUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    operator?: OperatorUpdateOneWithoutContractsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutContractsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutContractsNestedInput
    services?: ServiceContractUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUpdateManyWithoutContractNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedContractsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedContractsNestedInput
    reminders?: ContractReminderUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceContractUncheckedUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUncheckedUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    reminders?: ContractReminderUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VasServiceUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    proizvod?: StringFieldUpdateOperationsInput | string
    mesec_pruzanja_usluge?: DateTimeFieldUpdateOperationsInput | Date | string
    jedinicna_cena?: FloatFieldUpdateOperationsInput | number
    broj_transakcija?: IntFieldUpdateOperationsInput | number
    fakturisan_iznos?: FloatFieldUpdateOperationsInput | number
    fakturisan_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    naplacen_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_naplacenih_iznosa?: FloatFieldUpdateOperationsInput | number
    nenaplacen_iznos?: FloatFieldUpdateOperationsInput | number
    nenaplacen_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    storniran_iznos?: FloatFieldUpdateOperationsInput | number
    otkazan_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_otkazanih_iznosa?: FloatFieldUpdateOperationsInput | number
    iznos_za_prenos_sredstava?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutVasServicesNestedInput
  }

  export type VasServiceUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    proizvod?: StringFieldUpdateOperationsInput | string
    mesec_pruzanja_usluge?: DateTimeFieldUpdateOperationsInput | Date | string
    jedinicna_cena?: FloatFieldUpdateOperationsInput | number
    broj_transakcija?: IntFieldUpdateOperationsInput | number
    fakturisan_iznos?: FloatFieldUpdateOperationsInput | number
    fakturisan_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    naplacen_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_naplacenih_iznosa?: FloatFieldUpdateOperationsInput | number
    nenaplacen_iznos?: FloatFieldUpdateOperationsInput | number
    nenaplacen_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    storniran_iznos?: FloatFieldUpdateOperationsInput | number
    otkazan_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_otkazanih_iznosa?: FloatFieldUpdateOperationsInput | number
    iznos_za_prenos_sredstava?: FloatFieldUpdateOperationsInput | number
    serviceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VasServiceUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    proizvod?: StringFieldUpdateOperationsInput | string
    mesec_pruzanja_usluge?: DateTimeFieldUpdateOperationsInput | Date | string
    jedinicna_cena?: FloatFieldUpdateOperationsInput | number
    broj_transakcija?: IntFieldUpdateOperationsInput | number
    fakturisan_iznos?: FloatFieldUpdateOperationsInput | number
    fakturisan_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    naplacen_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_naplacenih_iznosa?: FloatFieldUpdateOperationsInput | number
    nenaplacen_iznos?: FloatFieldUpdateOperationsInput | number
    nenaplacen_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    storniran_iznos?: FloatFieldUpdateOperationsInput | number
    otkazan_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_otkazanih_iznosa?: FloatFieldUpdateOperationsInput | number
    iznos_za_prenos_sredstava?: FloatFieldUpdateOperationsInput | number
    serviceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BulkServiceUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider_name?: StringFieldUpdateOperationsInput | string
    agreement_name?: StringFieldUpdateOperationsInput | string
    service_name?: StringFieldUpdateOperationsInput | string
    step_name?: StringFieldUpdateOperationsInput | string
    sender_name?: StringFieldUpdateOperationsInput | string
    requests?: IntFieldUpdateOperationsInput | number
    message_parts?: IntFieldUpdateOperationsInput | number
    datumNaplate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutBulkServicesNestedInput
    logEntries?: LogEntryUpdateManyWithoutBulkServiceNestedInput
  }

  export type BulkServiceUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider_name?: StringFieldUpdateOperationsInput | string
    agreement_name?: StringFieldUpdateOperationsInput | string
    service_name?: StringFieldUpdateOperationsInput | string
    step_name?: StringFieldUpdateOperationsInput | string
    sender_name?: StringFieldUpdateOperationsInput | string
    requests?: IntFieldUpdateOperationsInput | number
    message_parts?: IntFieldUpdateOperationsInput | number
    datumNaplate?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logEntries?: LogEntryUncheckedUpdateManyWithoutBulkServiceNestedInput
  }

  export type BulkServiceUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider_name?: StringFieldUpdateOperationsInput | string
    agreement_name?: StringFieldUpdateOperationsInput | string
    service_name?: StringFieldUpdateOperationsInput | string
    step_name?: StringFieldUpdateOperationsInput | string
    sender_name?: StringFieldUpdateOperationsInput | string
    requests?: IntFieldUpdateOperationsInput | number
    message_parts?: IntFieldUpdateOperationsInput | number
    datumNaplate?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    service?: ServiceUpdateOneWithoutComplaintsNestedInput
    product?: ProductUpdateOneWithoutComplaintsNestedInput
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedComplaintsNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedComplaintsNestedInput
    comments?: CommentUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUpdateManyWithoutComplaintNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutComplaintsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutComplaintsNestedInput
    statusHistory?: ComplaintStatusHistoryUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutComplaintNestedInput
    statusHistory?: ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VasTransactionUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutVasTransactionsNestedInput
  }

  export type VasTransactionUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VasTransactionUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogEntryUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parkingService?: ParkingServiceUpdateOneWithoutLogEntriesNestedInput
    bulkService?: BulkServiceUpdateOneWithoutLogEntriesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutLogEntriesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedLogsNestedInput
  }

  export type LogEntryUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    bulkServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogEntryUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    bulkServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractCreateManyHumanitarianOrgInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type HumanitarianContractRenewalCreateManyHumanitarianOrgInput = {
    id?: string
    contractId: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type ComplaintCreateManyHumanitarianOrgInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    parkingServiceId?: string | null
  }

  export type ReportFileCreateManyOrganizationInput = {
    id?: string
    fileName: string
    filePath: string
    startDate: Date | string
    endDate: Date | string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
  }

  export type ContractUpdateWithoutHumanitarianOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutContractsNestedInput
    operator?: OperatorUpdateOneWithoutContractsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutContractsNestedInput
    services?: ServiceContractUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUpdateManyWithoutContractNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedContractsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedContractsNestedInput
    reminders?: ContractReminderUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutHumanitarianOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceContractUncheckedUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUncheckedUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    reminders?: ContractReminderUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutHumanitarianOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HumanitarianContractRenewalUpdateWithoutHumanitarianOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutHumanitarianRenewalsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedHumanitarianRenewalsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedHumanitarianRenewalsNestedInput
  }

  export type HumanitarianContractRenewalUncheckedUpdateWithoutHumanitarianOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HumanitarianContractRenewalUncheckedUpdateManyWithoutHumanitarianOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintUpdateWithoutHumanitarianOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    service?: ServiceUpdateOneWithoutComplaintsNestedInput
    product?: ProductUpdateOneWithoutComplaintsNestedInput
    provider?: ProviderUpdateOneWithoutComplaintsNestedInput
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedComplaintsNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedComplaintsNestedInput
    comments?: CommentUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUpdateManyWithoutComplaintNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutComplaintsNestedInput
    statusHistory?: ComplaintStatusHistoryUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutHumanitarianOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutComplaintNestedInput
    statusHistory?: ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutHumanitarianOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportFileUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportFileUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportFileUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParkingTransactionCreateManyParkingServiceInput = {
    id?: string
    date: Date | string
    group: string
    serviceName: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceId: string
  }

  export type ContractCreateManyParkingServiceInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    operatorId?: string | null
    providerId?: string | null
    humanitarianOrgId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type LogEntryCreateManyParkingServiceInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    providerId?: string | null
    bulkServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById?: string | null
  }

  export type ComplaintCreateManyParkingServiceInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
  }

  export type ParkingTransactionUpdateWithoutParkingServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type ParkingTransactionUncheckedUpdateWithoutParkingServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
  }

  export type ParkingTransactionUncheckedUpdateManyWithoutParkingServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
  }

  export type ContractUpdateWithoutParkingServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutContractsNestedInput
    operator?: OperatorUpdateOneWithoutContractsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutContractsNestedInput
    services?: ServiceContractUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUpdateManyWithoutContractNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedContractsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedContractsNestedInput
    reminders?: ContractReminderUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutParkingServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceContractUncheckedUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUncheckedUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    reminders?: ContractReminderUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutParkingServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogEntryUpdateWithoutParkingServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutLogEntriesNestedInput
    bulkService?: BulkServiceUpdateOneWithoutLogEntriesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutLogEntriesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedLogsNestedInput
  }

  export type LogEntryUncheckedUpdateWithoutParkingServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    bulkServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogEntryUncheckedUpdateManyWithoutParkingServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    bulkServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintUpdateWithoutParkingServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    service?: ServiceUpdateOneWithoutComplaintsNestedInput
    product?: ProductUpdateOneWithoutComplaintsNestedInput
    provider?: ProviderUpdateOneWithoutComplaintsNestedInput
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedComplaintsNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedComplaintsNestedInput
    comments?: CommentUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUpdateManyWithoutComplaintNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutComplaintsNestedInput
    statusHistory?: ComplaintStatusHistoryUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutParkingServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutComplaintNestedInput
    statusHistory?: ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutParkingServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceContractCreateManyContractInput = {
    id?: string
    serviceId: string
    specificTerms?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractAttachmentCreateManyContractInput = {
    id?: string
    name: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
    uploadedById: string
  }

  export type HumanitarianContractRenewalCreateManyContractInput = {
    id?: string
    humanitarianOrgId: string
    subStatus?: $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue: number
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    signatureReceived?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type ContractRenewalCreateManyContractInput = {
    id?: string
    subStatus?: $Enums.ContractRenewalSubStatus
    renewalStartDate?: Date | string
    proposedStartDate: Date | string
    proposedEndDate: Date | string
    proposedRevenue?: number | null
    documentsReceived?: boolean
    legalApproved?: boolean
    financialApproved?: boolean
    technicalApproved?: boolean
    managementApproved?: boolean
    signatureReceived?: boolean
    comments?: string | null
    internalNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type ContractReminderCreateManyContractInput = {
    id?: string
    reminderDate: Date | string
    reminderType: string
    isAcknowledged?: boolean
    acknowledgedById?: string | null
    createdAt?: Date | string
  }

  export type ServiceContractUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    specificTerms?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ServiceContractUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    specificTerms?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceContractUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    specificTerms?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractAttachmentUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedAttachmentsNestedInput
  }

  export type ContractAttachmentUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type ContractAttachmentUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type HumanitarianContractRenewalUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    humanitarianOrg?: HumanitarianOrgUpdateOneRequiredWithoutRenewalsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedHumanitarianRenewalsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedHumanitarianRenewalsNestedInput
  }

  export type HumanitarianContractRenewalUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    humanitarianOrgId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HumanitarianContractRenewalUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    humanitarianOrgId?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumHumanitarianRenewalSubStatusFieldUpdateOperationsInput | $Enums.HumanitarianRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: FloatFieldUpdateOperationsInput | number
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractRenewalUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: ContractRenewalAttachmentUpdateManyWithoutRenewalNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedRenewalsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedRenewalsNestedInput
  }

  export type ContractRenewalUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ContractRenewalAttachmentUncheckedUpdateManyWithoutRenewalNestedInput
  }

  export type ContractRenewalUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    subStatus?: EnumContractRenewalSubStatusFieldUpdateOperationsInput | $Enums.ContractRenewalSubStatus
    renewalStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    proposedRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    documentsReceived?: BoolFieldUpdateOperationsInput | boolean
    legalApproved?: BoolFieldUpdateOperationsInput | boolean
    financialApproved?: BoolFieldUpdateOperationsInput | boolean
    technicalApproved?: BoolFieldUpdateOperationsInput | boolean
    managementApproved?: BoolFieldUpdateOperationsInput | boolean
    signatureReceived?: BoolFieldUpdateOperationsInput | boolean
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    internalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractReminderUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderType?: StringFieldUpdateOperationsInput | string
    isAcknowledged?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acknowledgedBy?: UserUpdateOneWithoutAcknowledgedRemindersNestedInput
  }

  export type ContractReminderUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderType?: StringFieldUpdateOperationsInput | string
    isAcknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractReminderUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderType?: StringFieldUpdateOperationsInput | string
    isAcknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractRenewalAttachmentCreateManyRenewalInput = {
    id?: string
    fileName: string
    fileSize: number
    fileType: string
    filePath: string
    uploadedAt?: Date | string
    uploadedById: string
    description?: string | null
  }

  export type ContractRenewalAttachmentUpdateWithoutRenewalInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    fileType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedRenewalFilesNestedInput
  }

  export type ContractRenewalAttachmentUncheckedUpdateWithoutRenewalInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    fileType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractRenewalAttachmentUncheckedUpdateManyWithoutRenewalInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    fileType?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlacklistLogCreateManyBlacklistEntryInput = {
    id?: string
    action: $Enums.LogBlackType
    entityType?: string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
  }

  export type BlacklistLogUpdateWithoutBlacklistEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumLogBlackTypeFieldUpdateOperationsInput | $Enums.LogBlackType
    entityType?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type BlacklistLogUncheckedUpdateWithoutBlacklistEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumLogBlackTypeFieldUpdateOperationsInput | $Enums.LogBlackType
    entityType?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlacklistLogUncheckedUpdateManyWithoutBlacklistEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumLogBlackTypeFieldUpdateOperationsInput | $Enums.LogBlackType
    entityType?: StringFieldUpdateOperationsInput | string
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractCreateManyOperatorInput = {
    id?: string
    name: string
    contractNumber: string
    type: $Enums.ContractType
    status?: $Enums.ContractStatus
    startDate: Date | string
    endDate: Date | string
    revenuePercentage: number
    description?: string | null
    operatorRevenue?: number | null
    isRevenueSharing?: boolean
    providerId?: string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    lastModifiedById?: string | null
  }

  export type ContractUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutContractsNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutContractsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutContractsNestedInput
    services?: ServiceContractUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUpdateManyWithoutContractNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedContractsNestedInput
    lastModifiedBy?: UserUpdateOneWithoutModifiedContractsNestedInput
    reminders?: ContractReminderUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    services?: ServiceContractUncheckedUpdateManyWithoutContractNestedInput
    attachments?: ContractAttachmentUncheckedUpdateManyWithoutContractNestedInput
    humanitarianRenewals?: HumanitarianContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    renewals?: ContractRenewalUncheckedUpdateManyWithoutContractNestedInput
    reminders?: ContractReminderUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    revenuePercentage?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatorRevenue?: NullableFloatFieldUpdateOperationsInput | number | null
    isRevenueSharing?: BoolFieldUpdateOperationsInput | boolean
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    lastModifiedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceContractCreateManyServiceInput = {
    id?: string
    contractId: string
    specificTerms?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VasServiceCreateManyServiceInput = {
    id?: string
    proizvod: string
    mesec_pruzanja_usluge: Date | string
    jedinicna_cena: number
    broj_transakcija: number
    fakturisan_iznos: number
    fakturisan_korigovan_iznos: number
    naplacen_iznos: number
    kumulativ_naplacenih_iznosa: number
    nenaplacen_iznos: number
    nenaplacen_korigovan_iznos: number
    storniran_iznos: number
    otkazan_iznos: number
    kumulativ_otkazanih_iznosa: number
    iznos_za_prenos_sredstava: number
    provajderId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BulkServiceCreateManyServiceInput = {
    id?: string
    provider_name: string
    agreement_name: string
    service_name: string
    step_name: string
    sender_name: string
    requests: number
    message_parts: number
    datumNaplate: Date | string
    providerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComplaintCreateManyServiceInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    productId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
  }

  export type ParkingTransactionCreateManyServiceInput = {
    id?: string
    parkingServiceId: string
    date: Date | string
    group: string
    serviceName: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VasTransactionCreateManyServiceInput = {
    id?: string
    providerId: string
    date: Date | string
    group: string
    serviceName: string
    serviceCode: string
    price: number
    quantity: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceContractUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    specificTerms?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutServicesNestedInput
  }

  export type ServiceContractUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    specificTerms?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceContractUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    specificTerms?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VasServiceUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    proizvod?: StringFieldUpdateOperationsInput | string
    mesec_pruzanja_usluge?: DateTimeFieldUpdateOperationsInput | Date | string
    jedinicna_cena?: FloatFieldUpdateOperationsInput | number
    broj_transakcija?: IntFieldUpdateOperationsInput | number
    fakturisan_iznos?: FloatFieldUpdateOperationsInput | number
    fakturisan_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    naplacen_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_naplacenih_iznosa?: FloatFieldUpdateOperationsInput | number
    nenaplacen_iznos?: FloatFieldUpdateOperationsInput | number
    nenaplacen_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    storniran_iznos?: FloatFieldUpdateOperationsInput | number
    otkazan_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_otkazanih_iznosa?: FloatFieldUpdateOperationsInput | number
    iznos_za_prenos_sredstava?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneRequiredWithoutVasServicesNestedInput
  }

  export type VasServiceUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    proizvod?: StringFieldUpdateOperationsInput | string
    mesec_pruzanja_usluge?: DateTimeFieldUpdateOperationsInput | Date | string
    jedinicna_cena?: FloatFieldUpdateOperationsInput | number
    broj_transakcija?: IntFieldUpdateOperationsInput | number
    fakturisan_iznos?: FloatFieldUpdateOperationsInput | number
    fakturisan_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    naplacen_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_naplacenih_iznosa?: FloatFieldUpdateOperationsInput | number
    nenaplacen_iznos?: FloatFieldUpdateOperationsInput | number
    nenaplacen_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    storniran_iznos?: FloatFieldUpdateOperationsInput | number
    otkazan_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_otkazanih_iznosa?: FloatFieldUpdateOperationsInput | number
    iznos_za_prenos_sredstava?: FloatFieldUpdateOperationsInput | number
    provajderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VasServiceUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    proizvod?: StringFieldUpdateOperationsInput | string
    mesec_pruzanja_usluge?: DateTimeFieldUpdateOperationsInput | Date | string
    jedinicna_cena?: FloatFieldUpdateOperationsInput | number
    broj_transakcija?: IntFieldUpdateOperationsInput | number
    fakturisan_iznos?: FloatFieldUpdateOperationsInput | number
    fakturisan_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    naplacen_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_naplacenih_iznosa?: FloatFieldUpdateOperationsInput | number
    nenaplacen_iznos?: FloatFieldUpdateOperationsInput | number
    nenaplacen_korigovan_iznos?: FloatFieldUpdateOperationsInput | number
    storniran_iznos?: FloatFieldUpdateOperationsInput | number
    otkazan_iznos?: FloatFieldUpdateOperationsInput | number
    kumulativ_otkazanih_iznosa?: FloatFieldUpdateOperationsInput | number
    iznos_za_prenos_sredstava?: FloatFieldUpdateOperationsInput | number
    provajderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BulkServiceUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider_name?: StringFieldUpdateOperationsInput | string
    agreement_name?: StringFieldUpdateOperationsInput | string
    service_name?: StringFieldUpdateOperationsInput | string
    step_name?: StringFieldUpdateOperationsInput | string
    sender_name?: StringFieldUpdateOperationsInput | string
    requests?: IntFieldUpdateOperationsInput | number
    message_parts?: IntFieldUpdateOperationsInput | number
    datumNaplate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneRequiredWithoutBulkServicesNestedInput
    logEntries?: LogEntryUpdateManyWithoutBulkServiceNestedInput
  }

  export type BulkServiceUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider_name?: StringFieldUpdateOperationsInput | string
    agreement_name?: StringFieldUpdateOperationsInput | string
    service_name?: StringFieldUpdateOperationsInput | string
    step_name?: StringFieldUpdateOperationsInput | string
    sender_name?: StringFieldUpdateOperationsInput | string
    requests?: IntFieldUpdateOperationsInput | number
    message_parts?: IntFieldUpdateOperationsInput | number
    datumNaplate?: DateTimeFieldUpdateOperationsInput | Date | string
    providerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logEntries?: LogEntryUncheckedUpdateManyWithoutBulkServiceNestedInput
  }

  export type BulkServiceUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider_name?: StringFieldUpdateOperationsInput | string
    agreement_name?: StringFieldUpdateOperationsInput | string
    service_name?: StringFieldUpdateOperationsInput | string
    step_name?: StringFieldUpdateOperationsInput | string
    sender_name?: StringFieldUpdateOperationsInput | string
    requests?: IntFieldUpdateOperationsInput | number
    message_parts?: IntFieldUpdateOperationsInput | number
    datumNaplate?: DateTimeFieldUpdateOperationsInput | Date | string
    providerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    product?: ProductUpdateOneWithoutComplaintsNestedInput
    provider?: ProviderUpdateOneWithoutComplaintsNestedInput
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedComplaintsNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedComplaintsNestedInput
    comments?: CommentUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUpdateManyWithoutComplaintNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutComplaintsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutComplaintsNestedInput
    statusHistory?: ComplaintStatusHistoryUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutComplaintNestedInput
    statusHistory?: ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ParkingTransactionUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parkingService?: ParkingServiceUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type ParkingTransactionUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    parkingServiceId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParkingTransactionUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    parkingServiceId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VasTransactionUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneRequiredWithoutVasTransactionsNestedInput
  }

  export type VasTransactionUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VasTransactionUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogEntryCreateManyBulkServiceInput = {
    id?: string
    entityType: $Enums.LogEntityType
    entityId: string
    action: $Enums.LogActionType
    subject: string
    description?: string | null
    status?: $Enums.LogStatus
    sendEmail?: boolean
    providerId?: string | null
    parkingServiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById?: string | null
  }

  export type LogEntryUpdateWithoutBulkServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutLogEntriesNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutLogEntriesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutLogEntriesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedLogsNestedInput
  }

  export type LogEntryUncheckedUpdateWithoutBulkServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogEntryUncheckedUpdateManyWithoutBulkServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumLogEntityTypeFieldUpdateOperationsInput | $Enums.LogEntityType
    entityId?: StringFieldUpdateOperationsInput | string
    action?: EnumLogActionTypeFieldUpdateOperationsInput | $Enums.LogActionType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLogStatusFieldUpdateOperationsInput | $Enums.LogStatus
    sendEmail?: BoolFieldUpdateOperationsInput | boolean
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintCreateManyProductInput = {
    id?: string
    title: string
    description: string
    status?: $Enums.ComplaintStatus
    priority?: number
    financialImpact?: number | null
    serviceId?: string | null
    providerId?: string | null
    submittedById: string
    assignedAgentId?: string | null
    assignedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    closedAt?: Date | string | null
    humanitarianOrgId?: string | null
    parkingServiceId?: string | null
  }

  export type ComplaintUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    service?: ServiceUpdateOneWithoutComplaintsNestedInput
    provider?: ProviderUpdateOneWithoutComplaintsNestedInput
    submittedBy?: UserUpdateOneRequiredWithoutSubmittedComplaintsNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedComplaintsNestedInput
    comments?: CommentUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUpdateManyWithoutComplaintNestedInput
    humanitarianOrg?: HumanitarianOrgUpdateOneWithoutComplaintsNestedInput
    parkingService?: ParkingServiceUpdateOneWithoutComplaintsNestedInput
    statusHistory?: ComplaintStatusHistoryUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutComplaintNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutComplaintNestedInput
    statusHistory?: ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    priority?: IntFieldUpdateOperationsInput | number
    financialImpact?: NullableFloatFieldUpdateOperationsInput | number | null
    serviceId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedById?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    humanitarianOrgId?: NullableStringFieldUpdateOperationsInput | string | null
    parkingServiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateManyComplaintInput = {
    id?: string
    text: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isInternal?: boolean
  }

  export type AttachmentCreateManyComplaintInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    uploadedAt?: Date | string
  }

  export type ComplaintStatusHistoryCreateManyComplaintInput = {
    id?: string
    previousStatus?: $Enums.ComplaintStatus | null
    newStatus: $Enums.ComplaintStatus
    changedById: string
    changedAt?: Date | string
    notes?: string | null
  }

  export type CommentUpdateWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CommentUncheckedUpdateManyWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttachmentUpdateWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUncheckedUpdateWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUncheckedUpdateManyWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintStatusHistoryUpdateWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableEnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus | null
    newStatus?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintStatusHistoryUncheckedUpdateWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableEnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus | null
    newStatus?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintStatusHistoryUncheckedUpdateManyWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableEnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus | null
    newStatus?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    changedById?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}