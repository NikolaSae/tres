// This is your Prisma schema file,
// learn more about the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
}

// --- Authentication Models ---
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  MANAGER
  AGENT
  USER
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User model
model User {
  id                      String                 @id @default(cuid())
  name                    String?
  email                   String                 @unique
  emailVerified           DateTime?              @map("email_verified")
  password                String?
  role                    UserRole               @default(USER)
  isActive                Boolean                @default(true)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  image                   String?
  // Authentication Relations
  accounts                Account[]
  sessions                Session[]
  twoFactorConfirmation   TwoFactorConfirmation?

  // Relations
  createdContracts        Contract[]             @relation("ContractCreator")
  modifiedContracts       Contract[]             @relation("ContractModifier")
  uploadedAttachments     ContractAttachment[]
  acknowledgedReminders   ContractReminder[]
  submittedComplaints     Complaint[]            @relation("ComplaintSubmitter")
  assignedComplaints      Complaint[]            @relation("ComplaintAgent")
  comments                Comment[]
  activities              ActivityLog[]
  notifications           Notification[]
  notificationPreferences NotificationPreference?
  createdHumanitarianRenewals HumanitarianContractRenewal[] @relation("RenewalCreator")
  modifiedHumanitarianRenewals HumanitarianContractRenewal[] @relation("RenewalModifier")
  senderBlacklists        SenderBlacklist[]      @relation("BlacklistCreator")
  modifiedBlacklists      SenderBlacklist[] @relation("BlacklistModifier")
  auditLogs               BlacklistLog[] @relation("BlackLogCreator")
  createdRenewals         ContractRenewal[]           @relation("ContractRenewalCreator")
  modifiedRenewals        ContractRenewal[]           @relation("ContractRenewalModifier")
  uploadedRenewalFiles    ContractRenewalAttachment[] @relation("RenewalAttachmentUploader")
  createdParkingServices  ParkingService[]
  queryLogs               QueryLog[]
  // Added the inverse relation to LogEntry, using the relation name
  logEntries              LogEntry[]             @relation("LogCreator")
  updatedLogs             LogEntry[]             @relation("LogUpdater") // Relacija ka logovima koje je ažurirao
}

// Provider model
model Provider {
  id          String    @id @default(cuid())
  name        String    @unique
  contactName String?
  email       String?
  phone       String?
  address     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String?

  // Relations
  contracts   Contract[]
  vasServices VasService[]
  bulkServices BulkService[]
  complaints  Complaint[]
  vasTransactions VasTransaction[]

  // Added the inverse relation to LogEntry
  logEntries  LogEntry[]

  @@index([name])
}

model HumanitarianOrg {
  id          String    @id @default(cuid())
  name        String    @unique
  contactName String?
  email       String?
  phone       String?
  address     String?
  website     String?
  mission     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // New fields
  pib         String?   @db.VarChar(9)       // Tax ID (8-9 digits)
  registrationNumber String? @map("maticni_broj") @db.VarChar(13) // Registration number (8-13 chars)
  bank        String?   @db.VarChar(100)     // Bank name
  accountNumber String? @map("tekuci_racun") @db.VarChar(100) // Account number (18-100 chars)
  shortNumber String?   @map("kratki_broj")  @db.VarChar(10) // Short code (up to 10 chars)

  // Relations
  contracts   Contract[]
  renewals    HumanitarianContractRenewal[]
  complaints  Complaint[]
  reportFiles ReportFile[] // Add this line

  @@index([name])
  @@index([pib])
}

model VasTransaction {
  id               String   @id @default(cuid())
  providerId       String
  provider         Provider @relation(fields: [providerId], references: [id])
  serviceId        String
  service          Service  @relation(fields: [serviceId], references: [id])
  date             DateTime
  group            String   // "prepaid" ili "postpaid"
  serviceName      String   // Originalno ime servisa
  serviceCode      String   // Ekstraktovani 4-digit kod
  price            Float    // Jedinična cena
  quantity         Float    // Broj transakcija
  amount           Float    // Ukupan iznos
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@unique([providerId, date, serviceName, group])
  @@index([providerId, date])
  @@index([serviceId])
  @@index([serviceCode])
  @@index([group])
}

model ParkingTransaction {
  id               String         @id @default(cuid())
  parkingServiceId String
  date             DateTime
  group            String
  serviceName      String
  price            Float
  quantity         Float
  amount           Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  serviceId        String

  parkingService   ParkingService @relation(fields: [parkingServiceId], references: [id])
  service          Service        @relation(fields: [serviceId], references: [id])

  @@index([parkingServiceId, date, serviceName])
  @@unique([parkingServiceId, date, serviceName, group])
}

// Parking Service model
model ParkingService {
  id          String    @id @default(cuid())
  name        String
  description String?
  contactName String?
  email       String?
  phone       String?
  address     String?
  additionalEmails String[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // NOVI FIELDOVI ZA FILE TRACKING
  originalFileName  String?   // Originalno ime fajla
  originalFilePath  String?   // Putanja do originalnog fajla
  fileSize          Int?      // Veličina fajla u bajtovima
  mimeType          String?   // MIME tip fajla (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)
  lastImportDate    DateTime? // Kada je poslednji put importovan
  importedBy        String?   // Ko je importovao
  importStatus      String?   // "success", "failed", "in_progress"
  createdBy         User?     @relation(fields: [createdById], references: [id])
  createdById       String?
  transactions ParkingTransaction[]
  // Relations
  contracts   Contract[]
  lastReportSentAt  DateTime?
  totalReportsSent  Int       @default(0)
  reportSendHistory Json[]    // Array of send history objects
  // Added the inverse relation to LogEntry
  logEntries  LogEntry[]
  complaints  Complaint[]

  @@index([name])
}

// Contract models
enum ContractStatus {
  ACTIVE
  EXPIRED
  PENDING
  RENEWAL_IN_PROGRESS // Used when a renewal process has been started
  TERMINATED // Added TERMINATED status based on previous context
}

enum ContractType {
  PROVIDER
  HUMANITARIAN
  PARKING
  BULK
}

model Contract {
  id                String    @id @default(cuid())
  name              String
  contractNumber    String    @unique // Broj ugovora je jedinstven globalno
  type              ContractType
  status            ContractStatus @default(ACTIVE)
  startDate         DateTime
  endDate           DateTime
  revenuePercentage Float // Percentage of revenue for the platform
  description       String?   @db.Text

  operatorRevenue   Float? // Percentage for the operator
  isRevenueSharing  Boolean @default(true)
  operatorId        String?

  // Relations
  providerId        String?
  provider          Provider? @relation(fields: [providerId], references: [id])
  operator          Operator? @relation(fields: [operatorId], references: [id], onDelete: SetNull)

  // Uklonjeno @unique sa humanitarianOrgId (based on previous context)
  humanitarianOrgId String?
  humanitarianOrg   HumanitarianOrg? @relation(fields: [humanitarianOrgId], references: [id])

  // Uklonjeno @unique sa parkingServiceId (based on previous context)
  parkingServiceId  String?
  parkingService    ParkingService? @relation(fields: [parkingServiceId], references: [id])

  // Services linked to this contract
  services          ServiceContract[]

  // Attachments and documents
  attachments       ContractAttachment[]

  // Renewals for humanitarian contracts
  humanitarianRenewals HumanitarianContractRenewal[]
  renewals          ContractRenewal[]

  // Audit fields
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdById       String
  createdBy         User     @relation("ContractCreator", fields: [createdById], references: [id])
  lastModifiedById  String?
  lastModifiedBy    User?    @relation("ContractModifier", fields: [lastModifiedById], references: [id])

  // Reminders and notifications
  reminders         ContractReminder[]

  @@index([providerId])
  @@index([humanitarianOrgId])
  @@index([parkingServiceId])
  @@index([status])
  @@index([endDate]) // For efficient expiration checks
  @@index([operatorId])
}

enum ContractRenewalSubStatus {
  DOCUMENT_COLLECTION    // Prikupljanje potrebnih dokumenata
  LEGAL_REVIEW          // Pregled pravnog odeljenja
  FINANCIAL_APPROVAL    // Finansijsko odobrenje
  AWAITING_SIGNATURE    // Čekanje potpisa
  FINAL_PROCESSING      // Finalna obrada pre aktivacije
  TECHNICAL_REVIEW      // Tehnička provera (za provider/parking)
  MANAGEMENT_APPROVAL   // Odobrenje menadžmenta
}

// Generički model za renewal process svih tipova ugovora
model ContractRenewal {
  id                  String                     @id @default(cuid())
  contractId          String
  contract            Contract                   @relation(fields: [contractId], references: [id], onDelete: Cascade)

  // Renewal specifics
  subStatus           ContractRenewalSubStatus   @default(DOCUMENT_COLLECTION)
  renewalStartDate    DateTime                   @default(now())
  proposedStartDate   DateTime                   // Novi datum početka ugovora
  proposedEndDate     DateTime                   // Novi datum kraja ugovora
  proposedRevenue     Float?                     // Novi procenat prihoda (ako se menja)

  // Document and approval tracking
  documentsReceived   Boolean                    @default(false)
  legalApproved       Boolean                    @default(false)
  financialApproved   Boolean                    @default(false)
  technicalApproved   Boolean                    @default(false)
  managementApproved  Boolean                    @default(false)
  signatureReceived   Boolean                    @default(false)

  // Comments and notes
  comments            String?                    @db.Text
  internalNotes       String?                    @db.Text

  // File attachments
  attachments         ContractRenewalAttachment[]

  // Audit fields
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  createdById         String
  createdBy           User                       @relation("ContractRenewalCreator", fields: [createdById], references: [id])
  lastModifiedById    String?
  lastModifiedBy      User?                      @relation("ContractRenewalModifier", fields: [lastModifiedById], references: [id])

  @@index([contractId])
  @@index([subStatus])
  @@index([proposedStartDate])
  @@index([renewalStartDate])
}

// File attachments for renewal process
model ContractRenewalAttachment {
  id               String           @id @default(cuid())
  renewalId        String
  renewal          ContractRenewal  @relation(fields: [renewalId], references: [id], onDelete: Cascade)
  
  fileName         String
  fileSize         Int
  fileType         String          // pdf, docx, etc.
  filePath         String          // Path to stored file
  uploadedAt       DateTime        @default(now())
  uploadedById     String
  uploadedBy       User            @relation("RenewalAttachmentUploader", fields: [uploadedById], references: [id])
  
  description      String?         // Optional description of document
  
  @@index([renewalId])
  @@index([uploadedAt])
}


// Humanitarian Contract Renewal Sub-statuses
enum HumanitarianRenewalSubStatus {
  DOCUMENT_COLLECTION // Collecting required documents
  LEGAL_REVIEW // Legal department review
  FINANCIAL_APPROVAL // Financial approval
  AWAITING_SIGNATURE // Waiting for signatures
  FINAL_PROCESSING // Final processing before activation
}

model HumanitarianContractRenewal {
  id                  String                       @id @default(cuid())
  contractId          String
  contract            Contract                     @relation(fields: [contractId], references: [id])
  humanitarianOrgId   String
  humanitarianOrg     HumanitarianOrg              @relation(fields: [humanitarianOrgId], references: [id])

  // Renewal specifics
  subStatus           HumanitarianRenewalSubStatus @default(DOCUMENT_COLLECTION)
  renewalStartDate    DateTime                     @default(now())
  proposedStartDate   DateTime // New contract start date
  proposedEndDate     DateTime // New contract end date
  proposedRevenue     Float // New revenue percentage

  // Document tracking
  documentsReceived   Boolean                      @default(false)
  legalApproved       Boolean                      @default(false)
  financialApproved   Boolean                      @default(false)
  signatureReceived   Boolean                      @default(false)

  // Notes
  notes               String?                      @db.Text

  // Audit fields
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  createdById         String
  createdBy           User                         @relation("RenewalCreator", fields: [createdById], references: [id])
  lastModifiedById    String?
  lastModifiedBy      User?                        @relation("RenewalModifier", fields: [lastModifiedById], references: [id])

  @@index([contractId])
  @@index([humanitarianOrgId])
  @@index([subStatus])
  @@index([proposedStartDate])
}

model SenderBlacklist {
  id               String   @id @default(cuid())
  senderName       String   // Sender name to blacklist
  effectiveDate    DateTime // Date when blacklist becomes effective
  description      String?  @db.Text // Optional description/reason for blacklisting
  isActive         Boolean  @default(true) // Whether this blacklist entry is active
  
  // Detection tracking
  matchCount       Int      @default(0) // Number of times this sender was detected
  lastMatchDate    DateTime? // Last time a match was found
  
  // Audit fields
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdById      String
  createdBy        User     @relation("BlacklistCreator", fields: [createdById], references: [id])
  logs             BlacklistLog[] @relation("BlacklistLogs")
  modifiedById     String? // Add modifiedBy relation
  modifiedBy       User?    @relation("BlacklistModifier", fields: [modifiedById], references: [id])

  @@index([senderName])
  @@index([effectiveDate])
  @@index([isActive])
}
model BlacklistLog {
  id               String   @id @default(cuid())
  action           LogBlackType  // Enum for actions
  entityId         String?  // ID of the modified entity - NULLABLE
  entityType       String   @default("SenderBlacklist")
  oldData          Json?    // Previous state
  newData          Json?    // New state after change
  userId           String
  user             User     @relation("BlackLogCreator", fields: [userId], references: [id])
  blacklistEntry   SenderBlacklist? @relation("BlacklistLogs", fields: [entityId], references: [id], onDelete: SetNull)
  timestamp        DateTime @default(now())
  
  @@index([action])
  @@index([entityId])
  @@index([timestamp])
  @@index([userId])
}

enum LogBlackType {
  CREATE
  UPDATE
  DELETE
  ACTIVATE
  DEACTIVATE
}

model Operator {
  id           String   @id @default(cuid())
  name         String
  code         String   @unique
  description  String?  @db.Text
  logoUrl      String?
  website      String?
  contactEmail String?
  contactPhone String?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  contracts    Contract[]
}

model ServiceContract {
  id            String  @id @default(cuid())
  contractId    String
  contract      Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  serviceId     String // Uklonjeno @unique (based on previous context)
  service       Service  @relation(fields: [serviceId], references: [id])

  // Service-specific terms
  specificTerms String? @db.Text

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([contractId, serviceId]) // Keep the composite unique constraint
  @@index([contractId])
  @@index([serviceId])
}

model ContractAttachment {
  id           String   @id @default(cuid())
  contractId   String
  contract     Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  name         String
  fileUrl      String
  fileType     String
  uploadedAt   DateTime @default(now())
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])

  @@index([contractId])
}

model ContractReminder {
  id               String   @id @default(cuid())
  contractId       String
  contract         Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  reminderDate     DateTime
  reminderType     String   // "expiration", "renewal", "review"
  isAcknowledged   Boolean  @default(false)
  acknowledgedById String?
  acknowledgedBy   User?    @relation(fields: [acknowledgedById], references: [id])

  createdAt        DateTime @default(now())

  @@index([contractId])
  @@index([reminderDate])
  @@index([isAcknowledged])
}

// Service models
enum ServiceType {
  VAS
  BULK
  HUMANITARIAN
  PARKING
}

enum BillingType {
  PREPAID
  POSTPAID
}

model Service {
  id            String          @id @default(cuid())
  name          String
  type          ServiceType
  description   String?         @db.Text
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  billingType   BillingType?
  // Relations
  contracts     ServiceContract[]
  vasServices   VasService[]
  bulkServices  BulkService[]
  complaints    Complaint[]
  transactions  ParkingTransaction[]
  vasTransactions VasTransaction[]
  @@index([type])
  @@index([name])
}

// VAS Service model
model VasService {
  id                        String   @id @default(cuid())
  proizvod                  String // Proizvod iz CSV
  mesec_pruzanja_usluge     DateTime // Mesec_pruzanja_usluge iz CSV
  jedinicna_cena            Float // Jedinicna_cena iz CSV
  broj_transakcija          Int // Broj_transakcija iz CSV
  fakturisan_iznos          Float // Fakturisan_iznos iz CSV
  fakturisan_korigovan_iznos Float // Fakturisan_korigovan_iznos iz CSV
  naplacen_iznos            Float // Naplacen_iznos iz CSV
  kumulativ_naplacenih_iznosa Float // Kumulativ_naplacenih_iznosa iz CSV
  nenaplacen_iznos          Float // Nenaplacen_iznos iz CSV
  nenaplacen_korigovan_iznos Float // Nenaplacen_korigovan_iznos iz CSV
  storniran_iznos           Float // Storniran_iznos_u_tekucem_mesecu_iz_perioda_pracenja iz CSV
  otkazan_iznos             Float // Otkazan_iznos iz CSV
  kumulativ_otkazanih_iznosa Float // Kumulativ_otkazanih_iznosa iz CSV
  iznos_za_prenos_sredstava Float // Iznos_za_prenos_sredstava iz CSV

  // Relations
  serviceId                 String
  service                   Service  @relation(fields: [serviceId], references: [id])
  provajderId               String
  provider                  Provider @relation(fields: [provajderId], references: [id])

  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@unique([proizvod, mesec_pruzanja_usluge, provajderId])
  @@index([serviceId])
  @@index([provajderId])
  @@index([mesec_pruzanja_usluge])
}

// Bulk Service model
model BulkService {
  id            String   @id @default(cuid())
  provider_name String // Provider Name iz CSV
  agreement_name String // Agreement Name iz CSV
  service_name  String // Service Name iz CSV
  step_name     String // Step Name iz CSV
  sender_name   String // Sender Name iz CSV
  requests      Int // Requests iz CSV
  message_parts Int // Message parts iz CSV
  datumNaplate  DateTime

  // Relations
  serviceId     String
  service       Service  @relation(fields: [serviceId], references: [id])
  providerId    String
  provider      Provider @relation(fields: [providerId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

   // Added the inverse relation to LogEntry
  logEntries    LogEntry[]

  @@unique([provider_name, agreement_name, service_name, sender_name, datumNaplate])
  @@index([serviceId])
  @@index([providerId])
}

// Product model
model Product {
  id          String    @id @default(cuid())
  name        String
  code        String    @unique
  description String?   @db.Text
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  complaints  Complaint[]

  @@index([name])
  @@index([code])
}

// Complaint models
enum ComplaintStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
  REJECTED
}

model Complaint {
  id                String                 @id @default(cuid())
  title             String
  description       String                 @db.Text
  status            ComplaintStatus        @default(NEW)
  priority          Int                    @default(3) // 1 (highest) to 5 (lowest)
  financialImpact   Float?

  // Relations
  serviceId         String?
  service           Service?               @relation(fields: [serviceId], references: [id])
  productId         String?
  product           Product?               @relation(fields: [productId], references: [id])
  providerId        String?
  provider          Provider?              @relation(fields: [providerId], references: [id])

  // Submission info
  submittedById     String
  submittedBy       User                   @relation("ComplaintSubmitter", fields: [submittedById], references: [id])

  // Assignment info
  assignedAgentId   String?
  assignedAgent     User?                  @relation("ComplaintAgent", fields: [assignedAgentId], references: [id])
  assignedAt        DateTime?

  // Timestamps
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  resolvedAt        DateTime?
  closedAt          DateTime?

  // Related data
  comments          Comment[]
  attachments       Attachment[]
  humanitarianOrgId String?
  humanitarianOrg   HumanitarianOrg?       @relation(fields: [humanitarianOrgId], references: [id])
  parkingServiceId  String?
  parkingService    ParkingService?       @relation(fields: [parkingServiceId], references: [id])
  // Activity tracking
  statusHistory     ComplaintStatusHistory[]

  @@index([status])
  @@index([serviceId])
  @@index([productId])
  @@index([providerId])
  @@index([submittedById])
  @@index([assignedAgentId])
  @@index([createdAt])
  @@index([priority])
  @@index([humanitarianOrgId])
}

model ComplaintStatusHistory {
  id             String          @id @default(cuid())
  complaintId    String
  complaint      Complaint       @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  previousStatus ComplaintStatus?
  newStatus      ComplaintStatus
  changedById    String
  changedAt      DateTime        @default(now())
  notes          String?         @db.Text

  @@index([complaintId])
  @@index([changedAt])
}

model Comment {
  id          String   @id @default(cuid())
  text        String   @db.Text
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isInternal  Boolean  @default(false) // True for agent/admin-only comments

  @@index([complaintId])
  @@index([userId])
  @@index([isInternal])
}

model Attachment {
  id          String   @id @default(cuid())
  fileName    String
  fileUrl     String
  fileType    String
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  uploadedAt  DateTime @default(now())

  @@index([complaintId])
}

// --- Log Entry Models (Corrected and Consolidated) ---
enum LogActionType {
  ACTIVATION // Za beleženje aktivacije
  DEACTIVATION // Za beleženje deaktivacije
  STATUS_CHANGE // Opštiji tip za promene statusa (ako ne koristite ACTIVATION/DEACTIVATION direktno)
  NOTE // Za opšte beleške koje nisu vezane za status
  // Dodajte druge tipove akcija po potrebi
}

enum LogStatus {
  IN_PROGRESS // Log je kreiran, ali akcija još nije završena
  FINISHED // Akcija vezana za log je završena
  // Dodajte druge statuse po potreba (npr. FAILED, CANCELLED)
}

enum LogEntityType {
  PROVIDER
  PARKING_SERVICE
  BULK_SERVICE
  // Dodajte druge tipove entiteta po potreba
}

// Manual Log Entry model
model LogEntry {
  id                String          @id @default(cuid())
  entityType        LogEntityType // Tip entiteta na koji se log odnosi
  entityId          String // ID entiteta (Provider, ParkingService, BulkService, itd.) - čuva se ovde radi lakšeg indeksiranja/pretrage

  action            LogActionType // Tip akcije (Aktivacija, Deaktivacija, Beleška, itd.)
  subject           String // Obavezan naslov log zapisa
  description       String?         @db.Text // Opcioni detaljniji opis

  status            LogStatus       @default(IN_PROGRESS) // Status log zapisa (U radu, Završen, itd.)
  sendEmail         Boolean         @default(false) // Da li je trebalo poslati email

  // Opcioni strani ključevi za različite tipove entiteta
  // Samo jedan od ovih treba da bude popunjen za dati log zapis
  providerId        String?
  provider          Provider?       @relation(fields: [providerId], references: [id])

  parkingServiceId  String?
  parkingService    ParkingService? @relation(fields: [parkingServiceId], references: [id])

  bulkServiceId     String?
  bulkService       BulkService?    @relation(fields: [bulkServiceId], references: [id])

  // Audit polja
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  createdById       String // ID korisnika koji je kreirao log
  createdBy         User            @relation("LogCreator", fields: [createdById], references: [id]) // Use the relation name
  updatedById       String?
  updatedBy         User?           @relation("LogUpdater", fields: [updatedById], references: [id])

  // Indeksi za bržu pretragu
  @@index([entityType, entityId]) // Indeks za pretragu logova po tipu i ID-u entiteta
  @@index([providerId])
  @@index([parkingServiceId])
  @@index([bulkServiceId])
  @@index([createdById])
  @@index([createdAt])
}


// Analytics and Security models
enum LogSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

model ActivityLog {
  id          String      @id @default(cuid())
  action      String
  entityType  String      // "contract", "service", "complaint", etc.
  entityId    String?
  details     String?     @db.Text
  severity    LogSeverity @default(INFO)
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())

  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([userId])
  @@index([createdAt])
  @@index([severity])
}

// Notification models
enum NotificationType {
  CONTRACT_EXPIRING
  CONTRACT_RENEWAL_STATUS_CHANGE
  COMPLAINT_ASSIGNED
  COMPLAINT_UPDATED
  REMINDER
  SYSTEM
}

model Notification {
  id          String         @id @default(cuid())
  title       String
  message     String         @db.Text
  type        NotificationType
  isRead      Boolean        @default(false)
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  entityType  String?        // "contract", "complaint", "renewal", etc.
  entityId    String?
  createdAt   DateTime       @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
}

// Report models
enum ReportFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  ONCE
}

model ScheduledReport {
  id            String          @id @default(cuid())
  name          String
  description   String?         @db.Text
  reportType    String          // "financial", "complaints", "contracts", etc.
  frequency     ReportFrequency
  lastRun       DateTime?
  nextRun       DateTime?
  parameters    Json?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([reportType])
  @@index([frequency])
  @@index([nextRun])
  @@index([isActive])
}

model GeneratedReport {
  id                String   @id @default(cuid())
  name              String
  reportType        String
  fileUrl           String
  generatedAt       DateTime @default(now())
  scheduledReportId String?

  @@index([reportType])
  @@index([generatedAt])
  @@index([scheduledReportId])
}

model NotificationPreference {
  id          String   @id @default(cuid())
  userId      String   @unique // Svaki korisnik ima samo jedan set podešavanja
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Koristimo JSON polje za čuvanje ugnježdenih preferenci
  // Struktura unutar ovog JSON polja treba da odgovara NotificationPreferences interfejsu (bez userId)
  // npr. { contractExpiring: { inApp: true, email: false }, ... }
  preferences Json

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId]) // Indexiranje po userId za brže pretrage
}

model ReportFile {
  id             String    @id @default(cuid())
  fileName       String
  filePath       String
  organizationId String
  startDate      DateTime
  endDate        DateTime
  fileSize       Int
  mimeType       String
  uploadedAt     DateTime  @default(now())
  
  // Relations
  organization   HumanitarianOrg @relation(fields: [organizationId], references: [id])
  category       String
  reportType      String
  isMonthlyReport Boolean?
  @@index([organizationId])
  @@index([startDate])
}

model QueryLog {
  id        String   @id @default(cuid())
  userId    String
  toolName  String
  params    Json     @default("{}")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([toolName])
  @@map("query_logs")
}