// Path: /components/contracts/RevenueBreakdown.tsx
"use client";

import { DollarSign, TrendingUp, PieChart } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { ContractType } from "@prisma/client";

interface RevenueData {
  totalRevenue: number;
  platformPercentage: number;
  partnerPercentage: number;
  serviceBreakdown: {
    id: string;
    name: string;
    revenueAmount: number;
    percentage: number;
  }[];
}

interface RevenueBreakdownProps {
  contractId: string;
  contractType: ContractType;
  revenuePercentage: number;
  isRevenueSharing: boolean; // Dodato na osnovu page.tsx
  operatorRevenue: number | null; // Dodato na osnovu page.tsx
  revenueData?: RevenueData;
}

export function RevenueBreakdown({
  contractId,
  contractType,
  revenuePercentage,
  isRevenueSharing,
  operatorRevenue,
  revenueData,
}: RevenueBreakdownProps) {
  const formatCurrency = (amount: number) => {
    if (typeof amount !== 'number' || isNaN(amount)) {
      return formatCurrency(0);
    }
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "EUR",
      minimumFractionDigits: 2,
    }).format(amount);
  };

  const getRandomColor = (index: number) => {
    const colors = [
      "bg-blue-500",
      "bg-green-500",
      "bg-purple-500",
      "bg-yellow-500",
      "bg-pink-500",
      "bg-indigo-500",
      "bg-teal-500",
      "bg-orange-500",
    ];
    return colors[index % colors.length];
  };

  const getContractTypeLabel = (type: ContractType): string => {
    switch (type) {
      case "PROVIDER":
        return "Provider";
      case "HUMANITARIAN":
        return "Humanitarian";
      case "PARKING":
        return "Parking";
      default:
        console.warn(`Unknown ContractType: ${type}`);
        return "Unknown Type";
    }
  };

  const dataToDisplay = revenueData || {
    totalRevenue: 0,
    platformPercentage: 0,
    partnerPercentage: 0,
    serviceBreakdown: [],
  };

  // Calculate partner revenue percentage based on revenue sharing logic
  const partnerRevenuePercentage = isRevenueSharing && typeof operatorRevenue === 'number'
    ? 100 - revenuePercentage - operatorRevenue
    : 100 - revenuePercentage;

  return (
    <div className="space-y-6">
      <h3 className="text-lg font-medium">Revenue Breakdown</h3>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatCurrency(dataToDisplay.totalRevenue)}</div>
            <p className="text-xs text-muted-foreground mt-1">
              Total revenue generated by this contract
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">Platform Revenue</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatCurrency(dataToDisplay.totalRevenue * (revenuePercentage / 100))}</div>
            <p className="text-xs text-muted-foreground mt-1">
              {revenuePercentage}% of total revenue
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">Partner Revenue</CardTitle> {/* Mo탑da promeniti labelu u "Partner Revenue" */}
            <PieChart className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
             {/* Koristimo izra훾unatu partnerRevenuePercentage */}
            <div className="text-2xl font-bold">{formatCurrency(dataToDisplay.totalRevenue * (partnerRevenuePercentage / 100))}</div>
            <p className="text-xs text-muted-foreground mt-1">
              {partnerRevenuePercentage.toFixed(1)}% of total revenue ({getContractTypeLabel(contractType).toLowerCase()} share)
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Prikaz Operator Revenue kartice samo ako postoji revenue sharing */}
      {isRevenueSharing && typeof operatorRevenue === 'number' && (
           <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> {/* Mo탑da prilagoditi grid layout */}
               <Card className="md:col-span-1"> {/* Prilagoditi span ako je potrebno */}
                   <CardHeader className="flex flex-row items-center justify-between pb-2">
                       <CardTitle className="text-sm font-medium">Operator Revenue</CardTitle>
                       <DollarSign className="h-4 w-4 text-muted-foreground" /> {/* Mo탑da druga ikonica */}
                   </CardHeader>
                   <CardContent>
                       <div className="text-2xl font-bold">{formatCurrency(dataToDisplay.totalRevenue * (operatorRevenue / 100))}</div>
                       <p className="text-xs text-muted-foreground mt-1">
                           {operatorRevenue.toFixed(1)}% of total revenue (Operator share)
                       </p>
                   </CardContent>
               </Card>
           </div>
       )}


      <Card>
        <CardHeader>
          <CardTitle>Service Revenue Breakdown</CardTitle>
        </CardHeader>
        <CardContent>
          {dataToDisplay.serviceBreakdown.length === 0 ? (
            <div className="text-center py-6 text-muted-foreground">
              No service revenue data available
            </div>
          ) : (
            <div className="space-y-4">
              {dataToDisplay.serviceBreakdown.map((service, index) => (
                <div key={service.id} className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <div className={`w-3 h-3 rounded-full ${getRandomColor(index)}`}></div>
                      <span className="font-medium">{service.name}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-sm text-muted-foreground">
                        {service.percentage.toFixed(1)}%
                      </span>
                      <span className="font-medium">
                        {formatCurrency(service.revenueAmount)}
                      </span>
                    </div>
                  </div>
                  <Progress value={service.percentage} className="h-2" />
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      <div className="text-sm text-muted-foreground">
        <p>
          This contract has a {revenuePercentage}% revenue share agreement with the platform.
          The remaining {partnerRevenuePercentage.toFixed(1)}% goes to the {getContractTypeLabel(contractType).toLowerCase()} partner.
          {isRevenueSharing && typeof operatorRevenue === 'number' && ` An additional ${operatorRevenue.toFixed(1)}% is allocated to the operator.`}
        </p>
      </div>
    </div>
  );
}
